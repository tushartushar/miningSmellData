Implementation smell,Namespace,Class,File,Method,Description
Long Method,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,The method has 155 lines of code.
Long Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ReadBsonType,The method has 207 lines of code.
Long Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseJavaScriptDateTimeString,The method has 147 lines of code.
Long Method,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetNumberToken,The method has 266 lines of code.
Long Method,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,The method has 138 lines of code.
Long Method,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The method has 135 lines of code.
Long Method,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,The method has 183 lines of code.
Complex Method,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,BsonBinaryData,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,CompareTo,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToBsonValue,Cyclomatic complexity of the method is 18
Complex Method,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,Cyclomatic complexity of the method is 33
Complex Method,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,TryMapToBsonValue,Cyclomatic complexity of the method is 16
Complex Method,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,Convert,Cyclomatic complexity of the method is 82
Complex Method,MongoDB.Bson,BsonValue,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonValue.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson,BsonValue,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonValue.cs,ToType,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToDecimal,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryParse,Cyclomatic complexity of the method is 12
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ClampOrRound,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToType,Cyclomatic complexity of the method is 16
Complex Method,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryTruncateToUInt64,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,TryParse,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadBsonType,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadEndArray,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadEndDocument,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,Cyclomatic complexity of the method is 23
Complex Method,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteBinaryData,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.IO,BsonDocumentReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReader.cs,ReadBsonType,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.IO,BsonDocumentReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReader.cs,ReadEndArray,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.IO,BsonDocumentReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReader.cs,ReadEndDocument,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.IO,BsonStreamExtensions,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamExtensions.cs,ReadBytes,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.IO,BsonTrieNode<TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonTrie.cs,AddChild,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.IO,InputBufferChunkSource,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\InputBufferChunkSource.cs,InputBufferChunkSource,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ReadBsonType,Cyclomatic complexity of the method is 44
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ReadEndArray,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ReadEndDocument,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,SkipValue,Cyclomatic complexity of the method is 25
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseBinDataExtendedJsonCanonical,Cyclomatic complexity of the method is 12
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseDateTimeConstructor,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseExtendedJson,Cyclomatic complexity of the method is 16
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseJavaScriptDateTimeString,Cyclomatic complexity of the method is 61
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseNew,Cyclomatic complexity of the method is 13
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseRegularExpressionExtendedJsonCanonical,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseTimestampExtendedJsonNewRepresentation,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetNextToken,Cyclomatic complexity of the method is 15
Complex Method,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetNumberToken,Cyclomatic complexity of the method is 43
Complex Method,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetRegularExpressionToken,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetStringToken,Cyclomatic complexity of the method is 18
Complex Method,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,EscapedString,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.IO,OutputBufferChunkSource,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\OutputBufferChunkSource.cs,OutputBufferChunkSource,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,Cyclomatic complexity of the method is 20
Complex Method,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,Freeze,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,GetDefaultValue,Cyclomatic complexity of the method is 18
Complex Method,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,LookupActualType,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,LookupDiscriminatorConvention,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetSerializer,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,Cyclomatic complexity of the method is 21
Complex Method,MongoDB.Bson.Serialization,ExpressionVisitor,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\ExpressionVisitor.cs,Visit,Cyclomatic complexity of the method is 16
Complex Method,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,Cyclomatic complexity of the method is 24
Complex Method,MongoDB.Bson.Serialization,TypeMappingSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeMappingSerializationProvider.cs,RegisterMapping,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization,TypeNameDiscriminator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeNameDiscriminator.cs,GetActualType,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.Serialization,TypeNameDiscriminator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeNameDiscriminator.cs,GetDiscriminator,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.Serialization.Conventions,ImmutableTypeClassMapConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ImmutableTypeClassMapConvention.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.Serialization.Conventions,ObjectDiscriminatorConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ObjectDiscriminatorConvention.cs,GetActualType,Cyclomatic complexity of the method is 15
Complex Method,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToDouble,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToSingle,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToSingle,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.Serialization.Serializers,BooleanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BooleanSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,BsonValueSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonValueSerializer.cs,DeserializeValue,Cyclomatic complexity of the method is 21
Complex Method,MongoDB.Bson.Serialization.Serializers,BsonValueSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonValueSerializer.cs,SerializeValue,Cyclomatic complexity of the method is 21
Complex Method,MongoDB.Bson.Serialization.Serializers,ByteSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,DateTimeSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DateTimeSerializer.cs,Deserialize,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.Serialization.Serializers,DateTimeSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DateTimeSerializer.cs,Serialize,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Bson.Serialization.Serializers,ObjectSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ObjectSerializer.cs,Deserialize,Cyclomatic complexity of the method is 15
Complex Method,MongoDB.Bson.Serialization.Serializers,ObjectSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ObjectSerializer.cs,Serialize,Cyclomatic complexity of the method is 14
Complex Method,MongoDB.Bson.Serialization.Serializers,ObjectSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ObjectSerializer.cs,DeserializeDiscriminatedValue,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,SByteSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\SByteSerializer.cs,Deserialize,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,ThreeDimensionalArraySerializer<TItem>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ThreeDimensionalArraySerializer.cs,DeserializeValue,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,TicksPerUnit,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,Cyclomatic complexity of the method is 9
Long Parameter List,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToBson,The method has 5 parameters. Parameters: obj' serializer' writerSettings' configurator' args
Long Parameter List,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToBson,The method has 6 parameters. Parameters: obj' nominalType' writerSettings' serializer' configurator' args
Long Parameter List,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToBsonDocument,The method has 5 parameters. Parameters: obj' nominalType' serializer' configurator' args
Long Parameter List,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToJson,The method has 5 parameters. Parameters: obj' writerSettings' serializer' configurator' args
Long Parameter List,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToJson,The method has 6 parameters. Parameters: obj' nominalType' writerSettings' serializer' configurator' args
Long Parameter List,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The method has 5 parameters. Parameters: bytes' timestamp' machine' pid' increment
Long Parameter List,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The method has 5 parameters. Parameters: bytes' offset' a' b' c
Long Parameter List,MongoDB.Bson.IO,BsonBinaryReaderBookmark,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReaderBookmark.cs,BsonBinaryReaderBookmark,The method has 5 parameters. Parameters: state' currentBsonType' currentName' context' position
Long Parameter List,MongoDB.Bson.IO,BsonDocumentReaderBookmark,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReaderBookmark.cs,BsonDocumentReaderBookmark,The method has 5 parameters. Parameters: state' currentBsonType' currentName' context' currentValue
Long Parameter List,MongoDB.Bson.IO,BsonDocumentReaderContext,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReaderContext.cs,BsonDocumentReaderContext,The method has 5 parameters. Parameters: parentContext' contextType' document' array' index
Long Parameter List,MongoDB.Bson.IO,JsonReaderBookmark,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReaderBookmark.cs,JsonReaderBookmark,The method has 8 parameters. Parameters: state' currentBsonType' currentName' context' currentToken' currentValue' pushedToken' position
Long Parameter List,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,Serialize,The method has 5 parameters. Parameters: bsonWriter' nominalType' value' configurator' args
Long Parameter List,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,The method has 5 parameters. Parameters: item1Serializer' item2Serializer' item3Serializer' item4Serializer' item5Serializer
Long Parameter List,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,The method has 6 parameters. Parameters: item1Serializer' item2Serializer' item3Serializer' item4Serializer' item5Serializer' item6Serializer
Long Parameter List,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,The method has 7 parameters. Parameters: item1Serializer' item2Serializer' item3Serializer' item4Serializer' item5Serializer' item6Serializer' item7Serializer
Long Parameter List,MongoDB.Bson.Serialization.Serializers,TupleSerializer<T1;T2;T3;T4;T5;T6;T7;TRest>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TupleSerializers.cs,TupleSerializer,The method has 8 parameters. Parameters: item1Serializer' item2Serializer' item3Serializer' item4Serializer' item5Serializer' item6Serializer' item7Serializer' restSerializer
Long Identifier,MongoDB.Bson,BsonConstants,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonConstants.cs,,The length of the parameter __dateTimeMaxValueMillisecondsSinceEpoch is 40.
Long Identifier,MongoDB.Bson,BsonConstants,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonConstants.cs,,The length of the parameter __dateTimeMinValueMillisecondsSinceEpoch is 40.
Long Identifier,MongoDB.Bson,BsonDefaults,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonDefaults.cs,,The length of the parameter __dynamicArraySerializerWasSet is 30.
Long Identifier,MongoDB.Bson,BsonDefaults,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonDefaults.cs,,The length of the parameter __dynamicDocumentSerializerWasSet is 33.
Long Identifier,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ClampOrRound,The length of the parameter numberOfTrailingZeroesToRemove is 30.
Long Identifier,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ClampOrRound,The length of the parameter numberOfTrailingZeroesToRemove is 30.
Long Identifier,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToStringWithoutExponentialNotation,The length of the parameter minimumCoefficientStringLength is 30.
Long Identifier,MongoDB.Bson.IO,BsonBinaryReaderSettings,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReaderSettings.cs,,The length of the parameter _fixOldDateTimeMaxValueOnInput is 30.
Long Identifier,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,,The length of the parameter _childElementNameValidatorFactory is 33.
Long Identifier,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,,The length of the parameter __variableLengthIso8601Formats is 30.
Long Identifier,MongoDB.Bson.IO,OutputBufferChunkSource,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\OutputBufferChunkSource.cs,,The length of the parameter DefaultInitialUnpooledChunkSize is 31.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,SetIgnoreExtraElementsIsInherited,The length of the parameter ignoreExtraElementsIsInherited is 30.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,,The length of the parameter __getUninitializedObjectMethodInfo is 34.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,,The length of the parameter _ignoreExtraElementsIsInherited is 31.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,FindPropertyImplementation,The length of the parameter explicitlyImplementedPropertyName is 33.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,FindPropertyImplementation,The length of the parameter explicitlyImplementedPropertyInfo is 33.
Long Identifier,MongoDB.Bson.Serialization,BsonClassMap<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,FindPropertyImplementation,The length of the parameter implicitlyImplementedPropertyInfo is 33.
Long Identifier,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,GetSerializer,The length of the parameter csharpNullSerializerDefinition is 30.
Long Identifier,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,,The length of the parameter __typeMappingSerializationProvider is 34.
Long Identifier,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,,The length of the parameter __typesWithRegisteredKnownTypes is 31.
Long Identifier,MongoDB.Bson.Serialization,BsonSerializerRegistry,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializerRegistry.cs,CreateSerializer,The length of the parameter registryAwareSerializationProvider is 34.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetSerializer,The length of the parameter twoDimensionalArraySerializerDefinition is 39.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetSerializer,The length of the parameter threeDimensionalArraySerializerDefinition is 41.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The length of the parameter implementedGenericDictionaryInterface is 37.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The length of the parameter implementedGenericEnumerableInterface is 37.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The length of the parameter implementedGenericSetInterface is 30.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The length of the parameter implementedDictionaryInterface is 30.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetCollectionSerializer,The length of the parameter implementedEnumerableInterface is 30.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The length of the parameter typeIsOrIsChildOfReadOnlyDictionary is 35.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The length of the parameter genericImplementedInterfaceDefinitions is 38.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The length of the parameter implementsGenericReadOnlyDictionaryInterface is 44.
Long Identifier,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The length of the parameter implementsGenericDictionaryInterface is 36.
Long Identifier,MongoDB.Bson.Serialization.Attributes,BsonDictionaryOptionsAttribute,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Attributes\BsonDictionaryOptionsAttribute.cs,Apply,The length of the parameter dictionaryRepresentationConfigurable is 36.
Long Identifier,MongoDB.Bson.Serialization.Attributes,BsonRepresentationAttribute,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Attributes\BsonRepresentationAttribute.cs,Apply,The length of the parameter dictionaryRepresentationConfigurable is 36.
Long Identifier,MongoDB.Bson.Serialization.Conventions,EnumRepresentationConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\EnumRepresentationConvention.cs,Apply,The length of the parameter representationConfigurableSerializer is 36.
Long Identifier,MongoDB.Bson.Serialization.Conventions,EnumRepresentationConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\EnumRepresentationConvention.cs,Apply,The length of the parameter childSerializerConfigurableSerializer is 37.
Long Identifier,MongoDB.Bson.Serialization.Conventions,EnumRepresentationConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\EnumRepresentationConvention.cs,Apply,The length of the parameter representationConfigurableChildSerializer is 41.
Long Statement,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToBson,The length of the statement  "                var message = string.Format("Serializer type {0} value type does not match document types {1}."' serializer.GetType().FullName' nominalType.FullName); " is 150.
Long Statement,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToBsonDocument,The length of the statement  "                var message = string.Format("Serializer type {0} value type does not match document types {1}."' serializer.GetType().FullName' nominalType.FullName); " is 150.
Long Statement,MongoDB.Bson,BsonExtensionMethods,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonExtensionMethods.cs,ToJson,The length of the statement  "                var message = string.Format("Serializer type {0} value type does not match document types {1}."' serializer.GetType().FullName' nominalType.FullName); " is 150.
Long Statement,MongoDB.Bson,BsonDateTime,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDateTime.cs,ToString,The length of the statement  "                return BsonUtils.ToDateTimeFromMillisecondsSinceEpoch(_millisecondsSinceEpoch).ToString("yyyy-MM-ddTHH:mm:ss.FFFFFFFK"); " is 120.
Long Statement,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,AddRange,The length of the statement  "                    throw new ArgumentOutOfRangeException("dictionary"' "One or more keys in the dictionary passed to BsonDocument.AddRange is not a string."); " is 139.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,The length of the statement  "                        var message = string.Format("A BsonArray can't be mapped to a {0}."' BsonUtils.GetFriendlyTypeName(options.MapBsonArrayTo)); " is 124.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,The length of the statement  "                    else if (bsonBinaryData.SubType == BsonBinarySubType.UuidLegacy || bsonBinaryData.SubType == BsonBinarySubType.UuidStandard) " is 124.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,The length of the statement  "                        var message = string.Format("A BsonDocument can't be mapped to a {0}."' BsonUtils.GetFriendlyTypeName(options.MapBsonArrayTo)); " is 127.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,Convert,The length of the statement  "                case Conversion.BsonJavaScriptToBsonJavaScriptWithScope: return new BsonJavaScriptWithScope(((BsonJavaScript)value).Code' new BsonDocument()); " is 142.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,Convert,The length of the statement  "                case Conversion.Decimal128ToBsonBoolean: var d128 = (Decimal128)value; return (BsonBoolean)(!(Decimal128.IsNaN(d128) || d128 == Decimal128.Zero)); " is 146.
Long Statement,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,Convert,The length of the statement  "                    var dt = DateTime.ParseExact((string)value' formats' null' DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal); " is 126.
Long Statement,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryParse,The length of the statement  "                significandString = significandString.Substring(0' decimalPointIndex) + significandString.Substring(decimalPointIndex + 1); " is 123.
Long Statement,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapExponentToDecimal128BiasedExponent,The length of the statement  "            // internally we use a different bias than IEEE so that a Decimal128 struct filled with zero bytes is a true Decimal128 zero " is 124.
Long Statement,MongoDB.Bson,Flags,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,IsSecondForm,The length of the statement  "                return secondFormLeadingBits >= Flags.SecondFormLeadingBitsMin & secondFormLeadingBits <= Flags.SecondFormLeadingBitsMax; " is 121.
Long Statement,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The length of the statement  "                throw new ArgumentOutOfRangeException("machine"' "The machine value must be between 0 and 16777215 (it must fit in 3 bytes)."); " is 127.
Long Statement,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The length of the statement  "                throw new ArgumentOutOfRangeException("increment"' "The increment value must be between 0 and 16777215 (it must fit in 3 bytes)."); " is 131.
Long Statement,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,GetTimestampFromDateTime,The length of the statement  "            var secondsSinceEpoch = (long)Math.Floor((BsonUtils.ToUniversalTime(timestamp) - BsonConstants.UnixEpoch).TotalSeconds); " is 120.
Long Statement,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadBsonType,The length of the statement  "                    var message = ex.Message.Substring(0' periodIndex) + $" for fieldname \"{dottedElementName}\"" + ex.Message.Substring(periodIndex); " is 131.
Long Statement,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadSize,The length of the statement  "                var message = string.Format("Size {0} is not valid because it is larger than MaxDocumentSize {1}."' size' _settings.MaxDocumentSize); " is 133.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteBinaryData,The length of the statement  "                        var expectedSubType = (Settings.GuidRepresentation == GuidRepresentation.Standard) ? BsonBinarySubType.UuidStandard : BsonBinarySubType.UuidLegacy; " is 147.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteBinaryData,The length of the statement  "                                "The GuidRepresentation for the writer is {0}' which requires the the guidRepresentation argument to also be {0}' not {1}."' " is 124.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteRawBsonDocument,The length of the statement  "            if (State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done) " is 146.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteRawBsonDocument,The length of the statement  "                ThrowInvalidState("WriteRawBsonDocument"' BsonWriterState.Initial' BsonWriterState.Value' BsonWriterState.ScopeDocument' BsonWriterState.Done); " is 143.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteStartDocument,The length of the statement  "            if (State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done) " is 146.
Long Statement,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteStartDocument,The length of the statement  "                ThrowInvalidState("WriteStartDocument"' BsonWriterState.Initial' BsonWriterState.Value' BsonWriterState.ScopeDocument' BsonWriterState.Done); " is 141.
Long Statement,MongoDB.Bson.IO,BsonDocumentWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentWriter.cs,WriteStartDocument,The length of the statement  "            if (State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done) " is 146.
Long Statement,MongoDB.Bson.IO,BsonDocumentWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentWriter.cs,WriteStartDocument,The length of the statement  "                ThrowInvalidState("WriteStartDocument"' BsonWriterState.Initial' BsonWriterState.Value' BsonWriterState.ScopeDocument' BsonWriterState.Done); " is 141.
Long Statement,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,WriteStartArray,The length of the statement  "                throw new BsonSerializationException("Maximum serialization depth exceeded (does the object being serialized have a circular reference?)."); " is 140.
Long Statement,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,WriteStartDocument,The length of the statement  "                throw new BsonSerializationException("Maximum serialization depth exceeded (does the object being serialized have a circular reference?)."); " is 140.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,GetBookmark,The length of the statement  "            return new JsonReaderBookmark(State' CurrentBsonType' CurrentName' _context' _currentToken' _currentValue' _pushedToken' _buffer.Position); " is 139.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseBinDataExtendedJsonCanonical,The length of the statement  "                var message = string.Format("JSON reader expected subType to be a one or two digit hex string' but found '{0}'."' subTypeString); " is 129.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseISODateTimeConstructor,The length of the statement  "            var utcDateTime = DateTime.ParseExact(value' formats' null' DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal); " is 127.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseDateTimeExtendedJson,The length of the statement  "                else if (millisecondsSinceEpochToken.Type == JsonTokenType.Int32 || millisecondsSinceEpochToken.Type == JsonTokenType.Int64) " is 124.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseDateTimeExtendedJson,The length of the statement  "                    var message = string.Format("JSON reader expected an integer or a string for {{ $date : {{ $numberLong : ... }} }} but found a '{0}'."' valueToken.Lexeme); " is 155.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseDateTimeExtendedJson,The length of the statement  "                var message = string.Format("JSON reader expected an ISO 8601 string' an integer' or {{ $numberLong : ... }} for $date but found a '{0}'."' valueToken.Lexeme); " is 159.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseExtendedJson,The length of the statement  "                    case "$regularExpression": _currentValue = ParseRegularExpressionExtendedJsonCanonical(); return BsonType.RegularExpression; " is 124.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseJavaScriptDateTimeString,The length of the statement  "                            var message = string.Format("\"{0}\" is not the right day of the week for {1}."' dayOfWeekString' dateTime.ToString("o")); " is 122.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseJavaScriptDateTimeString,The length of the statement  "                    var message = string.Format("The DateTime string \"{0}\" is not a valid DateTime string for either .NET or JavaScript."' dateTimeString); " is 137.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseUUIDConstructor,The length of the statement  "            var subType = (guidRepresentation == GuidRepresentation.Standard) ? BsonBinarySubType.UuidStandard : BsonBinarySubType.UuidLegacy; " is 130.
Long Statement,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,VerifyString,The length of the statement  "            if ((token.Type != JsonTokenType.String && token.Type != JsonTokenType.UnquotedString) || token.StringValue != expectedString) " is 126.
Long Statement,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,WriteBinaryData,The length of the statement  "                    _textWriter.Write("{{ \"$binary\" : \"{0}\"' \"$type\" : \"{1}\" }}"' Convert.ToBase64String(bytes)' ((int)subType).ToString("x2")); " is 132.
Long Statement,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,WriteRegularExpression,The length of the statement  "                    _textWriter.Write("{{ \"$regex\" : \"{0}\"' \"$options\" : \"{1}\" }}"' EscapedString(pattern)' EscapedString(options)); " is 120.
Long Statement,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The length of the statement  "                var message = string.Format("GuidRepresentation for binary subtype UuidStandard must be Standard' not {0}."' guidRepresentation); " is 129.
Long Statement,MongoDB.Bson.IO,MultiChunkBuffer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\MultiChunkBuffer.cs,ExpandCapacity,The length of the statement  "                throw new InvalidOperationException("Capacity cannot be expanded because this buffer was created without specifying a chunk source."); " is 134.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,GetGetUninitializedObjectMethodInfo,The length of the statement  "                    return formatterServicesTypeInfo.GetMethod("GetUninitializedObject"' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static); " is 137.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,The length of the statement  "                        _declaredMemberMaps = _declaredMemberMaps.OrderBy(m => m.Order).ToList(); // we're counting on OrderBy being a stable sort " is 122.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,The length of the statement  "                                        fieldOrProperty' memberMap.MemberName' _classType.FullName' memberMap.ElementName' conflictingFieldOrProperty' conflictingMemberMap.MemberName); " is 144.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,The length of the statement  "                                        "The {0} '{1}' of type '{2}' cannot use element name '{3}' because it is already being used by {4} '{5}' of type '{6}'."' " is 121.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,Freeze,The length of the statement  "                                        fieldOrProperty' memberMap.MemberName' _classType.FullName' memberMap.ElementName' conflictingFieldOrProperty' conflictingMemberMap.MemberName' conflictingType.FullName); " is 170.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,MapField,The length of the statement  "            var fieldInfo = _classType.GetTypeInfo().GetField(fieldName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 159.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,MapProperty,The length of the statement  "            var propertyInfo = _classType.GetTypeInfo().GetProperty(propertyName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 168.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,MapProperty,The length of the statement  "                var message = string.Format("The class '{0}' does not have a property named '{1}'."' _classType.FullName' propertyName); " is 120.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,SetExtraElementsMember,The length of the statement  "            if (memberMap.MemberType != typeof(BsonDocument) && !typeof(IDictionary<string' object>).GetTypeInfo().IsAssignableFrom(memberMap.MemberType)) " is 142.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,SetExtraElementsMember,The length of the statement  "                var message = string.Format("Type of ExtraElements member must be BsonDocument or implement IDictionary<string' object>."); " is 123.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,AddKnownType,The length of the statement  "                string message = string.Format("Class {0} cannot be assigned to Class {1}.  Ensure that known types are derived from the mapped class."' type.FullName' _classType.FullName); " is 173.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,UnmapField,The length of the statement  "            var fieldInfo = _classType.GetTypeInfo().GetField(fieldName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 159.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,UnmapProperty,The length of the statement  "            var propertyInfo = _classType.GetTypeInfo().GetProperty(propertyName' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly); " is 168.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,UnmapProperty,The length of the statement  "                var message = string.Format("The class '{0}' does not have a property named '{1}'."' _classType.FullName' propertyName); " is 120.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,GetShouldSerializeMethod,The length of the statement  "                var lambdaExpression = Expression.Lambda<Func<object' bool>>(Expression.Call(Expression.Convert(objParameter' _classType)' shouldSerializeMethodInfo)' objParameter); " is 165.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,ThrowFrozenException,The length of the statement  "            var message = string.Format("Class map for {0} has been frozen and no further changes are allowed."' _classType.FullName); " is 122.
Long Statement,MongoDB.Bson.Serialization,BsonClassMap<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,FindPropertyImplementation,The length of the statement  "            var explicitlyImplementedPropertyName = $"{interfacePropertyInfo.DeclaringType.FullName}.{interfacePropertyInfo.Name}".Replace("+"' "."); " is 137.
Long Statement,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,Freeze,The length of the statement  "                        throw new BsonSerializationException($"Creator map for class {_classMap.ClassType.FullName} has {expectedArgumentsCount} arguments' not {_arguments.Count}."); " is 158.
Long Statement,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,Freeze,The length of the statement  "                        throw new BsonSerializationException($"Creator map for class {_classMap.ClassType.FullName} has {expectedArgumentsCount} arguments' but none are configured."); " is 159.
Long Statement,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,SetArguments,The length of the statement  "                throw new ArgumentException($"Creator map for class {_classMap.ClassType.FullName} has {expectedArgumentsCount} arguments' not {argumentsList.Count}."' nameof(arguments)); " is 171.
Long Statement,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,SetArguments,The length of the statement  "                    var message = string.Format("Class '{0}' does not have a member named '{1}'."' _classMap.ClassType.FullName' argumentName); " is 123.
Long Statement,MongoDB.Bson.Serialization,BsonCreatorMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonCreatorMap.cs,SetArguments,The length of the statement  "                    var message = string.Format("Class '{0}' has more than one member named '{1}'."' _classMap.ClassType.FullName' argumentName); " is 125.
Long Statement,MongoDB.Bson.Serialization,Builder,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonDeserializationContext.cs,Build,The length of the statement  "                return new BsonDeserializationContext(_reader' _allowDuplicateElementNames' _dynamicArraySerializer' _dynamicDocumentSerializer); " is 129.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,SetIgnoreIfDefault,The length of the statement  "                throw new InvalidOperationException("IgnoreIfDefault and IgnoreIfNull are mutually exclusive. Choose one or the other."); " is 121.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,SetIgnoreIfNull,The length of the statement  "                throw new InvalidOperationException("IgnoreIfDefault and IgnoreIfNull are mutually exclusive. Choose one or the other."); " is 121.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,SetSerializer,The length of the statement  "                var message = string.Format("Value type of serializer is {0} and does not match member type {1}."' serializer.ValueType.FullName' _memberType.FullName); " is 152.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,GetFieldSetter,The length of the statement  "                    "The field '{0} {1}' of class '{2}' is readonly. To avoid this exception' call IsReadOnly to ensure that setting a value is allowed."' " is 134.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,GetPropertySetter,The length of the statement  "                    "The property '{0} {1}' of class '{2}' has no 'set' accessor. To avoid this exception' call IsReadOnly to ensure that setting a value is allowed."' " is 147.
Long Statement,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,ThrowFrozenException,The length of the statement  "            var message = string.Format("Member map for {0}.{1} has been frozen and no further changes are allowed."' _classMap.ClassType.FullName' _memberInfo.Name); " is 154.
Long Statement,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,RegisterDiscriminator,The length of the statement  "                var message = string.Format("Discriminators can only be registered for classes' not for interface {0}."' type.FullName); " is 120.
Long Statement,MongoDB.Bson.Serialization,BsonSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializer.cs,EnsureKnownTypesAreRegistered,The length of the statement  "                    var knownTypesAttribute = nominalType.GetTypeInfo().GetCustomAttributes(typeof(BsonKnownTypesAttribute)' false).ToArray(); " is 122.
Long Statement,MongoDB.Bson.Serialization,BsonSerializerRegistry,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializerRegistry.cs,RegisterSerializer,The length of the statement  "                var message = string.Format("A serializer cannot be registered for type {0} because it is a subclass of BsonValue."' BsonUtils.GetFriendlyTypeName(type)); " is 154.
Long Statement,MongoDB.Bson.Serialization,BsonSerializerRegistry,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonSerializerRegistry.cs,RegisterSerializer,The length of the statement  "                var message = string.Format("There is already a serializer registered for type {0}."' BsonUtils.GetFriendlyTypeName(type)); " is 123.
Long Statement,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,IsOrIsChildOf,The length of the statement  "            return type == parent || (type != null) && (type != typeof(object) && IsOrIsChildOf(type.GetTypeInfo().BaseType' parent)); " is 122.
Long Statement,MongoDB.Bson.Serialization,CreatorMapDelegateCompiler,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CreatorMapDelegateCompiler.cs,VisitParameter,The length of the statement  "                throw new BsonSerializationException("The only operations allowed on the prototype parameter are accessing a field or property."); " is 130.
Long Statement,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,The length of the statement  "                var memberMapBlock = ~memberMapBitArray[bitArrayIndex]; // notice that bits are flipped so 1's are now the missing elements " is 123.
Long Statement,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeMemberValue,The length of the statement  "                    memberMap.MemberName' (memberMap.MemberInfo is FieldInfo) ? "field" : "property"' memberMap.ClassMap.ClassType.FullName' ex.Message); " is 133.
Long Statement,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,ShouldSerializeDiscriminator,The length of the statement  "            return (nominalType != _classMap.ClassType || _classMap.DiscriminatorIsRequired || _classMap.HasRootClass) && !_classMap.IsAnonymous; " is 133.
Long Statement,MongoDB.Bson.Serialization,TypeMappingSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeMappingSerializationProvider.cs,RegisterMapping,The length of the statement  "                var message = string.Format("There is already a serializer mapping registered for type {0}."' BsonUtils.GetFriendlyTypeName(type)); " is 131.
Long Statement,MongoDB.Bson.Serialization.Attributes,BsonRepresentationAttribute,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Attributes\BsonRepresentationAttribute.cs,Apply,The length of the statement  "                    var dictionaryRepresentation = (_representation == BsonType.Array) ? DictionaryRepresentation.ArrayOfArrays: DictionaryRepresentation.Document; " is 143.
Long Statement,MongoDB.Bson.Serialization.Attributes,BsonSerializerAttribute,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Attributes\BsonSerializerAttribute.cs,CreateSerializer,The length of the statement  "                var message = "Cannot create a serializer because the serializer type is an open generic type and the type to serialize is not generic."; " is 137.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,Apply,The length of the statement  "                foreach (var attribute in classMap.ClassType.GetTypeInfo().GetCustomAttributes(inherit: false).OfType<IBsonClassMapAttribute>()) " is 128.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,PostProcess,The length of the statement  "                foreach (var attribute in classMap.ClassType.GetTypeInfo().GetCustomAttributes(inherit: false).OfType<IBsonPostProcessingAttribute>()) " is 134.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,OptInMembersWithBsonCreatorMapModifierAttribute,The length of the statement  "                foreach (var constructorInfo in classMap.ClassType.GetTypeInfo().GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) " is 179.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,OptInMembersWithBsonCreatorMapModifierAttribute,The length of the statement  "                foreach (var methodInfo in classMap.ClassType.GetTypeInfo().GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) " is 167.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,OptInMembersWithBsonMemberMapModifierAttribute,The length of the statement  "                foreach (var fieldInfo in classMap.ClassType.GetTypeInfo().GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) " is 167.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,OptInMembersWithBsonMemberMapModifierAttribute,The length of the statement  "                foreach (var propertyInfo in classMap.ClassType.GetTypeInfo().GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.DeclaredOnly)) " is 174.
Long Statement,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,IgnoreMembersWithBsonIgnoreAttribute,The length of the statement  "                    var ignoreAttribute = (BsonIgnoreAttribute)memberMap.MemberInfo.GetCustomAttributes(inherit: false).OfType<BsonIgnoreAttribute>().FirstOrDefault(); " is 147.
Long Statement,MongoDB.Bson.Serialization.Conventions,EnumRepresentationConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\EnumRepresentationConvention.cs,EnsureRepresentationIsValidForEnums,The length of the statement  "            throw new ArgumentException("Enums can only be represented as String' Int32' Int64 or the type of the enum"' "representation"); " is 127.
Long Statement,MongoDB.Bson.Serialization.Conventions,NamedExtraElementsMemberConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\NamedExtraElementsMemberConvention.cs,Apply,The length of the statement  "                    if (memberType != null && (memberType == typeof(BsonDocument) || typeof(IDictionary<string' object>).GetTypeInfo().IsAssignableFrom(memberType))) " is 145.
Long Statement,MongoDB.Bson.Serialization.Conventions,ObjectDiscriminatorConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ObjectDiscriminatorConvention.cs,GetActualType,The length of the statement  "                // Type.IsAssignableFrom is extremely expensive' always perform a direct type check before calling Type.IsAssignableFrom " is 120.
Long Statement,MongoDB.Bson.Serialization.Conventions,ObjectDiscriminatorConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ObjectDiscriminatorConvention.cs,GetActualType,The length of the statement  "                if (primitiveType != null && (primitiveType == nominalType || nominalType.GetTypeInfo().IsAssignableFrom(primitiveType))) " is 121.
Long Statement,MongoDB.Bson.Serialization.IdGenerators,BsonBinaryDataGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\BsonBinaryDataGuidGenerator.cs,IsEmpty,The length of the statement  "                throw new ArgumentOutOfRangeException("id"' "The binary sub type of the id value passed to the BsonBinaryDataGuidGenerator IsEmpty method is not UuidLegacy or UuidStandard."); " is 175.
Long Statement,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The length of the statement  "            // note: Guids generated by CombGuidGenerator are only considered ascending by SQL Server which compares Guids in an unusual way " is 128.
Long Statement,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The length of the statement  "            var timeTicks = (int)(timestamp.TimeOfDay.Ticks * 300 / TimeSpan.TicksPerSecond); // convert from .NET resolution to SQL Server resolution " is 138.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToDecimal,The length of the statement  "                try { decimalValue = (decimal)value; } catch (OverflowException) { decimalValue = Decimal128.IsNegative(value) ? decimal.MinValue : decimal.MaxValue; } " is 151.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToDouble,The length of the statement  "                try { doubleValue = (double)value; } catch (OverflowException) { doubleValue = Decimal128.IsNegative(value) ? double.MinValue : double.MaxValue; } " is 146.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToInt16,The length of the statement  "                try { shortValue = (short)value; } catch (OverflowException) { shortValue = Decimal128.IsNegative(value) ? short.MinValue : short.MaxValue; } " is 141.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToInt32,The length of the statement  "                try { intValue = (int)value; } catch (OverflowException) { intValue = Decimal128.IsNegative(value) ? int.MinValue : int.MaxValue; } " is 131.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToInt64,The length of the statement  "                try { longValue = (long)value; } catch (OverflowException) { longValue = Decimal128.IsNegative(value) ? long.MinValue : long.MaxValue; } " is 136.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToSingle,The length of the statement  "                try { floatValue = (float)value; } catch (OverflowException) { floatValue = Decimal128.IsNegative(value) ? float.MinValue : float.MaxValue; } " is 141.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToUInt16,The length of the statement  "                try { ushortValue = (ushort)value; } catch (OverflowException) { ushortValue = Decimal128.IsNegative(value) ? ushort.MinValue : ushort.MaxValue; } " is 146.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToUInt32,The length of the statement  "                try { uintValue = (uint)value; } catch (OverflowException) { uintValue = Decimal128.IsNegative(value) ? uint.MinValue : uint.MaxValue; } " is 136.
Long Statement,MongoDB.Bson.Serialization.Options,RepresentationConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Options\RepresentationConverter.cs,ToUInt64,The length of the statement  "                try { ulongValue = (ulong)value; } catch (OverflowException) { ulongValue = Decimal128.IsNegative(value) ? ulong.MinValue : ulong.MaxValue; } " is 141.
Long Statement,MongoDB.Bson.Serialization.Serializers,BsonBinaryDataSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonBinaryDataSerializer.cs,SerializeValue,The length of the statement  "                        subType = (writerGuidRepresentation == GuidRepresentation.Standard) ? BsonBinarySubType.UuidStandard : BsonBinarySubType.UuidLegacy; " is 132.
Long Statement,MongoDB.Bson.Serialization.Serializers,BsonDocumentSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonDocumentSerializer.cs,GetDocumentId,The length of the statement  "                    if (idBinaryData != null && (idBinaryData.SubType == BsonBinarySubType.UuidLegacy || idBinaryData.SubType == BsonBinarySubType.UuidStandard)) " is 141.
Long Statement,MongoDB.Bson.Serialization.Serializers,BsonValueSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonValueSerializer.cs,SerializeValue,The length of the statement  "                case BsonType.JavaScriptWithScope: BsonJavaScriptWithScopeSerializer.Instance.Serialize(context' (BsonJavaScriptWithScope)value); break; " is 136.
Long Statement,MongoDB.Bson.Serialization.Serializers,BsonValueSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonValueSerializer.cs,SerializeValue,The length of the statement  "                case BsonType.RegularExpression: BsonRegularExpressionSerializer.Instance.Serialize(context' (BsonRegularExpression)value); break; " is 130.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary>(dictionaryRepresentation' KeySerializer' ValueSerializer); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "            if (dictionaryRepresentation == DictionaryRepresentation && keySerializer == KeySerializer && valueSerializer == ValueSerializer) " is 129.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary>(dictionaryRepresentation' keySerializer' valueSerializer); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithKeySerializer,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary>(DictionaryRepresentation' keySerializer' ValueSerializer); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithValueSerializer,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary>(DictionaryRepresentation' KeySerializer' valueSerializer); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(dictionaryRepresentation' KeySerializer' ValueSerializer); " is 137.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "            if (dictionaryRepresentation == DictionaryRepresentation && keySerializer == KeySerializer && valueSerializer == ValueSerializer) " is 129.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(dictionaryRepresentation' keySerializer' valueSerializer); " is 137.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithKeySerializer,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(DictionaryRepresentation' keySerializer' ValueSerializer); " is 137.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionaryInterfaceImplementerSerializer.cs,WithValueSerializer,The length of the statement  "                return new DictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(DictionaryRepresentation' KeySerializer' valueSerializer); " is 137.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionarySerializerBase<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionarySerializerBase.cs,SerializeKeyString,The length of the statement  "                throw new BsonSerializationException("When using DictionaryRepresentation.Document key values must serialize as strings."); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DictionarySerializerBase<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionarySerializerBase.cs,SerializeKeyString,The length of the statement  "                throw new BsonSerializationException("When using DictionaryRepresentation.Document key values must serialize as strings."); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,DiscriminatedInterfaceSerializer<TInterface>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DiscriminatedInterfaceSerializer.cs,Deserialize,The length of the statement  "                    var message = string.Format("Unable to determine actual type of object to deserialize for interface type {0}."' _interfaceType.FullName); " is 137.
Long Statement,MongoDB.Bson.Serialization.Serializers,DynamicDocumentBaseSerializer<T>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DynamicDocumentBaseSerializer.cs,Deserialize,The length of the statement  "                    message = string.Format("Cannot deserialize a '{0}' from BsonType '{1}'."' BsonUtils.GetFriendlyTypeName(typeof(T))' bsonType); " is 127.
Long Statement,MongoDB.Bson.Serialization.Serializers,ElementAppendingSerializer<TDocument>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ElementAppendingSerializer.cs,Serialize,The length of the statement  "            var elementAppendingContext = BsonSerializationContext.CreateRoot(elementAppendingWriter' builder => ConfigureElementAppendingContext(builder' context)); " is 153.
Long Statement,MongoDB.Bson.Serialization.Serializers,GuidSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\GuidSerializer.cs,Deserialize,The length of the statement  "                        throw new BsonSerializationException("GuidSerializer cannot deserialize a Guid when GuidRepresentation is Unspecified."); " is 121.
Long Statement,MongoDB.Bson.Serialization.Serializers,GuidSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\GuidSerializer.cs,Serialize,The length of the statement  "                    var subType = (writerGuidRepresentation == GuidRepresentation.Standard) ? BsonBinarySubType.UuidStandard : BsonBinarySubType.UuidLegacy; " is 136.
Long Statement,MongoDB.Bson.Serialization.Serializers,ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ReadOnlyDictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                : new ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(dictionaryRepresentation' KeySerializer' ValueSerializer); " is 140.
Long Statement,MongoDB.Bson.Serialization.Serializers,ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ReadOnlyDictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "            return dictionaryRepresentation == DictionaryRepresentation && keySerializer == KeySerializer && valueSerializer == ValueSerializer " is 131.
Long Statement,MongoDB.Bson.Serialization.Serializers,ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ReadOnlyDictionaryInterfaceImplementerSerializer.cs,WithDictionaryRepresentation,The length of the statement  "                : new ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(dictionaryRepresentation' keySerializer' valueSerializer); " is 140.
Long Statement,MongoDB.Bson.Serialization.Serializers,ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ReadOnlyDictionaryInterfaceImplementerSerializer.cs,WithKeySerializer,The length of the statement  "                : new ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(DictionaryRepresentation' keySerializer' ValueSerializer); " is 140.
Long Statement,MongoDB.Bson.Serialization.Serializers,ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ReadOnlyDictionaryInterfaceImplementerSerializer.cs,WithValueSerializer,The length of the statement  "                : new ReadOnlyDictionaryInterfaceImplementerSerializer<TDictionary' TKey' TValue>(DictionaryRepresentation' KeySerializer' valueSerializer); " is 140.
Long Statement,MongoDB.Bson.Serialization.Serializers,ThreeDimensionalArraySerializer<TItem>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ThreeDimensionalArraySerializer.cs,DeserializeValue,The length of the statement  "                    var message = string.Format("Middle list {0} is of length {1} but should be of length {2}."' i' middleList.Count' length2); " is 123.
Long Statement,MongoDB.Bson.Serialization.Serializers,ThreeDimensionalArraySerializer<TItem>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ThreeDimensionalArraySerializer.cs,DeserializeValue,The length of the statement  "                        var message = string.Format("Inner list {0} is of length {1} but should be of length {2}."' j' innerList.Count' length3); " is 121.
Long Statement,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,FromDouble,The length of the statement  "                return TimeSpan.FromTicks((long)(value * TicksPerUnit(units))); // multiply first then cast to preserve fractional part of value " is 128.
Long Statement,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,ToDouble,The length of the statement  "                return (double)timeSpan.Ticks / (double)TicksPerUnit(units); // cast first then divide to preserve fractional part of result " is 124.
Long Statement,MongoDB.Bson.Serialization.Serializers,TwoDimensionalArraySerializer<TItem>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TwoDimensionalArraySerializer.cs,DeserializeValue,The length of the statement  "                    var message = string.Format("Inner list {0} is of length {1} but should be of length {2}."' i' innerList.Count' length2); " is 121.
Complex Conditional,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryParse,The conditional expression  "s.Equals("Inf"' StringComparison.OrdinalIgnoreCase) || s.Equals("Infinity"' StringComparison.OrdinalIgnoreCase) ||                      s.Equals("+Inf"' StringComparison.OrdinalIgnoreCase) || s.Equals("+Infinity"' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteRawBsonDocument,The conditional expression  "State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done"  is complex.
Complex Conditional,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteStartDocument,The conditional expression  "State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done"  is complex.
Complex Conditional,MongoDB.Bson.IO,BsonDocumentWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentWriter.cs,WriteStartDocument,The conditional expression  "State != BsonWriterState.Initial && State != BsonWriterState.Value && State != BsonWriterState.ScopeDocument && State != BsonWriterState.Done"  is complex.
Complex Conditional,MongoDB.Bson.Serialization,BsonClassMapSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMapSerializationProvider.cs,GetSerializer,The conditional expression  "(typeInfo.IsClass || (typeInfo.IsValueType && !typeInfo.IsPrimitive)) &&                  !typeof(Array).GetTypeInfo().IsAssignableFrom(type) &&                  !typeof(Enum).GetTypeInfo().IsAssignableFrom(type)"  is complex.
Complex Conditional,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The conditional expression  "typeIsOrIsChildOfReadOnlyDictionary                  || (!typeInfo.IsInterface                      && implementsGenericReadOnlyDictionaryInterface                      && !implementsGenericDictionaryInterface)"  is complex.
Complex Conditional,MongoDB.Bson.Serialization.Conventions,EnumRepresentationConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\EnumRepresentationConvention.cs,EnsureRepresentationIsValidForEnums,The conditional expression  "representation == 0 ||                  representation == BsonType.String ||                  representation == BsonType.Int32 ||                  representation == BsonType.Int64"  is complex.
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonArray,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonArray.cs,BsonArray,The constructor "BsonArray" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "AddRange".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Virtual Method Call from Constructor,MongoDB.Bson,BsonDocument,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDocument.cs,BsonDocument,The constructor "BsonDocument" calls a virtual method "Add".
Empty Catch Block,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.IO,BsonDocumentReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentReader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.IO,BsonDocumentWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonDocumentWriter.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,GetFormatterServicesType,The method has an empty catch block.
Empty Catch Block,MongoDB.Bson.Serialization,BsonClassMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonClassMap.cs,GetGetUninitializedObjectMethodInfo,The method has an empty catch block.
Magic Number,MongoDB.Bson,BsonConstants,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonConstants.cs,BsonConstants,The following statement contains a magic number: __unixEpoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MongoDB.Bson,BsonConstants,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonConstants.cs,BsonConstants,The following statement contains a magic number: __dateTimeMaxValueMillisecondsSinceEpoch = (DateTime.MaxValue - __unixEpoch).Ticks / 10000;
Magic Number,MongoDB.Bson,BsonConstants,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonConstants.cs,BsonConstants,The following statement contains a magic number: __dateTimeMinValueMillisecondsSinceEpoch = (DateTime.MinValue - __unixEpoch).Ticks / 10000;
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,GetFriendlyTypeName,The following statement contains a magic number: sb.Remove(sb.Length - 2' 2);
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,GetFriendlyTypeName,The following statement contains a magic number: sb.Remove(sb.Length - 2' 2);
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,ToHexChar,The following statement contains a magic number: return (char)(value + (value < 10 ? '0' : 'a' - 10));
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,ToHexChar,The following statement contains a magic number: return (char)(value + (value < 10 ? '0' : 'a' - 10));
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,ToHexString,The following statement contains a magic number: var c = new char[length * 2];
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,ToHexString,The following statement contains a magic number: c[j++] = ToHexChar(b >> 4);
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,ToMillisecondsSinceEpoch,The following statement contains a magic number: return (utcDateTime - BsonConstants.UnixEpoch).Ticks / 10000;
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,TryParseHexString,The following statement contains a magic number: var buffer = new byte[(s.Length + 1) / 2];
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,TryParseHexString,The following statement contains a magic number: (s.Length % 2) == 1
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,TryParseHexString,The following statement contains a magic number: buffer[j++] = (byte)((x << 4) | y);
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,TryParseHexChar,The following statement contains a magic number: value = 10 + (c - 'a');
Magic Number,MongoDB.Bson,BsonUtils,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\BsonUtils.cs,TryParseHexChar,The following statement contains a magic number: value = 10 + (c - 'A');
Magic Number,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,BsonBinaryData,The following statement contains a magic number: bytes.Length != 16
Magic Number,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + b;
Magic Number,MongoDB.Bson,BsonBinaryData,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBinaryData.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _subType.GetHashCode();
Magic Number,MongoDB.Bson,BsonBoolean,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBoolean.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonBoolean,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBoolean.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonBoolean,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonBoolean.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonDateTime,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDateTime.cs,CompareTo,The following statement contains a magic number: return _millisecondsSinceEpoch.CompareTo(otherTimestamp.Timestamp * 1000L);
Magic Number,MongoDB.Bson,BsonDateTime,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDateTime.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonDateTime,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDateTime.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonDateTime,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDateTime.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _millisecondsSinceEpoch.GetHashCode();
Magic Number,MongoDB.Bson,BsonDecimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDecimal128.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonDecimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDecimal128.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonDecimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDecimal128.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonDouble,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDouble.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonDouble,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDouble.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonDouble,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonDouble.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonElement,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonElement.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonElement,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonElement.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _name.GetHashCode();
Magic Number,MongoDB.Bson,BsonElement,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonElement.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonInt32,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt32.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonInt32,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt32.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonInt32,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt32.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonInt64,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt64.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonInt64,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt64.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonInt64,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonInt64.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonJavaScript,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScript.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonJavaScript,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScript.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonJavaScript,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScript.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _code.GetHashCode();
Magic Number,MongoDB.Bson,BsonJavaScriptWithScope,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScriptWithScope.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonJavaScriptWithScope,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScriptWithScope.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + base.GetHashCode();
Magic Number,MongoDB.Bson,BsonJavaScriptWithScope,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonJavaScriptWithScope.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _scope.GetHashCode();
Magic Number,MongoDB.Bson,BsonObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonObjectId.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonObjectId.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonObjectId.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonRegularExpression,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonRegularExpression.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonRegularExpression,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonRegularExpression.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonRegularExpression,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonRegularExpression.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _pattern.GetHashCode();
Magic Number,MongoDB.Bson,BsonRegularExpression,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonRegularExpression.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _options.GetHashCode();
Magic Number,MongoDB.Bson,BsonString,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonString.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonString,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonString.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonString,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonString.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,BsonTimestamp,The following statement contains a magic number: _value = (long)(((ulong)(uint)timestamp << 32) | (ulong)(uint)increment);
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,CompareTo,The following statement contains a magic number: var seconds = (int)(otherDateTime.MillisecondsSinceEpoch / 1000);
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,CompareTo,The following statement contains a magic number: var otherTimestampValue = ((long)seconds) << 32;
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + BsonType.GetHashCode();
Magic Number,MongoDB.Bson,BsonTimestamp,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTimestamp.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _value.GetHashCode();
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,GetExponent,The following statement contains a magic number: return MapDecimal128BiasedExponentToExponent((short)((d._highBits & Flags.FirstFormExponentBits) >> 49));
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToDecimal,The following statement contains a magic number: significand = UInt128.Divide(significand' 10' out remainder);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToDecimal,The following statement contains a magic number: (significand.High >> 32) != 0
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToDecimal,The following statement contains a magic number: significand = UInt128.Multiply(significand' (uint)10);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToDecimal,The following statement contains a magic number: var mid = (int)(significand.Low >> 32);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryParse,The following statement contains a magic number: significandString.Length > 34
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryDecreaseExponent,The following statement contains a magic number: var significandTimes10 = UInt128.Multiply(significand' (uint)10);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,FromComponents,The following statement contains a magic number: var highBits = ((ulong)biasedExponent << 49) | significand.High;
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryIncreaseExponent,The following statement contains a magic number: var significandDividedBy10 = UInt128.Divide(significand' (uint)10' out remainder);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapDecimal128BiasedExponentToExponent,The following statement contains a magic number: biasedExponent <= 6111
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapDecimal128HighBitsToIEEEHighBits,The following statement contains a magic number: return highBits + (6176L << 49);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapDecimal128HighBitsToIEEEHighBits,The following statement contains a magic number: return highBits + (6176L << 49);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapDecimal128HighBitsToIEEEHighBits,The following statement contains a magic number: exponentBits <= (6111L << 49)
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapDecimal128HighBitsToIEEEHighBits,The following statement contains a magic number: exponentBits <= (6111L << 49)
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapIEEEHighBitsToDecimal128HighBits,The following statement contains a magic number: return highBits + (6112L << 49);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapIEEEHighBitsToDecimal128HighBits,The following statement contains a magic number: return highBits + (6112L << 49);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapIEEEHighBitsToDecimal128HighBits,The following statement contains a magic number: exponentBits <= (6175L << 49)
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,MapIEEEHighBitsToDecimal128HighBits,The following statement contains a magic number: exponentBits <= (6175L << 49)
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: var isNegative = (bits[3] & 0x80000000) != 0;
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: var scale = (short)((bits[3] & 0x00FF0000) >> 16);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: var scale = (short)((bits[3] & 0x00FF0000) >> 16);
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: var significandHigh = (ulong)(uint)bits[2];
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: var significandLow = ((ulong)(uint)bits[1] << 32) | (ulong)(uint)bits[0];
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,Decimal128,The following statement contains a magic number: _highBits = (isNegative ? Flags.SignBit : 0) | ((ulong)MapExponentToDecimal128BiasedExponent(exponent) << 49) | significandHigh;
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _highBits.GetHashCode();
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _lowBits.GetHashCode();
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ToString,The following statement contains a magic number: exponent > 0 || adjustedExponent < -6
Magic Number,MongoDB.Bson,Decimal128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,TryTruncateToUInt64,The following statement contains a magic number: significand = UInt128.Divide(significand' (uint)10' out remainder);
Magic Number,MongoDB.Bson,Decimal128Comparer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\Decimal128.cs,ComparePositiveNumbers,The following statement contains a magic number: exponentDifference <= 66
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: bytes.Length != 16
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,FromBytes,The following statement contains a magic number: switch (representation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert byte array to Guid because GuidRepresentation is Unspecified.");                  default:                      throw new BsonInternalException("Unexpected GuidRepresentation.");              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,GuidConverter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\GuidConverter.cs,ToBytes,The following statement contains a magic number: switch (guidRepresentation)              {                  case GuidRepresentation.CSharpLegacy:                      if (!BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.JavaLegacy:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      Array.Reverse(bytes' 0' 8);                      Array.Reverse(bytes' 8' 8);                      break;                  case GuidRepresentation.PythonLegacy:                  case GuidRepresentation.Standard:                      if (BitConverter.IsLittleEndian)                      {                          Array.Reverse(bytes' 0' 4);                          Array.Reverse(bytes' 4' 2);                          Array.Reverse(bytes' 6' 2);                      }                      break;                  case GuidRepresentation.Unspecified:                      throw new InvalidOperationException("Unable to convert Guid to byte array because GuidRepresentation is Unspecified.");                  default:                      throw new ArgumentException($"Invalid guidRepresentation: {guidRepresentation}."' nameof(guidRepresentation));              }
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ObjectId,The following statement contains a magic number: bytes.Length != 12
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ObjectId,The following statement contains a magic number: _b = (machine << 8) | (((int)pid >> 8) & 0xff);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ObjectId,The following statement contains a magic number: _b = (machine << 8) | (((int)pid >> 8) & 0xff);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ObjectId,The following statement contains a magic number: _c = ((int)pid << 24) | increment;
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: byte[] bytes = new byte[12];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[0] = (byte)(timestamp >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[1] = (byte)(timestamp >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[2] = (byte)(timestamp >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[2] = (byte)(timestamp >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[3] = (byte)(timestamp);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[4] = (byte)(machine >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[4] = (byte)(machine >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[5] = (byte)(machine >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[5] = (byte)(machine >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[6] = (byte)(machine);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[7] = (byte)(pid >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[7] = (byte)(pid >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[8] = (byte)(pid);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[9] = (byte)(increment >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[9] = (byte)(increment >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[10] = (byte)(increment >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[10] = (byte)(increment >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Pack,The following statement contains a magic number: bytes[11] = (byte)(increment);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,TryParse,The following statement contains a magic number: s != null && s.Length == 24
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: bytes.Length != 12
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: timestamp = (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: timestamp = (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: timestamp = (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: timestamp = (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: timestamp = (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: machine = (bytes[4] << 16) + (bytes[5] << 8) + bytes[6];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: machine = (bytes[4] << 16) + (bytes[5] << 8) + bytes[6];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: machine = (bytes[4] << 16) + (bytes[5] << 8) + bytes[6];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: machine = (bytes[4] << 16) + (bytes[5] << 8) + bytes[6];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: machine = (bytes[4] << 16) + (bytes[5] << 8) + bytes[6];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: pid = (short)((bytes[7] << 8) + bytes[8]);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: pid = (short)((bytes[7] << 8) + bytes[8]);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: pid = (short)((bytes[7] << 8) + bytes[8]);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: increment = (bytes[9] << 16) + (bytes[10] << 8) + bytes[11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: increment = (bytes[9] << 16) + (bytes[10] << 8) + bytes[11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: increment = (bytes[9] << 16) + (bytes[10] << 8) + bytes[11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: increment = (bytes[9] << 16) + (bytes[10] << 8) + bytes[11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,Unpack,The following statement contains a magic number: increment = (bytes[9] << 16) + (bytes[10] << 8) + bytes[11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: a = (bytes[offset] << 24) | (bytes[offset + 1] << 16) | (bytes[offset + 2] << 8) | bytes[offset + 3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: a = (bytes[offset] << 24) | (bytes[offset + 1] << 16) | (bytes[offset + 2] << 8) | bytes[offset + 3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: a = (bytes[offset] << 24) | (bytes[offset + 1] << 16) | (bytes[offset + 2] << 8) | bytes[offset + 3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: a = (bytes[offset] << 24) | (bytes[offset + 1] << 16) | (bytes[offset + 2] << 8) | bytes[offset + 3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: a = (bytes[offset] << 24) | (bytes[offset + 1] << 16) | (bytes[offset + 2] << 8) | bytes[offset + 3];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: b = (bytes[offset + 4] << 24) | (bytes[offset + 5] << 16) | (bytes[offset + 6] << 8) | bytes[offset + 7];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,FromByteArray,The following statement contains a magic number: c = (bytes[offset + 8] << 24) | (bytes[offset + 9] << 16) | (bytes[offset + 10] << 8) | bytes[offset + 11];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _a.GetHashCode();
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _b.GetHashCode();
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _c.GetHashCode();
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: var bytes = new byte[12];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: offset + 12 > destination.Length
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 0] = (byte)(_a >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 1] = (byte)(_a >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 2] = (byte)(_a >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 2] = (byte)(_a >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 3] = (byte)(_a);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 4] = (byte)(_b >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 4] = (byte)(_b >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 5] = (byte)(_b >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 5] = (byte)(_b >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 6] = (byte)(_b >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 6] = (byte)(_b >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 7] = (byte)(_b);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 8] = (byte)(_c >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 8] = (byte)(_c >> 24);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 9] = (byte)(_c >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 9] = (byte)(_c >> 16);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 10] = (byte)(_c >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 10] = (byte)(_c >> 8);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToByteArray,The following statement contains a magic number: destination[offset + 11] = (byte)(_c);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: var c = new char[24];
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[0] = BsonUtils.ToHexChar((_a >> 28) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[1] = BsonUtils.ToHexChar((_a >> 24) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[2] = BsonUtils.ToHexChar((_a >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[2] = BsonUtils.ToHexChar((_a >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[3] = BsonUtils.ToHexChar((_a >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[3] = BsonUtils.ToHexChar((_a >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[4] = BsonUtils.ToHexChar((_a >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[4] = BsonUtils.ToHexChar((_a >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[5] = BsonUtils.ToHexChar((_a >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[5] = BsonUtils.ToHexChar((_a >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[6] = BsonUtils.ToHexChar((_a >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[6] = BsonUtils.ToHexChar((_a >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[7] = BsonUtils.ToHexChar(_a & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[8] = BsonUtils.ToHexChar((_b >> 28) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[8] = BsonUtils.ToHexChar((_b >> 28) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[9] = BsonUtils.ToHexChar((_b >> 24) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[9] = BsonUtils.ToHexChar((_b >> 24) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[10] = BsonUtils.ToHexChar((_b >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[10] = BsonUtils.ToHexChar((_b >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[11] = BsonUtils.ToHexChar((_b >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[11] = BsonUtils.ToHexChar((_b >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[12] = BsonUtils.ToHexChar((_b >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[12] = BsonUtils.ToHexChar((_b >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[13] = BsonUtils.ToHexChar((_b >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[13] = BsonUtils.ToHexChar((_b >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[14] = BsonUtils.ToHexChar((_b >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[14] = BsonUtils.ToHexChar((_b >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[15] = BsonUtils.ToHexChar(_b & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[16] = BsonUtils.ToHexChar((_c >> 28) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[16] = BsonUtils.ToHexChar((_c >> 28) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[17] = BsonUtils.ToHexChar((_c >> 24) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[17] = BsonUtils.ToHexChar((_c >> 24) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[18] = BsonUtils.ToHexChar((_c >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[18] = BsonUtils.ToHexChar((_c >> 20) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[19] = BsonUtils.ToHexChar((_c >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[19] = BsonUtils.ToHexChar((_c >> 16) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[20] = BsonUtils.ToHexChar((_c >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[20] = BsonUtils.ToHexChar((_c >> 12) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[21] = BsonUtils.ToHexChar((_c >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[21] = BsonUtils.ToHexChar((_c >> 8) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[22] = BsonUtils.ToHexChar((_c >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[22] = BsonUtils.ToHexChar((_c >> 4) & 0x0f);
Magic Number,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToString,The following statement contains a magic number: c[23] = BsonUtils.ToHexChar(_c & 0x0f);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: var a = x.High >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: var c = x.Low >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: temp = ((temp % divisor) << 32) + b;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: temp = ((temp % divisor) << 32) + c;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: temp = ((temp % divisor) << 32) + d;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: var high = (a << 32) + b;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Divide,The following statement contains a magic number: var low = (c << 32) + d;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var a = x.High >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var c = x.Low >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: c = c * y + (d >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: b = b * y + (c >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: a = a * y + (b >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var low = (c << 32) + (d & 0xffffffff);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var high = (a << 32) + (b & 0xffffffff);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var a = x >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var c = y >> 32;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var mid = (ad & 0xffffffff) + (bc & 0xffffffff) + (bd >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var high = ac + (ad >> 32) + (bc >> 32) + (mid >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var high = ac + (ad >> 32) + (bc >> 32) + (mid >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var high = ac + (ad >> 32) + (bc >> 32) + (mid >> 32);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,Multiply,The following statement contains a magic number: var low = (mid << 32) + (bd & 0xffffffff);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,TryParse,The following statement contains a magic number: int fragmentSize = s.Length % 9;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,TryParse,The following statement contains a magic number: fragmentSize = 9;
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,TryParse,The following statement contains a magic number: var combinedValue = UInt128.Multiply(value' (uint)1000000000);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,GetHashCode,The following statement contains a magic number: return 37 * _high.GetHashCode() + _low.GetHashCode();
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,ToString,The following statement contains a magic number: value = UInt128.Divide(value' (uint)1000000000' out remainder);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,ToString,The following statement contains a magic number: builder = new StringBuilder(38);
Magic Number,MongoDB.Bson,UInt128,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\UInt128.cs,ToString,The following statement contains a magic number: builder.Insert(0' "0"' 9 - fragmentString.Length);
Magic Number,MongoDB.Bson,PowerOf2,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\PowerOf2.cs,RoundUpToPowerOf2,The following statement contains a magic number: n = n | (n >> 2);
Magic Number,MongoDB.Bson,PowerOf2,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\PowerOf2.cs,RoundUpToPowerOf2,The following statement contains a magic number: n = n | (n >> 4);
Magic Number,MongoDB.Bson,PowerOf2,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\PowerOf2.cs,RoundUpToPowerOf2,The following statement contains a magic number: n = n | (n >> 8);
Magic Number,MongoDB.Bson,PowerOf2,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\PowerOf2.cs,RoundUpToPowerOf2,The following statement contains a magic number: n = n | (n >> 16);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: const int asciiZero = 48;
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: var a = (byte)(asciiZero + n % 10);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: n = n / 10;
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: var b = (byte)(asciiZero + n % 10);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: n = n / 10;
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: var c = (byte)(asciiZero + n % 10);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: n = n / 10;
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: var d = (byte)(asciiZero + n % 10);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: n = n / 10;
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: var e = (byte)(asciiZero + n % 10);
Magic Number,MongoDB.Bson.IO,ArrayElementNameAccelerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ArrayElementNameAccelerator.cs,CreateElementNameBytes,The following statement contains a magic number: n = n / 10;
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,ReadBinaryData,The following statement contains a magic number: size2 != size - 4
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryReader.cs,SkipValue,The following statement contains a magic number: switch (CurrentBsonType)              {                  case BsonType.Array: skip = ReadSize() - 4; break;                  case BsonType.Binary: skip = ReadSize() + 1; break;                  case BsonType.Boolean: skip = 1; break;                  case BsonType.DateTime: skip = 8; break;                  case BsonType.Document: skip = ReadSize() - 4; break;                  case BsonType.Decimal128: skip = 16; break;                  case BsonType.Double: skip = 8; break;                  case BsonType.Int32: skip = 4; break;                  case BsonType.Int64: skip = 8; break;                  case BsonType.JavaScript: skip = ReadSize(); break;                  case BsonType.JavaScriptWithScope: skip = ReadSize() - 4; break;                  case BsonType.MaxKey: skip = 0; break;                  case BsonType.MinKey: skip = 0; break;                  case BsonType.Null: skip = 0; break;                  case BsonType.ObjectId: skip = 12; break;                  case BsonType.RegularExpression: _bsonStream.SkipCString(); _bsonStream.SkipCString(); skip = 0; break;                  case BsonType.String: skip = ReadSize(); break;                  case BsonType.Symbol: skip = ReadSize(); break;                  case BsonType.Timestamp: skip = 8; break;                  case BsonType.Undefined: skip = 0; break;                  default: throw new BsonInternalException("Unexpected BsonType.");              }
Magic Number,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteBinaryData,The following statement contains a magic number: _bsonStream.WriteInt32(bytes.Length + 4);
Magic Number,MongoDB.Bson.IO,BsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonReader.cs,ReadRawBsonArray,The following statement contains a magic number: var startPosition = memoryStream.Position + 3;
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadCStringBytes,The following statement contains a magic number: var memoryStream = new MemoryStream(32);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadDouble,The following statement contains a magic number: this.ReadBytes(_temp' 0' 8);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: this.ReadBytes(_temp' 0' 4);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: return _temp[0] | (_temp[1] << 8) | (_temp[2] << 16) | (_temp[3] << 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: return _temp[0] | (_temp[1] << 8) | (_temp[2] << 16) | (_temp[3] << 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: return _temp[0] | (_temp[1] << 8) | (_temp[2] << 16) | (_temp[3] << 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: return _temp[0] | (_temp[1] << 8) | (_temp[2] << 16) | (_temp[3] << 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt32,The following statement contains a magic number: return _temp[0] | (_temp[1] << 8) | (_temp[2] << 16) | (_temp[3] << 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadInt64,The following statement contains a magic number: this.ReadBytes(_temp' 0' 8);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,ReadObjectId,The following statement contains a magic number: this.ReadBytes(_temp' 0' 12);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteDouble,The following statement contains a magic number: _stream.Write(bytes' 0' 8);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _temp[1] = (byte)(value >> 8);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _temp[2] = (byte)(value >> 16);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _temp[2] = (byte)(value >> 16);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _temp[3] = (byte)(value >> 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _temp[3] = (byte)(value >> 24);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt32,The following statement contains a magic number: _stream.Write(_temp' 0' 4);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteInt64,The following statement contains a magic number: _stream.Write(bytes' 0' 8);
Magic Number,MongoDB.Bson.IO,BsonStreamAdapter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonStreamAdapter.cs,WriteObjectId,The following statement contains a magic number: _stream.Write(_temp' 0' 12);
Magic Number,MongoDB.Bson.IO,BsonTrieNode<TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonTrie.cs,AddChild,The following statement contains a magic number: childrenIndexes[i] = 255;
Magic Number,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,WriteRawBsonArray,The following statement contains a magic number: var documentLength = slice.Length + 8;
Magic Number,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,ThrowInvalidState,The following statement contains a magic number: var typeName = methodName.Substring(5);
Magic Number,MongoDB.Bson.IO,BsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonWriter.cs,ThrowInvalidState,The following statement contains a magic number: typeName = typeName.Substring(5);
Magic Number,MongoDB.Bson.IO,ByteArrayBuffer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteArrayBuffer.cs,EnsureCapacity,The following statement contains a magic number: var powerOf2 = Math.Max(32' PowerOf2.RoundUpToPowerOf2(minimumCapacity));
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadDecimal128,The following statement contains a magic number: ThrowIfEndOfStream(16);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadDouble,The following statement contains a magic number: ThrowIfEndOfStream(8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadDouble,The following statement contains a magic number: _position += 8;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadDouble,The following statement contains a magic number: segment.Count >= 8
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: ThrowIfEndOfStream(4);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: _position += 4;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: return bytes[offset] | (bytes[offset + 1] << 8) | (bytes[offset + 2] << 16) | (bytes[offset + 3] << 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: return bytes[offset] | (bytes[offset + 1] << 8) | (bytes[offset + 2] << 16) | (bytes[offset + 3] << 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: return bytes[offset] | (bytes[offset + 1] << 8) | (bytes[offset + 2] << 16) | (bytes[offset + 3] << 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: return bytes[offset] | (bytes[offset + 1] << 8) | (bytes[offset + 2] << 16) | (bytes[offset + 3] << 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: return bytes[offset] | (bytes[offset + 1] << 8) | (bytes[offset + 2] << 16) | (bytes[offset + 3] << 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt32,The following statement contains a magic number: segment.Count >= 4
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt64,The following statement contains a magic number: ThrowIfEndOfStream(8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt64,The following statement contains a magic number: _position += 8;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadInt64,The following statement contains a magic number: segment.Count >= 8
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadObjectId,The following statement contains a magic number: ThrowIfEndOfStream(12);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadObjectId,The following statement contains a magic number: _position += 12;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadObjectId,The following statement contains a magic number: segment.Count >= 12
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,ReadSlice,The following statement contains a magic number: ThrowIfEndOfStream(length - 4);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteDouble,The following statement contains a magic number: PrepareToWrite(8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteDouble,The following statement contains a magic number: _buffer.SetBytes(_position' bytes' 0' 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteDouble,The following statement contains a magic number: SetPositionAfterWrite(_position + 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: PrepareToWrite(4);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Array[segment.Offset + 1] = (byte)(value >> 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Array[segment.Offset + 2] = (byte)(value >> 16);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Array[segment.Offset + 2] = (byte)(value >> 16);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Array[segment.Offset + 3] = (byte)(value >> 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Array[segment.Offset + 3] = (byte)(value >> 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: segment.Count >= 4
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt32,The following statement contains a magic number: SetPositionAfterWrite(_position + 4);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt64,The following statement contains a magic number: PrepareToWrite(8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt64,The following statement contains a magic number: _buffer.SetBytes(_position' bytes' 0' 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteInt64,The following statement contains a magic number: SetPositionAfterWrite(_position + 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteObjectId,The following statement contains a magic number: PrepareToWrite(12);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteObjectId,The following statement contains a magic number: segment.Count >= 12
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteObjectId,The following statement contains a magic number: SetPositionAfterWrite(_position + 12);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: var maxLength = encoding.GetMaxByteCount(value.Length) + 5;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: actualLength = encoding.GetBytes(value' 0' value.Length' segment.Array' segment.Offset + 4);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 1] = (byte)(lengthPlusOne >> 8);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 2] = (byte)(lengthPlusOne >> 16);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 2] = (byte)(lengthPlusOne >> 16);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 3] = (byte)(lengthPlusOne >> 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 3] = (byte)(lengthPlusOne >> 24);
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: segment.Array[segment.Offset + 4 + actualLength] = 0;
Magic Number,MongoDB.Bson.IO,ByteBufferStream,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ByteBufferStream.cs,WriteString,The following statement contains a magic number: SetPositionAfterWrite(_position + actualLength + 5);
Magic Number,MongoDB.Bson.IO,CStringUtf8Encoding,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\CStringUtf8Encoding.cs,GetMaxByteCount,The following statement contains a magic number: return charCount * 3;
Magic Number,MongoDB.Bson.IO,ElementAppendingBsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ElementAppendingBsonWriter.cs,WriteRawBsonDocument,The following statement contains a magic number: var lengthBytes = new byte[4];
Magic Number,MongoDB.Bson.IO,ElementAppendingBsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\ElementAppendingBsonWriter.cs,WriteRawBsonDocument,The following statement contains a magic number: slice.GetBytes(0' lengthBytes' 0' 4);
Magic Number,MongoDB.Bson.IO,InputBufferChunkSource,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\InputBufferChunkSource.cs,GetChunk,The following statement contains a magic number: powerOf2Size = powerOf2Size / 2;
Magic Number,MongoDB.Bson.IO,JsonBuffer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonBuffer.cs,JsonBuffer,The following statement contains a magic number: _buffer = new StringBuilder(256);
Magic Number,MongoDB.Bson.IO,JsonBuffer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonBuffer.cs,ResetBuffer,The following statement contains a magic number: var minimumTrimCount = 256;
Magic Number,MongoDB.Bson.IO,JsonBuffer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonBuffer.cs,ReadMoreIfAtEndOfBuffer,The following statement contains a magic number: var blockSize = 1024;
Magic Number,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,IsValidBinaryDataSubTypeString,The following statement contains a magic number: return                  value.Length >= 1 &&                  value.Length <= 2 &&                  HexUtils.IsValidHexString(value);
Magic Number,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseBinDataExtendedJsonLegacy,The following statement contains a magic number: subType = (BsonBinarySubType)Convert.ToInt32(subTypeToken.StringValue' 16);
Magic Number,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,FormatMessage,The following statement contains a magic number: var maxLength = 20;
Magic Number,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetStringToken,The following statement contains a magic number: switch (c)                  {                      case '\\':                          c = buffer.Read();                          switch (c)                          {                              case '\'': sb.Append('\''); break;                              case '"': sb.Append('"'); break;                              case '\\': sb.Append('\\'); break;                              case '/': sb.Append('/'); break;                              case 'b': sb.Append('\b'); break;                              case 'f': sb.Append('\f'); break;                              case 'n': sb.Append('\n'); break;                              case 'r': sb.Append('\r'); break;                              case 't': sb.Append('\t'); break;                              case 'u':                                  var u1 = buffer.Read();                                  var u2 = buffer.Read();                                  var u3 = buffer.Read();                                  var u4 = buffer.Read();                                  if (u4 != -1)                                  {                                      var hex = new string(new char[] { (char)u1' (char)u2' (char)u3' (char)u4 });                                      var n = Convert.ToInt32(hex' 16);                                      sb.Append((char)n);                                  }                                  break;                              default:                                  if (c != -1)                                  {                                      var message = string.Format("Invalid escape sequence in JSON string '\\{0}'."' (char)c);                                      throw new FormatException(message);                                  }                                  break;                          }                          break;                      default:                          if (c == quoteCharacter)                          {                              var lexeme = buffer.GetSubstring(start' buffer.Position - start);                              return new StringJsonToken(JsonTokenType.String' lexeme' sb.ToString());                          }                          if (c != -1)                          {                              sb.Append((char)c);                          }                          break;                  }
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,WriteTimestamp,The following statement contains a magic number: var secondsSinceEpoch = (int)((value >> 32) & 0xffffffff);
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: bytes.Length != 16
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.IO,JsonWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonWriter.cs,GuidToString,The following statement contains a magic number: var parts = new string[]                  {                      s.Substring(0' 8)'                      s.Substring(8' 4)'                      s.Substring(12' 4)'                      s.Substring(16' 4)'                      s.Substring(20' 12)                  };
Magic Number,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetSerializer,The following statement contains a magic number: switch (type.GetArrayRank())                  {                      case 1:                          var arraySerializerDefinition = typeof(ArraySerializer<>);                          return CreateGenericSerializer(arraySerializerDefinition' new[] { elementType }' serializerRegistry);                      case 2:                          var twoDimensionalArraySerializerDefinition = typeof(TwoDimensionalArraySerializer<>);                          return CreateGenericSerializer(twoDimensionalArraySerializerDefinition' new[] { elementType }' serializerRegistry);                      case 3:                          var threeDimensionalArraySerializerDefinition = typeof(ThreeDimensionalArraySerializer<>);                          return CreateGenericSerializer(threeDimensionalArraySerializerDefinition' new[] { elementType }' serializerRegistry);                      default:                          var message = string.Format("No serializer found for array for rank {0}."' type.GetArrayRank());                          throw new BsonSerializationException(message);                  }
Magic Number,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetSerializer,The following statement contains a magic number: switch (type.GetArrayRank())                  {                      case 1:                          var arraySerializerDefinition = typeof(ArraySerializer<>);                          return CreateGenericSerializer(arraySerializerDefinition' new[] { elementType }' serializerRegistry);                      case 2:                          var twoDimensionalArraySerializerDefinition = typeof(TwoDimensionalArraySerializer<>);                          return CreateGenericSerializer(twoDimensionalArraySerializerDefinition' new[] { elementType }' serializerRegistry);                      case 3:                          var threeDimensionalArraySerializerDefinition = typeof(ThreeDimensionalArraySerializer<>);                          return CreateGenericSerializer(threeDimensionalArraySerializerDefinition' new[] { elementType }' serializerRegistry);                      default:                          var message = string.Format("No serializer found for array for rank {0}."' type.GetArrayRank());                          throw new BsonSerializationException(message);                  }
Magic Number,MongoDB.Bson.Serialization,CollectionsSerializationProvider,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\CollectionsSerializationProvider.cs,GetReadOnlyDictionarySerializer,The following statement contains a magic number: !typeInfo.IsGenericType                   || typeInfo.IsGenericTypeDefinition                   || typeInfo.GetGenericArguments().Length != 2
Magic Number,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,The following statement contains a magic number: memberMapBitArray[memberMapIndex >> 5] |= 1U << (memberMapIndex & 31);
Magic Number,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,The following statement contains a magic number: memberMapBitArray[memberMapIndex >> 5] |= 1U << (memberMapIndex & 31);
Magic Number,MongoDB.Bson.Serialization,BsonClassMapSerializer<TClass>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,DeserializeClass,The following statement contains a magic number: var memberMapIndex = bitArrayIndex << 5;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetBitArray,The following statement contains a magic number: var bitArrayOffset = memberCount & 31;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetBitArray,The following statement contains a magic number: var bitArrayLength = memberCount >> 5;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: bitBlock >>= 16;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: leastSignificantBit |= 16;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: (bitBlock & 65535) == 0
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: bitBlock >>= 8;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: leastSignificantBit |= 8;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: (bitBlock & 255) == 0
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: bitBlock >>= 4;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: leastSignificantBit |= 4;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: (bitBlock & 15) == 0
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: bitBlock >>= 2;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: leastSignificantBit |= 2;
Magic Number,MongoDB.Bson.Serialization,FastMemberMapHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BsonClassMapSerializer.cs,GetLeastSignificantBit,The following statement contains a magic number: (bitBlock & 3) == 0
Magic Number,MongoDB.Bson.Serialization,TypeNameDiscriminator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeNameDiscriminator.cs,TryParseGenericTypeName,The following statement contains a magic number: var typeArgumentNamesString = typeName.Substring(leftBracketIndex + 1' typeName.Length - leftBracketIndex - 2);
Magic Number,MongoDB.Bson.Serialization.Conventions,AttributeConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\AttributeConventionPack.cs,Apply,The following statement contains a magic number: var groupings = attributes.GroupBy(a => (a is BsonSerializerAttribute) ? 1 : 2);
Magic Number,MongoDB.Bson.Serialization.Conventions,ConventionBase,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ConventionBase.cs,GetName,The following statement contains a magic number: return name.Substring(0' name.Length - 10);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,AscendingGuidGenerator,The following statement contains a magic number: __machineProcessId = new byte[5]              {                  machineHash[0]'                  machineHash[1]'                  machineHash[2]'                  (byte)(processId >> 8)'                  (byte)(processId)              };
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,AscendingGuidGenerator,The following statement contains a magic number: __machineProcessId = new byte[5]              {                  machineHash[0]'                  machineHash[1]'                  machineHash[2]'                  (byte)(processId >> 8)'                  (byte)(processId)              };
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,AscendingGuidGenerator,The following statement contains a magic number: __machineProcessId = new byte[5]              {                  machineHash[0]'                  machineHash[1]'                  machineHash[2]'                  (byte)(processId >> 8)'                  (byte)(processId)              };
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: var a = (int)(tickCount >> 32);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: var b = (short)(tickCount >> 16);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: var d = new byte[8];
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: Array.Copy(machineProcessId' d' 5);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: d[5] = (byte)(increment >> 16);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: d[5] = (byte)(increment >> 16);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: d[6] = (byte)(increment >> 8);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: d[6] = (byte)(increment >> 8);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,AscendingGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\AscendingGuidGenerator.cs,GenerateId,The following statement contains a magic number: d[7] = (byte)(increment);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: var baseDate = new DateTime(1900' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: var timeTicks = (int)(timestamp.TimeOfDay.Ticks * 300 / TimeSpan.TicksPerSecond);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(days)' 0' bytes' 10' 2);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(days)' 0' bytes' 10' 2);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(timeTicks)' 0' bytes' 12' 4);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(timeTicks)' 0' bytes' 12' 4);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Reverse(bytes' 10' 2);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Reverse(bytes' 10' 2);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Reverse(bytes' 12' 4);
Magic Number,MongoDB.Bson.Serialization.IdGenerators,CombGuidGenerator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\IdGenerators\CombGuidGenerator.cs,NewCombGuid,The following statement contains a magic number: Array.Reverse(bytes' 12' 4);
Magic Number,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,SerializeValue,The following statement contains a magic number: switch (_representation)              {                  case BsonType.Binary:                      if ((value.Length % 8) == 0)                      {                          bsonWriter.WriteBytes(GetBytes(value));                      }                      else                      {                          bsonWriter.WriteStartDocument();                          bsonWriter.WriteInt32("Length"' value.Length);                          bsonWriter.WriteBytes("Bytes"' GetBytes(value));                          bsonWriter.WriteEndDocument();                      }                      break;                    case BsonType.String:                      var sb = new StringBuilder(value.Length);                      for (int i = 0; i < value.Length; i++)                      {                          sb.Append(value[i] ? '1' : '0');                      }                      bsonWriter.WriteString(sb.ToString());                      break;                    default:                      var message = string.Format("'{0}' is not a valid BitArray representation."' _representation);                      throw new BsonSerializationException(message);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,GetBytes,The following statement contains a magic number: var bytes = new byte[(bitArray.Length + 7) / 8];
Magic Number,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,GetBytes,The following statement contains a magic number: var bytes = new byte[(bitArray.Length + 7) / 8];
Magic Number,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,GetBytes,The following statement contains a magic number: var index = i / 8;
Magic Number,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,GetBytes,The following statement contains a magic number: var bit = i % 8;
Magic Number,MongoDB.Bson.Serialization.Serializers,ByteArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteArraySerializer.cs,DeserializeValue,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      return bsonReader.ReadBytes();                    case BsonType.String:                      var s = bsonReader.ReadString();                      if ((s.Length % 2) != 0)                      {                          s = "0" + s; // prepend a zero to make length even                      }                      var bytes = new byte[s.Length / 2];                      for (int i = 0; i < s.Length; i += 2)                      {                          var hex = s.Substring(i' 2);                          var b = byte.Parse(hex' NumberStyles.HexNumber);                          bytes[i / 2] = b;                      }                      return bytes;                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,ByteArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteArraySerializer.cs,DeserializeValue,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      return bsonReader.ReadBytes();                    case BsonType.String:                      var s = bsonReader.ReadString();                      if ((s.Length % 2) != 0)                      {                          s = "0" + s; // prepend a zero to make length even                      }                      var bytes = new byte[s.Length / 2];                      for (int i = 0; i < s.Length; i += 2)                      {                          var hex = s.Substring(i' 2);                          var b = byte.Parse(hex' NumberStyles.HexNumber);                          bytes[i / 2] = b;                      }                      return bytes;                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,ByteArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteArraySerializer.cs,DeserializeValue,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      return bsonReader.ReadBytes();                    case BsonType.String:                      var s = bsonReader.ReadString();                      if ((s.Length % 2) != 0)                      {                          s = "0" + s; // prepend a zero to make length even                      }                      var bytes = new byte[s.Length / 2];                      for (int i = 0; i < s.Length; i += 2)                      {                          var hex = s.Substring(i' 2);                          var b = byte.Parse(hex' NumberStyles.HexNumber);                          bytes[i / 2] = b;                      }                      return bytes;                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,ByteArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteArraySerializer.cs,DeserializeValue,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      return bsonReader.ReadBytes();                    case BsonType.String:                      var s = bsonReader.ReadString();                      if ((s.Length % 2) != 0)                      {                          s = "0" + s; // prepend a zero to make length even                      }                      var bytes = new byte[s.Length / 2];                      for (int i = 0; i < s.Length; i += 2)                      {                          var hex = s.Substring(i' 2);                          var b = byte.Parse(hex' NumberStyles.HexNumber);                          bytes[i / 2] = b;                      }                      return bytes;                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,ByteArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ByteArraySerializer.cs,DeserializeValue,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      return bsonReader.ReadBytes();                    case BsonType.String:                      var s = bsonReader.ReadString();                      if ((s.Length % 2) != 0)                      {                          s = "0" + s; // prepend a zero to make length even                      }                      var bytes = new byte[s.Length / 2];                      for (int i = 0; i < s.Length; i += 2)                      {                          var hex = s.Substring(i' 2);                          var b = byte.Parse(hex' NumberStyles.HexNumber);                          bytes[i / 2] = b;                      }                      return bytes;                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Array:                      var array = BsonArraySerializer.Instance.Deserialize(context);                      var bits = new int[4];                      bits[0] = array[0].AsInt32;                      bits[1] = array[1].AsInt32;                      bits[2] = array[2].AsInt32;                      bits[3] = array[3].AsInt32;                      return new decimal(bits);                    case BsonType.Decimal128:                      return _converter.ToDecimal(bsonReader.ReadDecimal128());                    case BsonType.Double:                      return _converter.ToDecimal(bsonReader.ReadDouble());                    case BsonType.Int32:                      return _converter.ToDecimal(bsonReader.ReadInt32());                    case BsonType.Int64:                      return _converter.ToDecimal(bsonReader.ReadInt64());                    case BsonType.String:                      return JsonConvert.ToDecimal(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Array:                      var array = BsonArraySerializer.Instance.Deserialize(context);                      var bits = new int[4];                      bits[0] = array[0].AsInt32;                      bits[1] = array[1].AsInt32;                      bits[2] = array[2].AsInt32;                      bits[3] = array[3].AsInt32;                      return new decimal(bits);                    case BsonType.Decimal128:                      return _converter.ToDecimal(bsonReader.ReadDecimal128());                    case BsonType.Double:                      return _converter.ToDecimal(bsonReader.ReadDouble());                    case BsonType.Int32:                      return _converter.ToDecimal(bsonReader.ReadInt32());                    case BsonType.Int64:                      return _converter.ToDecimal(bsonReader.ReadInt64());                    case BsonType.String:                      return JsonConvert.ToDecimal(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Array:                      var array = BsonArraySerializer.Instance.Deserialize(context);                      var bits = new int[4];                      bits[0] = array[0].AsInt32;                      bits[1] = array[1].AsInt32;                      bits[2] = array[2].AsInt32;                      bits[3] = array[3].AsInt32;                      return new decimal(bits);                    case BsonType.Decimal128:                      return _converter.ToDecimal(bsonReader.ReadDecimal128());                    case BsonType.Double:                      return _converter.ToDecimal(bsonReader.ReadDouble());                    case BsonType.Int32:                      return _converter.ToDecimal(bsonReader.ReadInt32());                    case BsonType.Int64:                      return _converter.ToDecimal(bsonReader.ReadInt64());                    case BsonType.String:                      return JsonConvert.ToDecimal(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Array:                      var array = BsonArraySerializer.Instance.Deserialize(context);                      var bits = new int[4];                      bits[0] = array[0].AsInt32;                      bits[1] = array[1].AsInt32;                      bits[2] = array[2].AsInt32;                      bits[3] = array[3].AsInt32;                      return new decimal(bits);                    case BsonType.Decimal128:                      return _converter.ToDecimal(bsonReader.ReadDecimal128());                    case BsonType.Double:                      return _converter.ToDecimal(bsonReader.ReadDouble());                    case BsonType.Int32:                      return _converter.ToDecimal(bsonReader.ReadInt32());                    case BsonType.Int64:                      return _converter.ToDecimal(bsonReader.ReadInt64());                    case BsonType.String:                      return JsonConvert.ToDecimal(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Array:                      var array = BsonArraySerializer.Instance.Deserialize(context);                      var bits = new int[4];                      bits[0] = array[0].AsInt32;                      bits[1] = array[1].AsInt32;                      bits[2] = array[2].AsInt32;                      bits[3] = array[3].AsInt32;                      return new decimal(bits);                    case BsonType.Decimal128:                      return _converter.ToDecimal(bsonReader.ReadDecimal128());                    case BsonType.Double:                      return _converter.ToDecimal(bsonReader.ReadDouble());                    case BsonType.Int32:                      return _converter.ToDecimal(bsonReader.ReadInt32());                    case BsonType.Int64:                      return _converter.ToDecimal(bsonReader.ReadInt64());                    case BsonType.String:                      return JsonConvert.ToDecimal(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Serialize,The following statement contains a magic number: switch (_representation)              {                  case BsonType.Array:                      bsonWriter.WriteStartArray();                      var bits = Decimal.GetBits(value);                      bsonWriter.WriteInt32(bits[0]);                      bsonWriter.WriteInt32(bits[1]);                      bsonWriter.WriteInt32(bits[2]);                      bsonWriter.WriteInt32(bits[3]);                      bsonWriter.WriteEndArray();                      break;                    case BsonType.Decimal128:                      bsonWriter.WriteDecimal128(_converter.ToDecimal128(value));                      break;                    case BsonType.Double:                      bsonWriter.WriteDouble(_converter.ToDouble(value));                      break;                    case BsonType.Int32:                      bsonWriter.WriteInt32(_converter.ToInt32(value));                      break;                    case BsonType.Int64:                      bsonWriter.WriteInt64(_converter.ToInt64(value));                      break;                    case BsonType.String:                      bsonWriter.WriteString(JsonConvert.ToString(value));                      break;                    default:                      var message = string.Format("'{0}' is not a valid Decimal representation."' _representation);                      throw new BsonSerializationException(message);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,DecimalSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DecimalSerializer.cs,Serialize,The following statement contains a magic number: switch (_representation)              {                  case BsonType.Array:                      bsonWriter.WriteStartArray();                      var bits = Decimal.GetBits(value);                      bsonWriter.WriteInt32(bits[0]);                      bsonWriter.WriteInt32(bits[1]);                      bsonWriter.WriteInt32(bits[2]);                      bsonWriter.WriteInt32(bits[3]);                      bsonWriter.WriteEndArray();                      break;                    case BsonType.Decimal128:                      bsonWriter.WriteDecimal128(_converter.ToDecimal128(value));                      break;                    case BsonType.Double:                      bsonWriter.WriteDouble(_converter.ToDouble(value));                      break;                    case BsonType.Int32:                      bsonWriter.WriteInt32(_converter.ToInt32(value));                      break;                    case BsonType.Int64:                      bsonWriter.WriteInt64(_converter.ToInt64(value));                      break;                    case BsonType.String:                      bsonWriter.WriteString(JsonConvert.ToString(value));                      break;                    default:                      var message = string.Format("'{0}' is not a valid Decimal representation."' _representation);                      throw new BsonSerializationException(message);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,GuidSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\GuidSerializer.cs,Deserialize,The following statement contains a magic number: switch (bsonType)              {                  case BsonType.Binary:                      var binaryData = bsonReader.ReadBinaryData();                      var bytes = binaryData.Bytes;                      var subType = binaryData.SubType;                      var guidRepresentation = binaryData.GuidRepresentation;                      if (bytes.Length != 16)                      {                          message = string.Format("Expected length to be 16' not {0}."' bytes.Length);                          throw new FormatException(message);                      }                      if (subType != BsonBinarySubType.UuidStandard && subType != BsonBinarySubType.UuidLegacy)                      {                          message = string.Format("Expected binary sub type to be UuidStandard or UuidLegacy' not {0}."' subType);                          throw new FormatException(message);                      }                      if (guidRepresentation == GuidRepresentation.Unspecified)                      {                          throw new BsonSerializationException("GuidSerializer cannot deserialize a Guid when GuidRepresentation is Unspecified.");                      }                      return GuidConverter.FromBytes(bytes' guidRepresentation);                    case BsonType.String:                      return new Guid(bsonReader.ReadString());                    default:                      throw CreateCannotDeserializeFromBsonTypeException(bsonType);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,SerializerHelper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\SerializerHelper.cs,SerializerHelper,The following statement contains a magic number: members.Length > 64
Magic Number,MongoDB.Bson.Serialization.Serializers,ThreeDimensionalArraySerializer<TItem>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ThreeDimensionalArraySerializer.cs,SerializeValue,The following statement contains a magic number: var length3 = value.GetLength(2);
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,FromDouble,The following statement contains a magic number: return TimeSpan.FromTicks((long)(value / 100.0));
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,FromInt32,The following statement contains a magic number: return TimeSpan.FromTicks(value / 100);
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,FromInt64,The following statement contains a magic number: return TimeSpan.FromTicks(value / 100);
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,TicksPerUnit,The following statement contains a magic number: switch (units)              {                  case TimeSpanUnits.Days: return TimeSpan.TicksPerDay;                  case TimeSpanUnits.Hours: return TimeSpan.TicksPerHour;                  case TimeSpanUnits.Minutes: return TimeSpan.TicksPerMinute;                  case TimeSpanUnits.Seconds: return TimeSpan.TicksPerSecond;                  case TimeSpanUnits.Milliseconds: return TimeSpan.TicksPerMillisecond;                  case TimeSpanUnits.Microseconds: return TimeSpan.TicksPerMillisecond / 1000;                  case TimeSpanUnits.Ticks: return 1;                  default:                      var message = string.Format("Invalid TimeSpanUnits value: {0}."' units);                      throw new ArgumentException(message);              }
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,ToDouble,The following statement contains a magic number: return (double)(timeSpan.Ticks) * 100.0;
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,ToInt32,The following statement contains a magic number: return (int)(timeSpan.Ticks * 100);
Magic Number,MongoDB.Bson.Serialization.Serializers,TimeSpanSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\TimeSpanSerializer.cs,ToInt64,The following statement contains a magic number: return timeSpan.Ticks * 100;
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hasher,The following statement contains a magic number: _hashCode = 17;
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + ((obj == null) ? -1 : obj.Value.GetHashCode());
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + ((obj == null) ? -1 : obj.GetHashCode());
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,HashElements,The following statement contains a magic number: _hashCode = 37 * _hashCode + -1;
Magic Number,MongoDB.Shared,Hasher,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,HashStructElements,The following statement contains a magic number: _hashCode = 37 * _hashCode + value.GetHashCode();
Duplicate Code,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToDotNetValue,The method contains a code clone-set at the following line numbers (starting from the method definition): ((78' 98)' (106' 126))
Missing Default,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToBsonValue,The following switch statement is missing a default case: switch (Type.GetTypeCode(valueType))                  {                      case TypeCode.Byte: value = (int)(byte)value; break;                      case TypeCode.Int16: value = (int)(short)value; break;                      case TypeCode.Int32: value = (int)value; break;                      case TypeCode.Int64: value = (long)value; break;                      case TypeCode.SByte: value = (int)(sbyte)value; break;                      case TypeCode.UInt16: value = (int)(ushort)value; break;                      case TypeCode.UInt32: value = (long)(uint)value; break;                      case TypeCode.UInt64: value = (long)(ulong)value; break;                  }
Missing Default,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,MapToBsonValue,The following switch statement is missing a default case: switch (bsonType)              {                  case BsonType.Array:                      if (value is IEnumerable)                      {                          return new BsonArray((IEnumerable)value);                      }                      break;                  case BsonType.Document:                      if (value is IEnumerable<KeyValuePair<string' object>>)                      {                          return new BsonDocument((IEnumerable<KeyValuePair<string' object>>)value);                      }                      if (value is IDictionary)                      {                          return new BsonDocument((IDictionary)value);                      }                      break;              }
Missing Default,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,TryMapToBsonValue,The following switch statement is missing a default case: switch (Type.GetTypeCode(valueType))                  {                      case TypeCode.Byte: value = (int)(byte)value; break;                      case TypeCode.Int16: value = (int)(short)value; break;                      case TypeCode.Int32: value = (int)value; break;                      case TypeCode.Int64: value = (long)value; break;                      case TypeCode.SByte: value = (int)(sbyte)value; break;                      case TypeCode.UInt16: value = (int)(ushort)value; break;                      case TypeCode.UInt32: value = (long)(uint)value; break;                      case TypeCode.UInt64: value = (long)(ulong)value; break;                  }
Missing Default,MongoDB.Bson,BsonTypeMapper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\BsonTypeMapper.cs,Convert,The following switch statement is missing a default case: switch (conversion)              {                  // note: I expect this switch statement to be compiled using a jump table and therefore to be very efficient                  case Conversion.None: return (BsonValue)value;                  case Conversion.BoolToBsonBoolean: return (BsonBoolean)((bool)value);                  case Conversion.BsonJavaScriptToBsonJavaScriptWithScope: return new BsonJavaScriptWithScope(((BsonJavaScript)value).Code' new BsonDocument());                  case Conversion.BsonMaxKeyToBsonBoolean: return BsonBoolean.True;                  case Conversion.BsonMinKeyToBsonBoolean: return BsonBoolean.True;                  case Conversion.BsonNullToBsonBoolean: return BsonBoolean.False;                  case Conversion.BsonUndefinedToBsonBoolean: return BsonBoolean.False;                  case Conversion.ByteArrayToBsonBinary: return new BsonBinaryData((byte[])value);                  case Conversion.ByteArrayToBsonObjectId: return new BsonObjectId(new ObjectId((byte[])value));                  case Conversion.ByteToBsonBoolean: return (BsonBoolean)((byte)value != 0);                  case Conversion.ByteToBsonDecimal128: return (BsonDecimal128)(Decimal128)(byte)value;                  case Conversion.ByteToBsonDouble: return (BsonDouble)(double)(byte)value;                  case Conversion.ByteToBsonInt32: return (BsonInt32)(int)(byte)value;                  case Conversion.ByteToBsonInt64: return (BsonInt64)(long)(byte)value;                  case Conversion.CharToBsonBoolean: return (BsonBoolean)((char)value != 0);                  case Conversion.CharToBsonDecimal128: return (BsonDecimal128)(Decimal128)(char)value;                  case Conversion.CharToBsonDouble: return (BsonDouble)(double)(char)value;                  case Conversion.CharToBsonInt32: return (BsonInt32)(int)(char)value;                  case Conversion.CharToBsonInt64: return (BsonInt64)(long)(char)value;                  case Conversion.DateTimeOffsetToBsonDateTime: return new BsonDateTime(((DateTimeOffset)value).UtcDateTime);                  case Conversion.DateTimeToBsonDateTime: return new BsonDateTime((DateTime)value);                  case Conversion.DecimalToBsonBoolean: return (BsonBoolean)((decimal)value != 0M);                  case Conversion.DecimalToBsonDecimal128: return (BsonDecimal128)(Decimal128)(decimal)value;                  case Conversion.Decimal128ToBsonBoolean: var d128 = (Decimal128)value; return (BsonBoolean)(!(Decimal128.IsNaN(d128) || d128 == Decimal128.Zero));                  case Conversion.Decimal128ToBsonDecimal128: return (BsonDecimal128)(Decimal128)value;                  case Conversion.DoubleToBsonBoolean: var d = (double)value; return (BsonBoolean)(!(double.IsNaN(d) || d == 0.0));                  case Conversion.DoubleToBsonDecimal128: return (BsonDecimal128)(Decimal128)(double)value;                  case Conversion.DoubleToBsonDouble: return (BsonDouble)(double)value;                  case Conversion.GuidToBsonBinary: return new BsonBinaryData((Guid)value);                  case Conversion.Int16ToBsonBoolean: return (BsonBoolean)((short)value != 0);                  case Conversion.Int16ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(short)value;                  case Conversion.Int16ToBsonDouble: return (BsonDouble)(double)(short)value;                  case Conversion.Int16ToBsonInt32: return (BsonInt32)(int)(short)value;                  case Conversion.Int16ToBsonInt64: return (BsonInt64)(long)(short)value;                  case Conversion.Int32ToBsonBoolean: return (BsonBoolean)((int)value != 0);                  case Conversion.Int32ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(int)value;                  case Conversion.Int32ToBsonDouble: return (BsonDouble)(double)(int)value;                  case Conversion.Int32ToBsonInt32: return (BsonInt32)(int)value;                  case Conversion.Int32ToBsonInt64: return (BsonInt64)(long)(int)value;                  case Conversion.Int64ToBsonBoolean: return (BsonBoolean)((long)value != 0);                  case Conversion.Int64ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(long)value;                  case Conversion.Int64ToBsonDouble: return (BsonDouble)(double)(long)value;                  case Conversion.Int64ToBsonTimestamp: return new BsonTimestamp((long)value);                  case Conversion.Int64ToBsonInt64: return (BsonInt64)(long)value;                  case Conversion.ObjectIdToBsonObjectId: return new BsonObjectId((ObjectId)value);                  case Conversion.RegexToBsonRegularExpression: return new BsonRegularExpression((Regex)value);                  case Conversion.SByteToBsonBoolean: return (BsonBoolean)((sbyte)value != 0);                  case Conversion.SByteToBsonDecimal128: return (BsonDecimal128)(Decimal128)(sbyte)value;                  case Conversion.SByteToBsonDouble: return (BsonDouble)(double)(sbyte)value;                  case Conversion.SByteToBsonInt32: return (BsonInt32)(int)(sbyte)value;                  case Conversion.SByteToBsonInt64: return (BsonInt64)(long)(sbyte)value;                  case Conversion.SingleToBsonBoolean: var f = (float)value; return (BsonBoolean)(!(float.IsNaN(f) || f == 0.0f));                  case Conversion.SingleToBsonDecimal128: return (BsonDecimal128)(Decimal128)(float)value;                  case Conversion.SingleToBsonDouble: return (BsonDouble)(double)(float)value;                  case Conversion.StringToBsonBoolean: return (BsonBoolean)((string)value != "");                  case Conversion.StringToBsonDateTime:                      var formats = new string[] { "yyyy-MM-ddK"' "yyyy-MM-ddTHH:mm:ssK"' "yyyy-MM-ddTHH:mm:ss.FFFFFFFK" };                      var dt = DateTime.ParseExact((string)value' formats' null' DateTimeStyles.AdjustToUniversal | DateTimeStyles.AssumeUniversal);                      return new BsonDateTime(dt);                  case Conversion.StringToBsonDecimal128: return (BsonDecimal128)JsonConvert.ToDecimal128((string)value);                  case Conversion.StringToBsonDouble: return (BsonDouble)JsonConvert.ToDouble((string)value);                  case Conversion.StringToBsonInt32: return (BsonInt32)JsonConvert.ToInt32((string)value);                  case Conversion.StringToBsonInt64: return (BsonInt64)JsonConvert.ToInt64((string)value);                  case Conversion.StringToBsonJavaScript: return new BsonJavaScript((string)value);                  case Conversion.StringToBsonJavaScriptWithScope: return new BsonJavaScriptWithScope((string)value' new BsonDocument());                  case Conversion.StringToBsonObjectId: return new BsonObjectId(ObjectId.Parse((string)value));                  case Conversion.StringToBsonRegularExpression: return new BsonRegularExpression((string)value);                  case Conversion.StringToBsonString: return (BsonString)(string)value;                  case Conversion.StringToBsonSymbol: return BsonSymbolTable.Lookup((string)value);                  case Conversion.StringToBsonTimestamp: return new BsonTimestamp(JsonConvert.ToInt64((string)value));                  case Conversion.UInt16ToBsonBoolean: return (BsonValue)((ushort)value != 0);                  case Conversion.UInt16ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(ushort)value;                  case Conversion.UInt16ToBsonDouble: return (BsonDouble)(double)(ushort)value;                  case Conversion.UInt16ToBsonInt32: return (BsonInt32)(int)(ushort)value;                  case Conversion.UInt16ToBsonInt64: return (BsonInt64)(long)(ushort)value;                  case Conversion.UInt32ToBsonBoolean: return (BsonBoolean)((uint)value != 0);                  case Conversion.UInt32ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(uint)value;                  case Conversion.UInt32ToBsonDouble: return (BsonDouble)(double)(uint)value;                  case Conversion.UInt32ToBsonInt32: return (BsonInt32)(int)(uint)value;                  case Conversion.UInt32ToBsonInt64: return (BsonInt64)(long)(uint)value;                  case Conversion.UInt64ToBsonBoolean: return (BsonBoolean)((ulong)value != 0);                  case Conversion.UInt64ToBsonDecimal128: return (BsonDecimal128)(Decimal128)(ulong)value;                  case Conversion.UInt64ToBsonDouble: return (BsonDouble)(double)(ulong)value;                  case Conversion.UInt64ToBsonInt64: return (BsonInt64)(long)(ulong)value;                  case Conversion.UInt64ToBsonTimestamp: return new BsonTimestamp((long)(ulong)value);              }
Missing Default,MongoDB.Bson,ObjectId,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\ObjectModel\ObjectId.cs,ToType,The following switch statement is missing a default case: switch (Type.GetTypeCode(conversionType))              {                  case TypeCode.String:                      return ((IConvertible)this).ToString(provider);                  case TypeCode.Object:                      if (conversionType == typeof(object) || conversionType == typeof(ObjectId))                      {                          return this;                      }                      if (conversionType == typeof(BsonObjectId))                      {                          return new BsonObjectId(this);                      }                      if (conversionType == typeof(BsonString))                      {                          return new BsonString(((IConvertible)this).ToString(provider));                      }                      break;              }
Missing Default,MongoDB.Bson.IO,BsonBinaryWriter,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\BsonBinaryWriter.cs,WriteBinaryData,The following switch statement is missing a default case: switch (subType)              {                  case BsonBinarySubType.OldBinary:                      if (Settings.FixOldBinarySubTypeOnOutput)                      {                          subType = BsonBinarySubType.Binary; // replace obsolete OldBinary with new Binary sub type                      }                      break;                  case BsonBinarySubType.UuidLegacy:                  case BsonBinarySubType.UuidStandard:                      if (Settings.GuidRepresentation != GuidRepresentation.Unspecified)                      {                          var expectedSubType = (Settings.GuidRepresentation == GuidRepresentation.Standard) ? BsonBinarySubType.UuidStandard : BsonBinarySubType.UuidLegacy;                          if (subType != expectedSubType)                          {                              var message = string.Format(                                  "The GuidRepresentation for the writer is {0}' which requires the subType argument to be {1}' not {2}."'                                  Settings.GuidRepresentation' expectedSubType' subType);                              throw new BsonSerializationException(message);                          }                          if (guidRepresentation != Settings.GuidRepresentation)                          {                              var message = string.Format(                                  "The GuidRepresentation for the writer is {0}' which requires the the guidRepresentation argument to also be {0}' not {1}."'                                  Settings.GuidRepresentation' guidRepresentation);                              throw new BsonSerializationException(message);                          }                      }                      break;              }
Missing Default,MongoDB.Bson.IO,JsonReader,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonReader.cs,ParseExtendedJson,The following switch statement is missing a default case: switch (nameToken.StringValue)                  {                      case "$binary": _currentValue = ParseBinDataExtendedJson(); return BsonType.Binary;                      case "$code": return ParseJavaScriptExtendedJson(out _currentValue);                      case "$date": _currentValue = ParseDateTimeExtendedJson(); return BsonType.DateTime;                      case "$maxkey": case "$maxKey": _currentValue = ParseMaxKeyExtendedJson(); return BsonType.MaxKey;                      case "$minkey": case "$minKey": _currentValue = ParseMinKeyExtendedJson(); return BsonType.MinKey;                      case "$numberDecimal": _currentValue = ParseNumberDecimalExtendedJson(); return BsonType.Decimal128;                      case "$numberDouble": _currentValue = ParseNumberDoubleExtendedJson(); return BsonType.Double;                      case "$numberInt": _currentValue = ParseNumberIntExtendedJson(); return BsonType.Int32;                      case "$numberLong": _currentValue = ParseNumberLongExtendedJson(); return BsonType.Int64;                      case "$oid": _currentValue = ParseObjectIdExtendedJson(); return BsonType.ObjectId;                      case "$regex": _currentValue = ParseRegularExpressionExtendedJsonLegacy(); return BsonType.RegularExpression;                      case "$regularExpression": _currentValue = ParseRegularExpressionExtendedJsonCanonical(); return BsonType.RegularExpression;                      case "$symbol": _currentValue = ParseSymbolExtendedJson(); return BsonType.Symbol;                      case "$timestamp": _currentValue = ParseTimestampExtendedJson(); return BsonType.Timestamp;                      case "$undefined": _currentValue = ParseUndefinedExtendedJson(); return BsonType.Undefined;                  }
Missing Default,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetNumberToken,The following switch statement is missing a default case: switch (state)                  {                      case NumberState.Done:                          buffer.UnRead(c);                          var lexeme = buffer.GetSubstring(start' buffer.Position - start);                          if (type == JsonTokenType.Double)                          {                              var value = JsonConvert.ToDouble(lexeme);                              return new DoubleJsonToken(lexeme' value);                          }                          else                          {                              var value = JsonConvert.ToInt64(lexeme);                              if (value < int.MinValue || value > int.MaxValue)                              {                                  return new Int64JsonToken(lexeme' value);                              }                              else                              {                                  return new Int32JsonToken(lexeme' (int)value);                              }                          }                      case NumberState.Invalid:                          throw new FormatException(FormatMessage("Invalid JSON number"' buffer' start));                  }
Missing Default,MongoDB.Bson.IO,JsonScanner,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\JsonScanner.cs,GetRegularExpressionToken,The following switch statement is missing a default case: switch (state)                  {                      case RegularExpressionState.Done:                          buffer.UnRead(c);                          var lexeme = buffer.GetSubstring(start' buffer.Position - start);                          var regex = new BsonRegularExpression(lexeme);                          return new RegularExpressionJsonToken(lexeme' regex);                      case RegularExpressionState.Invalid:                          throw new FormatException(FormatMessage("Invalid JSON regular expression"' buffer' start));                  }
Missing Default,MongoDB.Bson.IO,Utf8Helper,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\IO\Utf8Helper.cs,DecodeUtf8String,The following switch statement is missing a default case: switch (count)              {                  // special case empty strings                  case 0:                      return "";                    // special case single character strings                  case 1:                      var byte1 = (int)bytes[index];                      if (byte1 < __asciiStringTable.Length)                      {                          return __asciiStringTable[byte1];                      }                      break;              }
Missing Default,MongoDB.Bson.Serialization,BsonMemberMap,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\BsonMemberMap.cs,GetDefaultValue,The following switch statement is missing a default case: switch (Type.GetTypeCode(type))              {                  case TypeCode.Empty:  #if NET452                  case TypeCode.DBNull:  #endif                  case TypeCode.String:                      break;                  case TypeCode.Object:                      if (typeInfo.IsValueType)                      {                          return Activator.CreateInstance(type);                      }                      break;                  case TypeCode.Boolean: return false;                  case TypeCode.Char: return '\0';                  case TypeCode.SByte: return (sbyte)0;                  case TypeCode.Byte: return (byte)0;                  case TypeCode.Int16: return (short)0;                  case TypeCode.UInt16: return (ushort)0;                  case TypeCode.Int32: return 0;                  case TypeCode.UInt32: return 0U;                  case TypeCode.Int64: return 0L;                  case TypeCode.UInt64: return 0UL;                  case TypeCode.Single: return 0F;                  case TypeCode.Double: return 0D;                  case TypeCode.Decimal: return 0M;                  case TypeCode.DateTime: return DateTime.MinValue;              }
Missing Default,MongoDB.Bson.Serialization,TypeNameDiscriminator,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\TypeNameDiscriminator.cs,TryParseGenericTypeName,The following switch statement is missing a default case: switch (c)                      {                          case '[':                              nestingLevel++;                              break;                          case ']':                              nestingLevel--;                              break;                          case ''':                              if (nestingLevel == 0)                              {                                  var typeArgumentName = typeArgumentNamesString.Substring(startIndex' index - startIndex);                                  typeArgumentNamesList.Add(typeArgumentName);                              }                              break;                      }
Missing Default,MongoDB.Bson.Serialization.Conventions,ObjectDiscriminatorConvention,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Conventions\ObjectDiscriminatorConvention.cs,GetActualType,The following switch statement is missing a default case: switch (bsonType)                  {                      case BsonType.Boolean: primitiveType = typeof(bool); break;                      case BsonType.Binary:                          var bookmark = bsonReader.GetBookmark();                          var binaryData = bsonReader.ReadBinaryData();                          var subType = binaryData.SubType;                          if (subType == BsonBinarySubType.UuidStandard || subType == BsonBinarySubType.UuidLegacy)                          {                              primitiveType = typeof(Guid);                          }                          bsonReader.ReturnToBookmark(bookmark);                          break;                      case BsonType.DateTime: primitiveType = typeof(DateTime); break;                      case BsonType.Decimal128: primitiveType = typeof(Decimal128); break;                      case BsonType.Double: primitiveType = typeof(double); break;                      case BsonType.Int32: primitiveType = typeof(int); break;                      case BsonType.Int64: primitiveType = typeof(long); break;                      case BsonType.ObjectId: primitiveType = typeof(ObjectId); break;                      case BsonType.String: primitiveType = typeof(string); break;                  }
Missing Default,MongoDB.Bson.Serialization.Serializers,BitArraySerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\BitArraySerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                          {                              case Flags.Length: length = _int32Serializer.Deserialize(context); break;                              case Flags.Bytes: bytes = bsonReader.ReadBytes(); break;                          }
Missing Default,MongoDB.Bson.Serialization.Serializers,CultureInfoSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\CultureInfoSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                          {                              case Flags.Name: name = bsonReader.ReadString(); break;                              case Flags.UseUserOverride: useUserOverride = _booleanSerializer.Deserialize(context); break;                          }
Missing Default,MongoDB.Bson.Serialization.Serializers,DateTimeOffsetSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DateTimeOffsetSerializer.cs,Deserialize,The following switch statement is missing a default case: switch (flag)                          {                              case Flags.DateTime: bsonReader.SkipValue(); break; // ignore value                              case Flags.Ticks: ticks = _int64Serializer.Deserialize(context); break;                              case Flags.Offset: offset = TimeSpan.FromMinutes(_int32Serializer.Deserialize(context)); break;                          }
Missing Default,MongoDB.Bson.Serialization.Serializers,DateTimeSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DateTimeSerializer.cs,Deserialize,The following switch statement is missing a default case: switch (flag)                          {                              case Flags.DateTime: bsonReader.SkipValue(); break; // ignore value (use Ticks instead)                              case Flags.Ticks: value = new DateTime(_int64Serializer.Deserialize(context)' DateTimeKind.Utc); break;                          }
Missing Default,MongoDB.Bson.Serialization.Serializers,DateTimeSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DateTimeSerializer.cs,Deserialize,The following switch statement is missing a default case: switch (_kind)                  {                      case DateTimeKind.Local:                      case DateTimeKind.Unspecified:                          value = DateTime.SpecifyKind(BsonUtils.ToLocalTime(value)' _kind);                          break;                      case DateTimeKind.Utc:                          value = BsonUtils.ToUniversalTime(value);                          break;                  }
Missing Default,MongoDB.Bson.Serialization.Serializers,DictionarySerializerBase<TDictionary>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionarySerializerBase.cs,DeserializeArrayRepresentation,The following switch statement is missing a default case: switch (flag)                              {                                  case Flags.Key: key = _keySerializer.Deserialize(context); break;                                  case Flags.Value: value = _valueSerializer.Deserialize(context); break;                              }
Missing Default,MongoDB.Bson.Serialization.Serializers,DictionarySerializerBase<TDictionary;TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DictionarySerializerBase.cs,DeserializeArrayRepresentation,The following switch statement is missing a default case: switch (flag)                              {                                  case Flags.Key: key = _lazyKeySerializer.Value.Deserialize(context); break;                                  case Flags.Value: value = _lazyValueSerializer.Value.Deserialize(context); break;                              }
Missing Default,MongoDB.Bson.Serialization.Serializers,DiscriminatedWrapperSerializer<TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\DiscriminatedWrapperSerializer.cs,Deserialize,The following switch statement is missing a default case: switch (flag)                  {                      case Flags.Discriminator:                          bsonReader.SkipValue();                          break;                      case Flags.Value:                          var valueDeserializationArgs = new BsonDeserializationArgs { NominalType = actualType };                          value = (TValue)serializer.Deserialize(context' valueDeserializationArgs);                          break;                  }
Missing Default,MongoDB.Bson.Serialization.Serializers,KeyValuePairSerializer<TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\KeyValuePairSerializer.cs,TryGetMemberSerializationInfo,The following switch statement is missing a default case: switch (memberName)              {                  case "Key":                      serializationInfo = new BsonSerializationInfo("k"' _lazyKeySerializer.Value' _lazyKeySerializer.Value.ValueType);                      return true;                  case "Value":                      serializationInfo = new BsonSerializationInfo("v"' _lazyValueSerializer.Value' _lazyValueSerializer.Value.ValueType);                      return true;              }
Missing Default,MongoDB.Bson.Serialization.Serializers,KeyValuePairSerializer<TKey;TValue>,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\KeyValuePairSerializer.cs,DeserializeDocumentRepresentation,The following switch statement is missing a default case: switch (flag)                  {                      case Flags.Key: key = _lazyKeySerializer.Value.Deserialize(context); break;                      case Flags.Value: value = _lazyValueSerializer.Value.Deserialize(context); break;                  }
Missing Default,MongoDB.Bson.Serialization.Serializers,ObjectSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ObjectSerializer.cs,Serialize,The following switch statement is missing a default case: switch (Type.GetTypeCode(actualType))                          {                              case TypeCode.Boolean:                                  bsonWriter.WriteBoolean((bool)value);                                  return;                                case TypeCode.DateTime:                                  // TODO: is this right? will lose precision after round trip                                  var bsonDateTime = new BsonDateTime(BsonUtils.ToUniversalTime((DateTime)value));                                  bsonWriter.WriteDateTime(bsonDateTime.MillisecondsSinceEpoch);                                  return;                                case TypeCode.Double:                                  bsonWriter.WriteDouble((double)value);                                  return;                                case TypeCode.Int16:                                  // TODO: is this right? will change type to Int32 after round trip                                  bsonWriter.WriteInt32((short)value);                                  return;                                case TypeCode.Int32:                                  bsonWriter.WriteInt32((int)value);                                  return;                                case TypeCode.Int64:                                  bsonWriter.WriteInt64((long)value);                                  return;                                case TypeCode.Object:                                  if (actualType == typeof(Decimal128))                                  {                                      var decimal128 = (Decimal128)value;                                      bsonWriter.WriteDecimal128(decimal128);                                      return;                                  }                                  if (actualType == typeof(Guid))                                  {                                      var guid = (Guid)value;                                      var guidRepresentation = bsonWriter.Settings.GuidRepresentation;                                      var binaryData = new BsonBinaryData(guid' guidRepresentation);                                      bsonWriter.WriteBinaryData(binaryData);                                      return;                                  }                                  if (actualType == typeof(ObjectId))                                  {                                      bsonWriter.WriteObjectId((ObjectId)value);                                      return;                                  }                                  break;                                case TypeCode.String:                                  bsonWriter.WriteString((string)value);                                  return;                          }
Missing Default,MongoDB.Bson.Serialization.Serializers,ObjectSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\ObjectSerializer.cs,DeserializeDiscriminatedValue,The following switch statement is missing a default case: switch(type)                  {                      case BsonType.Document:                          if (context.DynamicDocumentSerializer != null)                          {                              return context.DynamicDocumentSerializer.Deserialize(context' args);                          }                          break;                  }
Missing Default,MongoDB.Bson.Serialization.Serializers,VersionSerializer,D:\research\architectureSmells\repos\mongodb_mongo-csharp-driver\src\MongoDB.Bson\Serialization\Serializers\VersionSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                          {                              case Flags.Major: major = _int32Serializer.Deserialize(context); break;                              case Flags.Minor: minor = _int32Serializer.Deserialize(context); break;                              case Flags.Build: build = _int32Serializer.Deserialize(context); break;                              case Flags.Revision: revision = _int32Serializer.Deserialize(context); break;                          }
