Implementation smell,Namespace,Class,File,Method,Description
Long Method,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,Upload,The method has 101 lines of code.
Long Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The method has 139 lines of code.
Complex Method,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,CreateCollection,Cyclomatic complexity of the method is 15
Complex Method,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,Or,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Builders,UpdateBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\UpdateBuilder.cs,PushEach,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,ApplyDefaultValues,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,ApplyDefaultValues,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.GridFS,MongoGridFSStream,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSStream.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Linq,ExpressionFormatter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionFormatter.cs,VisitValue,Cyclomatic complexity of the method is 14
Complex Method,MongoDB.Driver.Linq,MongoQueryProvider,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\MongoQueryProvider.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,VisitBinary,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,PartialEvaluator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PartialEvaluator.cs,CanBeEvaluatedLocally,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildArrayLengthQuery,Cyclomatic complexity of the method is 12
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsKeyQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildIsMatchQuery,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringLengthQuery,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringQuery,Cyclomatic complexity of the method is 13
Complex Method,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildTypeComparisonQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,Execute,Cyclomatic complexity of the method is 13
Complex Method,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateOfType,Cyclomatic complexity of the method is 9
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The method has 5 parameters. Parameters: query' sortBy' update' returnNew' upsert
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The method has 6 parameters. Parameters: query' sortBy' update' fields' returnNew' upsert
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNearAs,The method has 5 parameters. Parameters: query' x' y' limit' options
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNearAs,The method has 5 parameters. Parameters: documentType' query' x' y' limit
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNearAs,The method has 6 parameters. Parameters: documentType' query' x' y' limit' options
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Group,The method has 5 parameters. Parameters: query' keyFunction' initial' reduce' finalize
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Group,The method has 5 parameters. Parameters: query' keys' initial' reduce' finalize
Long Parameter List,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Group,The method has 5 parameters. Parameters: query' key' initial' reduce' finalize
Long Parameter List,MongoDB.Driver,MongoCollection<TDefaultDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNear,The method has 5 parameters. Parameters: query' x' y' limit' options
Long Parameter List,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,MongoCursor,The method has 5 parameters. Parameters: collection' query' readConcern' readPreference' serializer
Long Parameter List,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,Create,The method has 5 parameters. Parameters: documentType' collection' query' readPreference' serializer
Long Parameter List,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,Create,The method has 6 parameters. Parameters: documentType' collection' query' readConcern' readPreference' serializer
Long Parameter List,MongoDB.Driver,MongoCursor<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,MongoCursor,The method has 5 parameters. Parameters: collection' query' readConcern' readPreference' serializer
Long Parameter List,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,CreateView,The method has 5 parameters. Parameters: session' viewName' viewOn' pipeline' options
Long Parameter List,MongoDB.Driver,Request,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,Request,The method has 5 parameters. Parameters: serverDescription' serverInstance' binding' connectionId' session
Long Parameter List,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,Near,The method has 5 parameters. Parameters: name' x' y' maxDistance' spherical
Long Parameter List,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinCircle,The method has 5 parameters. Parameters: name' centerX' centerY' radius' spherical
Long Parameter List,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinRectangle,The method has 5 parameters. Parameters: name' lowerLeftX' lowerLeftY' upperRightX' upperRightY
Long Parameter List,MongoDB.Driver.Builders,Query<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,Near,The method has 5 parameters. Parameters: memberExpression' x' y' maxDistance' spherical
Long Parameter List,MongoDB.Driver.Builders,Query<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinCircle,The method has 5 parameters. Parameters: memberExpression' centerX' centerY' radius' spherical
Long Parameter List,MongoDB.Driver.Builders,Query<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinRectangle,The method has 5 parameters. Parameters: memberExpression' lowerLeftX' lowerLeftY' upperRightX' upperRightY
Long Parameter List,MongoDB.Driver.Builders,QueryBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,Near,The method has 5 parameters. Parameters: memberExpression' x' y' maxDistance' spherical
Long Parameter List,MongoDB.Driver.Builders,QueryBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinCircle,The method has 5 parameters. Parameters: memberExpression' centerX' centerY' radius' spherical
Long Parameter List,MongoDB.Driver.Builders,QueryBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinRectangle,The method has 5 parameters. Parameters: memberExpression' lowerLeftX' lowerLeftY' upperRightX' upperRightY
Long Parameter List,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,MongoGridFSFileInfo,The method has 5 parameters. Parameters: server' serverInstance' databaseName' gridFSSettings' remoteFileName
Long Parameter List,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,MongoGridFSFileInfo,The method has 5 parameters. Parameters: server' serverInstance' databaseName' gridFSSettings' fileInfo
Long Parameter List,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,MongoGridFSFileInfo,The method has 6 parameters. Parameters: server' serverInstance' databaseName' gridFSSettings' remoteFileName' createOptions
Long Parameter List,MongoDB.Driver.Operations,AddUserOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserOperation.cs,AddUserOperation,The method has 5 parameters. Parameters: databaseNamespace' username' passwordHash' readOnly' messageEncoderSettings
Long Parameter List,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,AddUserUsingSystemUsersCollectionOperation,The method has 5 parameters. Parameters: databaseNamespace' username' passwordHash' readOnly' messageEncoderSettings
Long Parameter List,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,InsertUser,The method has 5 parameters. Parameters: channelSource' session' collectionNamespace' user' cancellationToken
Long Parameter List,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,UpdateUser,The method has 5 parameters. Parameters: channelSource' session' collectionNamespace' user' cancellationToken
Long Parameter List,MongoDB.Driver.Operations,AddUserUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingUserManagementCommandsOperation.cs,AddUserUsingUserManagementCommandsOperation,The method has 5 parameters. Parameters: databaseNamespace' username' passwordHash' readOnly' messageEncoderSettings
Long Identifier,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,Connect,The length of the parameter timeoutCancellationTokenSource is 30.
Long Identifier,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,The length of the parameter unaryExpressionOperandTypeInfo is 30.
Long Identifier,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,ExecuteDistinct,The length of the parameter deserializationProjectorGenericDefinition is 41.
Long Statement,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,GetIPEndPoint,The length of the statement  "            var ipAddress = ipAddresses.FirstOrDefault(a => a.AddressFamily == (_settings.IPv6 ? AddressFamily.InterNetworkV6 : AddressFamily.InterNetwork)); " is 145.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Aggregate,The length of the statement  "                var aggregateOperation = new AggregateToCollectionOperation(_collectionNamespace' args.Pipeline' messageEncoderSettings) " is 120.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Aggregate,The length of the statement  "                var findOperation = new FindOperation<BsonDocument>(outputCollectionNamespace' resultSerializer' messageEncoderSettings) " is 120.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Aggregate,The length of the statement  "                var operation = new AggregateOperation<BsonDocument>(_collectionNamespace' args.Pipeline' resultSerializer' messageEncoderSettings) " is 131.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Distinct,The length of the statement  "            var operation = new DistinctOperation<TValue>(_collectionNamespace' valueSerializer' args.Key' GetMessageEncoderSettings()) " is 123.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "            var args = new FindAndModifyArgs { Query = query' SortBy = sortBy' Update = update' VersionReturned = versionReturned }; " is 120.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "            var args = new FindAndModifyArgs { Query = query' SortBy = sortBy' Update = update' VersionReturned = versionReturned' Upsert = upsert }; " is 137.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "            var args = new FindAndModifyArgs { Query = query' SortBy = sortBy' Update = update' Fields = fields' VersionReturned = versionReturned' Upsert = upsert }; " is 154.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "            var returnDocument = !args.VersionReturned.HasValue || args.VersionReturned.Value == FindAndModifyDocumentVersion.Original " is 122.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "                operation = new FindOneAndUpdateOperation<BsonDocument>(_collectionNamespace' filter' updateDocument' resultSerializer' messageEncoderSettings) " is 143.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndModify,The length of the statement  "                operation = new FindOneAndReplaceOperation<BsonDocument>(_collectionNamespace' filter' replacement' resultSerializer' messageEncoderSettings) " is 141.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,FindAndRemove,The length of the statement  "            var operation = new FindOneAndDeleteOperation<BsonDocument>(_collectionNamespace' filter' resultSerializer' messageEncoderSettings) " is 131.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoHaystackSearchAs,The length of the statement  "            var methodDefinition = GetType().GetTypeInfo().GetMethod("GeoHaystackSearchAs"' new Type[] { typeof(double)' typeof(double)' typeof(IMongoGeoHaystackSearchOptions) }); " is 167.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoHaystackSearchAs,The length of the statement  "            var methodDefinition = GetType().GetTypeInfo().GetMethod("GeoHaystackSearchAs"' new Type[] { typeof(GeoHaystackSearchArgs) }); " is 126.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNearAs,The length of the statement  "                DistanceMultiplier = optionsDocument.Contains("distanceMultiplier") ? (double?)optionsDocument["distanceMultiplier"].ToDouble() : null' " is 135.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,GeoNearAs,The length of the statement  "            var methodDefinition = GetType().GetTypeInfo().GetMethod("GeoNearAs"' new Type[] { typeof(IMongoQuery)' typeof(double)' typeof(double)' typeof(int)' typeof(IMongoGeoNearOptions) }); " is 181.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Group,The length of the statement  "                operation = new GroupOperation<BsonDocument>(_collectionNamespace' key' args.Initial' args.ReduceFunction' filter' messageEncoderSettings); " is 139.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,Group,The length of the statement  "                operation = new GroupOperation<BsonDocument>(_collectionNamespace' args.KeyFunction' args.Initial' args.ReduceFunction' filter' messageEncoderSettings); " is 152.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,InsertBatch,The length of the statement  "            var operation = new InsertOpcodeOperation<TNominalType>(_collectionNamespace' documents' serializer' messageEncoderSettings) " is 124.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,InsertBatch,The length of the statement  "            var methodDefinition = typeof(MongoCollection).GetTypeInfo().GetMethod("InsertBatchInvoker"' BindingFlags.NonPublic | BindingFlags.Instance); " is 141.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,MapReduce,The length of the statement  "                var outputDatabaseNamespace = args.OutputDatabaseName == null ? _collectionNamespace.DatabaseNamespace : new DatabaseNamespace(args.OutputDatabaseName); " is 152.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,ParallelScanAs,The length of the statement  "            var operation = new ParallelScanOperation<TDocument>(_collectionNamespace' args.NumberOfCursors' serializer' messageEncoderSettings) " is 132.
Long Statement,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,ParallelScanAs,The length of the statement  "            var methodDefinition = GetType().GetTypeInfo().GetMethods().Where(m => m.Name == "ParallelScanAs" && m.IsGenericMethodDefinition).Single(); " is 139.
Long Statement,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,Create,The length of the statement  "            var constructorInfo = cursorType.GetTypeInfo().GetConstructor(new Type[] { typeof(MongoCollection)' typeof(IMongoQuery)' typeof(ReadPreference)' typeof(IBsonSerializer) }); " is 172.
Long Statement,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,Create,The length of the statement  "            var constructorInfo = cursorType.GetTypeInfo().GetConstructor(new Type[] { typeof(MongoCollection)' typeof(IMongoQuery)' typeof(ReadConcern)' typeof(ReadPreference)' typeof(IBsonSerializer) }); " is 193.
Long Statement,MongoDB.Driver,MongoCursor,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,Create,The length of the statement  "            return (MongoCursor)constructorInfo.Invoke(new object[] { collection' query' readConcern' readPreference' serializer }); " is 120.
Long Statement,MongoDB.Driver,MongoCursor<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCursor.cs,GetEnumerator,The length of the statement  "            var operation = new FindOperation<TDocument>(new CollectionNamespace(Database.Name' Collection.Name)' Serializer' messageEncoderSettings) " is 137.
Long Statement,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,CreateCollection,The length of the statement  "                    validationAction = (DocumentValidationAction)Enum.Parse(typeof(DocumentValidationAction)' value.AsString' ignoreCase: true); " is 124.
Long Statement,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,CreateCollection,The length of the statement  "                    validationLevel = (DocumentValidationLevel)Enum.Parse(typeof(DocumentValidationLevel)' value.AsString' ignoreCase: true); " is 121.
Long Statement,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,GetCollection,The length of the statement  "            var constructorInfo = collectionType.GetTypeInfo().GetConstructor(new Type[] { typeof(MongoDatabase)' typeof(string)' typeof(MongoCollectionSettings) }); " is 153.
Long Statement,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,RunCommandAs,The length of the statement  "                var operation = new WriteCommandOperation<TCommandResult>(_namespace' commandDocument' resultSerializer' messageEncoderSettings); " is 129.
Long Statement,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,RunCommandAs,The length of the statement  "                var operation = new ReadCommandOperation<TCommandResult>(_namespace' commandDocument' resultSerializer' messageEncoderSettings); " is 128.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,Create,The length of the statement  "                        var message = string.Format("MongoServer.Create has already created {0} servers which is the maximum number of servers allowed."' __maxServerCount); " is 148.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,IsDatabaseNameValid,The length of the statement  "                    message = string.Format("Database name '{0}' is not valid. The character 0x{1} '{2}' is not allowed in database names."' databaseName' hex' c); " is 143.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,RequestStart,The length of the statement  "            var coreReadPreference = serverInstance.GetServerDescription().Type.IsWritable() ? ReadPreference.Primary : ReadPreference.Secondary; " is 133.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,OnClusterDescriptionChanged,The length of the statement  "                    _serverInstances.AddRange(newEndPoints.Select(endPoint => new MongoServerInstance(_settings' ToMongoServerAddress(endPoint)' _cluster' endPoint))); " is 147.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,RequestStart,The length of the statement  "                    throw new InvalidOperationException("A nested call to RequestStart was made that is not compatible with the existing request."); " is 128.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,RequestStart,The length of the statement  "                    channelBinding = new ReadWriteBindingHandle(new ChannelReadWriteBinding(server' channel.Fork()' NoCoreSession.NewHandle())); " is 124.
Long Statement,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,RequestStart,The length of the statement  "                    channelBinding = new ReadBindingHandle(new ChannelReadBinding(server' channel.Fork()' readPreference' NoCoreSession.NewHandle())); " is 130.
Long Statement,MongoDB.Driver,MongoUser,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoUser.cs,Equals,The length of the statement  "            return _username.Equals(rhs._username) && _passwordHash.Equals(rhs._passwordHash) && _isReadOnly.Equals(rhs._isReadOnly); " is 121.
Long Statement,MongoDB.Driver,BulkWriteOperation<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\BulkWriteOperation.cs,ExecuteHelper,The length of the statement  "            var operation = new BulkMixedWriteOperation(new CollectionNamespace(_collection.Database.Name' _collection.Name)' requests' messageEncoderSettings) " is 147.
Long Statement,MongoDB.Driver.Builders,FieldsBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\FieldsBuilder.cs,ElemMatch,The length of the statement  "            _serializationInfoHelper.GetItemSerializationInfo("ElemMatch"' serializationInfo); // TODO: there must be a better way to do whatever this line is doing " is 152.
Long Statement,MongoDB.Driver.Builders,IndexKeysBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\IndexKeysBuilder.cs,GeoSpatialHaystack,The length of the statement  "            _indexKeysBuilder = _indexKeysBuilder.GeoSpatialHaystack(GetElementName(memberExpression)' GetElementName(additionalMemberExpression)); " is 135.
Long Statement,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinCircle,The length of the statement  "            var condition = new BsonDocument("$within"' new BsonDocument(shape' new BsonArray { new BsonArray { centerX' centerY }' radius })); " is 131.
Long Statement,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinPolygon,The length of the statement  "                var message = string.Format("The second dimension of the points array must be of length 2' not {0}."' points.GetLength(1)); " is 123.
Long Statement,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinRectangle,The length of the statement  "            var condition = new BsonDocument("$within"' new BsonDocument("$box"' new BsonArray { new BsonArray { lowerLeftX' lowerLeftY }' new BsonArray { upperRightX' upperRightY } })); " is 174.
Long Statement,MongoDB.Driver.Builders,QueryBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,ElemMatch,The length of the statement  "            _serializationInfoHelper.GetItemSerializationInfo("ElemMatch"' serializationInfo); // TODO: there must be a better way to do whatever this line is doing " is 152.
Long Statement,MongoDB.Driver.Builders,UpdateBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\UpdateBuilder.cs,PullAllWrapped,The length of the statement  "            var wrappedValues = new BsonArray(BsonDocumentWrapper.CreateMultiple(values).Cast<BsonValue>()); // the cast to BsonValue is required " is 133.
Long Statement,MongoDB.Driver.Builders,UpdateBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\UpdateBuilder.cs,PushAllWrapped,The length of the statement  "            var wrappedValues = new BsonArray(BsonDocumentWrapper.CreateMultiple(values).Cast<BsonValue>()); // the cast to BsonValue is required " is 133.
Long Statement,MongoDB.Driver.Builders,UpdateBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\UpdateBuilder.cs,CurrentDate,The length of the statement  "                    throw new NotSupportedException(string.Format("Cannot use $currentDate with a Representation of {0}."' externalRepresentation)); " is 128.
Long Statement,MongoDB.Driver.Builders,UpdateBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\UpdateBuilder.cs,Pull,The length of the statement  "            _serializationInfoHelper.GetItemSerializationInfo("Pull"' serializationInfo); // TODO: there must be a better way to do whatever this line is doing " is 147.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,Create,The length of the statement  "                var fileInfo = new MongoGridFSFileInfo(_server' serverInstance' _databaseName' _settings' remoteFileName' createOptions); " is 121.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,CreateText,The length of the statement  "                var fileInfo = new MongoGridFSFileInfo(_server' serverInstance' _databaseName' _settings' remoteFileName' createOptions); " is 121.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,FindOne,The length of the statement  "                    fileInfo = filesCollection.Find(query).SetSortOrder(SortBy.Ascending("uploadDate")).SetSkip(version - 1).SetLimit(1).FirstOrDefault(); " is 134.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,FindOne,The length of the statement  "                    fileInfo = filesCollection.Find(query).SetSortOrder(SortBy.Descending("uploadDate")).SetSkip(-version - 1).SetLimit(1).FirstOrDefault(); " is 136.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,Open,The length of the statement  "                var fileInfo = new MongoGridFSFileInfo(_server' serverInstance' _databaseName' _settings' remoteFileName' createOptions); " is 121.
Long Statement,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,OpenWrite,The length of the statement  "                var fileInfo = new MongoGridFSFileInfo(_server' serverInstance' _databaseName' _settings' remoteFileName' createOptions); " is 121.
Long Statement,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,Equals,The length of the statement  "                (_aliases == null && rhs._aliases == null || _aliases != null && rhs._aliases != null && _aliases.SequenceEqual(rhs._aliases)) && " is 129.
Long Statement,MongoDB.Driver.Linq,ExpressionFormatter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionFormatter.cs,VisitMethodCall,The length of the statement  "                _sb.AppendFormat("<{0}>"' string.Join("' "' node.Method.GetGenericArguments().Select(t => FriendlyTypeName(t)).ToArray())); " is 123.
Long Statement,MongoDB.Driver.Linq,LinqExtensionMethods,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\LinqExtensionMethods.cs,Explain,The length of the statement  "                throw new NotSupportedException("A query that has a .Take(0) expression will not be sent to the server and can't be explained"); " is 128.
Long Statement,MongoDB.Driver.Linq,LinqToMongo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\LinqToMongo.cs,Inject,The length of the statement  "            throw new InvalidOperationException("The LinqToMongo.Inject method is only intended to be used in LINQ Where clauses."); " is 120.
Long Statement,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,VisitUnary,The length of the statement  "                if (newUnaryNode.Operand.NodeType == ExpressionType.Convert || newUnaryNode.Operand.NodeType == ExpressionType.ConvertChecked) " is 126.
Long Statement,MongoDB.Driver.Linq,MongoQueryTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\MongoQueryTranslator.cs,GetDocumentType,The length of the statement  "            var message = string.Format("Unable to find document type of expression: {0}."' ExpressionFormatter.ToString(expression)); " is 122.
Long Statement,MongoDB.Driver.Linq,PartialEvaluator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PartialEvaluator.cs,Evaluate,The length of the statement  "            return new SubtreeEvaluator(new ExpressionNominator(e => CanBeEvaluatedLocally(e' queryProvider)).Nominate(expression)).Evaluate(expression); " is 141.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildAnyQuery,The length of the statement  "                        var message = string.Format("Any is only support for items that serialize into documents. The current serializer is {0} and must implement {1} for participation in Any queries."' " is 178.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildArrayLengthQuery,The length of the statement  "            if (methodCallExpression != null && methodCallExpression.Method.Name == "Count" && methodCallExpression.Method.DeclaringType == typeof(Enumerable)) " is 147.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,The length of the statement  "            if (unaryExpression != null && (unaryExpression.NodeType == ExpressionType.Convert || unaryExpression.NodeType == ExpressionType.ConvertChecked)) " is 145.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,The length of the statement  "                    //Allows a cast' which would be required for compilation' such as (float){object} >= 25f to be built as Query.GTE({object}' 25) " is 127.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsAllQuery,The length of the statement  "                        var serializedValues = _serializationInfoHelper.SerializeValues(itemSerializationInfo' (IEnumerable)valuesExpression.Value); " is 124.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsAnyQuery,The length of the statement  "                        var serializedValues = _serializationInfoHelper.SerializeValues(itemSerializationInfo' (IEnumerable)valuesExpression.Value); " is 124.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsKeyQuery,The length of the statement  "                    "{0} in a LINQ query is only supported for members that are serialized using a serializer that implements IBsonDictionarySerializer."' " is 134.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsKeyQuery,The length of the statement  "                    methodCallExpression.Method.Name); // could be Contains (for IDictionary) or ContainsKey (for IDictionary<TKey' TValue>) " is 120.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsQuery,The length of the statement  "            if (methodCallExpression.Object != null && typeof(IDictionary).GetTypeInfo().IsAssignableFrom(methodCallExpression.Object.Type)) " is 128.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildInQuery,The length of the statement  "                bool contains = methodDeclaringType == typeof(ICollection<>) || methodDeclaringTypeInfo.GetInterface("ICollection`1") != null; " is 126.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildInQuery,The length of the statement  "                var serializedValues = _serializationInfoHelper.SerializeValues(serializationInfo' (IEnumerable)valuesExpression.Value); " is 120.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The length of the statement  "                    var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray()); " is 135.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The length of the statement  "                                pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass); " is 131.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The length of the statement  "                            pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex); " is 136.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The length of the statement  "                                pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex); " is 155.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringLengthQuery,The length of the statement  "            if (methodCallExpression != null && methodCallExpression.Method.Name == "Count" && methodCallExpression.Method.DeclaringType == typeof(Enumerable)) " is 147.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringCaseInsensitiveComparisonQuery,The length of the statement  "            if ((methodName != "ToLower" && methodName != "ToUpper" && methodName != "ToLowerInvariant" && methodName != "ToUpperInvariant") || " is 131.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringCaseInsensitiveComparisonQuery,The length of the statement  "                var message = string.Format("When using {0} in a LINQ string comparison the value being compared to must serialize as a string."' methodName); " is 142.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,GetTrimCharsPattern,The length of the statement  "            if (constantExpression == null || !constantExpression.Type.IsArray || constantExpression.Type.GetElementType() != typeof(char)) " is 127.
Long Statement,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,GetTrimCharsPattern,The length of the statement  "            var characterClass = string.Join(""' trimChars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray()); " is 140.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,CombinePredicateWithWhereClause,The length of the statement  "                    var message = string.Format("{0} with predicate after a projection is not supported."' methodCallExpression.Method.Name); " is 121.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,CombinePredicateWithWhereClause,The length of the statement  "                    throw new NotSupportedException("Can't combine existing where clause with new predicate because parameter types are incompatible."); " is 132.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,EnsurePreviousExpressionIsSkipOrTake,The length of the statement  "            if (lastExpressionAsMethodCall == null || (lastExpressionAsMethodCall.Method.Name != "Skip" && lastExpressionAsMethodCall.Method.Name != "Take")) " is 145.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,EnsurePreviousExpressionIsSkipOrTake,The length of the statement  "                throw new NotSupportedException("Skip and Take may only be used in conjunction with each other and cannot be separated by other operations."); " is 142.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,ExecuteDistinct,The length of the statement  "                throw new NotSupportedException("Distinct is only supported for a single field. Projections used with Distinct must resolve to a single field in the document."); " is 161.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,SetElementSelector,The length of the statement  "                var message = string.Format("{0} cannot be combined with any other element selector."' methodCallExpression.Method.Name); " is 121.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateLast,The length of the statement  "                    var oppositeDirection = (clause.Direction == OrderByDirection.Descending) ? OrderByDirection.Ascending : OrderByDirection.Descending; " is 133.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateMaxMin,The length of the statement  "                    var clause = new OrderByClause(keyLambda' (methodName == "Min") ? OrderByDirection.Ascending : OrderByDirection.Descending); " is 124.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateMaxMin,The length of the statement  "                var clause = new OrderByClause(_projection' (methodName == "Min") ? OrderByDirection.Ascending : OrderByDirection.Descending); " is 126.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateMethodCall,The length of the statement  "                var message = string.Format("Method call expression has no arguments: {0}."' ExpressionFormatter.ToString(methodCallExpression)); " is 129.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateOfType,The length of the statement  "                var message = string.Format("OfType method of class {0} is not supported."' BsonUtils.GetFriendlyTypeName(method.DeclaringType)); " is 129.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateOrderBy,The length of the statement  "                throw new NotSupportedException("Only one OrderBy or OrderByDescending clause is allowed (use ThenBy or ThenByDescending for multiple order by clauses)."); " is 155.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateOrderBy,The length of the statement  "            var direction = (methodCallExpression.Method.Name == "OrderByDescending") ? OrderByDirection.Descending : OrderByDirection.Ascending; " is 133.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateThenBy,The length of the statement  "            var direction = (methodCallExpression.Method.Name == "ThenByDescending") ? OrderByDirection.Descending : OrderByDirection.Ascending; " is 132.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateWithIndex,The length of the statement  "                var message = string.Format("WithIndex method of class {0} is not supported."' BsonUtils.GetFriendlyTypeName(method.DeclaringType)); " is 132.
Long Statement,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateWithIndex,The length of the statement  "                throw new ArgumentOutOfRangeException("methodCallExpression"' "Expected an Expression of Type BsonString or BsonDocument."); " is 124.
Long Statement,MongoDB.Driver.Linq.Utils,BsonSerializationInfoFinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoFinder.cs,VisitUnary,The length of the statement  "            // if the target conversion type cannot be assigned from the operand' than we are downcasting and we need to get the more specific serializer " is 141.
Long Statement,MongoDB.Driver.Linq.Utils,BsonSerializationInfoFinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoFinder.cs,VisitGetItem,The length of the statement  "            if (documentSerializer != null && documentSerializer.TryGetMemberSerializationInfo(indexName' out memberSerializationInfo)) " is 123.
Long Statement,MongoDB.Driver.Linq.Utils,BsonSerializationInfoHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoHelper.cs,TryGetSerializationInfo,The length of the statement  "            return BsonSerializationInfoFinder.TryGetSerializationInfo(evaluatedNode' _serializationInfoCache' out serializationInfo); " is 122.
Long Statement,MongoDB.Driver.Linq.Utils,BsonSerializationInfoHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoHelper.cs,GetItemSerializationInfo,The length of the statement  "                string message = string.Format("{0} requires that the serializer specified for {1} support items by implementing {2} and returning a non-null result. {3} is the current serializer."' " is 182.
Long Statement,MongoDB.Driver.Operations,AddUserOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserOperation.cs,Execute,The length of the statement  "                    operation = new AddUserUsingUserManagementCommandsOperation(_databaseNamespace' _username' _passwordHash' _readOnly' _messageEncoderSettings); " is 142.
Long Statement,MongoDB.Driver.Operations,AddUserOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserOperation.cs,Execute,The length of the statement  "                    operation = new AddUserUsingSystemUsersCollectionOperation(_databaseNamespace' _username' _passwordHash' _readOnly' _messageEncoderSettings); " is 141.
Long Statement,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,FindUser,The length of the statement  "            var operation = new FindOperation<BsonDocument>(collectionNamespace' BsonDocumentSerializer.Instance' _messageEncoderSettings) " is 126.
Long Statement,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,InsertUser,The length of the statement  "            var operation = new BulkMixedWriteOperation(collectionNamespace' inserts' _messageEncoderSettings) { WriteConcern = WriteConcern.Acknowledged }; " is 144.
Long Statement,MongoDB.Driver.Operations,AddUserUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingSystemUsersCollectionOperation.cs,UpdateUser,The length of the statement  "            var operation = new BulkMixedWriteOperation(collectionNamespace' updates' _messageEncoderSettings) { WriteConcern = WriteConcern.Acknowledged }; " is 144.
Long Statement,MongoDB.Driver.Operations,AddUserUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingUserManagementCommandsOperation.cs,Execute,The length of the statement  "                var operation = new WriteCommandOperation<BsonDocument>(_databaseNamespace' command' BsonDocumentSerializer.Instance' _messageEncoderSettings); " is 143.
Long Statement,MongoDB.Driver.Operations,AddUserUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingUserManagementCommandsOperation.cs,UserExists,The length of the statement  "                var operation = new ReadCommandOperation<BsonDocument>(_databaseNamespace' command' BsonDocumentSerializer.Instance' _messageEncoderSettings); " is 142.
Long Statement,MongoDB.Driver.Operations,CurrentOpOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\CurrentOpOperation.cs,Execute,The length of the statement  "            using (var channelBinding = new ChannelReadBinding(channelSource.Server' channel' binding.ReadPreference' binding.Session.Fork())) " is 130.
Long Statement,MongoDB.Driver.Operations,DropUserUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\DropUserUsingUserManagementCommandsOperation.cs,Execute,The length of the statement  "            var operation = new WriteCommandOperation<BsonDocument>(_databaseNamespace' command' BsonDocumentSerializer.Instance' _messageEncoderSettings); " is 143.
Long Statement,MongoDB.Driver.Operations,FindUsersOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\FindUsersOperation.cs,Execute,The length of the statement  "            using (var channelBinding = new ChannelReadBinding(channelSource.Server' channel' binding.ReadPreference' binding.Session.Fork())) " is 130.
Long Statement,MongoDB.Driver.Operations,FindUsersUsingSystemUsersCollectionOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\FindUsersUsingSystemUsersCollectionOperation.cs,Execute,The length of the statement  "            var operation = new FindOperation<BsonDocument>(collectionNamespace' BsonDocumentSerializer.Instance' _messageEncoderSettings) " is 126.
Long Statement,MongoDB.Driver.Operations,FindUsersUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\FindUsersUsingUserManagementCommandsOperation.cs,Execute,The length of the statement  "            var operation = new ReadCommandOperation<BsonDocument>(_databaseNamespace' command' BsonDocumentSerializer.Instance' _messageEncoderSettings); " is 142.
Complex Conditional,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,Mod,The conditional expression  "modulus >= int.MinValue && modulus <= int.MaxValue &&                  value >= int.MinValue && value <= int.MaxValue"  is complex.
Complex Conditional,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,VisitBinary,The conditional expression  "(node.NodeType == ExpressionType.Equal || node.NodeType == ExpressionType.NotEqual) &&                   node.Left.NodeType == ExpressionType.Convert &&                   node.Right.NodeType == ExpressionType.Constant"  is complex.
Complex Conditional,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,VisitBinary,The conditional expression  "node.Left.NodeType == ExpressionType.Equal &&                      nodeLeftTypeInfo.IsGenericType &&                      nodeLeftTypeInfo.GetGenericTypeDefinition() == typeof(Nullable<>) &&                      right != null &&                      right.Type == typeof(bool) &&                      (bool)right.Value == false"  is complex.
Complex Conditional,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,The conditional expression  "unaryExpressionTypeInfo.IsGenericType &&                      unaryExpressionTypeInfo.GetGenericTypeDefinition() == typeof(Nullable<>) &&                      unaryExpressionOperandTypeInfo.IsGenericType &&                      unaryExpressionOperandTypeInfo.GetGenericTypeDefinition() == typeof(Nullable<>) &&                      unaryExpressionOperandTypeInfo.GetGenericArguments()[0].GetTypeInfo().IsEnum"  is complex.
Complex Conditional,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The conditional expression  "methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string)"  is complex.
Complex Conditional,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringCaseInsensitiveComparisonQuery,The conditional expression  "(methodName != "ToLower" && methodName != "ToUpper" && methodName != "ToLowerInvariant" && methodName != "ToUpperInvariant") ||                  methodExpression.Object == null ||                  methodExpression.Type != typeof(string) ||                  methodExpression.Arguments.Count != 0"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Utils,BsonSerializationInfoFinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoFinder.cs,VisitGetItem,The conditional expression  "indexExpression.Type == typeof(int) ||                  indexExpression.Type == typeof(uint) ||                  indexExpression.Type == typeof(long) ||                  indexExpression.Type == typeof(ulong)"  is complex.
Virtual Method Call from Constructor,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,MongoCollection,The constructor "MongoCollection" calls a virtual method "IsCollectionNameValid".
Virtual Method Call from Constructor,MongoDB.Driver,MongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoCollection.cs,MongoCollection,The constructor "MongoCollection" calls a virtual method "Clone".
Virtual Method Call from Constructor,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,MongoDatabase,The constructor "MongoDatabase" calls a virtual method "IsDatabaseNameValid".
Empty Catch Block,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,OnStateChanged,The method has an empty catch block.
Empty Catch Block,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,UnregisterServer,The method has an empty catch block.
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoServerInstance,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Communication\MongoServerInstance.cs,Supports,The following statement contains a magic number: switch (featureId)              {                  // supported in all versions                  case FeatureId.WriteOpcodes:                      return true;                    // supported in 2.4.0 and newer                  case FeatureId.GeoJson:                  case FeatureId.TextSearchCommand:                      return BuildInfo.Version >= new Version(2' 4' 0);                    // supported in 2.6.0 and newer                  case FeatureId.AggregateAllowDiskUse:                  case FeatureId.AggregateCursor:                  case FeatureId.AggregateExplain:                  case FeatureId.AggregateOutputToCollection:                  case FeatureId.CreateIndexCommand:                  case FeatureId.MaxTime:                  case FeatureId.TextSearchQuery:                  case FeatureId.UserManagementCommands:                  case FeatureId.WriteCommands:                      return BuildInfo.Version >= new Version(2' 6' 0);                    // supported in 2.6.0 and newer but not on mongos                  case FeatureId.ParallelScanCommand:                      return BuildInfo.Version >= new Version(2' 6' 0) && InstanceType != MongoServerInstanceType.ShardRouter;                    default:                      return false;              }
Magic Number,MongoDB.Driver,MongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoDatabase.cs,IsCollectionNameValid,The following statement contains a magic number: if (Encoding.UTF8.GetBytes(collectionName).Length > 121)              {                  message = "Collection name cannot exceed 121 bytes (after encoding to UTF-8).";                  return false;              }
Magic Number,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,IsDatabaseNameValid,The following statement contains a magic number: foreach (var c in databaseName)              {                  if (__invalidDatabaseNameChars.Contains(c))                  {                      var bytes = new byte[] { (byte)((int)c >> 8)' (byte)((int)c & 255) };                      var hex = BsonUtils.ToHexString(bytes);                      message = string.Format("Database name '{0}' is not valid. The character 0x{1} '{2}' is not allowed in database names."' databaseName' hex' c);                      return false;                  }              }
Magic Number,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,IsDatabaseNameValid,The following statement contains a magic number: foreach (var c in databaseName)              {                  if (__invalidDatabaseNameChars.Contains(c))                  {                      var bytes = new byte[] { (byte)((int)c >> 8)' (byte)((int)c & 255) };                      var hex = BsonUtils.ToHexString(bytes);                      message = string.Format("Database name '{0}' is not valid. The character 0x{1} '{2}' is not allowed in database names."' databaseName' hex' c);                      return false;                  }              }
Magic Number,MongoDB.Driver,MongoServer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoServer.cs,IsDatabaseNameValid,The following statement contains a magic number: if (Encoding.UTF8.GetBytes(databaseName).Length > 64)              {                  message = string.Format("Database name '{0}' exceeds 64 bytes (after encoding to UTF8)."' databaseName);                  return false;              }
Magic Number,MongoDB.Driver,MongoUser,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoUser.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoUser,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoUser.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _username.GetHashCode();
Magic Number,MongoDB.Driver,MongoUser,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoUser.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _passwordHash.GetHashCode();
Magic Number,MongoDB.Driver,MongoUser,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\MongoUser.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _isReadOnly.GetHashCode();
Magic Number,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinPolygon,The following statement contains a magic number: if (points.GetLength(1) != 2)              {                  var message = string.Format("The second dimension of the points array must be of length 2' not {0}."' points.GetLength(1));                  throw new ArgumentOutOfRangeException("points"' message);              }
Magic Number,MongoDB.Driver.Builders,Query,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Builders\QueryBuilder.cs,WithinPolygon,The following statement contains a magic number: for (var i = 0; i < points.GetLength(0); i++)              {                  arrayOfPoints.Add(new BsonArray(2) { points[i' 0]' points[i' 1] });              }
Magic Number,MongoDB.Driver.GridFS,MongoGridFS,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFS.cs,EnsureIndexes,The following statement contains a magic number: EnsureIndexes(1000);
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_aliases == null) ? 0 : _aliases.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _chunkSize.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_contentType == null) ? 0 : _contentType.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_id == null) ? 0 : _id.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _length.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_md5 == null) ? 0 : _md5.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_metadata == null) ? 0 : _metadata.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_name == null) ? 0 : _name.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSFileInfo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSFileInfo.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _uploadDate.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,MongoGridFSSettings,The following statement contains a magic number: __defaults = new MongoGridFSSettings              {                  ChunkSize = 255 * 1024' // 255KiB                  Root = "fs"'                  UpdateMD5 = true'                  VerifyMD5 = true              };
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,MongoGridFSSettings,The following statement contains a magic number: __defaults = new MongoGridFSSettings              {                  ChunkSize = 255 * 1024' // 255KiB                  Root = "fs"'                  UpdateMD5 = true'                  VerifyMD5 = true              };
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _chunkSize.Value.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _guidRepresentation.Value.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readEncoding.Value == null) ? 0 : _readEncoding.Value.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readPreference.Value == null) ? 0 : _readPreference.Value.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_root.Value == null) ? 0 : _root.Value.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _updateMD5.Value.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _verifyMD5.Value.GetHashCode();
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeConcern.Value == null) ? 0 : _writeConcern.Value.GetHashCode());
Magic Number,MongoDB.Driver.GridFS,MongoGridFSSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\GridFS\MongoGridFSSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeEncoding.Value == null) ? 0 : _writeEncoding.Value.GetHashCode());
Magic Number,MongoDB.Driver.Linq,ExpressionFormatter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionFormatter.cs,FriendlyTypeName,The following statement contains a magic number: if (typeInfo.IsGenericType)              {                  var sb = new StringBuilder();                  sb.AppendFormat("{0}<"' Regex.Replace(typeName' @"\`\d+$"' ""));                  foreach (var typeParameter in typeInfo.GetGenericArguments())                  {                      sb.AppendFormat("{0}' "' FriendlyTypeName(typeParameter));                  }                  sb.Remove(sb.Length - 2' 2);                  sb.Append(">");                  return sb.ToString();              }              else              {                  return typeName;              }
Magic Number,MongoDB.Driver.Linq,ExpressionFormatter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionFormatter.cs,FriendlyTypeName,The following statement contains a magic number: if (typeInfo.IsGenericType)              {                  var sb = new StringBuilder();                  sb.AppendFormat("{0}<"' Regex.Replace(typeName' @"\`\d+$"' ""));                  foreach (var typeParameter in typeInfo.GetGenericArguments())                  {                      sb.AppendFormat("{0}' "' FriendlyTypeName(typeParameter));                  }                  sb.Remove(sb.Length - 2' 2);                  sb.Append(">");                  return sb.ToString();              }              else              {                  return typeName;              }
Magic Number,MongoDB.Driver.Linq,ExpressionPrettyPrinter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionPrettyPrinter.cs,FriendlyClassName,The following statement contains a magic number: sb.Remove(sb.Length - 2' 2);
Magic Number,MongoDB.Driver.Linq,ExpressionPrettyPrinter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionPrettyPrinter.cs,FriendlyClassName,The following statement contains a magic number: sb.Remove(sb.Length - 2' 2);
Magic Number,MongoDB.Driver.Linq,Indentation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionPrettyPrinter.cs,Dispose,The following statement contains a magic number: _prettyPrinter._indentation = _prettyPrinter._indentation.Remove(_prettyPrinter._indentation.Length - 2);
Magic Number,MongoDB.Driver.Linq,LinqToMongo,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\LinqToMongo.cs,WithIndex,The following statement contains a magic number: var methodDefinition = typeof(LinqToMongo).GetTypeInfo().GetMethods(BindingFlags.NonPublic | BindingFlags.Static)                  .Where(m => m.Name == "WithIndex")                  .Where(m => { var ga = m.GetGenericArguments(); return ga.Length == 1 && ga[0].Name == "TSource"; })                  .Where(m => { var p = m.GetParameters(); return p.Length == 2 && p[1].ParameterType == typeof(BsonValue); })                  .Single();
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildAnyQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Enumerable))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                  if (arguments.Length == 1)                  {                      return Query.And(                          Query.NE(serializationInfo.ElementName' BsonNull.Value)'                          Query.Not(Query.Size(serializationInfo.ElementName' 0)));                  }                  else if (arguments.Length == 2)                  {                      var itemSerializationInfo = _serializationInfoHelper.GetItemSerializationInfo("Any"' serializationInfo);                      if (!(itemSerializationInfo.Serializer is IBsonDocumentSerializer))                      {                          var message = string.Format("Any is only support for items that serialize into documents. The current serializer is {0} and must implement {1} for participation in Any queries."'                              BsonUtils.GetFriendlyTypeName(itemSerializationInfo.Serializer.GetType())'                              BsonUtils.GetFriendlyTypeName(typeof(IBsonDocumentSerializer)));                          throw new NotSupportedException(message);                      }                      var itemSerializer = itemSerializationInfo.Serializer;                      var lambda = (LambdaExpression)arguments[1];                      _serializationInfoHelper.RegisterExpressionSerializer(lambda.Parameters[0]' itemSerializer);                      var query = BuildQuery(lambda.Body);                      return Query.ElemMatch(serializationInfo.ElementName' query);                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsAllQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(LinqToMongo))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  if (arguments.Length == 2)                  {                      var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      var valuesExpression = arguments[1] as ConstantExpression;                      if (valuesExpression != null)                      {                          var itemSerializationInfo = _serializationInfoHelper.GetItemSerializationInfo("ContainsAll"' serializationInfo);                          var serializedValues = _serializationInfoHelper.SerializeValues(itemSerializationInfo' (IEnumerable)valuesExpression.Value);                          return Query.All(serializationInfo.ElementName' serializedValues);                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsAnyQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(LinqToMongo))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  if (arguments.Length == 2)                  {                      var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      var valuesExpression = arguments[1] as ConstantExpression;                      if (valuesExpression != null)                      {                          var itemSerializationInfo = _serializationInfoHelper.GetItemSerializationInfo("ContainsAny"' serializationInfo);                          var serializedValues = _serializationInfoHelper.SerializeValues(itemSerializationInfo' (IEnumerable)valuesExpression.Value);                          return Query.In(serializationInfo.ElementName' serializedValues);                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildContainsQuery,The following statement contains a magic number: if (arguments.Length == 1)              {                  if (typeof(IEnumerable).GetTypeInfo().IsAssignableFrom(methodCallExpression.Method.DeclaringType))                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(methodCallExpression.Object);                      valueExpression = arguments[0] as ConstantExpression;                  }              }              else if (arguments.Length == 2)              {                  if (methodCallExpression.Method.DeclaringType == typeof(Enumerable))                  {                      if (arguments[0].NodeType == ExpressionType.Constant)                      {                          return BuildInQuery(methodCallExpression);                      }                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      valueExpression = arguments[1] as ConstantExpression;                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildEqualsQuery,The following statement contains a magic number: if (methodCallExpression.Object == null)              {                  // static Equals method                  if (arguments.Length == 2)                  {                      firstExpression = arguments[0];                      secondExpression = arguments[1];                  }              }              else              {                  // instance Equals method                  if (arguments.Length == 1)                  {                      firstExpression = methodCallExpression.Object;                      secondExpression = arguments[0];                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildInQuery,The following statement contains a magic number: if (methodDeclaringType == typeof(LinqToMongo))              {                  if (arguments.Length == 2)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      valuesExpression = arguments[1] as ConstantExpression;                  }              }              else if (methodDeclaringType == typeof(Enumerable) || methodDeclaringType == typeof(Queryable))              {                  if (arguments.Length == 2)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[1]);                      valuesExpression = arguments[0] as ConstantExpression;                  }              }              else              {                  if (methodDeclaringTypeInfo.IsGenericType)                  {                      methodDeclaringType = methodDeclaringTypeInfo.GetGenericTypeDefinition();                      methodDeclaringTypeInfo = methodDeclaringType.GetTypeInfo();                  }                    bool contains = methodDeclaringType == typeof(ICollection<>) || methodDeclaringTypeInfo.GetInterface("ICollection`1") != null;                  if (contains && arguments.Length == 1)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      valuesExpression = methodCallExpression.Object as ConstantExpression;                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildInQuery,The following statement contains a magic number: if (methodDeclaringType == typeof(LinqToMongo))              {                  if (arguments.Length == 2)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      valuesExpression = arguments[1] as ConstantExpression;                  }              }              else if (methodDeclaringType == typeof(Enumerable) || methodDeclaringType == typeof(Queryable))              {                  if (arguments.Length == 2)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[1]);                      valuesExpression = arguments[0] as ConstantExpression;                  }              }              else              {                  if (methodDeclaringTypeInfo.IsGenericType)                  {                      methodDeclaringType = methodDeclaringTypeInfo.GetGenericTypeDefinition();                      methodDeclaringTypeInfo = methodDeclaringType.GetTypeInfo();                  }                    bool contains = methodDeclaringType == typeof(ICollection<>) || methodDeclaringTypeInfo.GetInterface("ICollection`1") != null;                  if (contains && arguments.Length == 1)                  {                      serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                      valuesExpression = methodCallExpression.Object as ConstantExpression;                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildIsMatchQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return Query.Matches(serializationInfo.ElementName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return Query.Matches(serializationInfo.ElementName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildIsMatchQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return Query.Matches(serializationInfo.ElementName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return Query.Matches(serializationInfo.ElementName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildIsMatchQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return Query.Matches(serializationInfo.ElementName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return Query.Matches(serializationInfo.ElementName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildIsMatchQuery,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return Query.Matches(serializationInfo.ElementName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = _serializationInfoHelper.GetSerializationInfo(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return Query.Matches(serializationInfo.ElementName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var serializationInfo = _serializationInfoHelper.GetSerializationInfo(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return Query.Matches(serializationInfo.ElementName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var serializationInfo = _serializationInfoHelper.GetSerializationInfo(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return Query.Matches(serializationInfo.ElementName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var serializationInfo = _serializationInfoHelper.GetSerializationInfo(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return Query.Matches(serializationInfo.ElementName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var serializationInfo = _serializationInfoHelper.GetSerializationInfo(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return BuildBooleanQuery(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return Query.Matches(serializationInfo.ElementName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringQuery,The following statement contains a magic number: if (pattern.StartsWith("^.*"))              {                  pattern = pattern.Substring(3);              }
Magic Number,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringQuery,The following statement contains a magic number: if (pattern.EndsWith(".*$"))              {                  pattern = pattern.Substring(0' pattern.Length - 3);              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateAny,The following statement contains a magic number: switch (methodCallExpression.Arguments.Count)              {                  case 1:                      break;                  case 2:                      predicate = (LambdaExpression)StripQuote(methodCallExpression.Arguments[1]);                      break;                  default:                      throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateCount,The following statement contains a magic number: switch (methodCallExpression.Arguments.Count)              {                  case 1:                      break;                  case 2:                      predicate = (LambdaExpression)StripQuote(methodCallExpression.Arguments[1]);                      break;                  default:                      throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateElementAt,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateFirstOrSingle,The following statement contains a magic number: switch (methodCallExpression.Arguments.Count)              {                  case 1:                      break;                  case 2:                      predicate = (LambdaExpression)StripQuote(methodCallExpression.Arguments[1]);                      break;                  default:                      throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateFirstOrSingle,The following statement contains a magic number: switch (methodCallExpression.Method.Name)              {                  case "First":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().First());                      break;                  case "FirstOrDefault":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().FirstOrDefault());                      break;                  case "Single":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().Single());                      break;                  case "SingleOrDefault":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().SingleOrDefault());                      break;              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateFirstOrSingle,The following statement contains a magic number: switch (methodCallExpression.Method.Name)              {                  case "First":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().First());                      break;                  case "FirstOrDefault":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().FirstOrDefault());                      break;                  case "Single":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().Single());                      break;                  case "SingleOrDefault":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().SingleOrDefault());                      break;              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateLast,The following statement contains a magic number: switch (methodCallExpression.Arguments.Count)              {                  case 1:                      break;                  case 2:                      predicate = (LambdaExpression)StripQuote(methodCallExpression.Arguments[1]);                      break;                  default:                      throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateMaxMin,The following statement contains a magic number: switch (methodCallExpression.Arguments.Count)              {                  case 1:                      break;                  case 2:                      if (_projection != null)                      {                          var message = string.Format("{0} must be used with either Select or a selector argument' but not both."' methodName);                          throw new NotSupportedException(message);                      }                      _projection = (LambdaExpression)StripQuote(methodCallExpression.Arguments[1]);                      break;                  default:                      throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateOrderBy,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateSelect,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateSelect,The following statement contains a magic number: if (lambdaExpression.Parameters.Count == 2)              {                  var message = "The indexed version of the Select query operator is not supported.";                  throw new NotSupportedException(message);              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateSkip,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateTake,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateThenBy,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateWithIndex,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateWhere,The following statement contains a magic number: if (methodCallExpression.Arguments.Count != 2)              {                  throw new ArgumentOutOfRangeException("methodCallExpression");              }
Magic Number,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateWhere,The following statement contains a magic number: if (predicate.Parameters.Count == 2)              {                  var message = "The indexed version of the Where query operator is not supported.";                  throw new NotSupportedException(message);              }
Magic Number,MongoDB.Driver.Operations,AddUserUsingUserManagementCommandsOperation,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Operations\AddUserUsingUserManagementCommandsOperation.cs,UserExists,The following statement contains a magic number: try              {                  var command = new BsonDocument("usersInfo"' _username);                  var operation = new ReadCommandOperation<BsonDocument>(_databaseNamespace' command' BsonDocumentSerializer.Instance' _messageEncoderSettings);                  var result = operation.Execute(channelSource' ReadPreference.Primary' session' cancellationToken);                    BsonValue users;                  if (result.TryGetValue("users"' out users) && users.IsBsonArray && users.AsBsonArray.Count > 0)                  {                      return true;                  }                  else                  {                      return false;                  }              }              catch (MongoCommandException ex)              {                  if (ex.Code == 13)                  {                      return false;                  }                    throw;              }
Missing Default,MongoDB.Driver.Linq,ExpressionFormatter,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Expressions\ExpressionFormatter.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.ArrayLength: _sb.Append(".Length"); break;              }
Missing Default,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,VisitBinary,The following switch statement is missing a default case: switch (node.NodeType)                  {                      case ExpressionType.Equal:                      case ExpressionType.GreaterThan:                      case ExpressionType.GreaterThanOrEqual:                      case ExpressionType.LessThan:                      case ExpressionType.LessThanOrEqual:                      case ExpressionType.NotEqual:                          node = Expression.MakeBinary(                              node.NodeType'                              node.Left'                              node.Right'                              false' // liftToNull                              null' // method                              null); // conversion                          break;                  }
Missing Default,MongoDB.Driver.Linq,ExpressionNormalizer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\ExpressionNormalizer.cs,EnsureConstantIsOnRight,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.LessThan: operatorType = ExpressionType.GreaterThan; break;                      case ExpressionType.LessThanOrEqual: operatorType = ExpressionType.GreaterThanOrEqual; break;                      case ExpressionType.GreaterThan: operatorType = ExpressionType.LessThan; break;                      case ExpressionType.GreaterThanOrEqual: operatorType = ExpressionType.LessThanOrEqual; break;                  }
Missing Default,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildQuery,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.And:                      query = BuildAndQuery((BinaryExpression)expression);                      break;                  case ExpressionType.AndAlso:                      query = BuildAndAlsoQuery((BinaryExpression)expression);                      break;                  case ExpressionType.ArrayIndex:                      query = BuildBooleanQuery(expression);                      break;                  case ExpressionType.Call:                      query = BuildMethodCallQuery((MethodCallExpression)expression);                      break;                  case ExpressionType.Constant:                      query = BuildConstantQuery((ConstantExpression)expression);                      break;                  case ExpressionType.Equal:                  case ExpressionType.GreaterThan:                  case ExpressionType.GreaterThanOrEqual:                  case ExpressionType.LessThan:                  case ExpressionType.LessThanOrEqual:                  case ExpressionType.NotEqual:                      query = BuildComparisonQuery((BinaryExpression)expression);                      break;                  case ExpressionType.MemberAccess:                      query = BuildBooleanQuery(expression);                      break;                  case ExpressionType.Not:                      query = BuildNotQuery((UnaryExpression)expression);                      break;                  case ExpressionType.Or:                      query = BuildOrQuery((BinaryExpression)expression);                      break;                  case ExpressionType.OrElse:                      query = BuildOrElseQuery((BinaryExpression)expression);                      break;                  case ExpressionType.TypeIs:                      query = BuildTypeIsQuery((TypeBinaryExpression)expression);                      break;              }
Missing Default,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildArrayLengthQuery,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.Equal:                          return Query.Size(serializationInfo.ElementName' value);                      case ExpressionType.NotEqual:                          return Query.Not(Query.Size(serializationInfo.ElementName' value));                      case ExpressionType.GreaterThan:                          return Query.SizeGreaterThan(serializationInfo.ElementName' value);                      case ExpressionType.GreaterThanOrEqual:                          return Query.SizeGreaterThanOrEqual(serializationInfo.ElementName' value);                      case ExpressionType.LessThan:                          return Query.SizeLessThan(serializationInfo.ElementName' value);                      case ExpressionType.LessThanOrEqual:                          return Query.SizeLessThanOrEqual(serializationInfo.ElementName' value);                  }
Missing Default,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildComparisonQuery,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.Equal: return Query.EQ(serializationInfo.ElementName' serializedValue);                      case ExpressionType.GreaterThan: return Query.GT(serializationInfo.ElementName' serializedValue);                      case ExpressionType.GreaterThanOrEqual: return Query.GTE(serializationInfo.ElementName' serializedValue);                      case ExpressionType.LessThan: return Query.LT(serializationInfo.ElementName' serializedValue);                      case ExpressionType.LessThanOrEqual: return Query.LTE(serializationInfo.ElementName' serializedValue);                      case ExpressionType.NotEqual: return Query.NE(serializationInfo.ElementName' serializedValue);                  }
Missing Default,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildMethodCallQuery,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)              {                  case "Any": return BuildAnyQuery(methodCallExpression);                  case "Contains": return BuildContainsQuery(methodCallExpression);                  case "ContainsAll": return BuildContainsAllQuery(methodCallExpression);                  case "ContainsAny": return BuildContainsAnyQuery(methodCallExpression);                  case "ContainsKey": return BuildContainsKeyQuery(methodCallExpression);                  case "EndsWith": return BuildStringQuery(methodCallExpression);                  case "Equals": return BuildEqualsQuery(methodCallExpression);                  case "In": return BuildInQuery(methodCallExpression);                  case "Inject": return BuildInjectQuery(methodCallExpression);                  case "IsMatch": return BuildIsMatchQuery(methodCallExpression);                  case "IsNullOrEmpty": return BuildIsNullOrEmptyQuery(methodCallExpression);                  case "StartsWith": return BuildStringQuery(methodCallExpression);              }
Missing Default,MongoDB.Driver.Linq,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\PredicateTranslator.cs,BuildStringLengthQuery,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.NotEqual:                      case ExpressionType.Equal: regex = @"/^.{" + value.ToString() + "}$/s"; break;                      case ExpressionType.GreaterThan: regex = @"/^.{" + (value + 1).ToString() + "'}$/s"; break;                      case ExpressionType.GreaterThanOrEqual: regex = @"/^.{" + value.ToString() + "'}$/s"; break;                      case ExpressionType.LessThan: regex = @"/^.{0'" + (value - 1).ToString() + "}$/s"; break;                      case ExpressionType.LessThanOrEqual: regex = @"/^.{0'" + value.ToString() + "}$/s"; break;                  }
Missing Default,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateCount,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)              {                  case "Count":                      SetElementSelector(methodCallExpression' source => (int)((IProjector)source).Cursor.Size());                      break;                  case "LongCount":                      SetElementSelector(methodCallExpression' source => ((IProjector)source).Cursor.Size());                      break;              }
Missing Default,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateElementAt,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)              {                  case "ElementAt":                      SetElementSelector(methodCallExpression' source => source.Cast<object>().First());                      break;                  case "ElementAtOrDefault":                      SetElementSelector(methodCallExpression' source => source.Cast<object>().FirstOrDefault());                      break;              }
Missing Default,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateFirstOrSingle,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)              {                  case "First":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().First());                      break;                  case "FirstOrDefault":                      _take = 1;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().FirstOrDefault());                      break;                  case "Single":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().Single());                      break;                  case "SingleOrDefault":                      _take = 2;                      SetElementSelector(methodCallExpression' source => source.Cast<object>().SingleOrDefault());                      break;              }
Missing Default,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateLast,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)                  {                      case "Last":                          SetElementSelector(methodCallExpression' source => source.Cast<object>().First());                          break;                      case "LastOrDefault":                          SetElementSelector(methodCallExpression' source => source.Cast<object>().FirstOrDefault());                          break;                  }
Missing Default,MongoDB.Driver.Linq,SelectQuery,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Translators\SelectQuery.cs,TranslateLast,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)                  {                      case "Last":                          SetElementSelector(methodCallExpression' source => source.Cast<object>().Last());                          break;                      case "LastOrDefault":                          SetElementSelector(methodCallExpression' source => source.Cast<object>().LastOrDefault());                          break;                  }
Missing Default,MongoDB.Driver.Linq.Utils,BsonSerializationInfoFinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver.Legacy\Linq\Utils\BsonSerializationInfoFinder.cs,VisitMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "ElementAt":                      return VisitElementAt(node);                  case "get_Item":                      return VisitGetItem(node);              }
