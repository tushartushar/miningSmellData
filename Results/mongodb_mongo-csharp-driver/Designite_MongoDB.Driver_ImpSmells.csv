Implementation smell,Namespace,Class,File,Method,Description
Long Method,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,ToString,The method has 193 lines of code.
Long Method,MongoDB.Driver.Linq.Expressions,ExpressionComparer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\ExpressionComparer.cs,Compare,The method has 109 lines of code.
Long Method,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateValue,The method has 107 lines of code.
Long Method,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The method has 139 lines of code.
Long Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The method has 139 lines of code.
Complex Method,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,Cyclomatic complexity of the method is 14
Complex Method,MongoDB.Driver,FindFluent<TDocument;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FindFluent.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,MongoDB.Driver,StringFieldDefinitionHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Resolve,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,ApplyDefaultValues,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,ToString,Cyclomatic complexity of the method is 44
Complex Method,MongoDB.Driver.Linq.Processors,AccumulatorBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\AccumulatorBinder.cs,TryGetAccumulatorTypeAndArgument,Cyclomatic complexity of the method is 14
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateArrayLength,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateComparison,Cyclomatic complexity of the method is 11
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateContainsKey,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIsMatch,Cyclomatic complexity of the method is 8
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringLengthQuery,Cyclomatic complexity of the method is 9
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringQuery,Cyclomatic complexity of the method is 13
Complex Method,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateTypeComparisonQuery,Cyclomatic complexity of the method is 10
Complex Method,MongoDB.Driver.Support,ReflectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Support\ReflectionExtensions.cs,FindIEnumerable,Cyclomatic complexity of the method is 11
Long Parameter List,MongoDB.Driver,AggregateFluent<TDocument;TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluent.cs,GraphLookup,The method has 7 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,AggregateFluent<TDocument;TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluent.cs,Lookup,The method has 5 parameters. Parameters: foreignCollectionName' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,Distinct,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,DistinctAsync,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,FindOneAndReplace,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,MapReduce,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,MapReduceAsync,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Bucket,The method has 5 parameters. Parameters: pipeline' groupBy' boundaries' output' options
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Bucket,The method has 5 parameters. Parameters: pipeline' groupBy' boundaries' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Bucket,The method has 6 parameters. Parameters: pipeline' groupBy' boundaries' output' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,BucketAuto,The method has 5 parameters. Parameters: pipeline' groupBy' buckets' output' options
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,BucketAuto,The method has 5 parameters. Parameters: pipeline' groupBy' buckets' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,BucketAuto,The method has 6 parameters. Parameters: pipeline' groupBy' buckets' output' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The method has 8 parameters. Parameters: pipeline' from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The method has 7 parameters. Parameters: pipeline' from' connectFromField' connectToField' startWith' as' options
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The method has 7 parameters. Parameters: pipeline' from' connectFromField' connectToField' startWith' as' depthField
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The method has 8 parameters. Parameters: pipeline' from' connectFromField' connectToField' startWith' as' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The method has 9 parameters. Parameters: pipeline' from' connectFromField' connectToField' startWith' as' depthField' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Lookup,The method has 6 parameters. Parameters: pipeline' foreignCollection' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Lookup,The method has 6 parameters. Parameters: pipeline' foreignCollection' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,BulkWriteError,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\BulkWriteError.cs,BulkWriteError,The method has 5 parameters. Parameters: index' category' code' message' details
Long Parameter List,MongoDB.Driver,AggregateFluentBase<TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluentBase.cs,GraphLookup,The method has 7 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,AggregateFluentBase<TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluentBase.cs,Lookup,The method has 5 parameters. Parameters: foreignCollectionName' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Bucket,The method has 5 parameters. Parameters: groupBy' boundaries' output' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,BucketAuto,The method has 5 parameters. Parameters: groupBy' buckets' output' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The method has 7 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The method has 6 parameters. Parameters: from' connectFromField' connectToField' startWith' as' options
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The method has 6 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The method has 7 parameters. Parameters: from' connectFromField' connectToField' startWith' as' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The method has 8 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField' options' translationOptions
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Lookup,The method has 5 parameters. Parameters: foreignCollection' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Lookup,The method has 5 parameters. Parameters: foreignCollection' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,GeoWithinBox,The method has 5 parameters. Parameters: field' lowerLeftX' lowerLeftY' upperRightX' upperRightY
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,GeoWithinBox,The method has 5 parameters. Parameters: field' lowerLeftX' lowerLeftY' upperRightX' upperRightY
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Near,The method has 5 parameters. Parameters: field' x' y' maxDistance' minDistance
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Near,The method has 5 parameters. Parameters: field' x' y' maxDistance' minDistance
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,NearSphere,The method has 5 parameters. Parameters: field' x' y' maxDistance' minDistance
Long Parameter List,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,NearSphere,The method has 5 parameters. Parameters: field' x' y' maxDistance' minDistance
Long Parameter List,MongoDB.Driver,NearFilterDefinition<TDocument;TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,NearFilterDefinition,The method has 5 parameters. Parameters: field' point' spherical' maxDistance' minDistance
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Bucket,The method has 5 parameters. Parameters: aggregate' groupBy' boundaries' output' options
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,BucketAuto,The method has 5 parameters. Parameters: aggregate' groupBy' buckets' output' options
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The method has 7 parameters. Parameters: aggregate' from' connectFromField' connectToField' startWith' as' options
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The method has 7 parameters. Parameters: aggregate' from' connectFromField' connectToField' startWith' as' depthField
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The method has 7 parameters. Parameters: aggregate' from' connectFromField' connectToField' startWith' as' options
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The method has 8 parameters. Parameters: aggregate' from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Lookup,The method has 5 parameters. Parameters: aggregate' foreignCollectionName' localField' foreignField' as
Long Parameter List,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Lookup,The method has 6 parameters. Parameters: aggregate' foreignCollection' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,ClusterKey,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ClusterKey.cs,ClusterKey,The method has 22 parameters. Parameters: applicationName' clusterConfigurator' connectionMode' connectTimeout' credentials' heartbeatInterval' heartbeatTimeout' ipv6' localThreshold' maxConnectionIdleTime' maxConnectionLifeTime' maxConnectionPoolSize' minConnectionPoolSize' replicaSetName' servers' serverSelectionTimeout' socketTimeout' sslSettings' useSsl' verifySslCertificate' waitQueueSize' waitQueueTimeout
Long Parameter List,MongoDB.Driver,IAggregateFluent,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluent.cs,GraphLookup,The method has 7 parameters. Parameters: from' connectFromField' connectToField' startWith' as' depthField' options
Long Parameter List,MongoDB.Driver,IAggregateFluent,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluent.cs,Lookup,The method has 5 parameters. Parameters: foreignCollectionName' localField' foreignField' as' options
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Count,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,CountAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteMany,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteManyAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteOne,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteOneAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Distinct,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 5 parameters. Parameters: collection' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DistinctAsync,The method has 6 parameters. Parameters: collection' session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindSync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindSync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The method has 5 parameters. Parameters: collection' session' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 6 parameters. Parameters: collection' filter' session' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOne,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOne,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOneAsync,The method has 5 parameters. Parameters: collection' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOneAsync,The method has 6 parameters. Parameters: collection' session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateMany,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateMany,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateManyAsync,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateManyAsync,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateOne,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateOne,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateOneAsync,The method has 5 parameters. Parameters: collection' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateOneAsync,The method has 6 parameters. Parameters: collection' session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,CollectionOutput,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MapReduceOptions.cs,CollectionOutput,The method has 5 parameters. Parameters: collectionName' outputMode' databaseName' sharded' nonAtomic
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,Distinct,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,DistinctAsync,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,FindOneAndReplace,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,MapReduce,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,MapReduceAsync,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOne,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOneAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateMany,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateManyAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOne,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOneAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,CreateView,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,CreateView,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,CreateViewAsync,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,CreateViewAsync,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,RenameCollection,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseBase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseBase.cs,RenameCollectionAsync,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,UpdateDefinitionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,PushEach,The method has 6 parameters. Parameters: update' field' values' slice' position' sort
Long Parameter List,MongoDB.Driver,UpdateDefinitionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,PushEach,The method has 6 parameters. Parameters: update' field' values' slice' position' sort
Long Parameter List,MongoDB.Driver,UpdateDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,PushEach,The method has 5 parameters. Parameters: field' values' slice' position' sort
Long Parameter List,MongoDB.Driver,UpdateDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,PushEach,The method has 5 parameters. Parameters: field' values' slice' position' sort
Long Parameter List,MongoDB.Driver,PushUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,PushUpdateDefinition,The method has 5 parameters. Parameters: field' values' slice' position' sort
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,Distinct,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,DistinctAsync,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,FindOneAndReplace,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,MapReduce,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,MapReduceAsync,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,ReplaceOne,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,ReplaceOneAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,UpdateMany,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,UpdateManyAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,UpdateOne,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoCollection,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollection.cs,UpdateOneAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,CreateView,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,CreateView,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,CreateViewAsync,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,CreateViewAsync,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,RenameCollection,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,IMongoDatabase,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoDatabase.cs,RenameCollectionAsync,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,Acknowledged,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\DeleteResult.cs,Acknowledged,The method has 7 parameters. Parameters: requestCount' matchedCount' deletedCount' insertedCount' modifiedCount' processedRequests' upserts
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MongoCollectionImpl,The method has 5 parameters. Parameters: database' collectionNamespace' settings' cluster' operationExecutor
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MongoCollectionImpl,The method has 6 parameters. Parameters: database' collectionNamespace' settings' cluster' operationExecutor' documentSerializer
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,Distinct,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,DistinctAsync,The method has 5 parameters. Parameters: session' field' filter' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndReplace,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndReplaceAsync,The method has 5 parameters. Parameters: session' filter' replacement' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndUpdate,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndUpdateAsync,The method has 5 parameters. Parameters: session' filter' update' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MapReduce,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MapReduceAsync,The method has 5 parameters. Parameters: session' map' reduce' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,MongoDatabaseImpl,The method has 5 parameters. Parameters: client' databaseNamespace' settings' cluster' operationExecutor
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateView,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateView,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateViewAsync,The method has 5 parameters. Parameters: viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateViewAsync,The method has 6 parameters. Parameters: session' viewName' viewOn' pipeline' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RenameCollection,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RenameCollectionAsync,The method has 5 parameters. Parameters: session' oldName' newName' options' cancellationToken
Long Parameter List,MongoDB.Driver,MongoBulkWriteException<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoBulkWriteException.cs,MongoBulkWriteException,The method has 5 parameters. Parameters: connectionId' result' writeErrors' writeConcernError' unprocessedRequests
Long Parameter List,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,GroupJoin,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,Join,The method has 5 parameters. Parameters: outer' inner' outerKeySelector' innerKeySelector' resultSelector
Long Parameter List,MongoDB.Driver.Linq.Expressions,AccumulatorExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\AccumulatorExpression.cs,AccumulatorExpression,The method has 5 parameters. Parameters: type' fieldName' serializer' accumulatorType' argument
Long Parameter List,MongoDB.Driver.Linq.Expressions,JoinExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\JoinExpression.cs,JoinExpression,The method has 6 parameters. Parameters: type' source' joined' sourceKeySelector' joinedKeySelector' joinedItemName
Long Parameter List,MongoDB.Driver.Linq.Expressions,GroupJoinExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\GroupJoinExpression.cs,GroupJoinExpression,The method has 6 parameters. Parameters: type' source' joined' sourceKeySelector' joinedKeySelector' joinedItemName
Long Parameter List,MongoDB.Driver.Linq.Expressions,SelectManyExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\SelectManyExpression.cs,SelectManyExpression,The method has 5 parameters. Parameters: source' collectionItemName' collectionSelector' resultItemName' resultSelector
Long Parameter List,MongoDB.Driver.Linq.Expressions.ResultOperators,AggregateResultOperator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\ResultOperators\AggregateResultOperator.cs,AggregateResultOperator,The method has 5 parameters. Parameters: seed' reducer' finalizer' itemName' serializer
Long Parameter List,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinSerializer<T>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinSerializer.cs,JoinSerializer,The method has 6 parameters. Parameters: sourceSerializer' sourceMemberName' joinedSerializer' joinedMemberName' joinedFieldName' creator
Long Parameter List,MongoDB.Driver.Linq.Translators,AggregateGroupTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateGroupTranslator.cs,Translate,The method has 5 parameters. Parameters: idProjector' groupProjector' parameterSerializer' serializerRegistry' translationOptions
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter enumConvertingSerializerConstructor is 35.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter underlyingValueSerializerInterfaceType is 38.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter enumConvertingSerializerConstructor is 35.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter nonNullableFieldSerializerInterfaceType is 39.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter nullableEnumConvertingSerializerType is 36.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter nullableEnumConvertingSerializerConstructor is 43.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter ienumerableSerializerConstructor is 32.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter convertIfPossibleSerializerType is 31.
Long Identifier,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the parameter convertIfPossibleSerializerConstructor is 38.
Long Identifier,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The length of the parameter renderedRestrictSearchWithMatch is 31.
Long Identifier,MongoDB.Driver,FieldOfTypeFilterDefinition<TDocument;TField;TDerived>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the parameter unprefixedRenderedDerivedFilter is 31.
Long Identifier,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,CreateChangeStreamOperation,The length of the parameter changeStreamDocumentSerializer is 30.
Long Identifier,MongoDB.Driver,MongoIndexManager,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,CreateCreateIndexRequests,The length of the parameter renderedPartialFilterExpression is 31.
Long Identifier,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,,The length of the parameter _authenticationMechanismProperties is 34.
Long Identifier,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,,The length of the parameter __certificateCollectionEqualityComparer is 39.
Long Identifier,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,,The length of the parameter _clientCertificateSelectionCallback is 35.
Long Identifier,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,,The length of the parameter _serverCertificateValidationCallback is 36.
Long Identifier,MongoDB.Driver,MongoUrl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrl.cs,,The length of the parameter _authenticationMechanismProperties is 34.
Long Identifier,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,Bind,The length of the parameter collectionSerializationExpression is 33.
Long Identifier,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonObjectSerializerHelper<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonObjectSerializerHelper.cs,,The length of the parameter _coordinateReferenceSystemSerializer is 36.
Long Identifier,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonMultiLineStringCoordinatesSerializer<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonMultiLineStringCoordinatesSerializer.cs,,The length of the parameter _lineStringCoordinatesSerializer is 32.
Long Identifier,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonPolygonCoordinatesSerializer<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonPolygonCoordinatesSerializer.cs,,The length of the parameter _linearRingCoordinatesSerializer is 32.
Long Statement,MongoDB.Driver,AggregateFluent<TDocument;TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluent.cs,GraphLookup,The length of the statement  "            return WithPipeline(_pipeline.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField' options)); " is 120.
Long Statement,MongoDB.Driver,AggregateFluent<TDocument;TResult>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\AggregateFluent.cs,Unwind,The length of the statement  "            return WithPipeline(_pipeline.Unwind(field' new AggregateUnwindOptions<TNewResult> { ResultSerializer = newResultSerializer })); " is 128.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                var nullableSerializerConstructor = nullableSerializerType.GetTypeInfo().GetConstructor(new[] { fieldSerializerInterfaceType }); " is 128.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                    var enumConvertingSerializerConstructor = enumConvertingSerializerType.GetTypeInfo().GetConstructor(new[] { fieldSerializerInterfaceType }); " is 140.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                    var enumConvertingSerializerConstructor = enumConvertingSerializerType.GetTypeInfo().GetConstructor(new[] { fieldSerializerInterfaceType }); " is 140.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                    var nullableSerializerConstructor = nullableSerializerType.GetTypeInfo().GetConstructor(new[] { underlyingValueSerializerInterfaceType }); " is 138.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                var nullableEnumConvertingSerializerType = typeof(NullableEnumConvertingSerializer<'>).MakeGenericType(nonNullableValueType' nonNullableFieldType); " is 147.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                var nullableEnumConvertingSerializerConstructor = nullableEnumConvertingSerializerType.GetTypeInfo().GetConstructor(new[] { nonNullableFieldSerializerInterfaceType }); " is 167.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                return (IBsonSerializer)nullableEnumConvertingSerializerConstructor.Invoke(new object[] { nonNullableFieldSerializer }); " is 120.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                (itemType = fieldIEnumerableInterfaceType.GetSequenceElementType()) == valueIEnumerableInterfaceType.GetSequenceElementType() && " is 128.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "                var ienumerableSerializerConstructor = ienumerableSerializerType.GetTypeInfo().GetConstructor(new[] { itemSerializerInterfaceType }); " is 133.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "            var convertIfPossibleSerializerConstructor = convertIfPossibleSerializerType.GetTypeInfo().GetConstructor(new[] { fieldSerializerInterfaceType' typeof(IBsonSerializerRegistry) }); " is 179.
Long Statement,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The length of the statement  "            return (IBsonSerializer)convertIfPossibleSerializerConstructor.Invoke(new object[] { fieldSerializer' serializerRegistry }); " is 124.
Long Statement,MongoDB.Driver,FilteredMongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilteredMongoCollectionBase.cs,FindOneAndReplaceAsync,The length of the statement  "            return _wrappedCollection.FindOneAndReplaceAsync(session' CombineFilters(filter)' replacement' options' cancellationToken); " is 123.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Bucket,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.Bucket(groupBy' boundaries' output' options' translationOptions)); " is 125.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,BucketAuto,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.BucketAuto(groupBy' buckets' output' options' translationOptions)); " is 126.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField' options)); " is 149.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' options)); " is 137.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField)); " is 140.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' options' translationOptions)); " is 157.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,GraphLookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField' options' translationOptions)); " is 169.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Lookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.Lookup(foreignCollection' localField' foreignField' @as' options)); " is 126.
Long Statement,MongoDB.Driver,PipelineDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinitionBuilder.cs,Lookup,The length of the statement  "            return pipeline.AppendStage(PipelineStageDefinitionBuilder.Lookup(foreignCollection' localField' foreignField' @as' options)); " is 126.
Long Statement,MongoDB.Driver,OptimizingPipelineDefinition<TInput;TOutput>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineDefinition.cs,Render,The length of the statement  "                    var combinedStage = new BsonDocument("$match"' combinedFilter.Render(BsonDocumentSerializer.Instance' serializerRegistry)); " is 123.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Bucket,The length of the statement  "                    var serializedDefaultBucket = options != null && options.DefaultBucket.HasValue ? valueSerializer.ToBsonValue(options.DefaultBucket.Value) : null; " is 146.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Bucket,The length of the statement  "                    var serializedDefaultBucket = options != null && options.DefaultBucket.HasValue ? valueSerializer.ToBsonValue(options.DefaultBucket.Value) : null; " is 146.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The length of the statement  "            Ensure.That(IsTConnectToOrEnumerableTConnectTo<TConnectFrom' TConnectTo>()' "TConnectFrom must be either TConnectTo or a type that implements IEnumerable<TConnectTo>."' nameof(TConnectFrom)); " is 191.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,GraphLookup,The length of the statement  "            Ensure.That(IsTConnectToOrEnumerableTConnectTo<TStartWith' TConnectTo>()' "TStartWith must be either TConnectTo or a type that implements IEnumerable<TConnectTo>."' nameof(TStartWith)); " is 185.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Group,The length of the statement  "                    return new RenderedPipelineStageDefinition<TOutput>(operatorName' new BsonDocument(operatorName' renderedProjection.Document)' renderedProjection.ProjectionSerializer); " is 168.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Lookup,The length of the statement  "                    var foreignSerializer = options.ForeignSerializer ?? (inputSerializer as IBsonSerializer<TForeignDocument>) ?? sr.GetSerializer<TForeignDocument>(); " is 148.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Lookup,The length of the statement  "                    var outputSerializer = options.ResultSerializer ?? (inputSerializer as IBsonSerializer<TOutput>) ?? sr.GetSerializer<TOutput>(); " is 128.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Match,The length of the statement  "                (s' sr) => new RenderedPipelineStageDefinition<TInput>(operatorName' new BsonDocument(operatorName' filter.Render(s' sr))' s)); " is 127.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,OfType,The length of the statement  "                var message = string.Format("OfType requires that a discriminator convention exist for type: {0}."' BsonUtils.GetFriendlyTypeName(typeof(TOutput))); " is 148.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Out,The length of the statement  "            return new BsonDocumentPipelineStageDefinition<TInput' TInput>(new BsonDocument("$out"' outputCollection.CollectionNamespace.CollectionName)); " is 142.
Long Statement,MongoDB.Driver,PipelineStageDefinitionBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,SortByCount,The length of the statement  "                    return new RenderedPipelineStageDefinition<AggregateSortByCountResult<TValue>>(operatorName' new BsonDocument(operatorName' value.Render(s' sr))' outputSerializer); " is 164.
Long Statement,MongoDB.Driver,ExpressionBucketOutputProjection<TInput;TValue;TOutput>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Render,The length of the statement  "            var renderedOutput = AggregateGroupTranslator.Translate<TValue' TInput' TOutput>(_valueExpression' _outputExpression' documentSerializer' serializerRegistry' _translationOptions); " is 179.
Long Statement,MongoDB.Driver,GroupExpressionProjection<TInput;TKey;TOutput>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Render,The length of the statement  "            return AggregateGroupTranslator.Translate<TKey' TInput' TOutput>(_idExpression' _groupExpression' documentSerializer' serializerRegistry' _translationOptions); " is 159.
Long Statement,MongoDB.Driver,ProjectExpressionProjection<TInput;TOutput>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\PipelineStageDefinitionBuilder.cs,Render,The length of the statement  "            return AggregateProjectTranslator.Translate<TInput' TOutput>(_expression' inputSerializer' serializerRegistry' _translationOptions); " is 132.
Long Statement,MongoDB.Driver,ElementMatchProjectionDefinition<TSource;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,IndexKeysDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IndexKeysDefinitionBuilder.cs,GeoHaystack,The length of the statement  "            FieldDefinition<TDocument> additional = additionalFieldName == null ? null : new ExpressionFieldDefinition<TDocument>(additionalFieldName); " is 139.
Long Statement,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,GeoWithinCenter,The length of the statement  "            return new OperatorFilterDefinition<TDocument>("$geoWithin"' field' new BsonDocument("$center"' new BsonArray { new BsonArray { x' y }' radius })); " is 147.
Long Statement,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,GeoWithinCenterSphere,The length of the statement  "            return new OperatorFilterDefinition<TDocument>("$geoWithin"' field' new BsonDocument("$centerSphere"' new BsonArray { new BsonArray { x' y }' radius })); " is 153.
Long Statement,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,OfType,The length of the statement  "            return OfType<TField' TDerived>(new ExpressionFieldDefinition<TDocument' TField>(field)' new ExpressionFilterDefinition<TDerived>(derivedFieldFilter)); " is 151.
Long Statement,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Text,The length of the statement  "                { "$diacriticSensitive"' () => options.DiacriticSensitive.Value' options != null && options.DiacriticSensitive.HasValue } " is 121.
Long Statement,MongoDB.Driver,ArrayOperatorFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,ArrayOperatorFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                itemSerializer = FieldValueSerializerHelper.GetSerializerForValueType(itemSerializationInfo.Serializer' serializerRegistry' typeof(TItem)); " is 139.
Long Statement,MongoDB.Driver,ElementMatchFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,DocumentOfTypeFilterDefinition<TDocument;TDerived>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                var message = string.Format("OfType requires a discriminator convention for type: {0}."' BsonUtils.GetFriendlyTypeName(typeof(TDocument))); " is 139.
Long Statement,MongoDB.Driver,DocumentOfTypeFilterDefinition<TDocument;TDerived>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                throw new NotSupportedException($"OfType requires that documents of type {BsonUtils.GetFriendlyTypeName(typeof(TDerived))} have a discriminator value."); " is 153.
Long Statement,MongoDB.Driver,FieldOfTypeFilterDefinition<TDocument;TField;TDerived>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                var message = string.Format("OfType requires a discriminator convention for type: {0}."' BsonUtils.GetFriendlyTypeName(typeof(TField))); " is 136.
Long Statement,MongoDB.Driver,ArrayAsSingleItemOperatorFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,ArrayAsSingleItemOperatorFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                itemSerializer = FieldValueSerializerHelper.GetSerializerForValueType(itemSerializationInfo.Serializer' serializerRegistry' typeof(TItem)); " is 139.
Long Statement,MongoDB.Driver,ArrayAsSingleItemSimpleFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,ArrayAsSingleItemSimpleFilterDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,Render,The length of the statement  "                itemSerializer = (IBsonSerializer<TItem>)FieldValueSerializerHelper.GetSerializerForValueType(itemSerializationInfo.Serializer' serializerRegistry' typeof(TItem)); " is 163.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' options)); " is 138.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField)); " is 141.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' options' aggregate.Options?.TranslationOptions)); " is 177.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,GraphLookup,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.GraphLookup(from' connectFromField' connectToField' startWith' @as' depthField' options' aggregate.Options?.TranslationOptions)); " is 189.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Lookup,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.Lookup(foreignCollection' localField' foreignField' @as' options)); " is 127.
Long Statement,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Unwind,The length of the statement  "            return aggregate.AppendStage(PipelineStageDefinitionBuilder.Unwind(field' new AggregateUnwindOptions<TNewResult> { ResultSerializer = newResultSerializer })); " is 158.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,Aggregate,The length of the statement  "            return new AggregateFluent<TDocument' TDocument>(session' collection' emptyPipeline' options ?? new AggregateOptions()); " is 120.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteManyAsync,The length of the statement  "            return collection.DeleteManyAsync(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 122.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,DeleteOneAsync,The length of the statement  "            return collection.DeleteOneAsync(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 121.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindSync,The length of the statement  "            return collection.FindSync<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 126.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindAsync,The length of the statement  "            return collection.FindAsync<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 127.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The length of the statement  "            return collection.FindOneAndDelete<TDocument>(new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 125.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The length of the statement  "            return collection.FindOneAndDelete<TProjection>(new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 127.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The length of the statement  "            return collection.FindOneAndDelete<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 134.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDelete,The length of the statement  "            return collection.FindOneAndDelete<TProjection>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 136.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The length of the statement  "            return collection.FindOneAndDeleteAsync<TDocument>(new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 130.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The length of the statement  "            return collection.FindOneAndDeleteAsync<TProjection>(new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 132.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The length of the statement  "            return collection.FindOneAndDeleteAsync<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 139.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndDeleteAsync,The length of the statement  "            return collection.FindOneAndDeleteAsync<TProjection>(session' new ExpressionFilterDefinition<TDocument>(filter)' options' cancellationToken); " is 141.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The length of the statement  "            return collection.FindOneAndReplace<TDocument>(new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 139.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplace,The length of the statement  "            return collection.FindOneAndReplace<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 148.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The length of the statement  "            return collection.FindOneAndReplaceAsync<TDocument>(new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 144.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndReplaceAsync,The length of the statement  "            return collection.FindOneAndReplaceAsync<TDocument>(session' new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 153.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The length of the statement  "            return collection.FindOneAndUpdate(new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 122.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdate,The length of the statement  "            return collection.FindOneAndUpdate(session' new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 131.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The length of the statement  "            return collection.FindOneAndUpdateAsync(new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 127.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,FindOneAndUpdateAsync,The length of the statement  "            return collection.FindOneAndUpdateAsync(session' new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 136.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOne,The length of the statement  "            return collection.ReplaceOne(new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 121.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOne,The length of the statement  "            return collection.ReplaceOne(session' new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 130.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOneAsync,The length of the statement  "            return collection.ReplaceOneAsync(new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 126.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,ReplaceOneAsync,The length of the statement  "            return collection.ReplaceOneAsync(session' new ExpressionFilterDefinition<TDocument>(filter)' replacement' options' cancellationToken); " is 135.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateMany,The length of the statement  "            return collection.UpdateMany(session' new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 125.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateManyAsync,The length of the statement  "            return collection.UpdateManyAsync(new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 121.
Long Statement,MongoDB.Driver,IMongoCollectionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IMongoCollectionExtensions.cs,UpdateManyAsync,The length of the statement  "            return collection.UpdateManyAsync(session' new ExpressionFilterDefinition<TDocument>(filter)' update' options' cancellationToken); " is 130.
Long Statement,MongoDB.Driver,MapReduceOutputOptions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MapReduceOptions.cs,Merge,The length of the statement  "            return new CollectionOutput(collectionName' Core.Operations.MapReduceOutputMode.Merge' databaseName' sharded' nonAtomic); " is 121.
Long Statement,MongoDB.Driver,MapReduceOutputOptions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MapReduceOptions.cs,Reduce,The length of the statement  "            return new CollectionOutput(collectionName' Core.Operations.MapReduceOutputMode.Reduce' databaseName' sharded' nonAtomic); " is 122.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertOne,The length of the statement  "            InsertOne(document' options' (requests' bulkWriteOptions) => BulkWrite(session' requests' bulkWriteOptions' cancellationToken)); " is 128.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertOneAsync,The length of the statement  "            return InsertOneAsync(document' options' (requests' bulkWriteOptions) => BulkWriteAsync(requests' bulkWriteOptions' cancellationToken)); " is 136.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertOneAsync,The length of the statement  "            return InsertOneAsync(document' options' (requests' bulkWriteOptions) => BulkWriteAsync(session' requests' bulkWriteOptions' cancellationToken)); " is 145.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertMany,The length of the statement  "            InsertMany(documents' options' (requests' bulkWriteOptions) => BulkWrite(requests' bulkWriteOptions' cancellationToken)); " is 121.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertMany,The length of the statement  "            InsertMany(documents' options' (requests' bulkWriteOptions) => BulkWrite(session' requests' bulkWriteOptions' cancellationToken)); " is 130.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertManyAsync,The length of the statement  "            return InsertManyAsync(documents' options' (requests' bulkWriteOptions) => BulkWriteAsync(requests' bulkWriteOptions' cancellationToken)); " is 138.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,InsertManyAsync,The length of the statement  "            return InsertManyAsync(documents' options' (requests' bulkWriteOptions) => BulkWriteAsync(session' requests' bulkWriteOptions' cancellationToken)); " is 147.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOne,The length of the statement  "            return ReplaceOne(filter' replacement' options' (requests' bulkWriteOptions) => BulkWrite(requests' bulkWriteOptions' cancellationToken)); " is 138.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOne,The length of the statement  "            return ReplaceOne(filter' replacement' options' (requests' bulkWriteOptions) => BulkWrite(session' requests' bulkWriteOptions' cancellationToken)); " is 147.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOneAsync,The length of the statement  "            return ReplaceOneAsync(filter' replacement' options' (requests' bulkWriteOptions) => BulkWriteAsync(requests' bulkWriteOptions' cancellationToken)); " is 148.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,ReplaceOneAsync,The length of the statement  "            return ReplaceOneAsync(filter' replacement' options' (requests' bulkWriteOptions) => BulkWriteAsync(session' requests' bulkWriteOptions' cancellationToken)); " is 157.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateMany,The length of the statement  "            return UpdateMany(filter' update' options' (requests' bulkWriteOptions) => BulkWrite(requests' bulkWriteOptions' cancellationToken)); " is 133.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateMany,The length of the statement  "            return UpdateMany(filter' update' options' (requests' bulkWriteOptions) => BulkWrite(session' requests' bulkWriteOptions' cancellationToken)); " is 142.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateManyAsync,The length of the statement  "            return UpdateManyAsync(filter' update' options' (requests' bulkWriteOptions) => BulkWriteAsync(requests' bulkWriteOptions' cancellationToken)); " is 143.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateManyAsync,The length of the statement  "            return UpdateManyAsync(filter' update' options' (requests' bulkWriteOptions) => BulkWriteAsync(session' requests' bulkWriteOptions' cancellationToken)); " is 152.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOne,The length of the statement  "            return UpdateOne(filter' update' options' (requests' bulkWriteOptions) => BulkWrite(requests' bulkWriteOptions' cancellationToken)); " is 132.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOne,The length of the statement  "            return UpdateOne(filter' update' options' (requests' bulkWriteOptions) => BulkWrite(session' requests' bulkWriteOptions' cancellationToken)); " is 141.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOneAsync,The length of the statement  "            return UpdateOneAsync(filter' update' options' (requests' bulkWriteOptions) => BulkWriteAsync(requests' bulkWriteOptions' cancellationToken)); " is 142.
Long Statement,MongoDB.Driver,MongoCollectionBase<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionBase.cs,UpdateOneAsync,The length of the statement  "            return UpdateOneAsync(filter' update' options' (requests' bulkWriteOptions) => BulkWriteAsync(session' requests' bulkWriteOptions' cancellationToken)); " is 151.
Long Statement,MongoDB.Driver,AddToSetUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,PullUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,PushUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,Render,The length of the statement  "                    var message = string.Format("The serializer for field '{0}' must implement IBsonArraySerializer and provide item serialization info."' renderedField.FieldName); " is 160.
Long Statement,MongoDB.Driver,PushUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,Render,The length of the statement  "                document["$push"][renderedField.FieldName]["$sort"] = _sort.Render((IBsonSerializer<TItem>)itemSerializer' serializerRegistry); " is 127.
Long Statement,MongoDB.Driver,OfTypeMongoCollection<TRootDocument;TDerivedDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\OfTypeMongoCollection.cs,WithReadConcern,The length of the statement  "            return new OfTypeMongoCollection<TRootDocument' TDerivedDocument>(_rootDocumentCollection' WrappedCollection.WithReadConcern(readConcern)' Filter); " is 147.
Long Statement,MongoDB.Driver,OfTypeMongoCollection<TRootDocument;TDerivedDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\OfTypeMongoCollection.cs,WithReadPreference,The length of the statement  "            return new OfTypeMongoCollection<TRootDocument' TDerivedDocument>(_rootDocumentCollection' WrappedCollection.WithReadPreference(readPreference)' Filter); " is 153.
Long Statement,MongoDB.Driver,OfTypeMongoCollection<TRootDocument;TDerivedDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\OfTypeMongoCollection.cs,WithWriteConcern,The length of the statement  "            return new OfTypeMongoCollection<TRootDocument' TDerivedDocument>(_rootDocumentCollection' WrappedCollection.WithWriteConcern(writeConcern)' Filter); " is 149.
Long Statement,MongoDB.Driver,BsonDocumentProjectionDefinition<TSource;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinition.cs,Render,The length of the statement  "                _projectionSerializer ?? (sourceSerializer as IBsonSerializer<TProjection>) ?? serializerRegistry.GetSerializer<TProjection>()); " is 128.
Long Statement,MongoDB.Driver,JsonProjectionDefinition<TSource;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinition.cs,Render,The length of the statement  "                _projectionSerializer ?? (sourceSerializer as IBsonSerializer<TProjection>) ?? serializerRegistry.GetSerializer<TProjection>()); " is 128.
Long Statement,MongoDB.Driver,ObjectProjectionDefinition<TSource;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinition.cs,Render,The length of the statement  "                _projectionSerializer ?? (sourceSerializer as IBsonSerializer<TProjection>) ?? serializerRegistry.GetSerializer<TProjection>()); " is 128.
Long Statement,MongoDB.Driver,KnownResultTypeProjectionDefinitionAdapter<TSource;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinition.cs,Render,The length of the statement  "                _projectionSerializer ?? (sourceSerializer as IBsonSerializer<TProjection>) ?? serializerRegistry.GetSerializer<TProjection>()); " is 128.
Long Statement,MongoDB.Driver,ClientSideDeserializationProjectionDefinition<TSource;TProjection>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\ProjectionDefinition.cs,Render,The length of the statement  "                _projectionSerializer ?? (sourceSerializer as IBsonSerializer<TProjection>) ?? serializerRegistry.GetSerializer<TProjection>()); " is 128.
Long Statement,MongoDB.Driver,ExpressionFieldDefinition<TDocument;TField>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Render,The length of the statement  "            var valueSerializer = (IBsonSerializer<TField>)FieldValueSerializerHelper.GetSerializerForValueType(underlyingSerializer' serializerRegistry' typeof(TField)); " is 158.
Long Statement,MongoDB.Driver,StringFieldDefinition<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Render,The length of the statement  "            StringFieldDefinitionHelper.Resolve<TDocument>(_fieldName' documentSerializer' out resolvedName' out resolvedSerializer); " is 121.
Long Statement,MongoDB.Driver,StringFieldDefinition<TDocument;TField>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Render,The length of the statement  "            StringFieldDefinitionHelper.Resolve<TDocument>(_fieldName' documentSerializer' out resolvedName' out underlyingSerializer); " is 123.
Long Statement,MongoDB.Driver,StringFieldDefinition<TDocument;TField>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Render,The length of the statement  "                valueSerializer = (IBsonSerializer<TField>)FieldValueSerializerHelper.GetSerializerForValueType(underlyingSerializer' serializerRegistry' typeof(TField)); " is 154.
Long Statement,MongoDB.Driver,StringFieldDefinitionHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Resolve,The length of the statement  "                if (documentSerializer == null || !documentSerializer.TryGetMemberSerializationInfo(nameParts[i]' out serializationInfo)) " is 121.
Long Statement,MongoDB.Driver,StringFieldDefinitionHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldDefinition.cs,Resolve,The length of the statement  "                        if (documentSerializer == null || !documentSerializer.TryGetMemberSerializationInfo(nameParts[i]' out serializationInfo)) " is 121.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,Aggregate,The length of the statement  "            var renderedPipeline = Ensure.IsNotNull(pipeline' nameof(pipeline)).Render(_documentSerializer' _settings.SerializerRegistry); " is 126.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,AggregateAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => AggregateAsync(session' pipeline' options' cancellationToken)' cancellationToken); " is 126.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,AggregateAsync,The length of the statement  "            var renderedPipeline = Ensure.IsNotNull(pipeline' nameof(pipeline)).Render(_documentSerializer' _settings.SerializerRegistry); " is 126.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,BulkWriteAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => BulkWriteAsync(session' requests' options' cancellationToken)' cancellationToken); " is 126.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,CountAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => CountAsync(session' filter' options' cancellationToken)' cancellationToken); " is 120.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,Distinct,The length of the statement  "            return UsingImplicitSession(session => Distinct(session' field' filter' options' cancellationToken)' cancellationToken); " is 120.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,DistinctAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => DistinctAsync(session' field' filter' options' cancellationToken)' cancellationToken); " is 130.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndDelete,The length of the statement  "            return UsingImplicitSession(session => FindOneAndDelete(session' filter' options' cancellationToken)' cancellationToken); " is 121.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndDeleteAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => FindOneAndDeleteAsync(session' filter' options' cancellationToken)' cancellationToken); " is 131.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndReplace,The length of the statement  "            return UsingImplicitSession(session => FindOneAndReplace(session' filter' replacement' options' cancellationToken)' cancellationToken); " is 135.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndReplaceAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => FindOneAndReplaceAsync(session' filter' replacement' options' cancellationToken)' cancellationToken); " is 145.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndUpdate,The length of the statement  "            return UsingImplicitSession(session => FindOneAndUpdate(session' filter' update' options' cancellationToken)' cancellationToken); " is 129.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,FindOneAndUpdateAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => FindOneAndUpdateAsync(session' filter' update' options' cancellationToken)' cancellationToken); " is 139.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MapReduce,The length of the statement  "                var findOperation = CreateMapReduceOutputToCollectionFindOperation<TResult>(options' mapReduceOperation.OutputCollectionNamespace' resultSerializer); " is 149.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MapReduceAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => MapReduceAsync(session' map' reduce' options' cancellationToken)' cancellationToken); " is 129.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,MapReduceAsync,The length of the statement  "                var findOperation = CreateMapReduceOutputToCollectionFindOperation<TResult>(options' mapReduceOperation.OutputCollectionNamespace' resultSerializer); " is 149.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,OfType,The length of the statement  "            var derivedDocumentCollection = new MongoCollectionImpl<TDerivedDocument>(_database' _collectionNamespace' _settings' _cluster' _operationExecutor' ofTypeSerializer); " is 166.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,WatchAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => WatchAsync(session' pipeline' options' cancellationToken)' cancellationToken); " is 122.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,ExecuteReadOperationAsync,The length of the statement  "                return await _operationExecutor.ExecuteReadOperationAsync(bindingHandle' operation' cancellationToken).ConfigureAwait(false); " is 125.
Long Statement,MongoDB.Driver,MongoCollectionImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,ExecuteWriteOperationAsync,The length of the statement  "                return await _operationExecutor.ExecuteWriteOperationAsync(bindingHandle' operation' cancellationToken).ConfigureAwait(false); " is 126.
Long Statement,MongoDB.Driver,MongoIndexManager,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,CreateManyAsync,The length of the statement  "                return _collection.UsingImplicitSessionAsync(session => CreateManyAsync(session' models' cancellationToken)' cancellationToken); " is 128.
Long Statement,MongoDB.Driver,MongoIndexManager,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,DropOneAsync,The length of the statement  "                return _collection.UsingImplicitSessionAsync(session => DropOneAsync(session' name' cancellationToken)' cancellationToken); " is 123.
Long Statement,MongoDB.Driver,MongoIndexManager,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionImpl.cs,CreateCreateIndexRequests,The length of the statement  "                    var renderedPartialFilterExpression = options.PartialFilterExpression == null ? null : options.PartialFilterExpression.Render(_collection._documentSerializer' _collection._settings.SerializerRegistry); " is 201.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateCollection,The length of the statement  "            var genericMethodDefinition = typeof(MongoDatabaseImpl).GetTypeInfo().GetMethod("CreateCollectionHelper"' BindingFlags.NonPublic | BindingFlags.Instance); " is 154.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateCollectionAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => CreateCollectionAsync(session' name' options' cancellationToken)' cancellationToken); " is 129.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateCollectionAsync,The length of the statement  "            var genericMethodDefinition = typeof(MongoDatabaseImpl).GetTypeInfo().GetMethod("CreateCollectionHelperAsync"' BindingFlags.NonPublic | BindingFlags.Instance); " is 159.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateView,The length of the statement  "            UsingImplicitSession(session => CreateView(session' viewName' viewOn' pipeline' options' cancellationToken)' cancellationToken); " is 128.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateViewAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => CreateViewAsync(session' viewName' viewOn' pipeline' options' cancellationToken)' cancellationToken); " is 145.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,GetCollection,The length of the statement  "            return new MongoCollectionImpl<TDocument>(this' new CollectionNamespace(_databaseNamespace' name)' settings' _cluster' _operationExecutor); " is 139.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,ListCollectionsAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => ListCollectionsAsync(session' options' cancellationToken)' cancellationToken); " is 122.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RenameCollection,The length of the statement  "            UsingImplicitSession(session => RenameCollection(session' oldName' newName' options' cancellationToken)' cancellationToken); " is 124.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RenameCollectionAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => RenameCollectionAsync(session' oldName' newName' options' cancellationToken)' cancellationToken); " is 141.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RunCommand,The length of the statement  "            return UsingImplicitSession(session => RunCommand(session' command' readPreference' cancellationToken)' cancellationToken); " is 123.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,RunCommandAsync,The length of the statement  "            return UsingImplicitSessionAsync(session => RunCommandAsync(session' command' readPreference' cancellationToken)' cancellationToken); " is 133.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateListCollectionsOperation,The length of the statement  "                Filter = options.Filter?.Render(_settings.SerializerRegistry.GetSerializer<BsonDocument>()' _settings.SerializerRegistry) " is 121.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,CreateRunCommandOperation,The length of the statement  "            return new ReadCommandOperation<TResult>(_databaseNamespace' renderedCommand.Document' renderedCommand.ResultSerializer' messageEncoderSettings); " is 145.
Long Statement,MongoDB.Driver,MongoDatabaseImpl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseImpl.cs,ExecuteWriteOperationAsync,The length of the statement  "                return await _operationExecutor.ExecuteWriteOperationAsync(binding' operation' cancellationToken).ConfigureAwait(false); " is 120.
Long Statement,MongoDB.Driver,MongoClient,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoClient.cs,AreSessionsSupportedAsync,The length of the statement  "            return AreSessionsSupported(_cluster.Description) ?? await AreSessionsSupportedAfterSeverSelctionAsync(cancellationToken).ConfigureAwait(false); " is 144.
Long Statement,MongoDB.Driver,MongoClient,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoClient.cs,ExecuteWriteOperationAsync,The length of the statement  "                return await _operationExecutor.ExecuteWriteOperationAsync(binding' operation' cancellationToken).ConfigureAwait(false); " is 120.
Long Statement,MongoDB.Driver,MongoDBRef,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,Equals,The length of the statement  "            return string.Equals(_databaseName' rhs._databaseName) && _collectionName.Equals(rhs._collectionName) && _id.Equals(rhs._id); " is 125.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,Parse,The length of the statement  "            _authenticationMechanismProperties = connectionString.AuthMechanismProperties.ToDictionary(x => x.Key' x => x.Value' StringComparer.OrdinalIgnoreCase); " is 151.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,Parse,The length of the statement  "            if (connectionString.ReadPreference.HasValue || connectionString.ReadPreferenceTags != null || connectionString.MaxStaleness.HasValue) " is 134.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,Parse,The length of the statement  "                _readPreference = new ReadPreference(connectionString.ReadPreference.Value' connectionString.ReadPreferenceTags' connectionString.MaxStaleness); " is 144.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,Parse,The length of the statement  "            _serverSelectionTimeout = connectionString.ServerSelectionTimeout.GetValueOrDefault(MongoDefaults.ServerSelectionTimeout); " is 122.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,ToString,The length of the statement  "                        query.AppendFormat("readPreferenceTags={0};"' string.Join("'"' tagSet.Tags.Select(t => string.Format("{0}:{1}"' t.Name' t.Value)).ToArray())); " is 142.
Long Statement,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,ToString,The length of the statement  "                query.AppendFormat("uuidRepresentation={0};"' (_guidRepresentation == GuidRepresentation.CSharpLegacy) ? "csharpLegacy" : MongoUtils.ToCamelCase(_guidRepresentation.ToString())); " is 178.
Long Statement,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,ToString,The length of the statement  "                parts.Add(string.Format("ClientCertificates=[{0}]"' string.Join("'"' ((IEnumerable)_clientCertificateCollection).Cast<X509Certificate>().Select(c => c.Subject).ToArray()))); " is 173.
Long Statement,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,ToString,The length of the statement  "                parts.Add(string.Format("ClientCertificateSelectionCallback={0}"' _clientCertificateSelectionCallback.GetMethodInfo().Name)); " is 125.
Long Statement,MongoDB.Driver,SslSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,ToString,The length of the statement  "                parts.Add(string.Format("ServerCertificateValidationCallback={0}"' _serverCertificateValidationCallback.GetMethodInfo().Name)); " is 127.
Long Statement,MongoDB.Driver,WriteModel<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\WriteModel.cs,ConvertUpdateRequest,The length of the statement  "                    ArrayFilters = request.ArrayFilters == null ? null : new List<ArrayFilterDefinition>(request.ArrayFilters.Select(f => new BsonDocumentArrayFilterDefinition<BsonValue>(f)))' " is 172.
Long Statement,MongoDB.Driver,WriteModel<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\WriteModel.cs,ConvertUpdateRequest,The length of the statement  "                    ArrayFilters = request.ArrayFilters == null ? null : new List<ArrayFilterDefinition>(request.ArrayFilters.Select(f => new BsonDocumentArrayFilterDefinition<BsonValue>(f)))' " is 172.
Long Statement,MongoDB.Driver.Linq,LinqExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\LinqExtensions.cs,Inject,The length of the statement  "            throw new InvalidOperationException("The LinqExtensions.Inject method is only intended to be used in LINQ Where clauses."); " is 123.
Long Statement,MongoDB.Driver.Linq,MethodHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MethodHelper.cs,GetMethodDefinition,The length of the statement  "                .Where(m => m.Name == methodInfo.Name && m.GetParameters().Count() == parameterTypes.Length) // TODO: need better matching " is 122.
Long Statement,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,FirstOrDefaultAsync,The length of the statement  "                    GetMethodInfo<IQueryable<TSource>' Expression<Func<TSource' bool>>' TSource>(Queryable.FirstOrDefault' source' predicate)' " is 122.
Long Statement,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,Join,The length of the statement  "            return (IMongoQueryable<TResult>)Queryable.Join(outer' inner.AsQueryable()' outerKeySelector' innerKeySelector' resultSelector); " is 128.
Long Statement,MongoDB.Driver.Linq,MongoQueryable,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryable.cs,SingleOrDefaultAsync,The length of the statement  "                    GetMethodInfo<IQueryable<TSource>' Expression<Func<TSource' bool>>' TSource>(Queryable.SingleOrDefault' source' predicate)' " is 123.
Long Statement,MongoDB.Driver.Linq,MongoQueryProviderImpl<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MongoQueryProviderImpl.cs,Translate,The length of the statement  "            return QueryableTranslator.Translate(pipelineExpression' _collection.Settings.SerializerRegistry' _options.TranslationOptions); " is 127.
Long Statement,MongoDB.Driver.Linq.Expressions,ISerializationExpressionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\ISerializationExpression.cs,SerializeValue,The length of the statement  "            var valueSerializer = FieldValueSerializerHelper.GetSerializerForValueType(field.Serializer' BsonSerializer.SerializerRegistry' valueType' value); " is 146.
Long Statement,MongoDB.Driver.Linq.Expressions,ISerializationExpressionExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\ISerializationExpression.cs,SerializeValues,The length of the statement  "            var itemSerializer = FieldValueSerializerHelper.GetSerializerForValueType(field.Serializer' BsonSerializer.SerializerRegistry' itemType); " is 137.
Long Statement,MongoDB.Driver.Linq.Processors,PipelineBindingContext,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\PipelineBindingContext.cs,BindProjector,The length of the statement  "            else if (projector == null || projector is PipelineExpression || projector is IFieldExpression || projector is ArrayIndexExpression) " is 132.
Long Statement,MongoDB.Driver.Linq.Processors,ProjectionMapper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\ProjectionMapper.cs,VisitMemberInit,The length of the statement  "                    var message = string.Format("Only member assignments are supported in a new expression in $project and $group' but found {0}."' " is 127.
Long Statement,MongoDB.Driver.Linq.Processors,ProjectionMapper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\ProjectionMapper.cs,VisitNew,The length of the statement  "                        var message = string.Format("Could not find a member match for constructor parameter {0} on type {1} in the expression tree {2}."' " is 130.
Long Statement,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitMember,The length of the statement  "                    if (documentSerializer != null && documentSerializer.TryGetMemberSerializationInfo(node.Member.Name' out memberSerializationInfo)) " is 130.
Long Statement,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitUnary,The length of the statement  "            if (newNode.NodeType == ExpressionType.Convert || newNode.NodeType == ExpressionType.ConvertChecked || newNode.NodeType == ExpressionType.TypeAs) " is 145.
Long Statement,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitUnary,The length of the statement  "                if (newNode.Method == null && !newNode.IsLiftedToNull && newNode.Type.GetTypeInfo().IsAssignableFrom(newNode.Operand.Type)) " is 123.
Long Statement,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,BindGetItem,The length of the statement  "                        if (documentSerializer != null && documentSerializer.TryGetMemberSerializationInfo(index.Value.ToString()' out memberSerializationInfo)) " is 136.
Long Statement,MongoDB.Driver.Linq.Processors,SerializerBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializerBuilder.cs,Build,The length of the statement  "                        if (PreviouslyUsedSerializerFinder.TryFindSerializer(node' itemSerializationInfo.Serializer.ValueType' out itemSerializer)) " is 123.
Long Statement,MongoDB.Driver.Linq.Processors,SerializerBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializerBuilder.cs,Build,The length of the statement  "                        if (PreviouslyUsedSerializerFinder.TryFindSerializer(node' childConfigurable.ChildSerializer.ValueType' out childSerializer)) " is 125.
Long Statement,MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders,AggregateBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\EmbeddedPipeline\MethodCallBinders\AggregateBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.Aggregate<object' object' object>(null' null' null' null)); " is 122.
Long Statement,MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders,AggregateBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\EmbeddedPipeline\MethodCallBinders\AggregateBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.Aggregate<object' object' object>(null' null' null' null)); " is 121.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,GroupByWithResultSelectorBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\GroupByWithResultSelectorBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.GroupBy(null' null' (Func<object' IEnumerable<object>' object>)null)); " is 133.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,GroupByWithResultSelectorBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\GroupByWithResultSelectorBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.GroupBy(null' null' (Expression<Func<object' IEnumerable<object>' object>>)null)); " is 144.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.Join<object' object' object' object>(null' null' null' null' null)); " is 131.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.Join<object' object' object' object>(null' null' null' null' null)); " is 130.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.GroupJoin<object' object' object' object>(null' null' null' null' null)); " is 136.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.GroupJoin<object' object' object' object>(null' null' null' null' null)); " is 135.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The length of the statement  "                var message = string.Format("Unable to determine the serialization information for the outer key selector in the tree: {0}"' node.ToString()); " is 142.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The length of the statement  "            if (joinedArraySerializer == null || !joinedArraySerializer.TryGetItemSerializationInfo(out joinedItemSerializationInfo)) " is 121.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The length of the statement  "                var message = string.Format("Unable to determine the serialization information for the inner collection: {0}"' node.ToString()); " is 128.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The length of the statement  "                var message = string.Format("Unable to determine the serialization information for the inner key selector in the tree: {0}"' node.ToString()); " is 142.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.SelectMany(null' (Func<object' IEnumerable<object>>)null)); " is 122.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Enumerable.SelectMany(null' (Func<object' IEnumerable<object>>)null' (Func<object' object' object>)null)); " is 158.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.SelectMany(null' (Expression<Func<object' IEnumerable<object>>>)null)); " is 133.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,GetSupportedMethods,The length of the statement  "            yield return MethodHelper.GetMethodDefinition(() => Queryable.SelectMany(null' (Expression<Func<object' IEnumerable<object>>>)null' (Expression<Func<object' object' object>>)null)); " is 181.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,Bind,The length of the statement  "                var message = string.Format("Unable to determine the serialization information for the collection selector in the tree: {0}"' node.ToString()); " is 143.
Long Statement,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,Bind,The length of the statement  "                var message = string.Format("The collection selector's serializer must implement IBsonArraySerializer: {0}"' node.ToString()); " is 126.
Long Statement,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateMethodCall,The length of the statement  "                    return new BsonDocument("$cmp"' new BsonArray(new[] { TranslateValue(node.Object)' TranslateValue(node.Arguments[0]) })); " is 121.
Long Statement,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateMethodCall,The length of the statement  "                    return new BsonDocument("$eq"' new BsonArray(new[] { TranslateValue(node.Object)' TranslateValue(node.Arguments[0]) })); " is 120.
Long Statement,MongoDB.Driver.Linq.Translators,FindProjectionTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\FindProjectionTranslator.cs,Translate,The length of the statement  "                var serializationInfo = fields.Select(x => new BsonSerializationInfo(x.FieldName' x.Serializer' x.Serializer.ValueType)).ToList(); " is 130.
Long Statement,MongoDB.Driver.Linq.Translators,FindProjectionTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\FindProjectionTranslator.cs,Translate,The length of the statement  "                    serializer = new ProjectingDeserializer<ProjectedObject' TProjection>(projectedObjectSerializer' newProjector.Compile()); " is 121.
Long Statement,MongoDB.Driver.Linq.Translators,FindProjectionTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\FindProjectionTranslator.cs,GetUniqueFieldsByHierarchy,The length of the statement  "            var referenceGroups = new Queue<IGrouping<string' IFieldExpression>>(usedFields.GroupBy(x => x.FieldName).OrderBy(x => x.Key)); " is 127.
Long Statement,MongoDB.Driver.Linq.Translators,ProjectedObjectDeserializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\ProjectedObjectDeserializer.cs,ReadDocument,The length of the statement  "                    var value = serializationInfo.Serializer.Deserialize(context' new BsonDeserializationArgs { NominalType = serializationInfo.NominalType }); " is 139.
Long Statement,MongoDB.Driver.Linq.Translators,QueryableTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\QueryableTranslator.cs,TranslatePipeline,The length of the statement  "                var info = new BsonSerializationInfo(fieldExpression.FieldName' fieldExpression.Serializer' fieldExpression.Serializer.ValueType); " is 130.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateArrayLength,The length of the statement  "            if (pipelineExpression != null && pipelineExpression.ResultOperator != null && pipelineExpression.ResultOperator is CountResultOperator) " is 136.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateComparison,The length of the statement  "            var valueSerializer = FieldValueSerializerHelper.GetSerializerForValueType(fieldExpression.Serializer' _serializerRegistry' constantExpression.Type' value); " is 156.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateContainsKey,The length of the statement  "                    "{0} in a LINQ query is only supported for members that are serialized using a serializer that implements IBsonDictionarySerializer."' " is 134.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateContainsKey,The length of the statement  "                    methodCallExpression.Method.Name); // could be Contains (for IDictionary) or ContainsKey (for IDictionary<TKey' TValue>) " is 120.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateContains,The length of the statement  "            if (methodCallExpression.Object != null && typeof(IDictionary).GetTypeInfo().IsAssignableFrom(methodCallExpression.Object.Type)) " is 128.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIn,The length of the statement  "                bool contains = methodDeclaringType == typeof(ICollection<>) || methodDeclaringTypeInfo.GetInterface("ICollection`1") != null; " is 126.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The length of the statement  "                    var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray()); " is 135.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The length of the statement  "                                pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass); " is 131.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The length of the statement  "                            pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex); " is 136.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The length of the statement  "                                pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex); " is 155.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringLengthQuery,The length of the statement  "            if (methodCallExpression != null && methodCallExpression.Method.Name == "Count" && methodCallExpression.Method.DeclaringType == typeof(Enumerable)) " is 147.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringCaseInsensitiveComparisonQuery,The length of the statement  "            if ((methodName != "ToLower" && methodName != "ToUpper" && methodName != "ToLowerInvariant" && methodName != "ToUpperInvariant") || " is 131.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringCaseInsensitiveComparisonQuery,The length of the statement  "                var message = string.Format("When using {0} in a LINQ string comparison the value being compared to must serialize as a string."' methodName); " is 142.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateTypeIsQuery,The length of the statement  "            if (TryGetFieldExpression(typeBinaryExpression.Expression' out fieldExpression) && !string.IsNullOrEmpty(fieldExpression.FieldName)) " is 132.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,GetTrimCharsPattern,The length of the statement  "            if (constantExpression == null || !constantExpression.Type.IsArray || constantExpression.Type.GetElementType() != typeof(char)) " is 127.
Long Statement,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,GetTrimCharsPattern,The length of the statement  "            var characterClass = string.Join(""' trimChars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray()); " is 140.
Long Statement,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonObjectSerializerHelper<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonObjectSerializerHelper.cs,DeserializeBaseMember,The length of the statement  "                case Flags.CoordinateReferenceSystem: args.CoordinateReferenceSystem = DeserializeCoordinateReferenceSystem(context); break; " is 124.
Long Statement,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonCoordinatesSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonCoordinatesSerializer.cs,GetActualType,The length of the statement  "            throw new NotSupportedException("There is no way to determine the actual type of a GeoJsonCoordinates. Use a concrete subclass instead."); " is 138.
Complex Conditional,MongoDB.Driver,FieldValueSerializerHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,GetSerializerForValueType,The conditional expression  "(fieldIEnumerableInterfaceType = fieldType.FindIEnumerable()) != null &&                  (valueIEnumerableInterfaceType = valueType.FindIEnumerable()) != null &&                  (itemType = fieldIEnumerableInterfaceType.GetSequenceElementType()) == valueIEnumerableInterfaceType.GetSequenceElementType() &&                  fieldSerializer is IChildSerializerConfigurable"  is complex.
Complex Conditional,MongoDB.Driver,PushUpdateDefinition<TDocument;TItem>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\UpdateDefinitionBuilder.cs,Render,The conditional expression  "!_slice.HasValue && !_position.HasValue && _sort == null && _values.Count == 1"  is complex.
Complex Conditional,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,GetWriteConcern,The conditional expression  "_w == null && !_wTimeout.HasValue && !_fsync.HasValue && !_journal.HasValue"  is complex.
Complex Conditional,MongoDB.Driver,MongoUrl,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrl.cs,GetWriteConcern,The conditional expression  "_w == null && !_wTimeout.HasValue && !_fsync.HasValue && !_journal.HasValue"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Expressions,JoinExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\JoinExpression.cs,Update,The conditional expression  "source != _source ||                  joined != _joined ||                  sourceKeySelector != _sourceKeySelector ||                  joinedKeySelector != _joinedKeySelector"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Expressions,GroupJoinExpression,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Expressions\GroupJoinExpression.cs,Update,The conditional expression  "source != _source ||                  joined != _joined ||                  sourceKeySelector != _sourceKeySelector ||                  joinedKeySelector != _joinedKeySelector"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Processors,PipelineBindingContext,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\PipelineBindingContext.cs,BindProjector,The conditional expression  "projector == null || projector is PipelineExpression || projector is IFieldExpression || projector is ArrayIndexExpression"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,BindGetItem,The conditional expression  "node == newNode ||                  methodCallExpression == null ||                  node.Object == null ||                  node.Arguments.Count != 1"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Processors.Transformers,VBCoalesceTransformer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Transformers\VBCoalesceTransformer.cs,Transform,The conditional expression  "node.Left.NodeType != ExpressionType.Equal ||                  !node.Left.Type.IsNullable() ||                  right == null ||                  right.Type != typeof(bool) ||                  (bool)right.Value"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateMemberAccess,The conditional expression  "node.Expression != null                  && (expressionType.ImplementsInterface(typeof(ICollection<>))                      || expressionType.ImplementsInterface(typeof(ICollection)))                  && node.Member.Name == "Count""  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateOperation,The conditional expression  "canBeFlattened && left.IsBsonDocument && left.AsBsonDocument.Contains(op) && left[op].IsBsonArray"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslatePipeline,The conditional expression  "TryTranslateAggregateResultOperator(node' out result) ||                  TryTranslateAllResultOperator(node' out result) ||                  TryTranslateAnyResultOperator(node' out result) ||                  TryTranslateAvgResultOperator(node' out result) ||                  TryTranslateContainsResultOperator(node' out result) ||                  TryTranslateCountResultOperator(node' out result) ||                  TryTranslateFirstResultOperator(node' out result) ||                  TryTranslateLastResultOperator(node' out result) ||                  TryTranslateMaxResultOperator(node' out result) ||                  TryTranslateMinResultOperator(node' out result) ||                  TryTranslateStdDevResultOperator(node' out result) ||                  TryTranslateSumResultOperator(node' out result)"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateBitwiseComparison,The conditional expression  "binaryExpression == null ||                  binaryExpression.NodeType != ExpressionType.And ||                  binaryExpression.Right.NodeType != ExpressionType.Constant ||                  (operatorType != ExpressionType.Equal && operatorType != ExpressionType.NotEqual)"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateCompareTo,The conditional expression  "call == null || call.Object == null || call.Method.Name != "CompareTo" || call.Arguments.Count != 1"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The conditional expression  "methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string)"  is complex.
Complex Conditional,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringCaseInsensitiveComparisonQuery,The conditional expression  "(methodName != "ToLower" && methodName != "ToUpper" && methodName != "ToLowerInvariant" && methodName != "ToUpperInvariant") ||                  methodExpression.Object == null ||                  methodExpression.Type != typeof(string) ||                  methodExpression.Arguments.Count != 0"  is complex.
Empty Catch Block,MongoDB.Driver,ConvertIfPossibleSerializer<TFrom;TTo>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FieldValueSerializerHelper.cs,TryConvertValue,The method has an empty catch block.
Magic Number,MongoDB.Shared,ApplicationNameHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\ApplicationNameHelper.cs,IsApplicationNameValid,The following statement contains a magic number: if (applicationName != null)              {                  var utf8 = Utf8Encodings.Strict.GetBytes(applicationName);                  if (utf8.Length > 128)                  {                      message = "Application name exceeds 128 bytes after encoding to UTF8.";                      return false;                  }              }
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hasher,The following statement contains a magic number: _hashCode = 17;
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + obj.GetHashCode();
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + ((obj == null) ? -1 : obj.Value.GetHashCode());
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,Hash,The following statement contains a magic number: _hashCode = 37 * _hashCode + ((obj == null) ? -1 : obj.GetHashCode());
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,HashElements,The following statement contains a magic number: if (sequence == null)              {                  _hashCode = 37 * _hashCode + -1;              }              else              {                  foreach (var value in sequence)                  {                      _hashCode = 37 * _hashCode + ((value == null) ? -1 : value.GetHashCode());                  }              }
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,HashElements,The following statement contains a magic number: if (sequence == null)              {                  _hashCode = 37 * _hashCode + -1;              }              else              {                  foreach (var value in sequence)                  {                      _hashCode = 37 * _hashCode + ((value == null) ? -1 : value.GetHashCode());                  }              }
Magic Number,MongoDB.Shared,Hasher,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Shared\Hasher.cs,HashStructElements,The following statement contains a magic number: foreach (var value in sequence)              {                  _hashCode = 37 * _hashCode + value.GetHashCode();              }
Magic Number,MongoDB.Driver,FilterDefinitionBuilder<TDocument>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\FilterDefinitionBuilder.cs,GeoWithinPolygon,The following statement contains a magic number: for (var i = 0; i < points.GetLength(0); i++)              {                  arrayOfPoints.Add(new BsonArray(2) { points[i' 0]' points[i' 1] });              }
Magic Number,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,Single,The following statement contains a magic number: return IAsyncCursorSourceExtensions.Single(aggregate.Limit(2)' cancellationToken);
Magic Number,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,SingleAsync,The following statement contains a magic number: return IAsyncCursorSourceExtensions.SingleAsync(aggregate.Limit(2)' cancellationToken);
Magic Number,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,SingleOrDefault,The following statement contains a magic number: return IAsyncCursorSourceExtensions.SingleOrDefault(aggregate.Limit(2)' cancellationToken);
Magic Number,MongoDB.Driver,IAggregateFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IAggregateFluentExtensions.cs,SingleOrDefaultAsync,The following statement contains a magic number: return IAsyncCursorSourceExtensions.SingleOrDefaultAsync(aggregate.Limit(2)' cancellationToken);
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,Single,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,Single,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleAsync,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleAsync,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleOrDefault,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleOrDefault,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleOrDefaultAsync,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,IFindFluentExtensions,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\IFindFluentExtensions.cs,SingleOrDefaultAsync,The following statement contains a magic number: if (!find.Options.Limit.HasValue || find.Options.Limit.Value > 2)              {                  find = find.Limit(2);              }
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _assignIdOnInsert.Value.GetHashCode();
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _guidRepresentation.Value.GetHashCode();
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readConcern.Value == null) ? 0 : _readConcern.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readEncoding.Value == null) ? 0 : _readEncoding.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readPreference.Value == null) ? 0 : _readPreference.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeConcern.Value == null) ? 0 : _writeConcern.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoCollectionSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCollectionSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeEncoding.Value == null) ? 0 : _writeEncoding.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoCredentialStore,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCredentialStore.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoCredentialStore,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCredentialStore.cs,GetHashCode,The following statement contains a magic number: foreach (var credential in _credentials)              {                  hash = 37 * hash + credential.GetHashCode();              }
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _guidRepresentation.Value.GetHashCode();
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readConcern.Value == null) ? 0 : _readConcern.GetHashCode());
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readEncoding.Value == null) ? 0 : _readEncoding.GetHashCode());
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_readPreference.Value == null) ? 0 : _readPreference.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeConcern.Value == null) ? 0 : _writeConcern.Value.GetHashCode());
Magic Number,MongoDB.Driver,MongoDatabaseSettings,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDatabaseSettings.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_writeEncoding.Value == null) ? 0 : _writeEncoding.GetHashCode());
Magic Number,MongoDB.Driver,MongoDBRef,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoDBRef,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + ((_databaseName == null) ? 0 : _databaseName.GetHashCode());
Magic Number,MongoDB.Driver,MongoDBRef,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _collectionName.GetHashCode();
Magic Number,MongoDB.Driver,MongoDBRef,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _id.GetHashCode();
Magic Number,MongoDB.Driver,MongoIdentity,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoIdentity.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,MongoDB.Driver,MongoIdentity,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoIdentity.cs,GetHashCode,The following statement contains a magic number: hash += 37 * (_username == null ? 0 :_username.GetHashCode());
Magic Number,MongoDB.Driver,MongoIdentity,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoIdentity.cs,GetHashCode,The following statement contains a magic number: hash += 37 * _source.GetHashCode();
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,MongoUrlBuilder,The following statement contains a magic number: _servers = new[] { new MongoServerAddress("localhost"' 27017) };
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,ToString,The following statement contains a magic number: if (_servers != null)              {                  bool firstServer = true;                  foreach (MongoServerAddress server in _servers)                  {                      if (!firstServer) { url.Append("'"); }                      if (server.Port == 27017)                      {                          url.Append(server.Host);                      }                      else                      {                          url.AppendFormat("{0}:{1}"' server.Host' server.Port);                      }                      firstServer = false;                  }              }
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,FormatTimeSpan,The following statement contains a magic number: const int msInOneSecond = 1000;
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,FormatTimeSpan,The following statement contains a magic number: const int msInOneMinute = 60 * msInOneSecond;
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,FormatTimeSpan,The following statement contains a magic number: const int msInOneHour = 60 * msInOneMinute;
Magic Number,MongoDB.Driver,MongoUrlBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUrlBuilder.cs,FormatTimeSpan,The following statement contains a magic number: if ((ms % msInOneHour) == 0)              {                  return string.Format("{0}h"' ms / msInOneHour);              }              else if ((ms % msInOneMinute) == 0 && ms < msInOneHour)              {                  return string.Format("{0}m"' ms / msInOneMinute);              }              else if ((ms % msInOneSecond) == 0 && ms < msInOneMinute)              {                  return string.Format("{0}s"' ms / msInOneSecond);              }              else if (ms < 1000)              {                  return string.Format("{0}ms"' ms);              }              else              {                  return value.ToString();              }
Magic Number,MongoDB.Driver,X509CertificateCollectionEqualityComparer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,MongoDB.Driver,X509CertificateCollectionEqualityComparer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\SslSettings.cs,GetHashCode,The following statement contains a magic number: foreach (X509Certificate certificate in obj)                  {                      hash += 37 * hash + certificate.GetHashCode();                  }
Magic Number,MongoDB.Driver,MongoUtils,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoUtils.cs,TimeSpanFromMicroseconds,The following statement contains a magic number: return TimeSpan.FromTicks(microseconds * 10);
Magic Number,MongoDB.Driver,MongoCredential,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoCredential.cs,ValidatePassword,The following statement contains a magic number: if (password.Any(c => (int)c >= 128))              {                  throw new ArgumentException("Password must contain only ASCII characters.");              }
Magic Number,MongoDB.Driver,MongoServerAddress,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoServerAddress.cs,MongoServerAddress,The following statement contains a magic number: _port = 27017;
Magic Number,MongoDB.Driver,MongoServerAddress,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoServerAddress.cs,TryParse,The following statement contains a magic number: if (value != null)              {                  Match match = Regex.Match(value' @"^(?<host>(\[[^]]+\]|[^:\[\]]+))(:(?<port>\d+))?$");                  if (match.Success)                  {                      string host = match.Groups["host"].Value;                      string portString = match.Groups["port"].Value;                      int port = (portString == "") ? 27017 : JsonConvert.ToInt32(portString);                      address = new MongoServerAddress(host' port);                      return true;                  }              }
Magic Number,MongoDB.Driver,MongoServerAddress,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoServerAddress.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,MongoDB.Driver,MongoServerAddress,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoServerAddress.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _host.ToLowerInvariant().GetHashCode();
Magic Number,MongoDB.Driver,MongoServerAddress,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoServerAddress.cs,GetHashCode,The following statement contains a magic number: hash = 37 * hash + _port.GetHashCode();
Magic Number,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitMethodCall,The following statement contains a magic number: if (_isClientSideProjection &&                  ExpressionHelper.IsLinqMethod(node' "Select"' "SelectMany") &&                  node.Arguments.Count == 2)              {                  return BindClientSideProjector(node);              }
Magic Number,MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders,AggregateBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\EmbeddedPipeline\MethodCallBinders\AggregateBinder.cs,Bind,The following statement contains a magic number: if (argumentCount == 3)              {                  lambda = ExpressionHelper.GetLambda(arguments.Last());                  itemName = lambda.Parameters[0].Name;                  var variable = new FieldExpression("$" + itemName' serializer);                  bindingContext.AddExpressionMapping(lambda.Parameters[0]' variable);                  finalizer = bindingContext.Bind(lambda.Body);                  serializer = bindingContext.GetSerializer(finalizer.Type' finalizer);              }
Magic Number,MongoDB.Driver.Linq.Processors.EmbeddedPipeline.MethodCallBinders,ContainsBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\EmbeddedPipeline\MethodCallBinders\ContainsBinder.cs,IsSupported,The following statement contains a magic number: return                  (node.Object != null && node.Arguments.Count == 1) ||                  (node.Object == null && node.Arguments.Count == 2);
Magic Number,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The following statement contains a magic number: var joinedKeySelectorLambda = ExpressionHelper.GetLambda(args[2]);
Magic Number,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,JoinBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\JoinBinder.cs,Bind,The following statement contains a magic number: var resultSelectorLambda = ExpressionHelper.GetLambda(args[3]);
Magic Number,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SelectManyBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SelectManyBinder.cs,Bind,The following statement contains a magic number: if (arguments.Count() == 2)              {                  var resultLambda = ExpressionHelper.GetLambda(arguments.Last());                  bindingContext.AddExpressionMapping(resultLambda.Parameters[0]' pipeline.Projector);                  bindingContext.AddExpressionMapping(                      resultLambda.Parameters[1]'                      new FieldExpression(collectionField.FieldName' itemSerializationInfo.Serializer));                    resultItemName = resultLambda.Parameters[1].Name;                  resultSelector = bindingContext.Bind(resultLambda.Body);              }              else              {                  resultItemName = "__p";                  resultSelector = new FieldExpression(collectionField.FieldName' itemSerializationInfo.Serializer);              }
Magic Number,MongoDB.Driver.Linq.Processors.Pipeline.MethodCallBinders,SingleBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Pipeline\MethodCallBinders\SingleBinder.cs,Bind,The following statement contains a magic number: source = new TakeExpression(source' Expression.Constant(2));
Magic Number,MongoDB.Driver.Linq.Processors.Transformers,VBCompareStringTransformer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Transformers\VBCompareStringTransformer.cs,Transform,The following statement contains a magic number: var caseSensitiveConstant = (ConstantExpression)methodCall.Arguments[2];
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following statement contains a magic number: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateSelect,The following statement contains a magic number: if (inputValue.BsonType == BsonType.String && inValue.BsonType == BsonType.String)              {                  // if inputValue is a BsonString and inValue is a BsonString'                   // then it is a simple field inclusion...                  // inValue is prefixed with a $${node.ItemName}' so we remove the itemName and the 2 $s.                  return inputValue.ToString() + inValue.ToString().Substring(node.ItemName.Length + 2);              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStaticMathMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Abs":                      result = new BsonDocument("$abs"' TranslateValue(node.Arguments[0]));                      return true;                  case "Ceiling":                      result = new BsonDocument("$ceil"' TranslateValue(node.Arguments[0]));                      return true;                  case "Exp":                      result = new BsonDocument("$exp"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Floor":                      result = new BsonDocument("$floor"' TranslateValue(node.Arguments[0]));                      return true;                  case "Log":                      if (node.Arguments.Count == 2)                      {                          result = new BsonDocument("$log"' new BsonArray                          {                              TranslateValue(node.Arguments[0])'                              TranslateValue(node.Arguments[1])                          });                      }                      else                      {                          result = new BsonDocument("$ln"' new BsonArray                          {                              TranslateValue(node.Arguments[0])                          });                      }                      return true;                  case "Log10":                      result = new BsonDocument("$log10"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Pow":                      result = new BsonDocument("$pow"' new BsonArray                      {                          TranslateValue(node.Arguments[0])'                          TranslateValue(node.Arguments[1])                      });                      return true;                  case "Sqrt":                      result = new BsonDocument("$sqrt"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Truncate":                      result = new BsonDocument("$trunc"' TranslateValue(node.Arguments[0]));                      return true;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Equals":                      if (node.Arguments.Count == 2 && node.Arguments[1].NodeType == ExpressionType.Constant)                      {                          var comparisonType = (StringComparison)((ConstantExpression)node.Arguments[1]).Value;                          switch (comparisonType)                          {                              case StringComparison.OrdinalIgnoreCase:                                  result = new BsonDocument("$eq"'                                      new BsonArray(new BsonValue[]                                          {                                              new BsonDocument("$strcasecmp"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }))'                                              0                                          }));                                  return true;                              case StringComparison.Ordinal:                                  result = new BsonDocument("$eq"' new BsonArray(new[] { field' TranslateValue(node.Arguments[0]) }));                                  return true;                              default:                                  throw new NotSupportedException("Only Ordinal and OrdinalIgnoreCase are supported for string comparisons.");                          }                      }                      break;                  case "IndexOf":                      var indexOfArgs = new BsonArray { field };                        if (node.Arguments.Count < 1 || node.Arguments.Count > 3)                      {                          return false;                      }                        if (node.Arguments[0].Type != typeof(char) && node.Arguments[0].Type != typeof(string))                      {                          return false;                      }                      var value = TranslateValue(node.Arguments[0]);                      if (value.BsonType == BsonType.Int32)                      {                          value = new BsonString(new string((char)value.AsInt32' 1));                      }                      indexOfArgs.Add(value);                        if (node.Arguments.Count > 1)                      {                          if (node.Arguments[1].Type != typeof(int))                          {                              return false;                          }                            var startIndex = TranslateValue(node.Arguments[1]);                          indexOfArgs.Add(startIndex);                      }                        if (node.Arguments.Count > 2)                      {                          if (node.Arguments[2].Type != typeof(int))                          {                              return false;                          }                            var count = TranslateValue(node.Arguments[2]);                          var endIndex = new BsonDocument("$add"' new BsonArray { indexOfArgs[2]' count });                          indexOfArgs.Add(endIndex);                      }                        var indexOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$indexOfCP" :                              "$indexOfBytes";                        result = new BsonDocument(indexOpName' indexOfArgs);                      return true;                  case "Split":                      if (node.Arguments.Count < 1 || node.Arguments.Count > 2)                      {                          return false;                      }                      if (node.Arguments[0].Type != typeof(char[]) && node.Arguments[0].Type != typeof(string[]))                      {                          return false;                      }                      var separatorArray = TranslateValue(node.Arguments[0]) as BsonArray;                      if (separatorArray == null || separatorArray.Count != 1)                      {                          return false;                      }                      var separator = separatorArray[0];                      if (separator.BsonType == BsonType.Int32)                      {                          separator = new BsonString(new string((char)separator.AsInt32' 1));                      }                      if (node.Arguments.Count == 2)                      {                          var constantExpression = node.Arguments[1] as ConstantExpression;                          if (constantExpression == null || constantExpression.Type != typeof(StringSplitOptions))                          {                              return false;                          }                          var options = (StringSplitOptions)constantExpression.Value;                          if (options != StringSplitOptions.None)                          {                              return false;                          }                      }                      result = new BsonDocument("$split"' new BsonArray                      {                          field'                          separator                      });                      return true;                  case "Substring":                      if (node.Arguments.Count == 2)                      {                          var substrOpName = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                              "$substrCP" :                              "$substr";                          result = new BsonDocument(substrOpName' new BsonArray(new[]                              {                                  field'                                  TranslateValue(node.Arguments[0])'                                  TranslateValue(node.Arguments[1])                              }));                          return true;                      }                      break;                  case "ToLower":                  case "ToLowerInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toLower"' field);                          return true;                      }                      break;                  case "ToUpper":                  case "ToUpperInvariant":                      if (node.Arguments.Count == 0)                      {                          result = new BsonDocument("$toUpper"' field);                          return true;                      }                      break;              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateEquals,The following statement contains a magic number: if (methodCallExpression.Object == null)              {                  // static Equals method                  if (arguments.Length == 2)                  {                      firstExpression = arguments[0];                      secondExpression = arguments[1];                  }              }              else              {                  // instance Equals method                  if (arguments.Length == 1)                  {                      firstExpression = methodCallExpression.Object;                      secondExpression = arguments[0];                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIn,The following statement contains a magic number: if (methodDeclaringType == typeof(Enumerable) || methodDeclaringType == typeof(Queryable))              {                  if (arguments.Length == 2)                  {                      fieldExpression = GetFieldExpression(arguments[1]);                      valuesExpression = arguments[0] as ConstantExpression;                  }              }              else              {                  if (methodDeclaringTypeInfo.IsGenericType)                  {                      methodDeclaringType = methodDeclaringType.GetGenericTypeDefinition();                      methodDeclaringTypeInfo = methodDeclaringType.GetTypeInfo();                  }                    bool contains = methodDeclaringType == typeof(ICollection<>) || methodDeclaringTypeInfo.GetInterface("ICollection`1") != null;                  if (contains && arguments.Length == 1)                  {                      fieldExpression = GetFieldExpression(arguments[0]);                      valuesExpression = methodCallExpression.Object as ConstantExpression;                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIsMatch,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var fieldExpression = GetFieldExpression(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return __builder.Regex(fieldExpression.FieldName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = GetFieldExpression(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return __builder.Regex(serializationInfo.FieldName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIsMatch,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var fieldExpression = GetFieldExpression(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return __builder.Regex(fieldExpression.FieldName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = GetFieldExpression(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return __builder.Regex(serializationInfo.FieldName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIsMatch,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var fieldExpression = GetFieldExpression(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return __builder.Regex(fieldExpression.FieldName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = GetFieldExpression(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return __builder.Regex(serializationInfo.FieldName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateIsMatch,The following statement contains a magic number: if (methodCallExpression.Method.DeclaringType == typeof(Regex))              {                  var arguments = methodCallExpression.Arguments.ToArray();                  var obj = methodCallExpression.Object;                  if (obj == null)                  {                      if (arguments.Length == 2 || arguments.Length == 3)                      {                          var fieldExpression = GetFieldExpression(arguments[0]);                          var patternExpression = arguments[1] as ConstantExpression;                          if (patternExpression != null)                          {                              var pattern = patternExpression.Value as string;                              if (pattern != null)                              {                                  var options = RegexOptions.None;                                  if (arguments.Length == 3)                                  {                                      var optionsExpression = arguments[2] as ConstantExpression;                                      if (optionsExpression == null || optionsExpression.Type != typeof(RegexOptions))                                      {                                          return null;                                      }                                      options = (RegexOptions)optionsExpression.Value;                                  }                                  var regex = new Regex(pattern' options);                                  return __builder.Regex(fieldExpression.FieldName' regex);                              }                          }                      }                  }                  else                  {                      var regexExpression = obj as ConstantExpression;                      if (regexExpression != null && arguments.Length == 1)                      {                          var serializationInfo = GetFieldExpression(arguments[0]);                          var regex = regexExpression.Value as Regex;                          if (regex != null)                          {                              return __builder.Regex(serializationInfo.FieldName' regex);                          }                      }                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var fieldExpression = GetFieldExpression(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return __builder.Regex(fieldExpression.FieldName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var fieldExpression = GetFieldExpression(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return __builder.Regex(fieldExpression.FieldName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var fieldExpression = GetFieldExpression(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return __builder.Regex(fieldExpression.FieldName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringIndexOfQuery,The following statement contains a magic number: if (methodCallExpression != null &&                  (methodCallExpression.Method.Name == "IndexOf" || methodCallExpression.Method.Name == "IndexOfAny") &&                  methodCallExpression.Method.DeclaringType == typeof(string))              {                  var fieldExpression = GetFieldExpression(methodCallExpression.Object);                    object value;                  var startIndex = -1;                  var count = -1;                    var args = methodCallExpression.Arguments.ToArray();                  switch (args.Length)                  {                      case 3:                          var countExpression = args[2] as ConstantExpression;                          if (countExpression == null)                          {                              return null;                          }                          count = ToInt32(countExpression);                          goto case 2;                      case 2:                          var startIndexExpression = args[1] as ConstantExpression;                          if (startIndexExpression == null)                          {                              return null;                          }                          startIndex = ToInt32(startIndexExpression);                          goto case 1;                      case 1:                          var valueExpression = args[0] as ConstantExpression;                          if (valueExpression == null)                          {                              return null;                          }                          value = valueExpression.Value;                          break;                      default:                          return null;                  }                    string pattern = null;                  if (value.GetType() == typeof(char) || value.GetType() == typeof(char[]))                  {                      char[] chars;                      if (value.GetType() == typeof(char))                      {                          chars = new char[] { (char)value };                      }                      else                      {                          chars = (char[])value;                      }                      var positiveClass = string.Join(""' chars.Select(c => (c == '-') ? "\\-" : (c == ']') ? "\\]" : Regex.Escape(c.ToString())).ToArray());                      var negativeClass = "[^" + positiveClass + "]";                      if (chars.Length > 1)                      {                          positiveClass = "[" + positiveClass + "]";                      }                        if (startIndex == -1)                      {                          // the regex for: IndexOf(c) == index                           // is: /^[^c]{index}c/                          pattern = string.Format("^{0}{{{1}}}{2}"' negativeClass' index' positiveClass);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(c' startIndex) == index                              // is: /^.{startIndex}[^c]{index - startIndex}c/                              pattern = string.Format("^.{{{0}}}{1}{{{2}}}{3}"' startIndex' negativeClass' index - startIndex' positiveClass);                          }                          else                          {                              if (index >= startIndex + count)                              {                                  // index is outside of the substring so no match is possible                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(c' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})[^c]{index - startIndex}c/                                  pattern = string.Format("^.{{{0}}}(?=.{{{1}}}){2}{{{3}}}{4}"' startIndex' count' negativeClass' index - startIndex' positiveClass);                              }                          }                      }                  }                  else if (value.GetType() == typeof(string))                  {                      var escapedString = Regex.Escape((string)value);                      if (startIndex == -1)                      {                          // the regex for: IndexOf(s) == index                           // is: /^(?!.{0'index - 1}s).{index}s/                          pattern = string.Format("^(?!.{{0'{2}}}{0}).{{{1}}}{0}"' escapedString' index' index - 1);                      }                      else                      {                          if (count == -1)                          {                              // the regex for: IndexOf(s' startIndex) == index                              // is: /^.{startIndex}(?!.{0' index - startIndex - 1}s).{index - startIndex}s/                              pattern = string.Format("^.{{{1}}}(?!.{{0'{2}}}{0}).{{{3}}}{0}"' escapedString' startIndex' index - startIndex - 1' index - startIndex);                          }                          else                          {                              var unescapedLength = ((string)value).Length;                              if (unescapedLength > startIndex + count - index)                              {                                  // substring isn't long enough to match                                  return TranslateBoolean(false);                              }                              else                              {                                  // the regex for: IndexOf(s' startIndex' count) == index                                  // is: /^.{startIndex}(?=.{count})(?!.{0'index - startIndex - 1}s).{index - startIndex)s/                                  pattern = string.Format("^.{{{1}}}(?=.{{{2}}})(?!.{{0'{3}}}{0}).{{{4}}}{0}"' escapedString' startIndex' count' index - startIndex - 1' index - startIndex);                              }                          }                      }                  }                    if (pattern != null)                  {                      return __builder.Regex(fieldExpression.FieldName' new BsonRegularExpression(pattern' "s"));                  }              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringQuery,The following statement contains a magic number: if (pattern.StartsWith("^.*"))              {                  pattern = pattern.Substring(3);              }
Magic Number,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringQuery,The following statement contains a magic number: if (pattern.EndsWith(".*$"))              {                  pattern = pattern.Substring(0' pattern.Length - 3);              }
Magic Number,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonBoundingBoxSerializer<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonBoundingBoxSerializer.cs,DeserializeValue,The following statement contains a magic number: if ((flattenedArray.Count % 2) != 0)              {                  throw new FormatException("Bounding box array does not have an even number of values.");              }
Magic Number,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonBoundingBoxSerializer<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonBoundingBoxSerializer.cs,DeserializeValue,The following statement contains a magic number: var half = flattenedArray.Count / 2;
Magic Number,MongoDB.Driver.GeoJsonObjectModel,GeoJsonLinearRingCoordinates<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\GeoJsonLinearRingCoordinates.cs,GeoJsonLinearRingCoordinates,The following statement contains a magic number: if (Positions.Count < 4)              {                  throw new ArgumentException("A linear ring requires at least 4 positions."' "positions");              }
Magic Number,MongoDB.Driver.GeoJsonObjectModel,GeoJsonLineStringCoordinates<TCoordinates>,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\GeoJsonLineStringCoordinates.cs,GeoJsonLineStringCoordinates,The following statement contains a magic number: if (positionsArray.Length < 2)              {                  throw new ArgumentException("At least two positions are required."' "positions");              }
Missing Default,MongoDB.Driver,MongoDBRefSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\MongoDBRef.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                  {                      case Flags.CollectionName: collectionName = bsonReader.ReadString(); break;                      case Flags.Id: id = BsonValueSerializer.Instance.Deserialize(context); break;                      case Flags.DatabaseName: databaseName = bsonReader.ReadString(); break;                  }
Missing Default,MongoDB.Driver.Linq,MethodHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MethodHelper.cs,GetMethodInfo,The following switch statement is missing a default case: switch (lambda.Body.NodeType)              {                  case ExpressionType.Call:                      return ((MethodCallExpression)lambda.Body).Method;              }
Missing Default,MongoDB.Driver.Linq,MethodHelper,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\MethodHelper.cs,GetMethodInfo,The following switch statement is missing a default case: switch (lambda.Body.NodeType)              {                  case ExpressionType.Call:                      return ((MethodCallExpression)lambda.Body).Method;              }
Missing Default,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "ElementAt":                      return BindElementAt(node);                  case "get_Item":                      return BindGetItem(node);                  case "Inject":                      return BindInject(node);              }
Missing Default,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,VisitUnary,The following switch statement is missing a default case: switch (serializationExpression.ExtensionType)                          {                              case ExtensionExpressionType.ArrayIndex:                                  return new ArrayIndexExpression(                                      ((ArrayIndexExpression)serializationExpression).Array'                                      ((ArrayIndexExpression)serializationExpression).Index'                                      serializer);                              case ExtensionExpressionType.Collection:                                  return new CollectionExpression(                                      ((CollectionExpression)serializationExpression).CollectionNamespace'                                      serializer);                              case ExtensionExpressionType.Document:                                  return new DocumentExpression(serializer);                              case ExtensionExpressionType.Field:                                  return ((FieldExpression)serializationExpression).WithSerializer(serializer);                              case ExtensionExpressionType.FieldAsDocument:                                  return new FieldAsDocumentExpression(                                      ((FieldAsDocumentExpression)serializationExpression).Expression'                                      ((FieldAsDocumentExpression)serializationExpression).FieldName'                                      serializer);                          }
Missing Default,MongoDB.Driver.Linq.Processors,SerializationBinder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializationBinder.cs,BindGetItem,The following switch statement is missing a default case: switch (Type.GetTypeCode(indexExpression.Type))              {                  case TypeCode.Int16:                  case TypeCode.Int32:                  case TypeCode.Int64:                  case TypeCode.UInt16:                  case TypeCode.UInt32:                  case TypeCode.UInt64:                      var arraySerializer = serializationExpression.Serializer as IBsonArraySerializer;                      BsonSerializationInfo itemSerializationInfo;                      if (arraySerializer != null && arraySerializer.TryGetItemSerializationInfo(out itemSerializationInfo))                      {                          return new ArrayIndexExpression(                              methodCallExpression.Object'                              indexExpression'                              itemSerializationInfo.Serializer'                              methodCallExpression);                      }                      break;                  case TypeCode.String:                      var index = indexExpression as ConstantExpression;                      if (index != null)                      {                          var documentSerializer = serializationExpression.Serializer as IBsonDocumentSerializer;                          BsonSerializationInfo memberSerializationInfo;                          if (documentSerializer != null && documentSerializer.TryGetMemberSerializationInfo(index.Value.ToString()' out memberSerializationInfo))                          {                              return new FieldExpression(                                  methodCallExpression.Object'                                  memberSerializationInfo.ElementName'                                  memberSerializationInfo.Serializer'                                  methodCallExpression);                          }                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Processors,SerializerBuilder,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\SerializerBuilder.cs,Build,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.MemberInit:                      serializer = BuildMemberInit((MemberInitExpression)node);                      break;                  case ExpressionType.New:                      if (!typeof(IEnumerable).GetTypeInfo().IsAssignableFrom(node.Type))                      {                          serializer = BuildNew((NewExpression)node);                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Processors.Transformers,ConstantOnRightTransformer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Processors\Transformers\ConstantOnRightTransformer.cs,Transform,The following switch statement is missing a default case: switch (nodeType)                  {                      case ExpressionType.LessThan: nodeType = ExpressionType.GreaterThan; break;                      case ExpressionType.LessThanOrEqual: nodeType = ExpressionType.GreaterThanOrEqual; break;                      case ExpressionType.GreaterThan: nodeType = ExpressionType.LessThan; break;                      case ExpressionType.GreaterThanOrEqual: nodeType = ExpressionType.LessThanOrEqual; break;                  }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateValue,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.Add:                  case ExpressionType.AddChecked:                      return TranslateAdd((BinaryExpression)node);                  case ExpressionType.And:                  case ExpressionType.AndAlso:                      return TranslateOperation((BinaryExpression)node' "$and"' true);                  case ExpressionType.ArrayLength:                      return TranslateArrayLength(node);                  case ExpressionType.Call:                      return TranslateMethodCall((MethodCallExpression)node);                  case ExpressionType.Coalesce:                      return TranslateOperation((BinaryExpression)node' "$ifNull"' false);                  case ExpressionType.Conditional:                      return TranslateConditional((ConditionalExpression)node);                  case ExpressionType.Constant:                      return TranslateConstant(node);                  case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                      return TranslateValue(((UnaryExpression)node).Operand);                  case ExpressionType.Divide:                      return TranslateOperation((BinaryExpression)node' "$divide"' false);                  case ExpressionType.Equal:                      return TranslateOperation((BinaryExpression)node' "$eq"' false);                  case ExpressionType.GreaterThan:                      return TranslateOperation((BinaryExpression)node' "$gt"' false);                  case ExpressionType.GreaterThanOrEqual:                      return TranslateOperation((BinaryExpression)node' "$gte"' false);                  case ExpressionType.LessThan:                      return TranslateOperation((BinaryExpression)node' "$lt"' false);                  case ExpressionType.LessThanOrEqual:                      return TranslateOperation((BinaryExpression)node' "$lte"' false);                  case ExpressionType.MemberAccess:                      return TranslateMemberAccess((MemberExpression)node);                  case ExpressionType.MemberInit:                      return TranslateMemberInit((MemberInitExpression)node);                  case ExpressionType.Modulo:                      return TranslateOperation((BinaryExpression)node' "$mod"' false);                  case ExpressionType.Multiply:                  case ExpressionType.MultiplyChecked:                      return TranslateOperation((BinaryExpression)node' "$multiply"' true);                  case ExpressionType.New:                      return TranslateNew((NewExpression)node);                  case ExpressionType.NewArrayInit:                      return TranslateNewArrayInit((NewArrayExpression)node);                  case ExpressionType.Not:                      return TranslateNot((UnaryExpression)node);                  case ExpressionType.NotEqual:                      return TranslateOperation((BinaryExpression)node' "$ne"' false);                  case ExpressionType.Or:                  case ExpressionType.OrElse:                      return TranslateOperation((BinaryExpression)node' "$or"' true);                  case ExpressionType.Subtract:                  case ExpressionType.SubtractChecked:                      return TranslateOperation((BinaryExpression)node' "$subtract"' false);                  case ExpressionType.Extension:                      var extensionExpression = node as ExtensionExpression;                      if (extensionExpression != null)                      {                          switch (extensionExpression.ExtensionType)                          {                              case ExtensionExpressionType.Accumulator:                                  return TranslateAccumulator((AccumulatorExpression)node);                              case ExtensionExpressionType.AggregateExpression:                                  return TranslateAggregateExpression((AggregateExpressionExpression)node);                              case ExtensionExpressionType.ArrayIndex:                                  return TranslateArrayIndex((ArrayIndexExpression)node);                              case ExtensionExpressionType.Concat:                                  return TranslateConcat((ConcatExpression)node);                              case ExtensionExpressionType.Except:                                  return TranslateExcept((ExceptExpression)node);                              case ExtensionExpressionType.FieldAsDocument:                                  return TranslateDocumentWrappedField((FieldAsDocumentExpression)node);                              case ExtensionExpressionType.Field:                                  return TranslateField((FieldExpression)node);                              case ExtensionExpressionType.GroupingKey:                                  return TranslateGroupingKey((GroupingKeyExpression)node);                              case ExtensionExpressionType.Intersect:                                  return TranslateIntersect((IntersectExpression)node);                              case ExtensionExpressionType.Pipeline:                                  return TranslatePipeline((PipelineExpression)node);                              case ExtensionExpressionType.Reverse:                                  return TranslateReverse((ReverseExpression)node);                              case ExtensionExpressionType.Select:                                  return TranslateSelect((SelectExpression)node);                              case ExtensionExpressionType.SerializedConstant:                                  return TranslateSerializedConstant((SerializedConstantExpression)node);                              case ExtensionExpressionType.Skip:                                  return TranslateSkip((SkipExpression)node);                              case ExtensionExpressionType.Take:                                  return TranslateTake((TakeExpression)node);                              case ExtensionExpressionType.Union:                                  return TranslateUnion((UnionExpression)node);                              case ExtensionExpressionType.Where:                                  return TranslateWhere((WhereExpression)node);                              case ExtensionExpressionType.Zip:                                  return TranslateZip((ZipExpression)node);                          }                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateValue,The following switch statement is missing a default case: switch (extensionExpression.ExtensionType)                          {                              case ExtensionExpressionType.Accumulator:                                  return TranslateAccumulator((AccumulatorExpression)node);                              case ExtensionExpressionType.AggregateExpression:                                  return TranslateAggregateExpression((AggregateExpressionExpression)node);                              case ExtensionExpressionType.ArrayIndex:                                  return TranslateArrayIndex((ArrayIndexExpression)node);                              case ExtensionExpressionType.Concat:                                  return TranslateConcat((ConcatExpression)node);                              case ExtensionExpressionType.Except:                                  return TranslateExcept((ExceptExpression)node);                              case ExtensionExpressionType.FieldAsDocument:                                  return TranslateDocumentWrappedField((FieldAsDocumentExpression)node);                              case ExtensionExpressionType.Field:                                  return TranslateField((FieldExpression)node);                              case ExtensionExpressionType.GroupingKey:                                  return TranslateGroupingKey((GroupingKeyExpression)node);                              case ExtensionExpressionType.Intersect:                                  return TranslateIntersect((IntersectExpression)node);                              case ExtensionExpressionType.Pipeline:                                  return TranslatePipeline((PipelineExpression)node);                              case ExtensionExpressionType.Reverse:                                  return TranslateReverse((ReverseExpression)node);                              case ExtensionExpressionType.Select:                                  return TranslateSelect((SelectExpression)node);                              case ExtensionExpressionType.SerializedConstant:                                  return TranslateSerializedConstant((SerializedConstantExpression)node);                              case ExtensionExpressionType.Skip:                                  return TranslateSkip((SkipExpression)node);                              case ExtensionExpressionType.Take:                                  return TranslateTake((TakeExpression)node);                              case ExtensionExpressionType.Union:                                  return TranslateUnion((UnionExpression)node);                              case ExtensionExpressionType.Where:                                  return TranslateWhere((WhereExpression)node);                              case ExtensionExpressionType.Zip:                                  return TranslateZip((ZipExpression)node);                          }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateAccumulator,The following switch statement is missing a default case: switch (node.AccumulatorType)              {                  case AccumulatorType.AddToSet:                      return new BsonDocument("$addToSet"' TranslateValue(node.Argument));                  case AccumulatorType.Average:                      return new BsonDocument("$avg"' TranslateValue(node.Argument));                  case AccumulatorType.First:                      return new BsonDocument("$first"' TranslateValue(node.Argument));                  case AccumulatorType.Last:                      return new BsonDocument("$last"' TranslateValue(node.Argument));                  case AccumulatorType.Max:                      return new BsonDocument("$max"' TranslateValue(node.Argument));                  case AccumulatorType.Min:                      return new BsonDocument("$min"' TranslateValue(node.Argument));                  case AccumulatorType.Push:                      return new BsonDocument("$push"' TranslateValue(node.Argument));                  case AccumulatorType.StandardDeviationPopulation:                      return new BsonDocument("$stdDevPop"' TranslateValue(node.Argument));                  case AccumulatorType.StandardDeviationSample:                      return new BsonDocument("$stdDevSamp"' TranslateValue(node.Argument));                  case AccumulatorType.Sum:                      return new BsonDocument("$sum"' TranslateValue(node.Argument));              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TranslateNewDateTime,The following switch statement is missing a default case: switch (node.Arguments.Count)              {                  case 3:                      year = TranslateValue(node.Arguments[0]);                      month = TranslateValue(node.Arguments[1]);                      day = TranslateValue(node.Arguments[2]);                      break;                  case 6:                      hour = TranslateValue(node.Arguments[3]);                      minute = TranslateValue(node.Arguments[4]);                      second = TranslateValue(node.Arguments[5]);                      goto case 3;                  case 7:                      if (node.Arguments[6].Type == typeof(int))                      {                          millisecond = TranslateValue(node.Arguments[6]);                          goto case 6;                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateDateTimeCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "ToString":                      if (node.Arguments.Count == 1)                      {                          var format = TranslateValue(node.Arguments[0]);                          result = new BsonDocument("$dateToString"' new BsonDocument                          {                              { "format"' format }'                              { "date"' field }                          });                          return true;                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateDateTimeMemberAccess,The following switch statement is missing a default case: switch (node.Member.Name)              {                  case "Day":                      result = new BsonDocument("$dayOfMonth"' field);                      return true;                  case "DayOfWeek":                      // The server's day of week values are 1 greater than                      // .NET's DayOfWeek enum values                      result = new BsonDocument("$subtract"' new BsonArray                          {                              new BsonDocument("$dayOfWeek"' field)'                              (BsonInt32)1                          });                      return true;                  case "DayOfYear":                      result = new BsonDocument("$dayOfYear"' field);                      return true;                  case "Hour":                      result = new BsonDocument("$hour"' field);                      return true;                  case "Millisecond":                      result = new BsonDocument("$millisecond"' field);                      return true;                  case "Minute":                      result = new BsonDocument("$minute"' field);                      return true;                  case "Month":                      result = new BsonDocument("$month"' field);                      return true;                  case "Second":                      result = new BsonDocument("$second"' field);                      return true;                  case "Year":                      result = new BsonDocument("$year"' field);                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStringMemberAccess,The following switch statement is missing a default case: switch (node.Member.Name)              {                  case "Length":                      var name = _stringTranslationMode == AggregateStringTranslationMode.CodePoints ?                          "$strLenCP" :                          "$strLenBytes";                        result = new BsonDocument(name' field);                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateHashSetMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "IsSubsetOf":                      result = new BsonDocument("$setIsSubset"' new BsonArray(new[]                          {                              TranslateValue(node.Object)'                              TranslateValue(node.Arguments[0])                          }));                      return true;                  case "SetEquals":                      result = new BsonDocument("$setEquals"' new BsonArray(new[]                          {                              TranslateValue(node.Object)'                              TranslateValue(node.Arguments[0])                          }));                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStaticDateTimeMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "Parse":                      if (node.Arguments.Count == 1)                      {                          result = new BsonDocument("$dateFromString"' new BsonDocument                          {                              { "dateString"' TranslateValue(node.Arguments[0]) }                          });                          return true;                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStaticEnumerableMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "Range":                      var start = TranslateValue(node.Arguments[0]);                      result = new BsonDocument("$range"' new BsonArray                      {                          start'                          new BsonDocument("$add"' new BsonArray                          {                              start'                              TranslateValue(node.Arguments[1])                          })                      });                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStaticMathMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "Abs":                      result = new BsonDocument("$abs"' TranslateValue(node.Arguments[0]));                      return true;                  case "Ceiling":                      result = new BsonDocument("$ceil"' TranslateValue(node.Arguments[0]));                      return true;                  case "Exp":                      result = new BsonDocument("$exp"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Floor":                      result = new BsonDocument("$floor"' TranslateValue(node.Arguments[0]));                      return true;                  case "Log":                      if (node.Arguments.Count == 2)                      {                          result = new BsonDocument("$log"' new BsonArray                          {                              TranslateValue(node.Arguments[0])'                              TranslateValue(node.Arguments[1])                          });                      }                      else                      {                          result = new BsonDocument("$ln"' new BsonArray                          {                              TranslateValue(node.Arguments[0])                          });                      }                      return true;                  case "Log10":                      result = new BsonDocument("$log10"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Pow":                      result = new BsonDocument("$pow"' new BsonArray                      {                          TranslateValue(node.Arguments[0])'                          TranslateValue(node.Arguments[1])                      });                      return true;                  case "Sqrt":                      result = new BsonDocument("$sqrt"' new BsonArray                      {                          TranslateValue(node.Arguments[0])                      });                      return true;                  case "Truncate":                      result = new BsonDocument("$trunc"' TranslateValue(node.Arguments[0]));                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,AggregateLanguageTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\AggregateLanguageTranslator.cs,TryTranslateStaticStringMethodCall,The following switch statement is missing a default case: switch (node.Method.Name)              {                  case "IsNullOrEmpty":                      var field = TranslateValue(node.Arguments[0]);                      result = new BsonDocument("$or"'                          new BsonArray                          {                              new BsonDocument("$eq"' new BsonArray { field' BsonNull.Value })'                              new BsonDocument("$eq"' new BsonArray { field' BsonString.Empty })                          });                      return true;              }
Missing Default,MongoDB.Driver.Linq.Translators,QueryableTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\QueryableTranslator.cs,Translate,The following switch statement is missing a default case: switch (extensionExpression.ExtensionType)                  {                      case ExtensionExpressionType.Collection:                          // we do nothing in this regard...                          return;                      case ExtensionExpressionType.GroupBy:                          TranslateGroupBy((GroupByExpression)node);                          return;                      case ExtensionExpressionType.GroupByWithResultSelector:                          TranslateGroupByWithResultSelector((GroupByWithResultSelectorExpression)node);                          return;                      case ExtensionExpressionType.GroupJoin:                          TranslateGroupJoin((GroupJoinExpression)node);                          return;                      case ExtensionExpressionType.Join:                          TranslateJoin((JoinExpression)node);                          return;                      case ExtensionExpressionType.OrderBy:                          TranslateOrderBy((OrderByExpression)node);                          return;                      case ExtensionExpressionType.Pipeline:                          TranslatePipeline((PipelineExpression)node);                          return;                      case ExtensionExpressionType.Sample:                          TranslateSample((SampleExpression)node);                          return;                      case ExtensionExpressionType.Select:                          TranslateSelect((SelectExpression)node);                          return;                      case ExtensionExpressionType.SelectMany:                          TranslateSelectMany((SelectManyExpression)node);                          return;                      case ExtensionExpressionType.Skip:                          TranslateSkip((SkipExpression)node);                          return;                      case ExtensionExpressionType.Take:                          TranslateTake((TakeExpression)node);                          return;                      case ExtensionExpressionType.Where:                          TranslateWhere((WhereExpression)node);                          return;                  }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,Translate,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.And:                      filter = TranslateAnd((BinaryExpression)node);                      break;                  case ExpressionType.AndAlso:                      filter = TranslateAndAlso((BinaryExpression)node);                      break;                  case ExpressionType.ArrayIndex:                      filter = TranslateBoolean(node);                      break;                  case ExpressionType.Call:                      filter = TranslateMethodCall((MethodCallExpression)node);                      break;                  case ExpressionType.Constant:                      filter = TranslateConstant((ConstantExpression)node);                      break;                  case ExpressionType.Equal:                  case ExpressionType.GreaterThan:                  case ExpressionType.GreaterThanOrEqual:                  case ExpressionType.LessThan:                  case ExpressionType.LessThanOrEqual:                  case ExpressionType.NotEqual:                      filter = TranslateComparison((BinaryExpression)node);                      break;                  case ExpressionType.MemberAccess:                      filter = TranslateBoolean(node);                      break;                  case ExpressionType.Not:                      filter = TranslateNot((UnaryExpression)node);                      break;                  case ExpressionType.Or:                      filter = TranslateOr((BinaryExpression)node);                      break;                  case ExpressionType.OrElse:                      filter = TranslateOrElse((BinaryExpression)node);                      break;                  case ExpressionType.TypeIs:                      filter = TranslateTypeIsQuery((TypeBinaryExpression)node);                      break;                  case ExpressionType.Extension:                      var mongoExpression = node as ExtensionExpression;                      if (mongoExpression != null)                      {                          switch (mongoExpression.ExtensionType)                          {                              case ExtensionExpressionType.FieldAsDocument:                              case ExtensionExpressionType.Field:                                  if (mongoExpression.Type == typeof(bool))                                  {                                      filter = TranslateBoolean(mongoExpression);                                  }                                  break;                              case ExtensionExpressionType.InjectedFilter:                                  return TranslateInjectedFilter((InjectedFilterExpression)node);                              case ExtensionExpressionType.Pipeline:                                  filter = TranslatePipeline((PipelineExpression)node);                                  break;                          }                      }                      break;              }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,Translate,The following switch statement is missing a default case: switch (mongoExpression.ExtensionType)                          {                              case ExtensionExpressionType.FieldAsDocument:                              case ExtensionExpressionType.Field:                                  if (mongoExpression.Type == typeof(bool))                                  {                                      filter = TranslateBoolean(mongoExpression);                                  }                                  break;                              case ExtensionExpressionType.InjectedFilter:                                  return TranslateInjectedFilter((InjectedFilterExpression)node);                              case ExtensionExpressionType.Pipeline:                                  filter = TranslatePipeline((PipelineExpression)node);                                  break;                          }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateArrayLength,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.Equal:                          return __builder.Size(fieldExpression.FieldName' value);                      case ExpressionType.NotEqual:                          return __builder.Not(__builder.Size(fieldExpression.FieldName' value));                      case ExpressionType.GreaterThan:                          return __builder.SizeGt(fieldExpression.FieldName' value);                      case ExpressionType.GreaterThanOrEqual:                          return __builder.SizeGte(fieldExpression.FieldName' value);                      case ExpressionType.LessThan:                          return __builder.SizeLt(fieldExpression.FieldName' value);                      case ExpressionType.LessThanOrEqual:                          return __builder.SizeLte(fieldExpression.FieldName' value);                  }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateComparison,The following switch statement is missing a default case: switch (operatorType)              {                  case ExpressionType.Equal: return __builder.Eq(fieldExpression.FieldName' serializedValue);                  case ExpressionType.GreaterThan: return __builder.Gt(fieldExpression.FieldName' serializedValue);                  case ExpressionType.GreaterThanOrEqual: return __builder.Gte(fieldExpression.FieldName' serializedValue);                  case ExpressionType.LessThan: return __builder.Lt(fieldExpression.FieldName' serializedValue);                  case ExpressionType.LessThanOrEqual: return __builder.Lte(fieldExpression.FieldName' serializedValue);                  case ExpressionType.NotEqual: return __builder.Ne(fieldExpression.FieldName' serializedValue);              }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateMethodCall,The following switch statement is missing a default case: switch (methodCallExpression.Method.Name)              {                  case "Contains": return TranslateContains(methodCallExpression);                  case "ContainsKey": return TranslateContainsKey(methodCallExpression);                  case "EndsWith": return TranslateStringQuery(methodCallExpression);                  case "Equals": return TranslateEquals(methodCallExpression);                  case "HasFlag": return TranslateHasFlag(methodCallExpression);                  case "In": return TranslateIn(methodCallExpression);                  case "IsMatch": return TranslateIsMatch(methodCallExpression);                  case "IsNullOrEmpty": return TranslateIsNullOrEmpty(methodCallExpression);                  case "StartsWith": return TranslateStringQuery(methodCallExpression);              }
Missing Default,MongoDB.Driver.Linq.Translators,PredicateTranslator,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\Linq\Translators\PredicateTranslator.cs,TranslateStringLengthQuery,The following switch statement is missing a default case: switch (operatorType)                  {                      case ExpressionType.NotEqual:                      case ExpressionType.Equal: regex = @"/^.{" + value.ToString() + "}$/s"; break;                      case ExpressionType.GreaterThan: regex = @"/^.{" + (value + 1).ToString() + "'}$/s"; break;                      case ExpressionType.GreaterThanOrEqual: regex = @"/^.{" + value.ToString() + "'}$/s"; break;                      case ExpressionType.LessThan: regex = @"/^.{0'" + (value - 1).ToString() + "}$/s"; break;                      case ExpressionType.LessThanOrEqual: regex = @"/^.{0'" + value.ToString() + "}$/s"; break;                  }
Missing Default,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonLinkedCoordinateReferenceSystemSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonLinkedCoordinateReferenceSystemSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                  {                      case Flags.Type: type = bsonReader.ReadString(); break;                      case Flags.Properties:                          _propertiesHelper.DeserializeMembers(context' (propertiesElementName' propertiesFlag) =>                          {                              switch (propertiesFlag)                              {                                  case PropertiesFlags.HRef: href = bsonReader.ReadString(); break;                                  case PropertiesFlags.Type: hrefType = bsonReader.ReadString(); break;                              }                          });                          break;                  }
Missing Default,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonLinkedCoordinateReferenceSystemSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonLinkedCoordinateReferenceSystemSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (propertiesFlag)                              {                                  case PropertiesFlags.HRef: href = bsonReader.ReadString(); break;                                  case PropertiesFlags.Type: hrefType = bsonReader.ReadString(); break;                              }
Missing Default,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonNamedCoordinateReferenceSystemSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonNamedCoordinateReferenceSystemSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (flag)                  {                      case Flags.Type: type = bsonReader.ReadString(); break;                      case Flags.Properties:                          _propertiesHelper.DeserializeMembers(context' (propertiesElementName' propertiesFlag) =>                          {                              switch (propertiesFlag)                              {                                  case PropertiesFlags.Name: name = bsonReader.ReadString(); break;                              }                          });                          break;                  }
Missing Default,MongoDB.Driver.GeoJsonObjectModel.Serializers,GeoJsonNamedCoordinateReferenceSystemSerializer,C:\repos\mongodb_mongo-csharp-driver\src\MongoDB.Driver\GeoJsonObjectModel\Serializers\GeoJsonNamedCoordinateReferenceSystemSerializer.cs,DeserializeValue,The following switch statement is missing a default case: switch (propertiesFlag)                              {                                  case PropertiesFlags.Name: name = bsonReader.ReadString(); break;                              }
