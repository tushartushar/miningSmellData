Implementation smell,Namespace,Class,File,Method,Description
Long Method,DevCore.TfsNotificationRelay.EventHandlers,DiscussionsHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\DiscussionsHandler.cs,CreateNotifications,The method has 147 lines of code.
Complex Method,DevCore.TfsNotificationRelay.EventHandlers,WorkItemChangedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\WorkItemChangedHandler.cs,CreateNotifications,Cyclomatic complexity of the method is 9
Long Parameter List,DevCore.TfsNotificationRelay.EventHandlers,BaseHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BaseHandler.cs,ProcessEvent,The method has 6 parameters. Parameters: requestContext' notificationType' notificationEventArgs' statusCode' statusMessage' properties
Long Parameter List,DevCore.TfsNotificationRelay.EventHandlers,BaseHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BaseHandler.cs,NotifyAsync,The method has 5 parameters. Parameters: requestContext' notifier' notification' bot' matchingRule
Long Parameter List,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateCommitRow,The method has 7 parameters. Parameters: requestContext' commitService' repository' gitCommit' rowType' pushNotification' refLookup
Long Parameter List,DevCore.TfsNotificationRelay.Notifications.GitPush,GitPushNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\GitPush\GitPushNotification.cs,GitPushNotification,The method has 6 parameters. Parameters: teamProjecCollection' projectName' repoName' userName' teamNames' refs
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,BaseHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BaseHandler.cs,ProcessEvent,The length of the statement  "                requestContext.Trace(0' TraceLevel.Info' Constants.TraceArea' "BaseHandler"' "Time spent in ProcessEvent: {0}"' timer.Elapsed); " is 127.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,BaseHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BaseHandler.cs,NotifyAsync,The length of the statement  "                TeamFoundationApplicationCore.LogException(requestContext' $"TfsNotificationRelay: Notify failed for bot {bot.Id}."' ex' 0' EventLogEntryType.Error); " is 149.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,BuildCompletionHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BuildCompletionHandler.cs,CreateNotifications,The length of the statement  "            using (var buildReader = buildService.QueryQueuedBuildsById(requestContext' build.QueueIds' new[] { "*" }' QueryOptions.None)) " is 126.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,BuildQualityChangedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\BuildQualityChangedHandler.cs,CreateNotifications,The length of the statement  "            using (var buildReader = buildService.QueryQueuedBuildsById(requestContext' build.QueueIds' new[] { "*" }' QueryOptions.None)) " is 126.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,DiscussionsHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\DiscussionsHandler.cs,CreateNotifications,The length of the statement  "                        var pushData = commitService.GetPushDataForPushIds(requestContext' repository.RepoId.RepoId' new[] { commitManifest.PushId }).FirstOrDefault(); " is 143.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,DiscussionsHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\DiscussionsHandler.cs,CreateNotifications,The length of the statement  "                    if (thread.Properties != null && thread.Properties.TryGetValue<string>("Microsoft.TeamFoundation.Discussion.ItemPath"' out itemPath)) " is 133.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestCreatedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestCreatedHandler.cs,CreateNotifications,The length of the statement  "            var identity = identityService.ReadIdentity(requestContext' IdentitySearchFactor.Identifier' ev.Creator.Descriptor.Identifier); " is 127.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestCreatedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestCreatedHandler.cs,CreateNotifications,The length of the statement  "                    var reviewers = identityService.ReadIdentities(requestContext' pullRequest.Reviewers.Select(r => r.Reviewer).ToArray()); " is 120.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestReviewerVoteHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestReviewerVoteHandler.cs,CreateNotifications,The length of the statement  "            var identity = identityService.ReadIdentity(requestContext' IdentitySearchFactor.Identifier' ev.Reviewer.Descriptor.Identifier); " is 128.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestReviewerVoteHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestReviewerVoteHandler.cs,CreateNotifications,The length of the statement  "                    var reviewers = identityService.ReadIdentities(requestContext' pullRequest.Reviewers.Select(r => r.Reviewer).ToArray()); " is 120.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestStatusUpdateHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestStatusUpdateHandler.cs,CreateNotifications,The length of the statement  "            var identity = identityService.ReadIdentity(requestContext' IdentitySearchFactor.Identifier' ev.Updater.Descriptor.Identifier); " is 127.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,PullRequestStatusUpdateHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\PullRequestStatusUpdateHandler.cs,CreateNotifications,The length of the statement  "                    var reviewers = identityService.ReadIdentities(requestContext' pullRequest.Reviewers.Select(r => r.Reviewer).ToArray()); " is 120.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,RepositoryHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\RepositoryHandler.cs,CreateNotifications,The length of the statement  "                using (ITfsGitRepository repository = repositoryService.FindRepositoryById(requestContext' gitNotification.RepositoryId)) " is 121.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,RepositoryHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\RepositoryHandler.cs,CreateNotifications,The length of the statement  "                using (ITfsGitRepository repository = repositoryService.FindRepositoryById(requestContext' gitNotification.RepositoryId)) " is 121.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,ProjectCreatedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\ProjectCreatedHandler.cs,CreateNotifications,The length of the statement  "            yield return new ProjectCreatedNotification() { TeamProjectCollection = requestContext.ServiceHost.Name' ProjectUrl = projectUrl' ProjectName = ev.Name }; " is 154.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,ProjectDeletedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\ProjectDeletedHandler.cs,CreateNotifications,The length of the statement  "            yield return new ProjectDeletedNotification() { TeamProjectCollection = requestContext.ServiceHost.Name' ProjectUri = ev.Uri' ProjectName = projectName }; " is 154.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,WorkItemChangedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\WorkItemChangedHandler.cs,CreateNotifications,The length of the statement  "            if (ev.CoreFields.IntegerFields == null) throw new TfsNotificationRelayException("ev.CoreFields.IntegerFields is null"); " is 120.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,WorkItemChangedHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\WorkItemChangedHandler.cs,CreateNotifications,The length of the statement  "            var comment = ev.TextFields?.FirstOrDefault(f => f.ReferenceName == "System.History" && !string.IsNullOrEmpty(f.Value)); " is 120.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "            var identity = identityService.ReadIdentity(requestContext' IdentitySearchFactor.Identifier' pushNotification.Pusher.Identifier); " is 129.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "            using (ITfsGitRepository repository = repositoryService.FindRepositoryById(requestContext' pushNotification.RepositoryId)) " is 122.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "                var pushCommits = pushNotification.IncludedCommits.Select(commitId => (TfsGitCommit)repository.LookupObject(commitId)).OrderByDescending(c => c.GetCommitter().Time); " is 165.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "                    notification.Add(CreateCommitRow(requestContext' commitService' repository' commit' CommitRowType.Commit' pushNotification' refLookup)); " is 136.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "                foreach (TfsGitCommit gitCommit in oldCommits.OrderByDescending(c => c.GetCommitter().Time).TakeWhile(c => notification.Count < maxLines)) " is 138.
Long Statement,DevCore.TfsNotificationRelay.EventHandlers,GitPushHandler,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\GitPushHandler.cs,CreateNotifications,The length of the statement  "                    notification.Add(CreateCommitRow(requestContext' commitService' repository' gitCommit' CommitRowType.RefUpdate' pushNotification' refLookup)); " is 142.
Long Statement,DevCore.TfsNotificationRelay.Notifications,ReleaseEnvironmentCompletedNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\ReleaseEnvironmentCompletedNotification.cs,ToMessage,The length of the statement  "            return new[] { text.ReleaseEnvironmentCompletedFormat.FormatWith(formatter)' $"{formatter.EnvironmentName}: {formatter.EnvironmentName}" }; " is 139.
Long Statement,DevCore.TfsNotificationRelay.Notifications,BuildNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\BuildNotification.cs,FormatBuildDuration,The length of the statement  "            return string.IsNullOrEmpty(text.TimeSpanFormat) ? duration.ToString(@"hh\:mm\:ss") : duration.ToString(text.TimeSpanFormat); " is 125.
Long Statement,DevCore.TfsNotificationRelay.Notifications,PullRequestReviewerVoteNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\PullRequestReviewerVoteNotification.cs,GetRuleMatch,The length of the statement  "            var rule = GetRulesMatch(collection' eventRules).FirstOrDefault(r => r.Events.HasFlag(TfsEvents.PullRequestReviewerVote)); " is 122.
Long Statement,DevCore.TfsNotificationRelay.Notifications,PullRequestStatusUpdateNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\PullRequestStatusUpdateNotification.cs,GetRuleMatch,The length of the statement  "            var rule = GetRulesMatch(collection' eventRules).FirstOrDefault(r => r.Events.HasFlag(TfsEvents.PullRequestStatusUpdate)); " is 122.
Long Statement,DevCore.TfsNotificationRelay.Notifications.GitPush,CommitRow,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\GitPush\CommitRow.cs,ToString,The length of the statement  "            string formattedTime = string.IsNullOrEmpty(text.DateTimeFormat) ? AuthorTime.ToString() : AuthorTime.ToString(text.DateTimeFormat); " is 132.
Long Statement,DevCore.TfsNotificationRelay.Notifications.GitPush,RefUpdateRow,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\GitPush\RefUpdateRow.cs,ToString,The length of the statement  "            return String.Format("{0} {1} {2} {3}"' Refs.ToString(text' transform)' text.RefPointer' transform(ObjectType.ToString())' transform(NewObjectId.ToHexString())); " is 161.
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertBuildStatus,The following statement contains a magic number: switch (value)              {                  case BuildStatus.None:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.None;                  case BuildStatus.InProgress:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.InProgress;                  case BuildStatus.Completed:                      return this.ConvertBuildResult(result);                  case (BuildStatus)3:                  case (BuildStatus)5:                  case (BuildStatus)6:                  case (BuildStatus)7:                      break;                  case BuildStatus.Cancelling:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.Stopped;                  case BuildStatus.Postponed:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                  default:                      if (value == BuildStatus.NotStarted)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                      }                      break;              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertBuildStatus,The following statement contains a magic number: switch (value)              {                  case BuildStatus.None:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.None;                  case BuildStatus.InProgress:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.InProgress;                  case BuildStatus.Completed:                      return this.ConvertBuildResult(result);                  case (BuildStatus)3:                  case (BuildStatus)5:                  case (BuildStatus)6:                  case (BuildStatus)7:                      break;                  case BuildStatus.Cancelling:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.Stopped;                  case BuildStatus.Postponed:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                  default:                      if (value == BuildStatus.NotStarted)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                      }                      break;              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertBuildStatus,The following statement contains a magic number: switch (value)              {                  case BuildStatus.None:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.None;                  case BuildStatus.InProgress:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.InProgress;                  case BuildStatus.Completed:                      return this.ConvertBuildResult(result);                  case (BuildStatus)3:                  case (BuildStatus)5:                  case (BuildStatus)6:                  case (BuildStatus)7:                      break;                  case BuildStatus.Cancelling:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.Stopped;                  case BuildStatus.Postponed:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                  default:                      if (value == BuildStatus.NotStarted)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                      }                      break;              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertBuildStatus,The following statement contains a magic number: switch (value)              {                  case BuildStatus.None:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.None;                  case BuildStatus.InProgress:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.InProgress;                  case BuildStatus.Completed:                      return this.ConvertBuildResult(result);                  case (BuildStatus)3:                  case (BuildStatus)5:                  case (BuildStatus)6:                  case (BuildStatus)7:                      break;                  case BuildStatus.Cancelling:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.Stopped;                  case BuildStatus.Postponed:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                  default:                      if (value == BuildStatus.NotStarted)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.NotStarted;                      }                      break;              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertBuildResult,The following statement contains a magic number: switch (value)              {                  case BuildResult.None:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.None;                  case (BuildResult)1:                  case (BuildResult)3:                      break;                  case BuildResult.Succeeded:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.Succeeded;                  case BuildResult.PartiallySucceeded:                      return Microsoft.TeamFoundation.Build.Server.BuildStatus.PartiallySucceeded;                  default:                      if (value == BuildResult.Failed)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.Failed;                      }                      if (value == BuildResult.Canceled)                      {                          return Microsoft.TeamFoundation.Build.Server.BuildStatus.Stopped;                      }                      break;              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertReason,The following statement contains a magic number: if (reason <= BuildReason.UserCreated)              {                  switch (reason)                  {                      case BuildReason.None:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.None;                      case BuildReason.Manual:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Manual;                      case BuildReason.IndividualCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.IndividualCI;                      case (BuildReason)3:                      case (BuildReason)5:                      case (BuildReason)6:                      case (BuildReason)7:                          break;                      case BuildReason.BatchedCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.BatchedCI;                      case BuildReason.Schedule:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Schedule;                      default:                          if (reason == BuildReason.UserCreated)                          {                              return Microsoft.TeamFoundation.Build.Server.BuildReason.UserCreated;                          }                          break;                  }              }              else              {                  if (reason == BuildReason.ValidateShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.ValidateShelveset;                  }                  if (reason == BuildReason.CheckInShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.CheckInShelveset;                  }              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertReason,The following statement contains a magic number: if (reason <= BuildReason.UserCreated)              {                  switch (reason)                  {                      case BuildReason.None:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.None;                      case BuildReason.Manual:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Manual;                      case BuildReason.IndividualCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.IndividualCI;                      case (BuildReason)3:                      case (BuildReason)5:                      case (BuildReason)6:                      case (BuildReason)7:                          break;                      case BuildReason.BatchedCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.BatchedCI;                      case BuildReason.Schedule:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Schedule;                      default:                          if (reason == BuildReason.UserCreated)                          {                              return Microsoft.TeamFoundation.Build.Server.BuildReason.UserCreated;                          }                          break;                  }              }              else              {                  if (reason == BuildReason.ValidateShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.ValidateShelveset;                  }                  if (reason == BuildReason.CheckInShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.CheckInShelveset;                  }              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertReason,The following statement contains a magic number: if (reason <= BuildReason.UserCreated)              {                  switch (reason)                  {                      case BuildReason.None:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.None;                      case BuildReason.Manual:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Manual;                      case BuildReason.IndividualCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.IndividualCI;                      case (BuildReason)3:                      case (BuildReason)5:                      case (BuildReason)6:                      case (BuildReason)7:                          break;                      case BuildReason.BatchedCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.BatchedCI;                      case BuildReason.Schedule:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Schedule;                      default:                          if (reason == BuildReason.UserCreated)                          {                              return Microsoft.TeamFoundation.Build.Server.BuildReason.UserCreated;                          }                          break;                  }              }              else              {                  if (reason == BuildReason.ValidateShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.ValidateShelveset;                  }                  if (reason == BuildReason.CheckInShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.CheckInShelveset;                  }              }
Magic Number,DevCore.TfsNotificationRelay,Build2Converter,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Build2Converter.cs,ConvertReason,The following statement contains a magic number: if (reason <= BuildReason.UserCreated)              {                  switch (reason)                  {                      case BuildReason.None:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.None;                      case BuildReason.Manual:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Manual;                      case BuildReason.IndividualCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.IndividualCI;                      case (BuildReason)3:                      case (BuildReason)5:                      case (BuildReason)6:                      case (BuildReason)7:                          break;                      case BuildReason.BatchedCI:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.BatchedCI;                      case BuildReason.Schedule:                          return Microsoft.TeamFoundation.Build.Server.BuildReason.Schedule;                      default:                          if (reason == BuildReason.UserCreated)                          {                              return Microsoft.TeamFoundation.Build.Server.BuildReason.UserCreated;                          }                          break;                  }              }              else              {                  if (reason == BuildReason.ValidateShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.ValidateShelveset;                  }                  if (reason == BuildReason.CheckInShelveset)                  {                      return Microsoft.TeamFoundation.Build.Server.BuildReason.CheckInShelveset;                  }              }
Magic Number,DevCore.TfsNotificationRelay,ByteArrayComparer,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\ByteArrayComparer.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < x.Length; ++i)                  iHash ^= (x[i] << ((0x03 & i) << 3));
Magic Number,DevCore.TfsNotificationRelay,Utils,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Utils.cs,ToShortHexString,The following statement contains a magic number: return buffer.ToHexString().Substring(0' 7);
Magic Number,DevCore.TfsNotificationRelay.EventHandlers,UserField,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\EventHandlers\UserField.cs,TryParse,The following statement contains a magic number: if (!Guid.TryParse(match.Groups[2].Value' out id)) return false;
Magic Number,DevCore.TfsNotificationRelay.Notifications,PullRequestReviewerVoteNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\PullRequestReviewerVoteNotification.cs,FormatAction,The following statement contains a magic number: switch (Vote)              {                  case -10: return text.VoteRejected;                  case 0: return text.VoteRescinded;                  case 10: return text.VoteApproved;                  default:                      return $"voted {Vote} on";              }
Magic Number,DevCore.TfsNotificationRelay.Notifications,PullRequestReviewerVoteNotification,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\Notifications\PullRequestReviewerVoteNotification.cs,FormatAction,The following statement contains a magic number: switch (Vote)              {                  case -10: return text.VoteRejected;                  case 0: return text.VoteRescinded;                  case 10: return text.VoteApproved;                  default:                      return $"voted {Vote} on";              }
Missing Default,DevCore.TfsNotificationRelay,HtmlToText,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\HtmlToText.cs,ConvertTo,The following switch statement is missing a default case: switch (node.NodeType)              {                  case HtmlNodeType.Comment:                      // don't output comments                      break;                    case HtmlNodeType.Document:                      ConvertContentTo(node' outText);                      break;                    case HtmlNodeType.Text:                      // script and style must not be output                      string parentName = node.ParentNode.Name;                      if ((parentName == "script") || (parentName == "style"))                          break;                        // get text                      var html = ((HtmlTextNode)node).Text;                        // is it in fact a special closing node output as text?                      if (HtmlNode.IsOverlappedClosingElement(html))                          break;                        // check the text is meaningful and not a bunch of whitespaces                      if (html.Trim().Length > 0)                      {                          outText.Write(HtmlEntity.DeEntitize(html));                      }                      break;                    case HtmlNodeType.Element:                      switch (node.Name)                      {                          case "div":                          case "br":                          case "p":                              // treat paragraphs as crlf                              outText.Write("\r\n");                              break;                      }                        if (node.HasChildNodes)                      {                          ConvertContentTo(node' outText);                      }                      break;              }
Missing Default,DevCore.TfsNotificationRelay,HtmlToText,C:\repos\kria_TfsNotificationRelay\src\TfsNotificationRelay\HtmlToText.cs,ConvertTo,The following switch statement is missing a default case: switch (node.Name)                      {                          case "div":                          case "br":                          case "p":                              // treat paragraphs as crlf                              outText.Write("\r\n");                              break;                      }
