Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors,ValueAccessorBase<T>,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\EntityConverters\TypeData\ValueAccessors\ValueAccessorBase.cs,CreateValueAccessors,Cyclomatic complexity of the method is 10
Complex Method,WindowsAzure.Table.Queryable.Base,TypeSystem,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Base\TypeSystem.cs,FindIEnumerable,Cyclomatic complexity of the method is 10
Complex Method,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,Cyclomatic complexity of the method is 9
Long Parameter List,WindowsAzure.Table.Extensions,CloudTableClientExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Extensions\CloudTableClientExtensions.cs,ListTablesImplAsync,The method has 6 parameters. Parameters: tableClient' cloudTables' prefix' maxResults' continuationToken' cancellationToken
Long Identifier,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,,The length of the parameter _rethrowWithNoStackLossDelegate is 31.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter EntityTypeDataShouldBeOneAttribute is 34.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter ExpressionEvaluatorInvalidCast is 30.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter ExpressionEvaluatorTypeNotSupported is 35.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter ExpressionEvaluatorUnableToEvaluate is 35.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter ExpressionValueAccessorInvalidMemberType is 40.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter PropertyPartitionKeyInvalidType is 31.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter SerializationExtensionsNotSupportedType is 39.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TableBatchPartitionerNoEntities is 31.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TableRequestExecutorInvalidMode is 31.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TranslatorMethodInvalidArgument is 31.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TranslatorOperatorNotSupported is 30.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TranslatorUnableToEvaluateExpression is 36.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter TranslatorUnableToTranslateMethod is 33.
Long Identifier,WindowsAzure.Properties,Resources,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Properties\Resources.cs,,The length of the parameter ValueAccessorFactoryNotSupportedType is 36.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CatchImpl,The length of the statement  "                            throw new InvalidOperationException("You must set the Task property of the CatchInfo returned from the TaskHelpersExtensions.Catch continuation."); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "            task.ContinueWith(innerTask => tcs.TrySetFromTask(innerTask)' TaskContinuationOptions.NotOnFaulted | TaskContinuationOptions.ExecuteSynchronously); " is 147.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                                throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CatchImplContinuation,The length of the statement  "                            throw new InvalidOperationException("You cannot return null from the TaskHelpersExtensions.Catch continuation. You must return a valid task or throw an exception."); " is 165.
Long Statement,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,GetRethrowWithNoStackLossDelegate,The length of the statement  "                // No-ops if the task completed successfully' else throws the originating exception complete with the correct call stack. " is 121.
Virtual Method Call from Constructor,WindowsAzure.Table.EntityConverters.TypeData,EntityTypeMap<T>,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\EntityConverters\TypeData\EntityTypeMap.cs,EntityTypeMap,The constructor "EntityTypeMap" calls a virtual method "AutoMap".
Magic Number,WindowsAzure.Table.Extensions,AsyncQueryExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Extensions\AsyncQueryExtensions.cs,SingleAsync,The following statement contains a magic number: return tableQueryProvider.ExecuteAsync(source.Take(2).Expression' cancellationToken)                                       .Then(result => ((IEnumerable<T>) result).Single()' cancellationToken);
Magic Number,WindowsAzure.Table.Extensions,AsyncQueryExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Extensions\AsyncQueryExtensions.cs,SingleAsync,The following statement contains a magic number: return tableQueryProvider.ExecuteAsync(source.Where(predicate).Take(2).Expression' cancellationToken)                                       .Then(result => ((IEnumerable<T>)result).Single()' cancellationToken);
Magic Number,WindowsAzure.Table.Extensions,AsyncQueryExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Extensions\AsyncQueryExtensions.cs,SingleOrDefaultAsync,The following statement contains a magic number: return tableQueryProvider.ExecuteAsync(source.Take(2).Expression' cancellationToken)                                       .Then(result => ((IEnumerable<T>) result).SingleOrDefault()' cancellationToken);
Magic Number,WindowsAzure.Table.Extensions,AsyncQueryExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Extensions\AsyncQueryExtensions.cs,SingleOrDefaultAsync,The following statement contains a magic number: return tableQueryProvider.ExecuteAsync(source.Where(predicate).Take(2).Expression' cancellationToken)                                       .Then(result => ((IEnumerable<T>)result).SingleOrDefault()' cancellationToken);
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,Translate,The following statement contains a magic number: method.Arguments.Count != 2
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,VisitMethodCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "Contains":                      if (node.Arguments.Count == 1)                      {                          var result = (ConstantExpression) _constantEvaluator.Evaluate(node.Object);                            var enumerable = result.Value as IEnumerable;                          if (enumerable == null)                          {                              string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                              throw new ArgumentException(message);                          }                            Expression parameter = node.Arguments[0];                            // determine equality value                          string equality;                            if (_filter.Length >= 5 &&                              _filter.ToString(_filter.Length - 5' 5) == " not ")                          {                              _filter.Remove(_filter.Length - 5' 5);                              equality = " ne ";                          }                          else                          {                              equality = " eq ";                          }                            _filter.Append("(");                          int count = 0;                            foreach (object value in enumerable)                          {                              AppendParameter(parameter);                              _filter.Append(equality);                              AppendConstant(Expression.Constant(value));                              _filter.Append(" or ");                              count++;                          }                            if (count > 0)                          {                              _filter.Remove(_filter.Length - 4' 4);                              _filter.Append(")");                          }                          else                          {                              _filter.Remove(_filter.Length - 1' 1);                          }                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      break;                    case "ToString":                      ConstantExpression constant;                        if (node.Object != null)                      {                          var instance = _constantEvaluator.Evaluate(node.Object);                          constant = Expression.Constant(instance.ToString());                      }                      else                      {                          constant = Expression.Constant(string.Empty);                      }                        AppendConstant(constant);                      break;                    default:                      AppendConstant(_constantEvaluator.Evaluate(node));                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionTranslator.cs,AppendBinaryCall,The following statement contains a magic number: switch (node.Method.Name)              {                  case "CompareTo":                      AppendParameter(_constantEvaluator.Evaluate(node.Object));                      _filter.AppendFormat(" {0} "' type.Serialize());                      AppendConstant(_constantEvaluator.Evaluate(node.Arguments[0]));                      return true;                    case "Compare":                  case "CompareOrdinal":                      if (node.Arguments.Count >= 2)                      {                          AppendParameter(_constantEvaluator.Evaluate(node.Arguments[0]));                          _filter.AppendFormat(" {0} "' type.Serialize());                          AppendConstant(_constantEvaluator.Evaluate(node.Arguments[1]));                      }                      else                      {                          string message = string.Format(Resources.TranslatorMethodInvalidArgument' node.Method.Name);                          throw new ArgumentException(message);                      }                      return true;                    default:                      VisitMethodCall(node);                      break;              }
Magic Number,WindowsAzure.Table.Queryable.Expressions.Methods,SelectTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Methods\SelectTranslator.cs,Translate,The following statement contains a magic number: method.Method.Name != MethodName || method.Arguments.Count != 2
Magic Number,WindowsAzure.Table.Queryable.Expressions.Methods,SingleOrDefaultTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Methods\SingleOrDefaultTranslator.cs,Translate,The following statement contains a magic number: result.AddTop(2);
Magic Number,WindowsAzure.Table.Queryable.Expressions.Methods,SingleTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Methods\SingleTranslator.cs,Translate,The following statement contains a magic number: result.AddTop(2);
Magic Number,WindowsAzure.Table.Queryable.Expressions.Methods,TakeTranslator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Methods\TakeTranslator.cs,Translate,The following statement contains a magic number: method.Method.Name != MethodName || method.Arguments.Count != 2
Missing Default,System.Threading.Tasks,TaskHelpers,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpers.cs,SetIfTaskFailed,The following switch statement is missing a default case: switch (source.Status)              {                  case TaskStatus.Canceled:                  case TaskStatus.Faulted:                      return tcs.TrySetFromTask(source);              }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImpl,The following switch statement is missing a default case: switch (task.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' task);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
Missing Default,System.Threading.Tasks,TaskHelpersExtensions,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Common\TaskHelpersExtensions.cs,CopyResultToCompletionSourceImplContinuation,The following switch statement is missing a default case: switch (innerTask.Status)                  {                      case TaskStatus.Canceled:                      case TaskStatus.Faulted:                          TaskHelpers.TrySetFromTask(tcs' innerTask);                          break;                        case TaskStatus.RanToCompletion:                          tcs.TrySetResult(resultThunk(task));                          break;                  }
Missing Default,WindowsAzure.Table.Queryable.Expressions.Infrastructure,ExpressionEvaluator,D:\research\architectureSmells\repos\dtretyakov_WindowsAzure\WindowsAzure\Table\Queryable\Expressions\Infrastructure\ExpressionEvaluator.cs,VisitUnary,The following switch statement is missing a default case: switch (node.NodeType)              {                  case ExpressionType.Convert:                  case ExpressionType.ConvertChecked:                      {                          ConstantExpression operand = TryToEvaluate(node.Operand);                            var convertable = operand.Value as IConvertible;                          if (convertable == null)                          {                              var invalidCast = string.Format(Resources.ExpressionEvaluatorInvalidCast' operand.Value.GetType()' node.Type);                              throw new InvalidCastException(invalidCast);                          }                            object value = convertable.ToType(node.Type' CultureInfo.InvariantCulture);                          return Expression.Constant(value' value.GetType());                      }              }
