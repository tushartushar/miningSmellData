Implementation smell,Namespace,Class,File,Method,Description
Long Method,HeapShot.Reader,HeapSnapshot,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,Build,The method has 141 lines of code.
Complex Method,HeapShot.Reader,ObjectMapReader,C:\repos\mono_heap-shot\HeapShot.Reader\ObjectMapFileReader.cs,ReadLogFile,Cyclomatic complexity of the method is 10
Complex Method,HeapShot.Reader,ReferenceNode,C:\repos\mono_heap-shot\HeapShot.Reader\ReferenceNode.cs,AddReference,Cyclomatic complexity of the method is 9
Complex Method,HeapShot.Reader,HeapSnapshot,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,Build,Cyclomatic complexity of the method is 18
Complex Method,HeapShot.Reader,HeapSnapshot,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,FindRoot,Cyclomatic complexity of the method is 10
Complex Method,HeapShot.Reader.Graphs,Node,C:\repos\mono_heap-shot\HeapShot.Reader\Graph.cs,WriteDot,Cyclomatic complexity of the method is 8
Long Parameter List,HeapShot.Reader,ReferenceNode,C:\repos\mono_heap-shot\HeapShot.Reader\ReferenceNode.cs,AddReference,The method has 6 parameters. Parameters: parentObject' obj' tnode' refsToRoot' rootMem' fieldName
Long Identifier,MonoDevelop.Profiler,MonitiorEvent,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,,The length of the parameter MONO_PROFILER_MONITOR_CONTENTION is 32.
Long Statement,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The length of the statement  "			res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24)); " is 121.
Magic Number,HeapShot.Reader,ObjectMapReader,C:\repos\mono_heap-shot\HeapShot.Reader\ObjectMapFileReader.cs,Read,The following statement contains a magic number: try {  				if (!File.Exists (name))  					return;  				  				DateTime tim = File.GetLastWriteTime (name);  				if (tim == timestamp)  					return;  				timestamp = tim;  				  				if (reader == null)  					reader = new LogFileReader (name);  				  				ReadLogFile (progress);  			} catch (Exception ex) {  				Console.WriteLine (ex);  			} finally {  				watch.Stop ();  				Console.WriteLine ("ObjectMapFileReader.Read (): Completed in {0} s"' watch.ElapsedMilliseconds / (double) 1000);  			}
Magic Number,HeapShot.Reader,ObjectMapReader,C:\repos\mono_heap-shot\HeapShot.Reader\ObjectMapFileReader.cs,WaitForHeapShot,The following statement contains a magic number: while (DateTime.Now < tlimit) {  				Read ();  				if (shots.Count > ns)  					return true;  				System.Threading.Thread.Sleep (500);  			}
Magic Number,HeapShot.Reader,ObjectMapReader,C:\repos\mono_heap-shot\HeapShot.Reader\ObjectMapFileReader.cs,ReadLogFile,The following statement contains a magic number: while (!reader.IsEof) {  				// We check if we must cancel before reading more data (and after processing all the data we've read).  				// This way we don't cancel in the middle of event processing (since we store data at class level  				// we may end up with corruption the next time we read the same buffer otherwise).  				if (progress != null) {  					if (progress.Cancelled)  						return;  						  					long pct = (reader.Position - start_position) * 100 / (reader.Length - start_position);  					if (pct != last_pct) {  						last_pct = pct;  						progress.ReportProgress ("Loading profiler log"' pct / 100.0f);  					}  				}  				  				bheader = BufferHeader.Read (reader);  				if (bheader == null) {  					// entire buffer isn't available (yet)  					return;  				}  				  				//Console.WriteLine ("BUFFER ThreadId: " + bheader.ThreadId + " Len:" + bheader.Length);  				currentObjBase = bheader.ObjBase;  				currentPtrBase = bheader.PtrBase;    				while (!reader.IsBufferEmpty) {  					MetadataEvent me;  					HeapEvent he;  					GcEvent ge;  					  					Event e = Event.Read (reader);  					if ((me = e as MetadataEvent) != null)  						ReadLogFileChunk_Type (me);  					else if ((he = e as HeapEvent) != null)  						ReadLogFileChunk_Object (he);  					else if ((ge = e as GcEvent) != null)  						ReadGcEvent (ge);  				}  			}
Magic Number,HeapShot.Reader,ReferenceNode,C:\repos\mono_heap-shot\HeapShot.Reader\ReferenceNode.cs,Print,The following statement contains a magic number: Console.Write (new string (' '' level*3));
Magic Number,HeapShot.Reader,ReferenceNode,C:\repos\mono_heap-shot\HeapShot.Reader\ReferenceNode.cs,Print,The following statement contains a magic number: if (fieldReferences != null && fieldReferences.Count != 0) {  				Console.Write (new string (' '' level*3) + new string (' '' RefCount.ToString().Length) + " ");  				Console.Write ("(");  				for (int n=0; n<fieldReferences.Count; n++) {  					if (n > 0) Console.Write ("' ");  					FieldReference f = (FieldReference) fieldReferences [n];  					Console.Write (f.FiledName + ":" + f.RefCount);  				}  				Console.WriteLine (")");  			}
Magic Number,HeapShot.Reader,HeapSnapshot,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,FindRoot,The following statement contains a magic number: if (rootInfo.DeadEnds.ContainsKey (obj))  				return -2;
Magic Number,HeapShot.Reader,HeapSnapshot,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,FindRoot,The following statement contains a magic number: foreach (int oref in GetReferencers (obj)) {  				hasrefs = true;  				if (!rootInfo.BaseObjects.ContainsKey (oref)) {  					int fr = FindRoot (rootInfo' pathTree' oref);  					if (fr != -2 && fr < findresult)  						findresult = fr;  				}  			}
Magic Number,HeapShot.Reader,PathTree,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,AddPath,The following statement contains a magic number: for (int n=1; n<cpath.Length; n++) {  				// Fill gaps in the tree  				int cobj = cpath[n];  				int lastcpos = tpos;  				int cpos = pathTree [tpos + 1];  				while (cpos != -1) {  					if (pathTree [pathTree [cpos]] == cobj)  						break;  					lastcpos = cpos;  					cpos = pathTree [cpos + 1];  				}  				if (cpos != -1) {  					// Child already exist  					tpos = pathTree [cpos];  				} else {  					// New child  					int newObjPos;  					if (pathIndex.TryGetValue (cobj' out newObjPos)) {  						// The object is already in the tree.  						// We only need to register the child node.  						pathTree.Add (newObjPos);  						pathTree.Add (-1);  						tpos = newObjPos;  					} else {  						// The object is new in the tree. Register the object.  						tpos = pathTree.Count;  						pathIndex.Add (cobj' tpos);  						pathTree.Add (cobj);  						pathTree.Add (-1);  						// Now register the child node  						pathTree.Add (tpos);  						pathTree.Add (-1);  					}  					// Link the new child node  					pathTree [lastcpos + 1] = pathTree.Count - 2;  				}  			}
Magic Number,HeapShot.Reader,PathTree,C:\repos\mono_heap-shot\HeapShot.Reader\HeapSnapshot.cs,Dump,The following statement contains a magic number: Console.WriteLine (new string (' '' ind*2) + pathTree [n]);
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt16,The following statement contains a magic number: res = (ushort) (buffer [position] | (buffer [position + 1] << 8));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt16,The following statement contains a magic number: position += 2;
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: res = (buffer [position] | (buffer [position + 1] << 8) | (buffer [position + 2] << 16) | (buffer [position + 3] << 24));
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt32,The following statement contains a magic number: position += 4;
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: position += 8;
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadInt64,The following statement contains a magic number: return (long) ((((ulong) ret_high) << 32) | ret_low);
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_low  = (uint) (((uint)buffer [position + 0])        |  			                       (((uint)buffer [position + 1]) << 8)  |  			                       (((uint)buffer [position + 2]) << 16) |  			                       (((uint)buffer [position + 3]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: uint ret_high = (uint) (((uint)buffer [position + 4])        |  			                       (((uint)buffer [position + 5]) << 8)  |  			                       (((uint)buffer [position + 6]) << 16) |  			                       (((uint)buffer [position + 7]) << 24)  			                       );
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: position += 8;
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadUInt64,The following statement contains a magic number: return (((ulong) ret_high) << 32) | ret_low;
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadULeb128,The following statement contains a magic number: while (true) {  				byte b = buffer [position++];  				result |= ((ulong)(b & 0x7f)) << shift;  				if ((b & 0x80) != 0x80)  					break;  				shift += 7;  			}
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadSLeb128,The following statement contains a magic number: while (true) {  				byte b = buffer [position++];  				result |= ((long)(b & 0x7f)) << shift;  				shift += 7;  				if ((b & 0x80) != 0x80) {  					if (shift < sizeof(long) * 8 && (b & 0x40) == 0x40)  						result |= -(1L << shift);  					break;  				}  			}
Magic Number,HeapShot.Reader,LogFileReader,C:\repos\mono_heap-shot\HeapShot.Reader\LogFileReader.cs,ReadSLeb128,The following statement contains a magic number: while (true) {  				byte b = buffer [position++];  				result |= ((long)(b & 0x7f)) << shift;  				shift += 7;  				if ((b & 0x80) != 0x80) {  					if (shift < sizeof(long) * 8 && (b & 0x40) == 0x40)  						result |= -(1L << shift);  					break;  				}  			}
Magic Number,MonoDevelop.Profiler,BufferHeader,C:\repos\mono_heap-shot\HeapShot.Reader\Buffer.cs,Read,The following statement contains a magic number: if (!reader.LoadData (48))  				return null;
Magic Number,MonoDevelop.Profiler,MetadataEvent,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,MetadataEvent,The following statement contains a magic number: switch (MType) {  			case MetaDataType.Class:  				Image = reader.ReadSLeb128 ();  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Image:  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Assembly:  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Thread:  				Flags = reader.ReadULeb128 ();  				if (reader.Header.Format < 11 || (reader.Header.Format > 10 && extendedInfo == 0)) {  					Name = reader.ReadNullTerminatedString ();  				}  				break;  			case MetaDataType.Domain:  				Flags = reader.ReadULeb128 ();  				if (extendedInfo == 0)  					Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Context:  				Flags = reader.ReadULeb128 ();  				Domain = reader.ReadSLeb128 ();  				break;  			default:  				throw new ArgumentException ("Unknown metadata type: " + MType);  			}
Magic Number,MonoDevelop.Profiler,MetadataEvent,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,MetadataEvent,The following statement contains a magic number: switch (MType) {  			case MetaDataType.Class:  				Image = reader.ReadSLeb128 ();  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Image:  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Assembly:  				Flags = reader.ReadULeb128 ();  				Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Thread:  				Flags = reader.ReadULeb128 ();  				if (reader.Header.Format < 11 || (reader.Header.Format > 10 && extendedInfo == 0)) {  					Name = reader.ReadNullTerminatedString ();  				}  				break;  			case MetaDataType.Domain:  				Flags = reader.ReadULeb128 ();  				if (extendedInfo == 0)  					Name = reader.ReadNullTerminatedString ();  				break;  			case MetaDataType.Context:  				Flags = reader.ReadULeb128 ();  				Domain = reader.ReadSLeb128 ();  				break;  			default:  				throw new ArgumentException ("Unknown metadata type: " + MType);  			}
Magic Number,MonoDevelop.Profiler,MonitiorEvent,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,MonitiorEvent,The following statement contains a magic number: byte ev = (byte)((exinfo >> 4) & 0x3);
Magic Number,MonoDevelop.Profiler,Util,C:\repos\mono_heap-shot\HeapShot.Reader\Util.cs,ReadULeb128,The following statement contains a magic number: while (true) {  				byte b = reader.ReadByte ();  				result |= ((ulong)(b & 0x7f)) << shift;  				if ((b & 0x80) != 0x80)  					break;  				shift += 7;  			}
Magic Number,MonoDevelop.Profiler,Util,C:\repos\mono_heap-shot\HeapShot.Reader\Util.cs,ReadSLeb128,The following statement contains a magic number: while (true) {  				byte b = reader.ReadByte ();  				result |= ((long)(b & 0x7f)) << shift;  				shift += 7;  				if ((b & 0x80) != 0x80) {  					if (shift < sizeof(long) * 8 && (b & 0x40) == 0x40)  						result |= -(1L << shift);  					break;  				}  			}
Magic Number,MonoDevelop.Profiler,Util,C:\repos\mono_heap-shot\HeapShot.Reader\Util.cs,ReadSLeb128,The following statement contains a magic number: while (true) {  				byte b = reader.ReadByte ();  				result |= ((long)(b & 0x7f)) << shift;  				shift += 7;  				if ((b & 0x80) != 0x80) {  					if (shift < sizeof(long) * 8 && (b & 0x40) == 0x40)  						result |= -(1L << shift);  					break;  				}  			}
Magic Number,MonoDevelop.Profiler,Header,C:\repos\mono_heap-shot\HeapShot.Reader\Header.cs,Read,The following statement contains a magic number: if (!reader.LoadData (32))  				return null;
Missing Default,MonoDevelop.Profiler,Event,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,CreateEvent,The following switch statement is missing a default case: switch (type) {  			case EventType.Alloc:  				return AllocEvent.Read (reader' extendedInfo);   			case EventType.Exception:  				return ExceptionEvent.Read (reader' extendedInfo);  			case EventType.Gc:  				switch (extendedInfo) {  				case TYPE_GC_EVENT:  					return GcEvent.Read (reader);  				case TYPE_GC_RESIZE:  					return ResizeGcEvent.Read (reader);  				case TYPE_GC_MOVE:  					return MoveGcEvent.Read (reader);  				case TYPE_GC_HANDLE_CREATED:  				case TYPE_GC_HANDLE_CREATED_BT:  					return HandleCreatedGcEvent.Read (reader' extendedInfo);  				case TYPE_GC_HANDLE_DESTROYED:  				case TYPE_GC_HANDLE_DESTROYED_BT:  					return HandleDestroyedGcEvent.Read (reader' extendedInfo);  				}  				throw new InvalidOperationException ("unknown gc type:" + extendedInfo);  			case EventType.Heap:  				return HeapEvent.Read (reader' extendedInfo);   			case EventType.Metadata:  				return MetadataEvent.Read (reader' extendedInfo);   			case EventType.Method:  				return MethodEvent.Read (reader' extendedInfo);   			case EventType.Monitor:  				return MonitiorEvent.Read (reader' extendedInfo);   			case EventType.Sample:  				return SampleEvent.Read (reader' extendedInfo);  			case EventType.Runtime:  				return RuntimeEvent.Read (reader' extendedInfo);  			case EventType.Coverage:  				return CoverageEvent.Read (reader' extendedInfo);  			}
Missing Default,MonoDevelop.Profiler,Event,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,CreateEvent,The following switch statement is missing a default case: switch (extendedInfo) {  				case TYPE_GC_EVENT:  					return GcEvent.Read (reader);  				case TYPE_GC_RESIZE:  					return ResizeGcEvent.Read (reader);  				case TYPE_GC_MOVE:  					return MoveGcEvent.Read (reader);  				case TYPE_GC_HANDLE_CREATED:  				case TYPE_GC_HANDLE_CREATED_BT:  					return HandleCreatedGcEvent.Read (reader' extendedInfo);  				case TYPE_GC_HANDLE_DESTROYED:  				case TYPE_GC_HANDLE_DESTROYED_BT:  					return HandleDestroyedGcEvent.Read (reader' extendedInfo);  				}
Missing Default,MonoDevelop.Profiler,CoverageEvent,C:\repos\mono_heap-shot\HeapShot.Reader\Event.cs,Read,The following switch statement is missing a default case: switch (extendedInfo) {  				case TYPE_COVERAGE_ASSEMBLY: return new CoverageAssemblyEvent (reader);  				case TYPE_COVERAGE_METHOD: return new CoverageMethodEvent (reader);  				case TYPE_COVERAGE_STATEMENT: return new CoverageStatementEvent (reader);  				case TYPE_COVERAGE_CLASS: return new CoverageClassEvent (reader);  			}
