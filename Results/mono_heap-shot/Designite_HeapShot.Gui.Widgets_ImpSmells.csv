Implementation smell,Namespace,Class,File,Method,Description
Long Method,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The method has 134 lines of code.
Complex Method,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,OnTestExpandRow,Cyclomatic complexity of the method is 8
Complex Method,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,Cyclomatic complexity of the method is 11
Complex Method,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,Cyclomatic complexity of the method is 17
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,AddNode,The length of the statement  "				iter = store.AppendValues (node' "class"' node.TypeName' !node.HasReferences' node.TotalMemory.ToString("n0")' node.AverageSize.ToString("n0")' node.RefCount.ToString ("n0")' ""' ""' "");" is 187.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,AddNode,The length of the statement  "				iter = store.AppendValues (parent' node' "class"' node.TypeName' !node.HasReferences' node.TotalMemory.ToString("n0")' node.AverageSize.ToString("n0")' node.RefCount.ToString ("n0")' refs' rootRefs' rootMem);" is 208.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,AddNode,The length of the statement  "				return store.AppendValues (parent' node' "field"' node.FiledName + ss' true' ""' ""' node.RefCount.ToString ("n0")' ""' "");" is 124.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname));" is 226.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname));" is 211.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName)));" is 144.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname));" is 227.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname));" is 225.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName)));" is 215.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname));" is 216.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname));" is 205.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName)));" is 145.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname));" is 235.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname));" is 224.
Long Statement,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The length of the statement  "							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize);" is 164.
Long Statement,HeapShot.Gui.Widgets,TipWindow,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,OnExposeEvent,The length of the statement  "			Gtk.Style.PaintFlatBox (this.Style' this.GdkWindow' Gtk.StateType.Normal' Gtk.ShadowType.Out' Gdk.Rectangle.Zero' this' "tooltip"' 0' 0' req.Width' req.Height);" is 160.
Virtual Method Call from Constructor,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,ObjectMapViewer,The constructor "ObjectMapViewer" calls a virtual method "Build".
Virtual Method Call from Constructor,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,ReferenceTreeViewer,The constructor "ReferenceTreeViewer" calls a virtual method "Build".
Virtual Method Call from Constructor,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,ProgressDialog,The constructor "ProgressDialog" calls a virtual method "Build".
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,ObjectMapViewer,The following statement contains a magic number: fileList.AppendColumn ("Base"' ctog' "active"' 2);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Clear,The following statement contains a magic number: notebook.Remove (notebook.Children [2]);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Clear,The following statement contains a magic number: notebook.NPages > 2
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,OnToggled,The following statement contains a magic number: selected = (bool) fileStore.GetValue (toggledIter' 2);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,OnToggled,The following statement contains a magic number: fileStore.SetValue (iter' 2' value);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,ShowTypeTree,The following statement contains a magic number: label.Spacing = 3;
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,ShowTypeTree,The following statement contains a magic number: but.SetSizeRequest (18' 18);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,ShowTypeTree,The following statement contains a magic number: but.SetSizeRequest (18' 18);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,GetCombinedMap,The following statement contains a magic number: return dif[2];
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.Events = ((global::Gdk.EventMask)(256));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.hbox3.Spacing = 6;
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.scrolledwindow2.HscrollbarPolicy = ((global::Gtk.PolicyType)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.table1 = new global::Gtk.Table (((uint)(3))' ((uint)(2))' false);
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.table1.RowSpacing = ((uint)(6));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.table1.ColumnSpacing = ((uint)(6));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.table1.BorderWidth = ((uint)(12));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w3.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w3.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w4.BottomAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w4.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w4.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w5.TopAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w5.BottomAttach = ((uint)(3));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w5.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w5.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w6.BottomAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w6.RightAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w6.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w6.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w7.TopAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w7.BottomAttach = ((uint)(3));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w7.RightAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w7.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w7.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w8.RightAttach = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w8.XOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: w8.YOptions = ((global::Gtk.AttachOptions)(4));
Magic Number,HeapShot.Gui.Widgets,ObjectMapViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ObjectMapViewer.cs,Build,The following statement contains a magic number: this.allObjectsTree.Events = ((global::Gdk.EventMask)(256));
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,FillAllTypes,The following statement contains a magic number: treeview.Columns [TreeColRefs+2].Visible = InverseReferences;
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,FillAllTypes,The following statement contains a magic number: ++n == 20
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,FillType,The following statement contains a magic number: treeview.Columns [TreeColRefs+2].Visible = InverseReferences;
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,The following statement contains a magic number: switch (col) { 					case 0: 						return string.Compare (nod1.TypeName' nod2.TypeName); 					case 1: 						return nod1.RefCount.CompareTo (nod2.RefCount); 					case 2: 						return nod1.RefsToParent.CompareTo (nod2.RefsToParent); 					case 3: 						return nod1.RefsToRoot.CompareTo (nod2.RefsToRoot); 					case 4: 						return nod1.RootMemory.CompareTo (nod2.RootMemory); 					case 5: 						return nod1.TotalMemory.CompareTo (nod2.TotalMemory); 					case 6: 						return nod1.AverageSize.CompareTo (nod2.AverageSize); 					default: 						return 1; 	//					throw new InvalidOperationException (); 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,The following statement contains a magic number: switch (col) { 					case 0: 						return string.Compare (nod1.TypeName' nod2.TypeName); 					case 1: 						return nod1.RefCount.CompareTo (nod2.RefCount); 					case 2: 						return nod1.RefsToParent.CompareTo (nod2.RefsToParent); 					case 3: 						return nod1.RefsToRoot.CompareTo (nod2.RefsToRoot); 					case 4: 						return nod1.RootMemory.CompareTo (nod2.RootMemory); 					case 5: 						return nod1.TotalMemory.CompareTo (nod2.TotalMemory); 					case 6: 						return nod1.AverageSize.CompareTo (nod2.AverageSize); 					default: 						return 1; 	//					throw new InvalidOperationException (); 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,The following statement contains a magic number: switch (col) { 					case 0: 						return string.Compare (nod1.TypeName' nod2.TypeName); 					case 1: 						return nod1.RefCount.CompareTo (nod2.RefCount); 					case 2: 						return nod1.RefsToParent.CompareTo (nod2.RefsToParent); 					case 3: 						return nod1.RefsToRoot.CompareTo (nod2.RefsToRoot); 					case 4: 						return nod1.RootMemory.CompareTo (nod2.RootMemory); 					case 5: 						return nod1.TotalMemory.CompareTo (nod2.TotalMemory); 					case 6: 						return nod1.AverageSize.CompareTo (nod2.AverageSize); 					default: 						return 1; 	//					throw new InvalidOperationException (); 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,The following statement contains a magic number: switch (col) { 					case 0: 						return string.Compare (nod1.TypeName' nod2.TypeName); 					case 1: 						return nod1.RefCount.CompareTo (nod2.RefCount); 					case 2: 						return nod1.RefsToParent.CompareTo (nod2.RefsToParent); 					case 3: 						return nod1.RefsToRoot.CompareTo (nod2.RefsToRoot); 					case 4: 						return nod1.RootMemory.CompareTo (nod2.RootMemory); 					case 5: 						return nod1.TotalMemory.CompareTo (nod2.TotalMemory); 					case 6: 						return nod1.AverageSize.CompareTo (nod2.AverageSize); 					default: 						return 1; 	//					throw new InvalidOperationException (); 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,CompareNodes,The following statement contains a magic number: switch (col) { 					case 0: 						return string.Compare (nod1.TypeName' nod2.TypeName); 					case 1: 						return nod1.RefCount.CompareTo (nod2.RefCount); 					case 2: 						return nod1.RefsToParent.CompareTo (nod2.RefsToParent); 					case 3: 						return nod1.RefsToRoot.CompareTo (nod2.RefsToRoot); 					case 4: 						return nod1.RootMemory.CompareTo (nod2.RootMemory); 					case 5: 						return nod1.TotalMemory.CompareTo (nod2.TotalMemory); 					case 6: 						return nod1.AverageSize.CompareTo (nod2.AverageSize); 					default: 						return 1; 	//					throw new InvalidOperationException (); 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,ShowTooltip,The following statement contains a magic number: tipWindow.Move (mxloc + ox - (w/2)' myloc + oy + 20);
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,ShowTooltip,The following statement contains a magic number: tipWindow.Move (mxloc + ox - (w/2)' myloc + oy + 20);
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following statement contains a magic number: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following statement contains a magic number: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following statement contains a magic number: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following statement contains a magic number: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following statement contains a magic number: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.Events = ((global::Gdk.EventMask)(256));
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.vbox1.Spacing = 6;
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.vbox1.BorderWidth = ((uint)(6));
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.treeview.Events = ((global::Gdk.EventMask)(8196));
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.hbox1.Spacing = 6;
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: this.boxFilter.Spacing = 3;
Magic Number,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,Build,The following statement contains a magic number: w7.Position = 2;
Magic Number,HeapShot.Gui.Widgets,TipWindow,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,TipWindow,The following statement contains a magic number: lab.Xalign = 0.5f;
Magic Number,HeapShot.Gui.Widgets,TipWindow,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,TipWindow,The following statement contains a magic number: lab.Xpad = 3;
Magic Number,HeapShot.Gui.Widgets,TipWindow,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,TipWindow,The following statement contains a magic number: lab.Ypad = 3;
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: this.WindowPosition = ((global::Gtk.WindowPosition)(4));
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: w1.BorderWidth = ((uint)(2));
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: this.vbox2.Spacing = 6;
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: this.vbox2.BorderWidth = ((uint)(6));
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: w5.Spacing = 10;
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: w5.BorderWidth = ((uint)(5));
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: w5.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultWidth = 400;
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,Build,The following statement contains a magic number: this.DefaultHeight = 127;
Magic Number,HeapShot.Gui.Widgets,ProgressDialog,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\gtk-gui\HeapShot.Gui.Widgets.ProgressDialog.cs,ShowProgress,The following statement contains a magic number: int newp = (int) (progress * 1000);
Missing Default,HeapShot.Gui.Widgets,ReferenceTreeViewer,C:\research\architectureSmells\repos\mono_heap-shot\HeapShot.Gui.Widgets\ReferenceTreeViewer.cs,GetTipText,The following switch statement is missing a default case: switch (col) { 					case 0: 						return "Type " + Markup.EscapeText (node.TypeName); 					case 1: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> which contain references to objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))'  Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b> referenced by objects of type <b>{2}</b>"' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> instances of type <b>{1}</b>."' node.RefCount' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 2: { 						string pname = GetParentType (iter); 						if (pname != null) 							return string.Format ("There are <b>{0:n0}</b> distinct references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToParent' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						else 							return ""; 					} 					case 3: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> indirect references from objects of type <b>{1}</b> to objects of type <b>{2}</b>"' node.RefsToRoot' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (rname)); 						else 							return ""; 					} 					case 4: { 						string rname = GetRootType (iter); 						if (rname != null) 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects indirectly referenced by <b>{2}</b> objects"' node.RootMemory' Markup.EscapeText (rname)' Markup.EscapeText (GetShortName (node.TypeName))); 						else 							return ""; 					} 					case 5: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects which have references to <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 							else 								return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects referenced by <b>{2}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))' Markup.EscapeText (pname)); 						} else 							return string.Format ("There are <b>{0:n0}</b> bytes of <b>{1}</b> objects"' node.TotalMemory' Markup.EscapeText (GetShortName (node.TypeName))); 					} 					case 6: { 						string pname = GetParentType (iter); 						if (pname != null) { 							if (InverseReferences) 								return string.Format ("Objects of type <b>{0}</b> which have references to <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 							else 								return string.Format ("Objects of type <b>{0}</b> referenced by <b>{2}</b> objects have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize' Markup.EscapeText (pname)); 						} else 							return string.Format ("Objects of type <b>{0}</b> have an average size of <b>{1:n0}</b> bytes"' Markup.EscapeText (GetShortName (node.TypeName))' node.AverageSize); 					} 				}
