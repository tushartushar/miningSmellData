Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Cirrious.Sphero.WorkBench.UI.WinRT.Common,RichTextColumns,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\RichTextColumns.cs,MeasureOverride,Cyclomatic complexity of the method is 8
Long Identifier,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,ellipseSense_ManipulationStarted,The length of the parameter manipulationStartedRoutedEventArgs is 34.
Long Identifier,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,ellipseSense_ManipulationCompleted,The length of the parameter manipulationCompletedRoutedEventArgs is 36.
Long Statement,Cirrious.Sphero.WorkBench.UI.WinRT.Common,SuspensionManager,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,Cirrious.Sphero.WorkBench.UI.WinRT.Common,SuspensionManager,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Long Statement,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The length of the statement  "            if (((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5)) " is 131.
Complex Conditional,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Complex Conditional,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The conditional expression  "((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5)"  is complex.
Empty Catch Block,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The method has an empty catch block.
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Common,LayoutAwarePage,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Common\LayoutAwarePage.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((args.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  args.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      args.Handled = true;                      this.GoBack(this' new RoutedEventArgs());                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      args.Handled = true;                      this.GoForward(this' new RoutedEventArgs());                  }              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnPointerMoved,The following statement contains a magic number: try              {                  var point = pointerRoutedEventArgs.GetCurrentPoint(this);                  var p = point.Position;                        // Update Shpero speed and direction                      var center = new Point(this.ActualWidth / 2' this.ActualHeight / 2);                        double distance = Math.Sqrt(Math.Pow((p.X - center.X)' 2) + Math.Pow((p.Y - center.Y)' 2));                        var minHW = Math.Min(this.ActualHeight' this.ActualWidth);                      double distanceRel = distance * 255 / (minHW / 2);                      if (distanceRel > 255)                      {                          distanceRel = 255;                      }                        double angle = Math.Atan2(p.Y - center.Y' p.X - center.X) * 180 / Math.PI;                      if (angle > 0)                      {                          angle += 90;                      }                      else                      {                          angle = 270 + (180 + angle);                          if (angle >= 360)                          {                              angle -= 360;                          }                      }                      direction = Convert.ToInt16(angle);                      speed = Convert.ToInt16(distanceRel);                        // Set Joystick Pos                      newX = p.X - (this.ActualWidth / 2);                      newY = p.Y - (this.ActualHeight / 2);                      if (moveJoystick) MoveJoystick(newX' newY);                                }              catch              {              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,MoveJoystick,The following statement contains a magic number: KeyTime ktEnd = KeyTime.FromTimeSpan(TimeSpan.FromMilliseconds(200));
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The following statement contains a magic number: if (((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5))              {                  lastDirection = direction;                  lastSpeed = speed;                    OnNewCoordinates();                    //Debug.WriteLine("Event fired: " + speed + "' " + direction);              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The following statement contains a magic number: if (((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5))              {                  lastDirection = direction;                  lastSpeed = speed;                    OnNewCoordinates();                    //Debug.WriteLine("Event fired: " + speed + "' " + direction);              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The following statement contains a magic number: if (((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5))              {                  lastDirection = direction;                  lastSpeed = speed;                    OnNewCoordinates();                    //Debug.WriteLine("Event fired: " + speed + "' " + direction);              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,timer_Tick,The following statement contains a magic number: if (((direction - lastDirection) > 5 || (direction - lastDirection) < -5) || ((speed - lastSpeed) > 5 || (speed - lastSpeed) < -5))              {                  lastDirection = direction;                  lastSpeed = speed;                    OnNewCoordinates();                    //Debug.WriteLine("Event fired: " + speed + "' " + direction);              }
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnNewCoordinates,The following statement contains a magic number: var parameters = new CartesianPositionParameters()              {                  X = newX / (ellipseSense.ActualWidth / 2)'                  Y = newY / (ellipseSense.ActualWidth / 2)'              };
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Controls,Joystick,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Controls\Joystick.xaml.cs,OnNewCoordinates,The following statement contains a magic number: var parameters = new CartesianPositionParameters()              {                  X = newX / (ellipseSense.ActualWidth / 2)'                  Y = newY / (ellipseSense.ActualWidth / 2)'              };
Magic Number,Cirrious.Sphero.WorkBench.UI.WinRT.Views,SpheroView,C:\repos\slodge_BallControl\Cirrious.Sphero.WorkBench\Cirrious.Sphero.WorkBench.UI.WinRT\Views\SpheroView.xaml.cs,RefreshVisibilities,The following statement contains a magic number: if (ViewModel != null)                  ViewModel.AccelMovement.EnsureAccelerometerIsOnCommand.Execute(selectedIndex == 3);
