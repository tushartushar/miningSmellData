Implementation smell,Namespace,Class,File,Method,Description
Long Method,PubnubApi,PNStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Consumer\PNStatus.cs,Retry,The method has 190 lines of code.
Long Method,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The method has 135 lines of code.
Long Method,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has 774 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetMessageFromMultiplexResult,The method has 107 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The method has 183 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The method has 106 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has 158 lines of code.
Long Method,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The method has 107 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The method has 262 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The method has 141 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The method has 154 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The method has 209 lines of code.
Complex Method,PubnubApi,StatusBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,Cyclomatic complexity of the method is 11
Complex Method,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,Cyclomatic complexity of the method is 11
Complex Method,PubnubApi,HttpValueCollection,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\HttpUtility\HttpValueCollection.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,HttpValueCollection,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\HttpUtility\HttpValueCollection.cs,FillFromString,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,Cyclomatic complexity of the method is 13
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,Cyclomatic complexity of the method is 18
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,Cyclomatic complexity of the method is 11
Complex Method,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,EndPendingRequests,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,Cyclomatic complexity of the method is 14
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,CurrentPubnubInstance,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,Cyclomatic complexity of the method is 37
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,Cyclomatic complexity of the method is 25
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,CurrentPubnubInstance,Cyclomatic complexity of the method is 15
Complex Method,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,Cyclomatic complexity of the method is 8
Long Parameter List,PubnubApi,StatusBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The method has 5 parameters. Parameters: type' category' asyncRequestState' statusCode' throwable
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,UrlRequestBuilder,The method has 5 parameters. Parameters: config' jsonPluggableLibrary' pubnubUnitTest' log' pubnubTelemetryMgr
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The method has 5 parameters. Parameters: channels' channelGroups' timetoken' channelsJsonState' initialSubscribeUrlParams
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPublishRequest,The method has 7 parameters. Parameters: channel' originalMessage' storeInHistory' ttl' userMetaData' usePOST' additionalUrlParams
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHistoryRequest,The method has 6 parameters. Parameters: channel' start' end' count' reverse' includeToken
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantAccessRequest,The method has 7 parameters. Parameters: channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' manage' ttl
Long Parameter List,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,ClientNetworkStatus,The method has 5 parameters. Parameters: config' jsonPluggableLibrary' pubnubUnit' log' refHttpClient
Long Parameter List,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The method has 5 parameters. Parameters: systemActive' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckClientNetworkAvailability,The method has 5 parameters. Parameters: internalCallback' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,PubnubCoreBase,The method has 5 parameters. Parameters: pubnubConfiguation' jsonPluggableLibrary' pubnubUnitTest' log' telemetryManager
Long Parameter List,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The method has 5 parameters. Parameters: pubnubConfiguation' jsonPluggableLibrary' pubnubUnitTest' log' telemetryManager
Long Parameter List,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,CheckInternetConnectionStatus,The method has 5 parameters. Parameters: systemActive' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has 7 parameters. Parameters: type' jsonString' channels' channelGroups' reconnect' lastTimetoken' callback
Long Parameter List,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,PubnubHttp,The method has 6 parameters. Parameters: config' jsonPluggableLibrary' log' telemetryManager' refHttpClientSubscribe' refHttpClientNonsubscribe
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,FF,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,GG,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HH,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,II,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,PubnubApi.EndPoint,AuditOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The method has 8 parameters. Parameters: channels' channelGroups' authKeys' read' write' manage' ttl' callback
Long Parameter List,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroupOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,DeleteChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\DeleteChannelGroupOperation.cs,DeleteChannelGroupOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,ListAllChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListAllChannelGroupOperation.cs,ListAllChannelGroupOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,ListChannelsForChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListChannelsForChannelGroupOperation.cs,ListChannelsForChannelGroupOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroupOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,DeleteMessageOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\DeleteMessageOperation.cs,DeleteMessageOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,HistoryOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\HistoryOperation.cs,HistoryOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,HistoryOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\HistoryOperation.cs,History,The method has 7 parameters. Parameters: channel' start' end' count' reverse' includeToken' callback
Long Parameter List,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,OtherOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,GetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetStateOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,HereNowOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNowOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,HereNowOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNow,The method has 5 parameters. Parameters: channels' channelGroups' showUUIDList' includeUserState' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetStateOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The method has 5 parameters. Parameters: channels' channelGroups' uuid' jsonUserState' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The method has 5 parameters. Parameters: channels' channelGroups' uuid' keyValuePair' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The method has 6 parameters. Parameters: channels' channelGroups' uuid' jsonChannelUserState' jsonChannelGroupUserState' callback
Long Parameter List,PubnubApi.EndPoint,WhereNowOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\WhereNowOperation.cs,WhereNowOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,FireOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,FireOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,FireOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The method has 6 parameters. Parameters: channel' message' storeInHistory' ttl' metaData' callback
Long Parameter List,PubnubApi.EndPoint,ListenerManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,ListenerManager,The method has 5 parameters. Parameters: config' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,PublishOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,PublishOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,PublishOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The method has 6 parameters. Parameters: channel' message' storeInHistory' ttl' metaData' callback
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,SubscribeManager,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The method has 6 parameters. Parameters: type' channels' channelGroups' timetoken' reconnect' initialSubscribeUrlParams
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexExceptionHandler,The method has 5 parameters. Parameters: type' channels' channelGroups' reconnectMaxTried' resumeOnReconnect
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The method has 5 parameters. Parameters: type' channels' channelGroups' timetoken' networkAvailable
Long Parameter List,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,SubscribeOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,UnsubscribeAllOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeAllOperation.cs,UnsubscribeAllOperation,The method has 6 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' pubnubInstance
Long Parameter List,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,UnsubscribeOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,AddPushChannelOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,AddPushChannelOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,AuditPushChannelOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,AuditPushChannelOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,RemoveAllPushChannelsOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,RemovePushChannelOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemovePushChannelOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.EndPoint,TimeOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TimeOperation.cs,TimeOperation,The method has 5 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The method has 5 parameters. Parameters: channels' channelGroups' timetoken' channelsJsonState' initialSubscribeUrlParams
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildPublishRequest,The method has 7 parameters. Parameters: channel' originalMessage' storeInHistory' ttl' userMetaData' usePOST' additionalUrlParams
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildHistoryRequest,The method has 6 parameters. Parameters: channel' start' end' count' reverse' includeToken
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGrantAccessRequest,The method has 7 parameters. Parameters: channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' manage' ttl
Long Identifier,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the parameter channelGroupAllCgPayloadChannels is 32.
Long Identifier,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveAllPushNotificationsFromDeviceWithPushToken,The length of the parameter removeAllPushChannelsOperation is 30.
Long Identifier,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddChannelsToChannelGroup,The length of the parameter addChannelToChannelGroupOperation is 33.
Long Identifier,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveChannelsFromChannelGroup,The length of the parameter removeChannelsFromChannelGroupOperation is 39.
Long Identifier,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelsForChannelGroup,The length of the parameter listChannelsForChannelGroupOperation is 36.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelLocalUserStateCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelGroupLocalUserStateCollection is 36.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelGroupUserStateCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the parameter channelGroupReconnectCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,,The length of the parameter clientNetworkStatusInternetStatus is 33.
Long Identifier,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,GetSubscribedChannelGroups,The length of the parameter currentSubscribedChannelGroups is 30.
Long Identifier,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the parameter deserializeChannelGroupUserState is 32.
Long Identifier,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the parameter originalMultiChannelGroupSubscribe is 34.
Long Statement,PubnubApi,StatusBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The length of the statement  "                    PNErrorData errorData = new PNErrorData(jsonLibrary.SerializeToJsonString(throwable.InnerException.Message)' throwable); " is 120.
Long Statement,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The length of the statement  "            if (type == PNOperationType.PNHereNowOperation || type == PNOperationType.PNHistoryOperation || type == PNOperationType.Leave || type == PNOperationType.PNHeartbeatOperation || type == PNOperationType.PushRegister || type == PNOperationType.PushRemove || type == PNOperationType.PushGet || type == PNOperationType.PushUnregister) " is 329.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                requestQueryStringParams.Add("filter-expr"' new UriUtil().EncodeUriComponent(pubnubConfig.FilterExpression' currentType' false' false)); " is 136.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())' currentType' false' false)); " is 166.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())'currentType' false' false)); " is 165.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The length of the statement  "            string commaDelimitedchannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(commaDelimitedchannelGroup' currentType' false' false)); " is 135.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantAccessRequest,The length of the statement  "                requestQueryStringParams.Add("auth"' new UriUtil().EncodeUriComponent(authKeysCommaDelimited' currentType' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantAccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel"' new UriUtil().EncodeUriComponent(channelsCommaDelimited' currentType' false' false)); " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantAccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false)); " is 136.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The length of the statement  "                requestQueryStringParams.Add("auth"' new UriUtil().EncodeUriComponent(authKeysCommaDelimited' currentType' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(channelGroup' currentType' false' false)); " is 121.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetUserStateRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false)); " is 136.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSetUserStateRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false)); " is 136.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,The length of the statement  "                requestQueryStringParams.Add("remove"' new UriUtil().EncodeUriComponent(channelsCommaDelimited' currentType' false' false)); " is 124.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' new UriUtil().EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())' currentType' false'false)); " is 165.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The length of the statement  "                if (pubnubConfig.IncludeInstanceIdentifier && !string.IsNullOrEmpty(pubnubInstanceId) && pubnubInstanceId.Trim().Length > 0) " is 124.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The length of the statement  "                Dictionary<string' string> queryStringParams = new Dictionary<string' string>(commonQueryStringParams.Concat(queryStringParamDic).GroupBy(item => item.Key).ToDictionary(item => item.Key' item => item.First().Value)); " is 216.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The length of the statement  "                string queryToSign = string.Join("&"' queryStringParams.OrderBy(kvp => kvp.Key).Select(kvp => string.Format("{0}={1}"' kvp.Key' kvp.Value)).ToArray()); " is 151.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRestApiRequest,The length of the statement  "            if (type == PNOperationType.PNPublishOperation || type == PNOperationType.PNSubscribeOperation || type == PNOperationType.Presence) " is 131.
Long Statement,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,ForceCanonicalPathAndQuery,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' "Inside ForceCanonicalPathAndQuery = " + requestUri.ToString()' pubnubConfig.LogVerbosity); " is 127.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                tasks[0] = Task.Factory.StartNew(async() => await CheckClientNetworkAvailability(CallbackClientNetworkStatus' type' callback' channels' channelGroups)); " is 152.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} AggregateException CheckInternetStatus Error: {1} {2} "' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ie.GetType().Name' ie.Message)' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckClientNetworkAvailability,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} InternetCheckRunning Already running"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 184.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} CheckSocketConnect Entered"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 174.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "            PubnubApi.Interface.IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(pubnubConfig' jsonLib' unit' pubnubLog' null); " is 120.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} HttpClient CheckSocketConnect Resp {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' response.StatusCode.ToString())' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} HttpClient CheckSocketConnect Resp {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' response.StatusCode.ToString())' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                using (HttpWebResponse response = await Task.Factory.FromAsync<HttpWebResponse>(myRequest.BeginGetResponse' asyncPubnubResult => (HttpWebResponse)myRequest.EndGetResponse(asyncPubnubResult)' null)) " is 197.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} WebRequest CheckSocketConnect Resp {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' response.StatusCode.ToString())' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} CheckSocketConnect (HttpClient Or Task.Factory) Failed {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex.Message)' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "            PNStatus status = statusBuilder.CreateStatusResponse<T>(type' errorCategory' null' (int)System.Net.HttpStatusCode.NotFound' ex); " is 128.
Long Statement,PubnubApi,ClientNetworkStatus,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "			LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} ParseCheckSocketConnectException Error. {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex.Message)' pubnubConfig.LogVerbosity); " is 203.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD10"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD11"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD12"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD13"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD14"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = UAP"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 150.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETFX_CORE"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 157.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = WINDOWS_UWP"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 158.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = PORTABLE111"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 158.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET35"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET40"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET45"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "            LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET461"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 153.
Long Statement,PubnubApi,PNPlatform,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = UNKNOWN"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 154.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.FormatException" && errorMessage == "The input is not a valid Base-64 string as it contains a non-base 64 character' more than two padding characters' or an illegal character among the padding characters. ") " is 237.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Net.Sockets.SocketException" && errorMessage == "The requested name is valid' but no data of the requested type was found") " is 153.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Security.Cryptography.CryptographicException" && errorMessage == "Padding is invalid and cannot be removed.") " is 139.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Runtime.InteropServices.SEHException" && errorMessage == "External component has thrown an exception.") " is 133.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Net.WebException" && errorMessage.Contains("Unable to read data from the transport connection")) " is 126.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsDictionaryCompatible,The length of the statement  "                                if (jsonTxtreader.LineNumber == 1 && jsonTxtreader.LinePosition == 1 && jsonTxtreader.TokenType == JsonToken.StartObject) " is 121.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' NET35/40 IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 198.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "#elif (PORTABLE111 || NETSTANDARD10 || NETSTANDARD11 || NETSTANDARD12 || NETSTANDARD13 || NETSTANDARD14 || UAP || NETFX_CORE || WINDOWS_UWP) " is 140.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' typeof(T).GetTypeInfo().IsGenericType = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' typeof(T).GetTypeInfo().IsGenericType.ToString())' config.LogVerbosity); " is 237.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' typeof(T).GetGenericTypeDefinition() = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' typeof(T).GetGenericTypeDefinition().ToString())' config.LogVerbosity); " is 235.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' PCL/CORE IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 198.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 189.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The length of the statement  "#elif PORTABLE111 || NETSTANDARD10 || NETSTANDARD11 || NETSTANDARD12 || NETSTANDARD13 || NETSTANDARD14 || UAP || NETFX_CORE || WINDOWS_UWP " is 138.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                                authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                        authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Subscribe,The length of the statement  "            EndPoint.SubscribeOperation<T> subscribeOperation = new EndPoint.SubscribeOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 156.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Unsubscribe,The length of the statement  "            EndPoint.UnsubscribeOperation<T>  unsubscribeOperation = new EndPoint.UnsubscribeOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 175.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,UnsubscribeAll,The length of the statement  "            EndPoint.UnsubscribeAllOperation<T> unSubscribeAllOperation = new EndPoint.UnsubscribeAllOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' this); " is 189.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Publish,The length of the statement  "            EndPoint.PublishOperation publishOperation = new EndPoint.PublishOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 156.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Fire,The length of the statement  "            EndPoint.FireOperation fireOperation = new EndPoint.FireOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 147.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,History,The length of the statement  "            EndPoint.HistoryOperation historyOperaton = new EndPoint.HistoryOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 155.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteMessages,The length of the statement  "            EndPoint.DeleteMessageOperation deleteMessageOperaton = new EndPoint.DeleteMessageOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 173.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,HereNow,The length of the statement  "            EndPoint.HereNowOperation hereNowOperation = new EndPoint.HereNowOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 156.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,WhereNow,The length of the statement  "            EndPoint.WhereNowOperation whereNowOperation = new EndPoint.WhereNowOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 159.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Time,The length of the statement  "            EndPoint.TimeOperation timeOperation = new EndPoint.TimeOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 147.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Audit,The length of the statement  "            EndPoint.AuditOperation auditOperation = new EndPoint.AuditOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 150.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Grant,The length of the statement  "            EndPoint.GrantOperation grantOperation = new EndPoint.GrantOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 150.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,SetPresenceState,The length of the statement  "            EndPoint.SetStateOperation setStateOperation = new EndPoint.SetStateOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 159.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetPresenceState,The length of the statement  "            EndPoint.GetStateOperation getStateOperation = new EndPoint.GetStateOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 159.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddPushNotificationsOnChannels,The length of the statement  "            EndPoint.AddPushChannelOperation addPushChannelOperation = new EndPoint.AddPushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 177.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemovePushNotificationsFromChannels,The length of the statement  "            EndPoint.RemovePushChannelOperation removePushChannelOperation = new EndPoint.RemovePushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 186.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveAllPushNotificationsFromDeviceWithPushToken,The length of the statement  "            EndPoint.RemoveAllPushChannelsOperation removeAllPushChannelsOperation = new EndPoint.RemoveAllPushChannelsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 198.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AuditPushChannelProvisions,The length of the statement  "            EndPoint.AuditPushChannelOperation auditPushChannelOperation = new EndPoint.AuditPushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 183.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddChannelsToChannelGroup,The length of the statement  "            EndPoint.AddChannelsToChannelGroupOperation addChannelToChannelGroupOperation = new EndPoint.AddChannelsToChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 209.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveChannelsFromChannelGroup,The length of the statement  "            EndPoint.RemoveChannelsFromChannelGroupOperation removeChannelsFromChannelGroupOperation = new EndPoint.RemoveChannelsFromChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 225.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteChannelGroup,The length of the statement  "            EndPoint.DeleteChannelGroupOperation deleteChannelGroupOperation = new EndPoint.DeleteChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 189.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelsForChannelGroup,The length of the statement  "            EndPoint.ListChannelsForChannelGroupOperation listChannelsForChannelGroupOperation = new EndPoint.ListChannelsForChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 204.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelGroups,The length of the statement  "            EndPoint.ListAllChannelGroupOperation listAllChannelGroupOperation = new EndPoint.ListAllChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 180.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,TerminateCurrentSubscriberRequest,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 132.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ChangeUUID,The length of the statement  "            EndPoint.OtherOperation endPoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager); " is 144.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSubscribedChannels,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 132.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSubscribedChannelGroups,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 132.
Long Statement,PubnubApi,Pubnub,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Destroy,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null); " is 132.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The length of the statement  "            pubnubHttp = new PubnubHttp(pubnubConfiguation' jsonLib' pubnubLog' pubnubTelemetryMgr' httpClientSubscribe' httpClientNonsubscribe); " is 133.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResetInternetCheckSettings,The length of the statement  "                    ChannelGroupInternetStatus[PubnubInstance.InstanceId].GetOrAdd(multiChannelGroup' true); //Set to true for internet connection " is 126.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,CheckInternetConnectionStatus,The length of the statement  "            ClientNetworkStatus clientNetworkStatus = new ClientNetworkStatus(pubnubConfig' jsonLib' unitTest' pubnubLog' httpClientNetworkStatus); " is 135.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,CheckInternetConnectionStatus,The length of the statement  "                clientNetworkStatusInternetStatus = clientNetworkStatus.CheckInternetStatus<T>(PubnetSystemActive' type' callback' channels' channelGroups); " is 140.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The length of the statement  "                if (asyncRequestState != null && asyncRequestState.ResponseType == PNOperationType.PNSubscribeOperation && result != null && result.Count > 0) " is 142.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToConnectCallback,The length of the statement  "            PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNConnectedCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 146.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                            PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 164.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                            PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' ex); " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage); " is 126.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' pubnubConfig.LogVerbosity); " is 237.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                        PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 151.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                    status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 142.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                    status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null); " is 137.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                            else if (pubnubConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200) " is 120.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new Exception(userResult.Message)); " is 175.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetCurrentSubscriberChannels,The length of the statement  "            if (MultiChannelSubscribe != null && MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.Count > 0) " is 165.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetCurrentSubscriberChannelGroups,The length of the statement  "            if (MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.Count > 0) " is 180.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    channel = (pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0) ? string.Join("'"' pubnubRequestState.Channels.OrderBy(x => x).ToArray()) : "'"; " is 170.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId) && !channel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(channel) && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence)) " is 332.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' UrlProcessRequest ChannelRequest PubnubInstance.InstanceId Channel NOT matching"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 228.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(channel' pubnubRequestState.Request' (key' oldState) => pubnubRequestState.Request); " is 138.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Request={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' requestUri.ToString())' pubnubConfig.LogVerbosity); " is 183.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    Task<string> jsonResponse = pubnubHttp.SendRequestAndGetJsonResponseWithPOST(requestUri' pubnubRequestState' request' jsonPostData); " is 132.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}'Received JSON but SubscribeDisconnected = {1} for request={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonString' requestUri)' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' JSON= {1} for request={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonString' requestUri)' pubnubConfig.LogVerbosity); " is 198.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (exceptionMessage.IndexOf("The request was aborted: The request was canceled"' StringComparison.CurrentCultureIgnoreCase) == -1 " is 130.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                && exceptionMessage.IndexOf("Machine suspend mode enabled. No request will be processed."' StringComparison.CurrentCultureIgnoreCase) == -1 " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(pubnubRequestState.ResponseType' category' pubnubRequestState' (int)HttpStatusCode.NotFound' ex); " is 180.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} PubnubBaseCore UrlProcessRequest Exception={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' webEx != null ? webEx.ToString() : exceptionMessage)' pubnubConfig.LogVerbosity); " is 247.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                if (deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("error") && string.Equals(deserializeStatus["error"].ToString()'"true"' StringComparison.CurrentCultureIgnoreCase)) " is 181.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                    status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' PNStatusCategory.PNUnknownCategory' asyncRequestState' (int)HttpStatusCode.NotFound' new Exception(jsonString)); " is 192.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                        status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' category' asyncRequestState' statusCode' new Exception(jsonString)); " is 148.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                result = WrapResultBasedOnResponseType<T>(asyncRequestState.ResponseType' jsonString' asyncRequestState.Channels' asyncRequestState.ChannelGroups' asyncRequestState.Reconnect' asyncRequestState.Timetoken' asyncRequestState.PubnubCallback); " is 239.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "") " is 146.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback); " is 127.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessResponseCallbacks,The length of the statement  "                    ResponseToConnectCallback<T>(asyncRequestState.ResponseType' asyncRequestState.Channels' asyncRequestState.ChannelGroups' asyncRequestState); " is 141.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                throw new ArgumentException("BuildJsonUserState takes either channel or channelGroup at one time. Send one at a time by passing empty value for other."); " is 153.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                if (!string.IsNullOrEmpty(channelGroup) && ChannelGroupLocalUserState[PubnubInstance.InstanceId].ContainsKey(channelGroup)) " is 123.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelUserStateKey' (channelUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelUserStateValue) : channelUserStateValue); " is 205.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelGroupUserStateKey' (channelGroupUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelGroupUserStateValue) : channelGroupUserStateValue); " is 225.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' TerminatePendingWebRequest - {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' state.Request.RequestUri.ToString())' pubnubConfig.LogVerbosity); " is 219.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel)' pubnubConfig.LogVerbosity); " is 235.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel)' pubnubConfig.LogVerbosity); " is 245.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 231.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 241.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 228.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 212.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 222.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 223.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 217.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' pubnubConfig.LogVerbosity); " is 227.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval > MAXEXPONENTIALBACKOFF"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 198.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timerInterval.ToString())' pubnubConfig.LogVerbosity); " is 206.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channel reconnect timer reference from collection for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key.ToString())' pubnubConfig.LogVerbosity); " is 270.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                    ConcurrentDictionary<string' Timer> channelGroupReconnectCollection = ChannelGroupReconnectTimer[PubnubInstance.InstanceId]; " is 124.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channelgroup reconnect timer reference from collection for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' groupKey.ToString())' pubnubConfig.LogVerbosity); " is 280.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} TerminateReconnectTimer exception: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 190.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,DeleteLocalChannelGroupUserState,The length of the statement  "                userStateDeleted = ChannelGroupLocalUserState[PubnubInstance.InstanceId].TryRemove(channelGroup' out returnedUserState); " is 120.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The length of the statement  "                    HttpWebRequest request = ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannel) ? ChannelRequest[PubnubInstance.InstanceId][multiChannel] : null; " is 158.
Long Statement,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} TerminateCurrentSubsciberRequest {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())' pubnubConfig.LogVerbosity); " is 215.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                return await SendRequestAndGetJsonResponseClassicHttpWithPOST(requestUri' pubnubRequestState' request' postData).ConfigureAwait(false); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                return await SendRequestAndGetJsonResponseHttpClientWithPOST(requestUri' pubnubRequestState' request' postData).ConfigureAwait(false); " is 134.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                return await SendRequestAndGetJsonResponseTaskFactoryWithPOST(pubnubRequestState' request' postData).ConfigureAwait(false); " is 123.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseHttpClient,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseHttpClient"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 196.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseHttpClient,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got HttpResponseMessage for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' requestUri)); " is 164.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseHttpClientWithPOST,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' SendRequestAndGetJsonResponseHttpClientPOST Before httpClient.GetAsync"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 191.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseHttpClientWithPOST,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got POST HttpResponseMessage for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' requestUri)); " is 169.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseTaskFactory"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 197.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                request.Method = (pubnubRequestState != null && pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation) ? "DELETE" : "GET"; " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                response = await Task.Factory.FromAsync<HttpWebResponse>(request.BeginGetResponse' asyncPubnubResult => (HttpWebResponse)request.EndGetResponse(asyncPubnubResult)' pubnubRequestState).ConfigureAwait(false); " is 206.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())); " is 181.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 162.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before Task.Factory.FromAsync With POST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 160.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                WebResponse response = await Task.Factory.FromAsync(request.BeginGetResponse' request.EndGetResponse' pubnubRequestState).ConfigureAwait(false); " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse With POST for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())); " is 191.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 145.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 173.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseClassicHttp"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 197.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                request.Method = (pubnubRequestState != null && pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation) ? "DELETE" : "GET"; " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before BeginGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 142.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 141.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 140.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 162.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseClassicHttpWithPOST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 205.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 153.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 152.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 151.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 146.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 173.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        string currentMultiChannel = (currentState.Channels == null) ? "" : string.Join("'"' currentState.Channels.OrderBy(x => x).ToArray()); " is 134.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        string currentMultiChannelGroup = (currentState.ChannelGroups == null) ? "" : string.Join("'"' currentState.ChannelGroups.OrderBy(x => x).ToArray()); " is 149.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached.Request abort for channel={1} ;channelgroup={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentMultiChannel' currentMultiChannelGroup)' pubnubConfig.LogVerbosity); " is 302.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached. However state is unknown"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' **WP7 OnPubnubWebRequestTimeout**"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 183.
Long Statement,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                    PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(currentState.ResponseType' errorCategory' currentState' (int)HttpStatusCode.NotFound' new TimeoutException("Request timeout")); " is 210.
Long Statement,PubnubApi,PubnubCrypto,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCrypto.cs,EncryptOrDecrypt,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Decrypt Error. {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' config.LogVerbosity); " is 164.
Long Statement,PubnubApi,SecureMessage,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,DecodeDecryptLoop,The length of the statement  "                            PNStatus status = new StatusBuilder(config' jsonLib).CreateStatusResponse<T>(PNOperationType.PNHistoryOperation' category' null' (int)HttpStatusCode.NotFound' ex); " is 163.
Long Statement,PubnubApi,SecureMessage,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,DecodeDecryptLoop,The length of the statement  "                        object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage); " is 126.
Long Statement,PubnubApi.EndPoint,AuditOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The length of the statement  "            if (string.IsNullOrEmpty(config.SecretKey) || string.IsNullOrEmpty(config.SecretKey.Trim()) || config.SecretKey.Length <= 0) " is 124.
Long Statement,PubnubApi.EndPoint,AuditOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The length of the statement  "            string authKeysCommaDelimited = (authKeys != null && authKeys.Length > 0) ? string.Join("'"' authKeys.OrderBy(x => x).ToArray()) : ""; " is 134.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Async,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantManage' this.grantTTL' callback); " is 171.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Retry,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantManage' this.grantTTL' savedCallback); " is 176.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "            if (string.IsNullOrEmpty(config.SecretKey) || string.IsNullOrEmpty(config.SecretKey.Trim()) || config.SecretKey.Length <= 0) " is 124.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "            Uri request = urlBuilder.BuildGrantAccessRequest(channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' manage' ttl); " is 152.
Long Statement,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroup,The length of the statement  "            string channelsCommaDelimited = channels != null && channels.Length > 0 ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : ""; " is 132.
Long Statement,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroup,The length of the statement  "            string channelsCommaDelimited = channels != null && channels.Length > 0 ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : ""; " is 132.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\HistoryOperation.cs,Async,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' callback); " is 144.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\HistoryOperation.cs,Retry,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' savedCallback); " is 149.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            string channelsCommaDelimited = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : ""; " is 134.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            string channelGroupsCommaDelimited = (channelGroups != null && channelGroups.Length > 0) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 154.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                        PNStatus status = statusBuilder.CreateStatusResponse< PNSetStateResult>(PNOperationType.PNSetStateOperation' PNStatusCategory.PNUnknownCategory' null' (int)System.Net.HttpStatusCode.NotModified' null); " is 201.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                PNStatus status = statusBuilder.CreateStatusResponse<PNSetStateResult>(PNOperationType.PNSetStateOperation' PNStatusCategory.PNUnknownCategory' null' (int)System.Net.HttpStatusCode.NotModified' null); " is 200.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            string commaDelimitedChannels = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : ""; " is 134.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            string commaDelimitedChannelGroups = (channelGroups != null && channelGroups.Length > 0) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 154.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelUserState = jsonLibrary.DeserializeToDictionaryOfObject(jsonChannelUserState); " is 123.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelGroupUserState = jsonLibrary.DeserializeToDictionaryOfObject(jsonChannelGroupUserState); " is 133.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 161.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 166.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelGroupUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 181.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 186.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                //jsonUserState = string.Format("{{\"{0}\":{{{1}}}'\"{2}\":{{{3}}}}}"' channel' jsonChannelUserState' channelGroup' jsonChannelGroupUserState); " is 143.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Uri request = urlBuilder.BuildSetUserStateRequest(commaDelimitedChannels' commaDelimitedChannelGroups' uuid' jsonUserState); " is 124.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 148.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 148.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 168.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 168.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                retJsonUserState = string.Format("{{\"{0}\":{{{1}}}'\"{2}\":{{{3}}}}}"' channel' jsonChannelUserState' channelGroup' jsonChannelGroupUserState); " is 144.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,GetLocalUserState,The length of the statement  "                jsonStateBuilder.AppendFormat("{0}:{1}'{2}:{3}"' channel' channelJsonUserState' channelGroup' channelGroupJsonUserState); " is 121.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,CurrentPubnubInstance,The length of the statement  "                ChannelGroupLocalUserState.GetOrAdd(instance.InstanceId' new ConcurrentDictionary<string' Dictionary<string' object>>()); " is 121.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The length of the statement  "            if (string.IsNullOrEmpty(config.PublishKey) || string.IsNullOrEmpty(config.PublishKey.Trim()) || config.PublishKey.Length <= 0) " is 127.
Long Statement,PubnubApi.EndPoint,ListenerManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,AddListener,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' ListenerManager AddListener => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 199.
Long Statement,PubnubApi.EndPoint,ListenerManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,RemoveListener,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' ListenerManager RemoveListener => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The length of the statement  "            if (string.IsNullOrEmpty(config.PublishKey) || string.IsNullOrEmpty(config.PublishKey.Trim()) || config.PublishKey.Length <= 0) " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                string multiChannelName = (currentChannels.Length > 0) ? string.Join("'"' currentChannels.OrderBy(x => x).ToArray()) : "'"; " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 289.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 288.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                    Uri request = urlBuilder.BuildMultiChannelLeaveRequest(currentChannels' currentChannelGroups' config.Uuid' channelsJsonState); " is 126.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                string[] rawChannelGroups = (channelGroup != null && channelGroup.Trim().Length > 0) ? channelGroup.Split(''') : new string[] { }; " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName)) " is 143.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNUnexpectedDisconnectCategory' null' (int)HttpStatusCode.NotFound' null); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(presenceChannelName)) " is 150.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName)) " is 158.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNUnexpectedDisconnectCategory' null' (int)HttpStatusCode.NotFound' null); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(presenceChannelGroupName)) " is 165.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        string multiChannelName = (currentChannels.Length > 0) ? string.Join("'"' currentChannels.OrderBy(x => x).ToArray()) : "'"; " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 289.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 288.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            Uri request = urlBuilder.BuildMultiChannelLeaveRequest(validChannels.ToArray()' validChannelGroups.ToArray()' config.Uuid' channelsJsonState); " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        originalMultiChannelSubscribe = MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0 ? MultiChannelSubscribe[PubnubInstance.InstanceId].ToDictionary(kvp => kvp.Key' kvp => kvp.Value) : null; " is 196.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        originalMultiChannelGroupSubscribe = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0 ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ToDictionary(kvp => kvp.Key' kvp => kvp.Value) : null; " is 211.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                    PNStatus successStatus = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNDisconnectedCategory' null' (int)HttpStatusCode.OK' null); " is 205.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                    PNStatus failStatus = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNDisconnectedCategory' null' (int)HttpStatusCode.NotFound' new Exception("Unsubscribe Error. Please retry unsubscribe operation")); " is 274.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            unsubscribeStatus = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].TryRemove(channelGroupToBeRemoved' out timetokenValue); " is 129.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' All channels are Unsubscribed. Further subscription was stopped"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 206.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelUnSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity); " is 371.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName)) " is 143.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName)) " is 158.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                        string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 287.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 286.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to find instance id = {1} from _channelRequest."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubInstance.InstanceId)' config.LogVerbosity); " is 224.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(string.Join("'"' channels.OrderBy(x => x).ToArray())' state.Request' (key' oldValue) => state.Request); " is 157.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                    SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 1000' config.SubscribeTimeout * 1000); " is 152.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity); " is 369.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeDisconnected. Exiting MultiChannelSubscribeRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (MultiChannelSubscribe != null && MultiChannelSubscribe[PubnubInstance.InstanceId].Count <= 0 && MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count <= 0) " is 203.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Zero channels/channelGroups. Further subscription was stopped"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 204.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            string multiChannelGroup = (channelGroups != null && channelGroups.Length > 0) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 144.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(multiChannel' networkConnection' (key' oldValue) => networkConnection); " is 132.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(multiChannelGroup' networkConnection' (key' oldValue) => networkConnection); " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (((ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannel) && !ChannelInternetStatus[PubnubInstance.InstanceId][multiChannel]) " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                || (multiChannelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannelGroup) && !ChannelGroupInternetStatus[PubnubInstance.InstanceId][multiChannelGroup])) " is 194.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (!ChannelRequest.ContainsKey(PubnubInstance.InstanceId) || (!multiChannel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannel))) " is 205.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' PubnubInstance.InstanceId NOT matching"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 181.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Building request for channel(s)={1}' channelgroup(s)={2} with timetoken={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannel' multiChannelGroup' lastTimetoken)' config.LogVerbosity); " is 266.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                Uri request = urlBuilder.BuildMultiChannelSubscribeRequest(channels' channelGroups' (Convert.ToInt64(timetoken.ToString()) == 0) ? Convert.ToInt64(timetoken.ToString()) : lastTimetoken' channelsJsonState' initialSubscribeUrlParams); " is 232.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string subscribedChannels = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x=>x).Aggregate((x' y) => x + "'" + y) : ""; " is 197.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string currentChannels = (channels != null && channels.Length > 0) ? channels.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 132.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string subscribedChannelGroups = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 214.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string currentChannelGroups = (channelGroups != null && channelGroups.Length > 0) ? channelGroups.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 152.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    if (subscribedChannels.Equals(currentChannels' StringComparison.CurrentCultureIgnoreCase) && subscribedChannelGroups.Equals(currentChannelGroups' StringComparison.CurrentCultureIgnoreCase)) " is 189.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' result count of ProcessJsonResponse = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' (result != null) ? result.Count : -1)' config.LogVerbosity); " is 223.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        if ((pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) && (result != null) && (result.Count > 0)) " is 183.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' jsonTimetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonTimetoken)' config.LogVerbosity); " is 178.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                                        MultiChannelSubscribe[PubnubInstance.InstanceId].AddOrUpdate(currentChannel' jsonTimetoken' (key' oldValue) => jsonTimetoken); " is 126.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                                        MultiChannelGroupSubscribe[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup' jsonTimetoken' (key' oldValue) => jsonTimetoken); " is 136.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' condition failed for subscribedChannels == currentChannels && subscribedChannelGroups == currentChannelGroups"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 253.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' subscribedChannels = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' subscribedChannels)' config.LogVerbosity); " is 188.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' currentChannels = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentChannels)' config.LogVerbosity); " is 182.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' subscribedChannelGroups = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' subscribedChannelGroups)' config.LogVerbosity); " is 198.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' currentChannelGroups = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentChannelGroups)' config.LogVerbosity); " is 192.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} method:_subscribe \n channel={1} \n timetoken={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' channels.OrderBy(x => x).ToArray())' timetoken.ToString()' ex)' config.LogVerbosity); " is 296.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(type' errorCategory' pubnubRequestState' (int)HttpStatusCode.NotFound' ex); " is 156.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                MultiChannelSubscribeRequest<T>(type' channels' channelGroups' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity); " is 194.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 176.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Subscribe is still Disconnected. So no reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Subscribe - No internet connection for channel={1} and channelgroup={2}; networkAvailable={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' channels.OrderBy(x => x).ToArray())' channelGroups != null ? string.Join("'"' channelGroups) : ""' networkAvailable)' config.LogVerbosity); " is 370.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' reconnection policy is DISABLED' please handle reconnection manually."' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(type' errorCategory' null' (int)HttpStatusCode.NotFound' new Exception("SDK Network related error")); " is 182.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "            if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))) " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager ReconnectNetwork interval = {1} sec"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubNetworkTcpCheckIntervalInSeconds)' config.LogVerbosity); " is 235.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                        ChannelReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelTimerKey' timer' (key' oldState) => timer); " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                        ChannelGroupReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelGroupTimerKey' timer' (key' oldState) => timer); " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                string channel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                string channelGroup = (chananelGroups != null && chananelGroups.Length > 0) ? string.Join("'"' chananelGroups.OrderBy(x => x).ToArray()) : ""; " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 143.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Network available for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 198.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                        ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    if (!string.IsNullOrEmpty(channelGroup) && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup)) " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                        ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No network for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNSubscribeOperation' errorCategory' null' (int)HttpStatusCode.NotFound' new Exception("SDK Network related error")); " is 214.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No channels/channelgroups for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 206.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 176.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' GetCurrentSubscriberChannels()' GetCurrentSubscriberChannelGroups()' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null); " is 203.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Disconnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager Manual Disconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - ok. expected subscribe within threshold limit of SubscribeTimeout. No action needed"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 245.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling MultiChannelSubscribeRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 264.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                            MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' channels' chananelGroups' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null); " is 160.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling TerminateCurrentSubscriberRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 269.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - StartSubscribeHeartbeatCheckCallback - No channels/cgs avaialable"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 227.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                string subscribedChannels = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 199.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                string subscribedChannelGroups = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 214.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))) " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        channelGroup = (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0) ? string.Join("'"' netState.ChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)) " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            bool networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 166.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channel={1} {2} reconnectNetworkCallback. Retry"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType)' config.LogVerbosity); " is 222.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.NotFound' new Exception("Internet connection problem. Retrying connection")); " is 258.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        if (ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(channel) && ChannelInternetStatus[PubnubInstance.InstanceId][channel]) " is 135.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' {1} {2} terminating ch reconnectimer"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType)' config.LogVerbosity); " is 211.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.OK' null); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channel={1} {2} reconnectNetworkCallback. Internet Available : {3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType' ChannelInternetStatus[PubnubInstance.InstanceId][channel])' config.LogVerbosity); " is 300.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.ResponseType' netState.Channels' netState.ChannelGroups' netState.Timetoken' true' null); " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        channel = (netState.Channels != null && netState.Channels.Length > 0) ? string.Join("'"' netState.Channels.OrderBy(x => x).ToArray()) : "'"; " is 140.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        if (subscribedChannelGroups == channelGroup && channelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup) " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)) " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            bool networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 166.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Retrying"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 235.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.NotFound' new Exception("Internet connection problem. Retrying connection")); " is 258.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' {1} {2} terminating cg reconnectimer"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 216.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.OK' null); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Internet Available"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 245.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.ResponseType' netState.Channels' netState.ChannelGroups' netState.Timetoken' true' null); " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unknown request state in reconnectNetworkCallback"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 192.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' errorCategory' null' (int)HttpStatusCode.NotFound' ex); " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} method:reconnectNetworkCallback \n Exception Details={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' config.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The length of the statement  "            if ((channels != null && channels.Length > 0 && channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0) " is 121.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The length of the statement  "                || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)) " is 136.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The length of the statement  "                    PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000); " is 162.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' currentState.ResponseType' currentState.PubnubCallback' currentState.Channels' currentState.ChannelGroups); " is 185.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                    string[] subscriberChannels = (currentState.Channels != null) ? currentState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray() : null; " is 146.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                    string[] subscriberChannelGroups = (currentState.ChannelGroups != null) ? currentState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray() : null; " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                    if ((subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)) " is 141.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Execute,The length of the statement  "                this.presenceChannelNames = (this.subscribeChannelNames != null && this.subscribeChannelNames.Count > 0 && !string.IsNullOrEmpty(this.subscribeChannelNames[0]))  " is 160.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Execute,The length of the statement  "                this.presenceChannelGroupNames = (this.subscribeChannelGroupNames != null && this.subscribeChannelGroupNames.Count > 0 && !string.IsNullOrEmpty(this.subscribeChannelGroupNames[0]))  " is 180.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' requested subscribe for channel(s)={1} and channel group(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' channelGroup)' config.LogVerbosity); " is 229.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                initialSubscribeUrlParams.Add("filter-expr"' new UriUtil().EncodeUriComponent(config.FilterExpression' PNOperationType.PNSubscribeOperation' false' false)); " is 156.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                manager.MultiChannelSubscribeInit<T>(PNOperationType.PNSubscribeOperation' channels' channelGroups' initialSubscribeUrlParams); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,CurrentPubnubInstance,The length of the statement  "                ChannelGroupLocalUserState.GetOrAdd(instance.InstanceId' new ConcurrentDictionary<string' Dictionary<string' object>>()); " is 121.
Long Statement,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' requested unsubscribe for channel(s)={1}' cg(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' channelGroup)' config.LogVerbosity); " is 217.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,OnTelemetryIntervalTimeout,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - OnTelemetryIntervalTimeout => CleanupTelemetryData"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency {1} latency = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' type' latencyMillisec)' pubnubConfig.LogVerbosity); " is 221.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 195.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The length of the statement  "                        dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec " is 181.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 203.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds; " is 120.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => latencyOpKeys count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' latencyOpKeys.Length)' pubnubConfig.LogVerbosity); " is 239.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                        IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000); " is 143.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                            Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value); " is 127.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity); " is 263.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity); " is 228.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 211.
Complex Conditional,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The conditional expression  "type == PNOperationType.PNHereNowOperation || type == PNOperationType.PNHistoryOperation || type == PNOperationType.Leave || type == PNOperationType.PNHeartbeatOperation || type == PNOperationType.PushRegister || type == PNOperationType.PushRemove || type == PNOperationType.PushGet || type == PNOperationType.PushUnregister"  is complex.
Complex Conditional,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The conditional expression  "type != PNOperationType.PNTimeOperation                          && type != PNOperationType.PNAccessManagerGrant && type != PNOperationType.ChannelGroupGrantAccess                          && type != PNOperationType.PNAccessManagerAudit && type != PNOperationType.ChannelGroupAuditAccess"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The conditional expression  "asyncRequestState != null && asyncRequestState.ResponseType == PNOperationType.PNSubscribeOperation && result != null && result.Count > 0"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The conditional expression  "(newChannels != null && newChannels.Count() > 0) || (newChannelGroups != null && newChannelGroups.Count() > 0)"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The conditional expression  "ChannelRequest.ContainsKey(PubnubInstance.InstanceId) && !channel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(channel) && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The conditional expression  "result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == """  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The conditional expression  "result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == """  is complex.
Complex Conditional,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The conditional expression  "currentState.ResponseType != PNOperationType.PNSubscribeOperation                       && currentState.ResponseType != PNOperationType.Presence                      && currentState.ResponseType != PNOperationType.PNHeartbeatOperation                      && currentState.ResponseType != PNOperationType.Leave"  is complex.
Complex Conditional,PubnubApi.EndPoint,GetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The conditional expression  "(channels == null && channelGroups == null)                             || (channels != null && channelGroups != null && channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,GetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The conditional expression  "(channels == null && channelGroups != null) || (channels.Length == 0  && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The conditional expression  "(channels == null && channelGroups == null)                              || (channels != null && channelGroups != null && channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SetStateOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The conditional expression  "(channels == null && channelGroups != null) || (channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The conditional expression  "channelGroups != null && channelGroups.Length > 0 && (channels == null || channels.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "MultiChannelSubscribe != null && MultiChannelSubscribe[PubnubInstance.InstanceId].Count <= 0 && MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count <= 0"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "((ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannel) && !ChannelInternetStatus[PubnubInstance.InstanceId][multiChannel])                  || (multiChannelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannelGroup) && !ChannelGroupInternetStatus[PubnubInstance.InstanceId][multiChannelGroup]))                  && PubnetSystemActive"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "(pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) && (result != null) && (result.Count > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The conditional expression  "(channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The conditional expression  "(channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "channel == subscribedChannels && ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(channel)                              && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "subscribedChannelGroups == channelGroup && channelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup)                              && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The conditional expression  "(channels != null && channels.Length > 0 && channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                  || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The conditional expression  "(subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The conditional expression  "(channels == null || channels.Length == 0) && (channelGroups == null || channelGroups.Length  == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The conditional expression  "(channels == null || channels.Length == 0) && (channelGroups == null || channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,AddPushChannelOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,RegisterDevice,The conditional expression  "channels == null || channels.Length == 0 || channels[0] == null || channels[0].Trim().Length == 0"  is complex.
Complex Conditional,PubnubApi.EndPoint,RemovePushChannelOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemoveChannelForDevice,The conditional expression  "channels == null || channels.Length == 0 || channels[0] == null || channels[0].Trim().Length == 0"  is complex.
Virtual Method Call from Constructor,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,MD5,The constructor "MD5" calls a virtual method "Initialize".
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsValidJson,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,BuildJsonObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsDictionaryCompatible,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,EndPendingRequests,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,EndPendingRequests,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,EndPendingRequests,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,ChangeUUID,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StopTelemetryTimer,The method has an empty catch block.
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: foreach (char ch in s)              {                  if (prevSurroagePair)                  {                      prevSurroagePair = false;                      continue;                  }                    if (IsUnsafe(ch' ignoreComma))                  {                      o.Append('%');                      o.Append(ToHex(ch / 16));                      o.Append(ToHex(ch % 16));                  }                  else                  {                      int positionOfChar = s.IndexOf(ch);                      if (ch == ''' && ignoreComma)                      {                          o.Append(ch.ToString());                      }                      else if (Char.IsSurrogatePair(s' positionOfChar))                      {                          string codepoint = ConvertToUtf32(s' positionOfChar).ToString("X4");                            int codePointValue = int.Parse(codepoint' NumberStyles.HexNumber);                          if (codePointValue <= 0x7F)                          {                              System.Diagnostics.Debug.WriteLine("0x7F");                              string utf8HexValue = string.Format("%{0}"' codePointValue);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x7FF)                          {                              string one = (0xC0 | ((codePointValue >> 6) & 0x1F)).ToString("X");                              string two = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}"' one' two);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0xFFFF)                          {                              string one = (0xE0 | ((codePointValue >> 12) & 0x0F)).ToString("X");                              string two = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string three = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}"' one' two' three);                              o.Append(utf8HexValue);                          }                          else if (codePointValue <= 0x10FFFF)                          {                              string one = (0xF0 | ((codePointValue >> 18) & 0x07)).ToString("X");                              string two = (0x80 | ((codePointValue >> 12) & 0x3F)).ToString("X");                              string three = (0x80 | ((codePointValue >> 6) & 0x3F)).ToString("X");                              string four = (0x80 | (codePointValue & 0x3F)).ToString("X");                              string utf8HexValue = string.Format("%{0}%{1}%{2}%{3}"' one' two' three' four);                              o.Append(utf8HexValue);                          }                            prevSurroagePair = true;                      }                      else                      {                          string escapeChar = System.Uri.EscapeDataString(ch.ToString());                          o.Append(escapeChar);                      }                  }              }
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubnubApi,UriUtil,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubnubApi,UrlRequestBuilder,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,TranslateUtcDateTimeToSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpper().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID KEY" || httpErrorCodeMessage.ToUpper() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpper() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpper() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpper() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 414:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 503:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The following statement contains a magic number: if (IsGenericTypeForMessage<T>())              {  #region "Subscribe Message<>"                  return DeserializeMessageToObjectBasedOnPlatform<T>(listObject);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerGrantResult))              {  #region "PNAccessManagerGrantResult"                  Dictionary<string' object> grantDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerGrantResult ack = null;                    if (grantDicObj != null)                  {                      ack = new PNAccessManagerGrantResult();                        if (grantDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> grantAckPayloadDic = ConvertToDictionaryObject(grantDicObj["payload"]);                          if (grantAckPayloadDic != null && grantAckPayloadDic.Count > 0)                          {                              if (grantAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = grantAckPayloadDic["level"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = grantAckPayloadDic["subscribe_key"].ToString();                              }                                if (grantAckPayloadDic.ContainsKey("ttl"))                              {                                  ack.Ttl = Convert.ToInt32(grantAckPayloadDic["ttl"].ToString());                              }                                if (!string.IsNullOrEmpty(ack.Level) && ack.Level == "subkey")                              {                                  //Placeholder for subkey level                              }                              else                              {                                  if (grantAckPayloadDic.ContainsKey("channels"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckChannelListDic = ConvertToDictionaryObject(grantAckPayloadDic["channels"]);                                      if (grantAckChannelListDic != null && grantAckChannelListDic.Count > 0)                                      {                                          foreach (string channel in grantAckChannelListDic.Keys)                                          {                                              Dictionary<string' object> grantAckChannelDataDic = ConvertToDictionaryObject(grantAckChannelListDic[channel]);                                              if (grantAckChannelDataDic != null && grantAckChannelDataDic.Count > 0)                                              {                                                  if (grantAckChannelDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckChannelDataDic["auths"]);                                                      if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                                if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.Channels.Add(channel' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }                                  }//end of if channels                                  else if (grantAckPayloadDic.ContainsKey("channel"))                                  {                                      ack.Channels = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelName = grantAckPayloadDic["channel"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.Channels.Add(channelName' authKeyDataDic);                                          }                                      }                                  } //end of if channel                                    if (grantAckPayloadDic.ContainsKey("channel-groups"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        Dictionary<string' object> grantAckCgListDic = ConvertToDictionaryObject(grantAckPayloadDic["channel-groups"]);                                      if (grantAckCgListDic != null && grantAckCgListDic.Count > 0)                                      {                                          foreach (string channelgroup in grantAckCgListDic.Keys)                                          {                                              Dictionary<string' object> grantAckCgDataDic = ConvertToDictionaryObject(grantAckCgListDic[channelgroup]);                                              if (grantAckCgDataDic != null && grantAckCgDataDic.Count > 0)                                              {                                                  if (grantAckCgDataDic.ContainsKey("auths"))                                                  {                                                      Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                        Dictionary<string' object> grantAckCgAuthListDic = ConvertToDictionaryObject(grantAckCgDataDic["auths"]);                                                      if (grantAckCgAuthListDic != null && grantAckCgAuthListDic.Count > 0)                                                      {                                                          foreach (string authKey in grantAckCgAuthListDic.Keys)                                                          {                                                              Dictionary<string' object> grantAckCgAuthDataDic = ConvertToDictionaryObject(grantAckCgAuthListDic[authKey]);                                                              if (grantAckCgAuthDataDic != null && grantAckCgAuthDataDic.Count > 0)                                                              {                                                                  PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                                  authData.ReadEnabled = grantAckCgAuthDataDic["r"].ToString() == "1";                                                                  authData.WriteEnabled = grantAckCgAuthDataDic["w"].ToString() == "1";                                                                  authData.ManageEnabled = grantAckCgAuthDataDic.ContainsKey("m") ? grantAckCgAuthDataDic["m"].ToString() == "1" : false;                                                                    authKeyDataDic.Add(authKey' authData);                                                              }                                                            }                                                            ack.ChannelGroups.Add(channelgroup' authKeyDataDic);                                                      }                                                  }                                              }                                          }                                      }// if no dictionary due to REST bug                                      else                                      {                                          string channelGroupName = grantAckPayloadDic["channel-groups"].ToString();                                          if (grantAckPayloadDic.ContainsKey("auths"))                                          {                                              Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                                Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                                if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                              {                                                  foreach (string authKey in grantAckChannelAuthListDic.Keys)                                                  {                                                      Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                      if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                      {                                                          PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                          authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                          authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                          authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                            authKeyDataDic.Add(authKey' authData);                                                      }                                                    }                                                    ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                              }                                          }                                        } //end of else if for REST bug                                  }//end of if channel-groups                                  else if (grantAckPayloadDic.ContainsKey("channel-group"))                                  {                                      ack.ChannelGroups = new Dictionary<string' Dictionary<string' PNAccessManagerKeyData>>();                                        string channelGroupName = grantAckPayloadDic["channel-group"].ToString();                                      if (grantAckPayloadDic.ContainsKey("auths"))                                      {                                          Dictionary<string' PNAccessManagerKeyData> authKeyDataDic = new Dictionary<string' PNAccessManagerKeyData>();                                            Dictionary<string' object> grantAckChannelAuthListDic = ConvertToDictionaryObject(grantAckPayloadDic["auths"]);                                            if (grantAckChannelAuthListDic != null && grantAckChannelAuthListDic.Count > 0)                                          {                                              foreach (string authKey in grantAckChannelAuthListDic.Keys)                                              {                                                  Dictionary<string' object> grantAckChannelAuthDataDic = ConvertToDictionaryObject(grantAckChannelAuthListDic[authKey]);                                                  if (grantAckChannelAuthDataDic != null && grantAckChannelAuthDataDic.Count > 0)                                                  {                                                      PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                                      authData.ReadEnabled = grantAckChannelAuthDataDic["r"].ToString() == "1";                                                      authData.WriteEnabled = grantAckChannelAuthDataDic["w"].ToString() == "1";                                                      authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false;                                                        authKeyDataDic.Add(authKey' authData);                                                  }                                                }                                                ack.ChannelGroups.Add(channelGroupName' authKeyDataDic);                                          }                                      }                                  } //end of if channel-group                              } //end of else subkey                            }                        }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerGrantResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNAccessManagerAuditResult))              {  #region "PNAccessManagerAuditResult"                  Dictionary<string' object> auditDicObj = ConvertToDictionaryObject(listObject[0]);                    PNAccessManagerAuditResult ack = null;                    if (auditDicObj != null)                  {                      ack = new PNAccessManagerAuditResult();                        if (auditDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> auditAckPayloadDic = ConvertToDictionaryObject(auditDicObj["payload"]);                          if (auditAckPayloadDic != null && auditAckPayloadDic.Count > 0)                          {                              if (auditAckPayloadDic.ContainsKey("level"))                              {                                  ack.Level = auditAckPayloadDic["level"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("subscribe_key"))                              {                                  ack.SubscribeKey = auditAckPayloadDic["subscribe_key"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel"))                              {                                  ack.Channel = auditAckPayloadDic["channel"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("channel-group"))                              {                                  ack.ChannelGroup = auditAckPayloadDic["channel-group"].ToString();                              }                                if (auditAckPayloadDic.ContainsKey("auths"))                              {                                  Dictionary<string' object> auditAckAuthListDic = ConvertToDictionaryObject(auditAckPayloadDic["auths"]);                                  if (auditAckAuthListDic != null && auditAckAuthListDic.Count > 0)                                  {                                      ack.AuthKeys = new Dictionary<string' PNAccessManagerKeyData>();                                        foreach (string authKey in auditAckAuthListDic.Keys)                                      {                                          Dictionary<string' object> authDataDic = ConvertToDictionaryObject(auditAckAuthListDic[authKey]);                                          if (authDataDic != null && authDataDic.Count > 0)                                          {                                              PNAccessManagerKeyData authData = new PNAccessManagerKeyData();                                              authData.ReadEnabled = authDataDic["r"].ToString() == "1";                                              authData.WriteEnabled = authDataDic["w"].ToString() == "1";                                              authData.ManageEnabled = authDataDic.ContainsKey("m") ? authDataDic["m"].ToString() == "1" : false;                                                ack.AuthKeys.Add(authKey' authData);                                          }                                      }                                  }                              }                            }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNAccessManagerAuditResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPublishResult))              {  #region "PNPublishResult"                  PNPublishResult result = null;                  if (listObject.Count >= 2)                  {                      result = new PNPublishResult                      {                          Timetoken = Int64.Parse(listObject[2].ToString())'                      };                  }                    ret = (T)Convert.ChangeType(result' typeof(PNPublishResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPresenceEventResult))              {  #region "PNPresenceEventResult"                  Dictionary<string' object> presenceDicObj = ConvertToDictionaryObject(listObject[0]);                    PNPresenceEventResult ack = null;                    if (presenceDicObj != null)                  {                      ack = new PNPresenceEventResult();                      ack.Event = presenceDicObj["action"].ToString();                      ack.Timestamp = Convert.ToInt64(presenceDicObj["timestamp"].ToString());                      if (presenceDicObj.ContainsKey("uuid"))                      {                          ack.Uuid = presenceDicObj["uuid"].ToString();                      }                      ack.Occupancy = Int32.Parse(presenceDicObj["occupancy"].ToString());                        if (presenceDicObj.ContainsKey("data"))                      {                          Dictionary<string' object> stateDic = presenceDicObj["data"] as Dictionary<string' object>;                          if (stateDic != null)                          {                              ack.State = stateDic;                          }                      }                        ack.Timetoken = Convert.ToInt64(listObject[2].ToString());                      ack.Channel = (listObject.Count == 5) ? listObject[4].ToString() : listObject[3].ToString();                      ack.Channel = ack.Channel.Replace("-pnpres"' "");                        if (listObject.Count == 5)                      {                          ack.Subscription = listObject[3].ToString();                          ack.Subscription = ack.Subscription.Replace("-pnpres"' "");                      }                        if (listObject[1] != null)                      {                          ack.UserMetadata = listObject[1];                      }                        if (ack.Event != null && ack.Event.ToLower() == "interval")                      {                          if (presenceDicObj.ContainsKey("join"))                          {                              List<object> joinDeltaList = presenceDicObj["join"] as List<object>;                              if (joinDeltaList != null && joinDeltaList.Count > 0)                              {                                  ack.Join = joinDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("timeout"))                          {                              List<object> timeoutDeltaList = presenceDicObj["timeout"] as List<object>;                              if (timeoutDeltaList != null && timeoutDeltaList.Count > 0)                              {                                  ack.Timeout = timeoutDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("leave"))                          {                              List<object> leaveDeltaList = presenceDicObj["leave"] as List<object>;                              if (leaveDeltaList != null && leaveDeltaList.Count > 0)                              {                                  ack.Leave = leaveDeltaList.Select(x => x.ToString()).ToArray();                              }                          }                          if (presenceDicObj.ContainsKey("here_now_refresh"))                          {                              string hereNowRefreshStr = presenceDicObj["here_now_refresh"].ToString();                              if (!string.IsNullOrEmpty(hereNowRefreshStr))                              {                                  bool boolHereNowRefresh = false;                                  if (Boolean.TryParse(hereNowRefreshStr' out boolHereNowRefresh))                                  {                                      ack.HereNowRefresh = boolHereNowRefresh;                                  }                              }                          }                        }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNPresenceEventResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHistoryResult))              {  #region "PNHistoryResult"                  PNHistoryResult ack = new PNHistoryResult();                  ack.StartTimeToken = Convert.ToInt64(listObject[1].ToString());                  ack.EndTimeToken = Convert.ToInt64(listObject[2].ToString());                  List<object> messagesContainer = listObject[0] as List<object>;                  if (messagesContainer == null)                  {                      object[] messagesCollection = listObject[0] as object[];                      if (messagesCollection != null && messagesCollection.Length > 0)                      {                          messagesContainer = messagesCollection.ToList();                      }                  }                  if (messagesContainer != null)                  {                      ack.Messages = new List<PNHistoryItemResult>();                      foreach(var message in messagesContainer)                      {                          PNHistoryItemResult result = new PNHistoryItemResult();                          Dictionary<string' object> dicMessageTimetoken = ConvertToDictionaryObject(message);                          if (dicMessageTimetoken != null)                          {                              if (dicMessageTimetoken.ContainsKey("message") && dicMessageTimetoken.ContainsKey("timetoken"))                              {                                  result.Entry = dicMessageTimetoken["message"];                                    long messageTimetoken;                                  Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken);                                  result.Timetoken = messageTimetoken;                              }                              else                              {                                  result.Entry = dicMessageTimetoken;                              }                          }                          else                          {                              result.Entry = message;                          }                            ack.Messages.Add(result);                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNHistoryResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNDeleteMessageResult))              {  #region "PNDeleteMessageResult"                  PNDeleteMessageResult ack = new PNDeleteMessageResult();                  ret = (T)Convert.ChangeType(ack' typeof(PNDeleteMessageResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHereNowResult))              {  #region "PNHereNowResult"                  Dictionary<string' object> herenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNHereNowResult hereNowResult = null;                    if (herenowDicObj != null)                  {                      hereNowResult = new PNHereNowResult();                        string hereNowChannelName = listObject[1].ToString();                        if (herenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> hereNowPayloadDic = ConvertToDictionaryObject(herenowDicObj["payload"]);                          if (hereNowPayloadDic != null && hereNowPayloadDic.Count > 0)                          {                              hereNowResult.TotalOccupancy = Int32.Parse(hereNowPayloadDic["total_occupancy"].ToString());                              hereNowResult.TotalChannels = Int32.Parse(hereNowPayloadDic["total_channels"].ToString());                              if (hereNowPayloadDic.ContainsKey("channels"))                              {                                  Dictionary<string' object> hereNowChannelListDic = ConvertToDictionaryObject(hereNowPayloadDic["channels"]);                                  if (hereNowChannelListDic != null && hereNowChannelListDic.Count > 0)                                  {                                      foreach (string channel in hereNowChannelListDic.Keys)                                      {                                          Dictionary<string' object> hereNowChannelItemDic = ConvertToDictionaryObject(hereNowChannelListDic[channel]);                                          if (hereNowChannelItemDic != null && hereNowChannelItemDic.Count > 0)                                          {                                              PNHereNowChannelData channelData = new PNHereNowChannelData();                                              channelData.ChannelName = channel;                                              channelData.Occupancy = Convert.ToInt32(hereNowChannelItemDic["occupancy"].ToString());                                              if (hereNowChannelItemDic.ContainsKey("uuids"))                                              {                                                  object[] hereNowChannelUuidList = ConvertToObjectArray(hereNowChannelItemDic["uuids"]);                                                  if (hereNowChannelUuidList != null && hereNowChannelUuidList.Length > 0)                                                  {                                                      List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                                        for (int index = 0; index < hereNowChannelUuidList.Length; index++)                                                      {                                                          if (hereNowChannelUuidList[index].GetType() == typeof(string))                                                          {                                                              PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                              uuidData.Uuid = hereNowChannelUuidList[index].ToString();                                                              uuidDataList.Add(uuidData);                                                          }                                                          else                                                          {                                                              Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(hereNowChannelUuidList[index]);                                                              if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                                              {                                                                  PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                                                  uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                                                  if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                                                  {                                                                      uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                                                  }                                                                  uuidDataList.Add(uuidData);                                                              }                                                          }                                                      }                                                      channelData.Occupants = uuidDataList;                                                  }                                              }                                              hereNowResult.Channels.Add(channel' channelData);                                          }                                      }                                  }                              }                          }                      }                      else if (herenowDicObj.ContainsKey("occupancy"))                      {                          hereNowResult.TotalOccupancy = Int32.Parse(herenowDicObj["occupancy"].ToString());                          hereNowResult.Channels = new Dictionary<string' PNHereNowChannelData>();                          if (herenowDicObj.ContainsKey("uuids"))                          {                              object[] uuidArray = ConvertToObjectArray(herenowDicObj["uuids"]);                              if (uuidArray != null && uuidArray.Length > 0)                              {                                  List<PNHereNowOccupantData> uuidDataList = new List<PNHereNowOccupantData>();                                  for (int index = 0; index < uuidArray.Length; index++)                                  {                                      Dictionary<string' object> hereNowChannelItemUuidsDic = ConvertToDictionaryObject(uuidArray[index]);                                      if (hereNowChannelItemUuidsDic != null && hereNowChannelItemUuidsDic.Count > 0)                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = hereNowChannelItemUuidsDic["uuid"].ToString();                                          if (hereNowChannelItemUuidsDic.ContainsKey("state"))                                          {                                              uuidData.State = ConvertToDictionaryObject(hereNowChannelItemUuidsDic["state"]);                                          }                                          uuidDataList.Add(uuidData);                                      }                                      else                                      {                                          PNHereNowOccupantData uuidData = new PNHereNowOccupantData();                                          uuidData.Uuid = uuidArray[index].ToString();                                          uuidDataList.Add(uuidData);                                      }                                  }                                    PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.ChannelName = hereNowChannelName;                                  channelData.Occupants = uuidDataList;                                  channelData.Occupancy = hereNowResult.TotalOccupancy;                                    hereNowResult.Channels.Add(hereNowChannelName' channelData);                                  hereNowResult.TotalChannels = hereNowResult.Channels.Count;                              }                          }                          else                          {                              string channels = listObject[1].ToString();                              string[] arrChannel = channels.Split(''');                              int totalChannels = 0;                              foreach (string channel in arrChannel)                              {                                  PNHereNowChannelData channelData = new PNHereNowChannelData();                                  channelData.Occupancy = 1;                                  hereNowResult.Channels.Add(channel' channelData);                                  totalChannels++;                              }                              hereNowResult.TotalChannels = totalChannels;                              }                      }                    }                    ret = (T)Convert.ChangeType(hereNowResult' typeof(PNHereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNWhereNowResult))              {  #region "WhereNowAck"                  Dictionary<string' object> wherenowDicObj = ConvertToDictionaryObject(listObject[0]);                    PNWhereNowResult ack = null;                    if (wherenowDicObj != null)                  {                      ack = new PNWhereNowResult();                        if (wherenowDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> whereNowPayloadDic = ConvertToDictionaryObject(wherenowDicObj["payload"]);                          if (whereNowPayloadDic != null && whereNowPayloadDic.Count > 0)                          {                              if (whereNowPayloadDic.ContainsKey("channels"))                              {                                  object[] whereNowChannelList = ConvertToObjectArray(whereNowPayloadDic["channels"]);                                  if (whereNowChannelList != null && whereNowChannelList.Length >= 0)                                  {                                      List<string> channelList = new List<string>();                                      foreach (string channel in whereNowChannelList)                                      {                                          channelList.Add(channel);                                      }                                      ack.Channels = channelList;                                  }                                }                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNWhereNowResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNSetStateResult))              {  #region "SetUserStateAck"                  Dictionary<string' object> setUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNSetStateResult ack = null;                    if (setUserStatewDicObj != null)                  {                      ack = new PNSetStateResult();                        ack.State = new Dictionary<string' object>();                        if (setUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> setStateDic = ConvertToDictionaryObject(setUserStatewDicObj["payload"]);                          if (setStateDic != null)                          {                              ack.State = setStateDic;                          }                      }                    }                    ret = (T)Convert.ChangeType(ack' typeof(PNSetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNGetStateResult))              {  #region "PNGetStateResult"                  Dictionary<string' object> getUserStatewDicObj = ConvertToDictionaryObject(listObject[0]);                    PNGetStateResult ack = null;                    if (getUserStatewDicObj != null)                  {                      ack = new PNGetStateResult();                        ack.StateByUUID = new Dictionary<string' object>();                        if (getUserStatewDicObj.ContainsKey("payload"))                      {                          Dictionary<string' object> getStateDic = ConvertToDictionaryObject(getUserStatewDicObj["payload"]);                          if (getStateDic != null)                          {                              ack.StateByUUID = getStateDic;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNGetStateResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAllChannelsResult))              {  #region "PNChannelGroupsAllChannelsResult"                  Dictionary<string' object> getCgChannelsDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAllChannelsResult ack = null;                    if (getCgChannelsDicObj != null)                  {                      ack = new PNChannelGroupsAllChannelsResult();                      Dictionary<string' object> getCgChannelPayloadDic = ConvertToDictionaryObject(getCgChannelsDicObj["payload"]);                      if (getCgChannelPayloadDic != null && getCgChannelPayloadDic.Count > 0)                      {                          ack.ChannelGroup = getCgChannelPayloadDic["group"].ToString();                          object[] channelGroupChPayloadChannels = ConvertToObjectArray(getCgChannelPayloadDic["channels"]);                          if (channelGroupChPayloadChannels != null && channelGroupChPayloadChannels.Length > 0)                          {                              List<string> channelList = new List<string>();                              for (int index = 0; index < channelGroupChPayloadChannels.Length; index++)                              {                                  channelList.Add(channelGroupChPayloadChannels[index].ToString());                              }                              ack.Channels = channelList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsListAllResult))              {  #region "PNChannelGroupsListAllResult"                  Dictionary<string' object> getAllCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsListAllResult ack = null;                    if (getAllCgDicObj != null)                  {                      ack = new PNChannelGroupsListAllResult();                        Dictionary<string' object> getAllCgPayloadDic = ConvertToDictionaryObject(getAllCgDicObj["payload"]);                      if (getAllCgPayloadDic != null && getAllCgPayloadDic.Count > 0)                      {                          object[] channelGroupAllCgPayloadChannels = ConvertToObjectArray(getAllCgPayloadDic["groups"]);                          if (channelGroupAllCgPayloadChannels != null && channelGroupAllCgPayloadChannels.Length > 0)                          {                              List<string> allCgList = new List<string>();                              for (int index = 0; index < channelGroupAllCgPayloadChannels.Length; index++)                              {                                  allCgList.Add(channelGroupAllCgPayloadChannels[index].ToString());                              }                              ack.Groups = allCgList;                          }                      }                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsListAllResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsAddChannelResult))              {  #region "AddChannelToChannelGroupAck"                  Dictionary<string' object> addChToCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsAddChannelResult ack = null;                    if (addChToCgDicObj != null)                  {                      ack = new PNChannelGroupsAddChannelResult();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsRemoveChannelResult))              {  #region "PNChannelGroupsRemoveChannelResult"                  Dictionary<string' object> removeChFromCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsRemoveChannelResult ack = null;                    int statusCode = 0;                    if (removeChFromCgDicObj != null)                  {                      ack = new PNChannelGroupsRemoveChannelResult();                        if (int.TryParse(removeChFromCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Message = removeChFromCgDicObj["message"].ToString();                      ack.Service = removeChFromCgDicObj["service"].ToString();                        ack.Error = Convert.ToBoolean(removeChFromCgDicObj["error"].ToString());                        ack.ChannelGroup = listObject[1].ToString();                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNChannelGroupsDeleteGroupResult))              {  #region "PNChannelGroupsDeleteGroupResult"                  Dictionary<string' object> removeCgDicObj = ConvertToDictionaryObject(listObject[0]);                    PNChannelGroupsDeleteGroupResult ack = null;                    int statusCode = 0;                    if (removeCgDicObj != null)                  {                      ack = new PNChannelGroupsDeleteGroupResult();                        if (int.TryParse(removeCgDicObj["status"].ToString()' out statusCode))                          ack.Status = statusCode;                        ack.Service = removeCgDicObj["service"].ToString();                      ack.Message = removeCgDicObj["message"].ToString();                        ack.Error = Convert.ToBoolean(removeCgDicObj["error"].ToString());                  }                    ret = (T)Convert.ChangeType(ack' typeof(PNChannelGroupsDeleteGroupResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNTimeResult))              {  #region "PNTimeResult"                    Int64 timetoken = 0;                    Int64.TryParse(listObject[0].ToString()' out timetoken);                    PNTimeResult result = new PNTimeResult()                  {                      Timetoken = timetoken                  };                    ret = (T)Convert.ChangeType(result' typeof(PNTimeResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushAddChannelResult))              {  #region "PNPushAddChannelResult"                    PNPushAddChannelResult result = new PNPushAddChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushAddChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushListProvisionsResult))              {  #region "PNPushListProvisionsResult"                    PNPushListProvisionsResult result = new PNPushListProvisionsResult();                  result.Channels = listObject.OfType<string>().Where(s => s.Trim() != "").ToList();                    ret = (T)Convert.ChangeType(result' typeof(PNPushListProvisionsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveChannelResult))              {  #region "PNPushRemoveChannelResult"                    PNPushRemoveChannelResult result = new PNPushRemoveChannelResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveChannelResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNPushRemoveAllChannelsResult))              {  #region "PNPushRemoveAllChannelsResult"                    PNPushRemoveAllChannelsResult result = new PNPushRemoveAllChannelsResult();                    ret = (T)Convert.ChangeType(result' typeof(PNPushRemoveAllChannelsResult)' CultureInfo.InvariantCulture);  #endregion              }              else if (typeof(T) == typeof(PNHeartbeatResult))              {  #region "PNHeartbeatResult"                  Dictionary<string' object> heartbeatDicObj = ConvertToDictionaryObject(listObject[0]);                  PNHeartbeatResult result = null;                    if (heartbeatDicObj != null && heartbeatDicObj.ContainsKey("status"))                  {                      result = new PNHeartbeatResult();                        int statusCode;                      if (int.TryParse(heartbeatDicObj["status"].ToString()' out statusCode))                      {                          result.Status = statusCode;                      }                        if (heartbeatDicObj.ContainsKey("message"))                      {                          result.Message = heartbeatDicObj["message"].ToString();                      }                  }                    ret = (T)Convert.ChangeType(result' typeof(PNHeartbeatResult)' CultureInfo.InvariantCulture);  #endregion              }              else              {                  System.Diagnostics.Debug.WriteLine("DeserializeToObject<T>(list) => NO MATCH");                  try                  {                      ret = (T)(object)listObject;                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi,PNConfiguration,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.presenceHeartbeatTimeout = 300;
Magic Number,PubnubApi,PNConfiguration,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.NonSubscribeRequestTimeout = 10;
Magic Number,PubnubApi,PNConfiguration,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.SubscribeTimeout = 310;
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The following statement contains a magic number: if (pubnubConfig.PresenceInterval > 10)              {                  PubnubLocalHeartbeatCheckIntervalInSeconds = pubnubConfig.PresenceInterval;              }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)              {                  case PNOperationType.PNSubscribeOperation:                  case PNOperationType.Presence:                      List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                        if (messageList != null && messageList.Count > 0)                      {                          if (messageList.Count >= pubnubConfig.RequestMessageCountThreshold)                          {                              StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                              Announce(status);                          }                            for (int messageIndex=0; messageIndex < messageList.Count; messageIndex++)                          {                              SubscribeMessage currentMessage = messageList[messageIndex];                              if (currentMessage != null)                              {                                  string currentMessageChannel = currentMessage.Channel;                                  string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                    if (currentMessageChannel.Replace("-pnpres"'"") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                  {                                      currentMessageChannelGroup = "";                                  }                                    object payload = currentMessage.Payload;                                    List<object> payloadContainer = new List<object>(); //First item always message                                  if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres"))                                  {                                      payloadContainer.Add(payload);                                  }                                  else                                  {                                      if (pubnubConfig.CipherKey.Length > 0) //decrypt the subscriber message if cipherkey is available                                      {                                          string decryptMessage = "";                                          PubnubCrypto aes = new PubnubCrypto(pubnubConfig.CipherKey' pubnubConfig' pubnubLog);                                          try                                          {                                              decryptMessage = aes.Decrypt(payload.ToString());                                          }                                          catch (Exception ex)                                          {                                              decryptMessage = "**DECRYPT ERROR**";                                                PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                              PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' ex);                                              if (!string.IsNullOrEmpty(currentMessageChannel))                                              {                                                  status.AffectedChannels.Add(currentMessageChannel);                                                  status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                              }                                              if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                              {                                                  status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                  status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                              }                                                Announce(status);                                          }                                          object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                            payloadContainer.Add(decodeMessage);                                      }                                      else                                      {                                          string payloadJson = jsonLib.SerializeToJsonString(payload);                                          object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                          if (payloadJObject == null)                                          {                                              payloadContainer.Add(payload);                                          }                                          else                                          {                                              payloadContainer.Add(payloadJObject);                                          }                                      }                                  }                                    object userMetaData = currentMessage.UserMetadata;                                    payloadContainer.Add(userMetaData); //Second one always user meta data                                    payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                    if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                  {                                      payloadContainer.Add(currentMessageChannelGroup);                                  }                                    if (!string.IsNullOrEmpty(currentMessageChannel))                                  {                                      payloadContainer.Add(currentMessageChannel);                                  }                                    if (currentMessageChannel.Contains("-pnpres"))                                  {                                      ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                                      PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                      if (presenceEvent != null)                                      {                                          Announce(presenceEvent);                                      }                                  }                                  else                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' pubnubConfig.LogVerbosity);                                      ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                                      PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                      if (userMessage != null)                                      {                                          Announce(userMessage);                                      }                                  }                                }                          }                                                }                      break;                  case PNOperationType.PNTimeOperation:                  case PNOperationType.PNPublishOperation:                  case PNOperationType.PNFireOperation:                  case PNOperationType.PNHistoryOperation:                  case PNOperationType.PNDeleteMessageOperation:                  case PNOperationType.PNHereNowOperation:                  case PNOperationType.PNWhereNowOperation:                  case PNOperationType.PNAccessManagerGrant:                  case PNOperationType.PNAccessManagerAudit:                  case PNOperationType.RevokeAccess:                  case PNOperationType.ChannelGroupGrantAccess:                  case PNOperationType.ChannelGroupAuditAccess:                  case PNOperationType.ChannelGroupRevokeAccess:                  case PNOperationType.PNGetStateOperation:                  case PNOperationType.PNSetStateOperation:                  case PNOperationType.PushRegister:                  case PNOperationType.PushRemove:                  case PNOperationType.PushGet:                  case PNOperationType.PushUnregister:                  case PNOperationType.PNAddChannelsToGroupOperation:                  case PNOperationType.PNRemoveChannelsFromGroupOperation:                  case PNOperationType.PNRemoveGroupOperation:                  case PNOperationType.ChannelGroupGet:                  case PNOperationType.ChannelGroupAllGet:                      if (result != null && result.Count > 0)                      {                          ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                          T userResult = responseBuilder.JsonToObject<T>(result' true);                            StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                          PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                            if (userCallback != null)                          {                              userCallback.OnResponse(userResult' status);                          }                      }                      break;                  case PNOperationType.PNHeartbeatOperation:                      if (result != null && result.Count > 0)                      {                          ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                          PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                            if (userResult != null)                          {                              if (pubnubConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                                  PNStatus status = null;                                    Exception ex = null;                                  if (userResult != null && userResult.Status == 200)                                  {                                      status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  }                                  else                                  {                                      ex = new Exception(userResult.Message);                                      status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                  }                                    Announce(status);                              }                              else if (pubnubConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new Exception(userResult.Message));                                  Announce(status);                              }                          }                        }                      break;                  default:                      break;              }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)              {                  case PNOperationType.PNSubscribeOperation:                  case PNOperationType.Presence:                      List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                        if (messageList != null && messageList.Count > 0)                      {                          if (messageList.Count >= pubnubConfig.RequestMessageCountThreshold)                          {                              StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                              Announce(status);                          }                            for (int messageIndex=0; messageIndex < messageList.Count; messageIndex++)                          {                              SubscribeMessage currentMessage = messageList[messageIndex];                              if (currentMessage != null)                              {                                  string currentMessageChannel = currentMessage.Channel;                                  string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                    if (currentMessageChannel.Replace("-pnpres"'"") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                  {                                      currentMessageChannelGroup = "";                                  }                                    object payload = currentMessage.Payload;                                    List<object> payloadContainer = new List<object>(); //First item always message                                  if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres"))                                  {                                      payloadContainer.Add(payload);                                  }                                  else                                  {                                      if (pubnubConfig.CipherKey.Length > 0) //decrypt the subscriber message if cipherkey is available                                      {                                          string decryptMessage = "";                                          PubnubCrypto aes = new PubnubCrypto(pubnubConfig.CipherKey' pubnubConfig' pubnubLog);                                          try                                          {                                              decryptMessage = aes.Decrypt(payload.ToString());                                          }                                          catch (Exception ex)                                          {                                              decryptMessage = "**DECRYPT ERROR**";                                                PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                              PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' ex);                                              if (!string.IsNullOrEmpty(currentMessageChannel))                                              {                                                  status.AffectedChannels.Add(currentMessageChannel);                                                  status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                              }                                              if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                              {                                                  status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                  status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                              }                                                Announce(status);                                          }                                          object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                            payloadContainer.Add(decodeMessage);                                      }                                      else                                      {                                          string payloadJson = jsonLib.SerializeToJsonString(payload);                                          object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                          if (payloadJObject == null)                                          {                                              payloadContainer.Add(payload);                                          }                                          else                                          {                                              payloadContainer.Add(payloadJObject);                                          }                                      }                                  }                                    object userMetaData = currentMessage.UserMetadata;                                    payloadContainer.Add(userMetaData); //Second one always user meta data                                    payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                    if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                  {                                      payloadContainer.Add(currentMessageChannelGroup);                                  }                                    if (!string.IsNullOrEmpty(currentMessageChannel))                                  {                                      payloadContainer.Add(currentMessageChannel);                                  }                                    if (currentMessageChannel.Contains("-pnpres"))                                  {                                      ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                                      PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                      if (presenceEvent != null)                                      {                                          Announce(presenceEvent);                                      }                                  }                                  else                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' pubnubConfig.LogVerbosity);                                      ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                                      PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                      if (userMessage != null)                                      {                                          Announce(userMessage);                                      }                                  }                                }                          }                                                }                      break;                  case PNOperationType.PNTimeOperation:                  case PNOperationType.PNPublishOperation:                  case PNOperationType.PNFireOperation:                  case PNOperationType.PNHistoryOperation:                  case PNOperationType.PNDeleteMessageOperation:                  case PNOperationType.PNHereNowOperation:                  case PNOperationType.PNWhereNowOperation:                  case PNOperationType.PNAccessManagerGrant:                  case PNOperationType.PNAccessManagerAudit:                  case PNOperationType.RevokeAccess:                  case PNOperationType.ChannelGroupGrantAccess:                  case PNOperationType.ChannelGroupAuditAccess:                  case PNOperationType.ChannelGroupRevokeAccess:                  case PNOperationType.PNGetStateOperation:                  case PNOperationType.PNSetStateOperation:                  case PNOperationType.PushRegister:                  case PNOperationType.PushRemove:                  case PNOperationType.PushGet:                  case PNOperationType.PushUnregister:                  case PNOperationType.PNAddChannelsToGroupOperation:                  case PNOperationType.PNRemoveChannelsFromGroupOperation:                  case PNOperationType.PNRemoveGroupOperation:                  case PNOperationType.ChannelGroupGet:                  case PNOperationType.ChannelGroupAllGet:                      if (result != null && result.Count > 0)                      {                          ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                          T userResult = responseBuilder.JsonToObject<T>(result' true);                            StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                          PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                            if (userCallback != null)                          {                              userCallback.OnResponse(userResult' status);                          }                      }                      break;                  case PNOperationType.PNHeartbeatOperation:                      if (result != null && result.Count > 0)                      {                          ResponseBuilder responseBuilder = new ResponseBuilder(pubnubConfig' jsonLib' pubnubLog);                          PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                            if (userResult != null)                          {                              if (pubnubConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                                  PNStatus status = null;                                    Exception ex = null;                                  if (userResult != null && userResult.Status == 200)                                  {                                      status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  }                                  else                                  {                                      ex = new Exception(userResult.Message);                                      status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                  }                                    Announce(status);                              }                              else if (pubnubConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(pubnubConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new Exception(userResult.Message));                                  Announce(status);                              }                          }                        }                      break;                  default:                      break;              }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The following statement contains a magic number: if (jsonLib.IsDictionaryCompatible(jsonString' type))              {                  PNStatus status = null;                  Dictionary<string' object> deserializeStatus = jsonLib.DeserializeToDictionaryOfObject(jsonString);                  int statusCode = 0; //default. assuming all is ok                   if (deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("error") && string.Equals(deserializeStatus["error"].ToString()'"true"' StringComparison.CurrentCultureIgnoreCase))                  {                      status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' PNStatusCategory.PNUnknownCategory' asyncRequestState' (int)HttpStatusCode.NotFound' new Exception(jsonString));                  }                  else if (deserializeStatus.ContainsKey("status") && deserializeStatus.ContainsKey("message"))                  {                      Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode);                      string statusMessage = deserializeStatus["message"].ToString();                        if (statusCode != 200)                      {                          PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(statusCode' statusMessage);                          status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(type' category' asyncRequestState' statusCode' new Exception(jsonString));                      }                  }                    if (status != null)                  {                      errorCallbackRaised = true;                      if (asyncRequestState != null && asyncRequestState.PubnubCallback != null)                      {                          asyncRequestState.PubnubCallback.OnResponse(default(T)' status);                      }                      else                      {                          Announce(status);                      }                  }              }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: try              {                  string multiChannel = (channels != null) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "";                  string multiChannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : "";                    if (!string.IsNullOrEmpty(jsonString))                  {                      if (!string.IsNullOrEmpty(jsonString))                      {                          object deserializedResult = jsonLib.DeserializeToObject(jsonString);                          List<object> result1 = ((IEnumerable)deserializedResult).Cast<object>().ToList();                            if (result1 != null && result1.Count > 0)                          {                              result = result1;                          }                            switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }                          //switch stmt end                      }                  }              }              catch { /* ignore */ }
Magic Number,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The following statement contains a magic number: if (pubnubConfig.ReconnectionPolicy == PNReconnectionPolicy.EXPONENTIAL)              {                  timerInterval = (int)(Math.Pow(2' ConnectionErrors) - 1);                  if (timerInterval > MAXEXPONENTIALBACKOFF)                  {                      timerInterval = MINEXPONENTIALBACKOFF;                      ConnectionErrors = 1;                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval > MAXEXPONENTIALBACKOFF"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity);                  }                  else if (timerInterval < 1)                  {                      timerInterval = MINEXPONENTIALBACKOFF;                  }                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timerInterval.ToString())' pubnubConfig.LogVerbosity);              }              else if (pubnubConfig.ReconnectionPolicy == PNReconnectionPolicy.LINEAR)              {                  timerInterval = INTERVAL;              }              else              {                  timerInterval = -1;              }
Magic Number,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The following statement contains a magic number: try              {                  request.Method = (pubnubRequestState != null && pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation) ? "DELETE" : "GET";                  Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);                  System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();                  stopWatch.Start();                  response = await Task.Factory.FromAsync<HttpWebResponse>(request.BeginGetResponse' asyncPubnubResult => (HttpWebResponse)request.EndGetResponse(asyncPubnubResult)' pubnubRequestState).ConfigureAwait(false);                  stopWatch.Stop();                  if (pubnubConfig.EnableTelemetry && pubnubTelemetryMgr != null)                  {                      pubnubTelemetryMgr.StoreLatency(stopWatch.ElapsedMilliseconds' pubnubRequestState.ResponseType);                  }                  pubnubRequestState.Response = response;                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString()));                  using (StreamReader streamReader = new StreamReader(response.GetResponseStream()))                  {                      //Need to return this response   #if NET35 || NET40                      string jsonString = streamReader.ReadToEnd();  #else                      string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                      System.Diagnostics.Debug.WriteLine(jsonString);                      pubnubRequestState.GotJsonResponse = true;                       System.Diagnostics.Debug.WriteLine("");                      System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                        if (pubnubRequestState.Response != null)                      {  #if NET35 || NET40 || NET45 || NET461                          pubnubRequestState.Response.Close();  #endif                          pubnubRequestState.Response = null;                          pubnubRequestState.Request = null;                      }                        return jsonString;                  }              }              catch (WebException ex)              {                  if (ex.Response != null)                  {                      pubnubRequestState.Response = ex.Response as HttpWebResponse;                      using (StreamReader streamReader = new StreamReader(ex.Response.GetResponseStream()))                      {                          //Need to return this response   #if NET35 || NET40                          string jsonString = streamReader.ReadToEnd();  #else                          string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                          System.Diagnostics.Debug.WriteLine(jsonString);                          System.Diagnostics.Debug.WriteLine("");                          System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                          return jsonString;                      }                  }                    if (ex.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  && ex.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                  {                      throw;                  }                  return "";              }              catch              {                  throw;              }
Magic Number,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The following statement contains a magic number: try              {                  request.Method = "POST";                  Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);                    System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();                  stopWatch.Start();                    request.ContentType = "application/json";                    byte[] data = Encoding.UTF8.GetBytes(postData);                  using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false))                  {  #if NET35 || NET40                      requestStream.Write(data' 0' data.Length);                      requestStream.Flush();  #else                      await requestStream.WriteAsync(data' 0' data.Length).ConfigureAwait(false);                      await requestStream.FlushAsync().ConfigureAwait(false);  #endif                    }                    WebResponse response = await Task.Factory.FromAsync(request.BeginGetResponse' request.EndGetResponse' pubnubRequestState).ConfigureAwait(false);                  stopWatch.Stop();                  if (pubnubTelemetryMgr != null)                  {                      pubnubTelemetryMgr.StoreLatency(stopWatch.ElapsedMilliseconds' pubnubRequestState.ResponseType);                  }                  pubnubRequestState.Response = response as HttpWebResponse;                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse With POST for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString()));                  using (StreamReader streamReader = new StreamReader(response.GetResponseStream()))                  {                      //Need to return this response   #if NET35 || NET40                      string jsonString = streamReader.ReadToEnd();  #else                      string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                      System.Diagnostics.Debug.WriteLine(jsonString);                      System.Diagnostics.Debug.WriteLine("");                      System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                      pubnubRequestState.GotJsonResponse = true;                        if (pubnubRequestState.Response != null)                      {  #if NET35 || NET40 || NET45 || NET461                          pubnubRequestState.Response.Close();  #endif                          pubnubRequestState.Response = null;                          pubnubRequestState.Request = null;                      }                        return jsonString;                  }              }              catch (WebException ex)              {                  if (ex.Response != null)                  {                      pubnubRequestState.Response = ex.Response as HttpWebResponse;                      using (StreamReader streamReader = new StreamReader(ex.Response.GetResponseStream()))                      {                          //Need to return this response   #if NET35 || NET40                          string jsonString = streamReader.ReadToEnd();  #else                          string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                          System.Diagnostics.Debug.WriteLine(jsonString);                          System.Diagnostics.Debug.WriteLine("");                          System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                          return jsonString;                      }                  }                    if (ex.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  && ex.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                  {                      throw;                  }                  return "";              }              catch              {                  throw;              }
Magic Number,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The following statement contains a magic number: try              {                  request.Method = (pubnubRequestState != null && pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation) ? "DELETE" : "GET";                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before BeginGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                  System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();                  stopWatch.Start();                  IAsyncResult asyncResult = request.BeginGetResponse(new AsyncCallback(                      (asynchronousResult) => {                          RequestState<T> asyncRequestState = asynchronousResult.AsyncState as RequestState<T>;                          HttpWebRequest asyncWebRequest = asyncRequestState.Request as HttpWebRequest;                          if (asyncWebRequest != null)                          {                              System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                              HttpWebResponse asyncWebResponse = (HttpWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult);                              stopWatch.Stop();                              if (pubnubTelemetryMgr != null)                              {                                  pubnubTelemetryMgr.StoreLatency(stopWatch.ElapsedMilliseconds' pubnubRequestState.ResponseType);                              }                              asyncRequestState.Response = asyncWebResponse;                              System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                              using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                              {                                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                                  //Need to return this response                                   string jsonString = streamReader.ReadToEnd();                                  asyncRequestState.GotJsonResponse = true;                                    System.Diagnostics.Debug.WriteLine(jsonString);                                  System.Diagnostics.Debug.WriteLine("");                                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                                  taskComplete.TrySetResult(jsonString);                              }                              if (asyncRequestState.Response != null)                              {  #if NET35 || NET40 || NET45 || NET461                                  pubnubRequestState.Response.Close();  #endif                                  asyncRequestState.Response = null;                                  asyncRequestState.Request = null;                              }                          }                      }                      )' pubnubRequestState);                    Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);                  return taskComplete.Task.Result;              }              catch (WebException ex)              {                  if (ex.Response != null)                  {                      pubnubRequestState.Response = ex.Response as HttpWebResponse;                      using (StreamReader streamReader = new StreamReader(ex.Response.GetResponseStream()))                      {                          //Need to return this response   #if NET35 || NET40                          await Task.Factory.StartNew(() => { });                          string jsonString = streamReader.ReadToEnd();  #else                          string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                          System.Diagnostics.Debug.WriteLine(jsonString);                          System.Diagnostics.Debug.WriteLine("");                          System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                          return jsonString;                      }                  }                                    if (ex.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  && ex.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                  {                      taskComplete.TrySetException(ex);                  }                  return "";              }              catch (Exception ex)              {                  taskComplete.TrySetException(ex);                  return "";              }
Magic Number,PubnubApi,PubnubHttp,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The following statement contains a magic number: try              {                  request.Method = "POST";                  request.ContentType = "application/json";                    byte[] data = Encoding.UTF8.GetBytes(postData);                  System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();                  stopWatch.Start();  #if !NET35 && !NET40 && !NET45 && !NET461                  using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false))                  {                      requestStream.Write(data' 0' data.Length);                      requestStream.Flush();                  }  #else                  using (var requestStream = request.GetRequestStream())                  {                      requestStream.Write(data' 0' data.Length);                      requestStream.Flush();                  }  #endif                    IAsyncResult asyncResult = request.BeginGetResponse(new AsyncCallback(                      (asynchronousResult) => {                          RequestState<T> asyncRequestState = asynchronousResult.AsyncState as RequestState<T>;                          HttpWebRequest asyncWebRequest = asyncRequestState.Request as HttpWebRequest;                          if (asyncWebRequest != null)                          {                              System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                              HttpWebResponse asyncWebResponse = (HttpWebResponse)asyncWebRequest.EndGetResponse(asynchronousResult);                              stopWatch.Stop();                              if (pubnubTelemetryMgr != null)                              {                                  pubnubTelemetryMgr.StoreLatency(stopWatch.ElapsedMilliseconds' pubnubRequestState.ResponseType);                              }                              asyncRequestState.Response = asyncWebResponse;                              System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                              using (StreamReader streamReader = new StreamReader(asyncWebResponse.GetResponseStream()))                              {                                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                                  //Need to return this response                                   string jsonString = streamReader.ReadToEnd();                                  asyncRequestState.GotJsonResponse = true;                                    System.Diagnostics.Debug.WriteLine(jsonString);                                  System.Diagnostics.Debug.WriteLine("");                                  System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                                  taskComplete.TrySetResult(jsonString);                              }                              if (asyncRequestState.Response != null)                              {  #if NET35 || NET40 || NET45 || NET461                                  pubnubRequestState.Response.Close();  #endif                                  asyncRequestState.Response = null;                                  asyncRequestState.Request = null;                              }                            }                      }                      )' pubnubRequestState);                    Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);                  return taskComplete.Task.Result;              }              catch (WebException ex)              {                  if (ex.Response != null)                  {                      pubnubRequestState.Response = ex.Response as HttpWebResponse;                      using (StreamReader streamReader = new StreamReader(ex.Response.GetResponseStream()))                      {                          //Need to return this response   #if NET35 || NET40                          await Task.Factory.StartNew(() => { });                          string jsonString = streamReader.ReadToEnd();  #else                          string jsonString = await streamReader.ReadToEndAsync().ConfigureAwait(false);  #endif                          System.Diagnostics.Debug.WriteLine(jsonString);                          System.Diagnostics.Debug.WriteLine("");                          System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture)));                          return jsonString;                      }                  }                    if (ex.Message.IndexOf("The request was aborted: The request was canceled") == -1                                  && ex.Message.IndexOf("Machine suspend mode enabled. No request will be processed.") == -1)                  {                      taskComplete.TrySetException(ex);                  }                  return "";              }              catch (Exception ex)              {                  taskComplete.TrySetException(ex);                  return "";              }
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ROTATE_LEFT,The following statement contains a magic number: return (x << n) | (x >> (32 - n));
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: index = (int)((this.count[0] >> 3) & 0x3F);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))              {                  this.count[1]++;              }
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: if ((this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3))              {                  this.count[1]++;              }
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: this.count[1] += (uint)count >> 29;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: partLen = 64 - index;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)  			{  				System.Buffer.BlockCopy(input' offset' this.buffer' index' partLen);  				Transform(this.buffer' 0);    				for (i = partLen; i + 63 < count; i += 64)  					Transform(input' offset + i);    				index = 0;  			}  			else  				i = 0;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: if (count >= partLen)  			{  				System.Buffer.BlockCopy(input' offset' this.buffer' index' partLen);  				Transform(this.buffer' 0);    				for (i = partLen; i + 63 < count; i += 64)  					Transform(input' offset + i);    				index = 0;  			}  			else  				i = 0;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: byte[] digest = new byte[16];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte[8];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: Encode(bits' 0' this.count' 0' 8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: index = (int)((uint)(this.count[0] >> 3) & 0x3f);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: HashCore(bits' 0' 8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: Encode(digest' 0' state' 0' 16);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: state[2] = 0;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: state[3] = 0;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint[] x = new uint[16];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: Decode(x' 0' block' offset' 64);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[2]' S13' 0x242070db);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[3]' S14' 0xc1bdceee);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[4]' S11' 0xf57c0faf);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[5]' S12' 0x4787c62a);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[6]' S13' 0xa8304613);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[7]' S14' 0xfd469501);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[8]' S11' 0x698098d8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[9]' S12' 0x8b44f7af);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[10]' S13' 0xffff5bb1);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[11]' S14' 0x895cd7be);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[12]' S11' 0x6b901122);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[13]' S12' 0xfd987193);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[14]' S13' 0xa679438e);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[15]' S14' 0x49b40821);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[6]' S22' 0xc040b340);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[11]' S23' 0x265e5a51);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[5]' S21' 0xd62f105d);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[10]' S22' 0x2441453);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[15]' S23' 0xd8a1e681);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[4]' S24' 0xe7d3fbc8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[9]' S21' 0x21e1cde6);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[14]' S22' 0xc33707d6);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[3]' S23' 0xf4d50d87);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[8]' S24' 0x455a14ed);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[13]' S21' 0xa9e3e905);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[2]' S22' 0xfcefa3f8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[7]' S23' 0x676f02d9);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[12]' S24' 0x8d2a4c8a);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[5]' S31' 0xfffa3942);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[8]' S32' 0x8771f681);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[11]' S33' 0x6d9d6122);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[14]' S34' 0xfde5380c);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[4]' S32' 0x4bdecfa9);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[7]' S33' 0xf6bb4b60);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[10]' S34' 0xbebfbc70);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[13]' S31' 0x289b7ec6);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[3]' S33' 0xd4ef3085);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[6]' S34' 0x4881d05);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[9]' S31' 0xd9d4d039);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[12]' S32' 0xe6db99e5);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[15]' S33' 0x1fa27cf8);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[2]' S34' 0xc4ac5665);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[7]' S42' 0x432aff97);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[14]' S43' 0xab9423a7);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[5]' S44' 0xfc93a039);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[12]' S41' 0x655b59c3);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[3]' S42' 0x8f0ccc92);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[10]' S43' 0xffeff47d);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[8]' S41' 0x6fa87e4f);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[15]' S42' 0xfe2ce6e0);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[6]' S43' 0xa3014314);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[13]' S44' 0x4e0811a1);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[4]' S41' 0xf7537e82);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[11]' S42' 0xbd3af235);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[2]' S43' 0x2ad7d2bb);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[9]' S44' 0xeb86d391);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: state[2] += c;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: state[3] += d;
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: for (i = inputOffset' j = outputOffset; j < end; i++' j += 4)  			{  				output[j] = (byte)(input[i] & 0xff);  				output[j + 1] = (byte)((input[i] >> 8) & 0xff);  				output[j + 2] = (byte)((input[i] >> 16) & 0xff);  				output[j + 3] = (byte)((input[i] >> 24) & 0xff);  			}
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: for (i = outputOffset' j = inputOffset; j < end; i++' j += 4)  				output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,PubnubApi,MD5,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ComputeHash,The following statement contains a magic number: while (0 < (count = inputStream.Read(buffer' 0' 4096)))  			{  				HashCore(buffer' 0' count);  			}
Magic Number,PubnubApi,PubnubCryptoBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCryptoBase.cs,GetEncryptionKey,The following statement contains a magic number: string strKeySHA256Hash = strKeySHA256HashRaw.Replace("-"' "").Substring(0' 32);
Magic Number,PubnubApi,PubnubCryptoBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCryptoBase.cs,EncodeNonAsciiCharacters,The following statement contains a magic number: foreach (char c in value)              {                  if (c > 127)                  {                      // This character is too big for ASCII                      string encodedValue = "\\u" + ((int)c).ToString("x4");                      sb.Append(encodedValue);                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: long timeStamp = Convert.ToInt64(timeSpan.TotalSeconds) * 10000000;
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: try              {                  double timeStamp = unixNanoSecondTime / 10000000;                  DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);                  return dateTime;              }              catch              {                  return DateTime.MinValue;              }
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: try              {                  double timeStamp = unixNanoSecondTime / 10000000;                  DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);                  return dateTime;              }              catch              {                  return DateTime.MinValue;              }
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: if (tried)              {                  try                  {                      double timeStamp = numericTime / 10000000;                      DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);                      return dateTime;                  }                  catch                  {                      return DateTime.MinValue;                  }              }              else              {                  return DateTime.MinValue;              }
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: if (tried)              {                  try                  {                      double timeStamp = numericTime / 10000000;                      DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);                      return dateTime;                  }                  catch                  {                      return DateTime.MinValue;                  }              }              else              {                  return DateTime.MinValue;              }
Magic Number,PubnubApi.EndPoint,FireOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Sync,The following statement contains a magic number: Task<PNPublishResult> task = Task<PNPublishResult>.Factory.StartNew(() =>              {                  syncRequest = true;                  syncEvent = new System.Threading.ManualResetEvent(false);                  Fire(this.channelName' this.msg' false' this.ttl' this.userMetadata' new SyncPublishResult());                  syncEvent.WaitOne(config.NonSubscribeRequestTimeout * 1000);                    return SyncResult;              }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);
Magic Number,PubnubApi.EndPoint,PublishOperation,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Sync,The following statement contains a magic number: Task<PNPublishResult> task = Task<PNPublishResult>.Factory.StartNew(() =>              {                  syncRequest = true;                  syncEvent = new System.Threading.ManualResetEvent(false);                  Publish(this.channelName' this.msg' this.storeInHistory' this.ttl' this.userMetadata' new SyncPublishResult());                  syncEvent.WaitOne(config.NonSubscribeRequestTimeout * 1000);                    return SyncResult;              }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The following statement contains a magic number: try              {                  bool channelGroupSubscribeOnly = false;                  SubscribeDisconnected[PubnubInstance.InstanceId] = false;                    if (rawChannels.Length > 0)                  {                      if (rawChannels.Length != rawChannels.Distinct().Count())                      {                          rawChannels = rawChannels.Distinct().ToArray();                      }                        for (int index = 0; index < rawChannels.Length; index++)                      {                          if (rawChannels[index].Trim().Length > 0)                          {                              string channelName = rawChannels[index].Trim();                              if (!string.IsNullOrEmpty(channelName))                              {                                  if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName))                                  {                                      validChannels.Add(channelName);                                  }                              }                          }                      }                  }                    if (rawChannelGroups != null && rawChannelGroups.Length > 0)                  {                      if (rawChannelGroups.Length != rawChannelGroups.Distinct().Count())                      {                          rawChannelGroups = rawChannelGroups.Distinct().ToArray();                      }                        for (int index = 0; index < rawChannelGroups.Length; index++)                      {                          if (rawChannelGroups[index].Trim().Length > 0)                          {                              string channelGroupName = rawChannelGroups[index].Trim();                              if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName))                              {                                  validChannelGroups.Add(channelGroupName);                              }                          }                      }                  }                    if (validChannels.Count > 0 || validChannelGroups.Count > 0)                  {                      //Retrieve the current channels already subscribed previously and terminate them                      string[] currentChannels = MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                      string[] currentChannelGroups = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                        if (currentChannels != null && currentChannels.Length >= 0)                      {                          string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : "";                          if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId))                          {                              List<string> keysList = ChannelRequest[PubnubInstance.InstanceId].Keys.ToList();                              for (int keyIndex = 0; keyIndex < keysList.Count; keyIndex++)                              {                                  string multiChannelName = keysList[keyIndex];                                  if (ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannelName))                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      HttpWebRequest webRequest = ChannelRequest[PubnubInstance.InstanceId][multiChannelName];                                      ChannelRequest[PubnubInstance.InstanceId][multiChannelName] = null;                                        HttpWebRequest removedRequest;                                      bool removedChannel = ChannelRequest[PubnubInstance.InstanceId].TryRemove(multiChannelName' out removedRequest);                                      if (removedChannel)                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      }                                      else                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      }                                      if (webRequest != null)                                          TerminatePendingWebRequest(webRequest);                                  }                                  else                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                  }                              }                          }                          else                          {                              LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to find instance id = {1} from _channelRequest."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubInstance.InstanceId)' config.LogVerbosity);                          }                      }                        TerminateCurrentSubscriberRequest();                        //Add the valid channels to the channels subscribe list for tracking                      for (int index = 0; index < validChannels.Count; index++)                      {                          string currentLoopChannel = validChannels[index].ToString();                          MultiChannelSubscribe[PubnubInstance.InstanceId].GetOrAdd(currentLoopChannel' 0);                      }                          for (int index = 0; index < validChannelGroups.Count; index++)                      {                          string currentLoopChannelGroup = validChannelGroups[index].ToString();                          MultiChannelGroupSubscribe[PubnubInstance.InstanceId].GetOrAdd(currentLoopChannelGroup' 0);                      }                        //Get all the channels                      string[] channels = MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                      string[] channelGroups = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                        if (channelGroups != null && channelGroups.Length > 0 && (channels == null || channels.Length == 0))                      {                          channelGroupSubscribeOnly = true;                      }                        RequestState<T> state = new RequestState<T>();                      if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId))                      {                          if (channelGroupSubscribeOnly)                          {                              ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate("'"' state.Request' (key' oldValue) => state.Request);                          }                          else                          {                              ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(string.Join("'"' channels.OrderBy(x => x).ToArray())' state.Request' (key' oldValue) => state.Request);                          }                      }                        ResetInternetCheckSettings(channels' channelGroups);                      MultiChannelSubscribeRequest<T>(responseType' channels' channelGroups' 0' false' initialSubscribeUrlParams);                        if (SubscribeHeartbeatCheckTimer != null)                      {                          try                          {                              SubscribeHeartbeatCheckTimer.Change(Timeout.Infinite' Timeout.Infinite);                              SubscribeHeartbeatCheckTimer.Dispose();                              SubscribeHeartbeatCheckTimer = null;                          }                          catch {  /* ignore */ }                      }                      SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 1000' config.SubscribeTimeout * 1000);                  }              }              catch(Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The following statement contains a magic number: try              {                  bool channelGroupSubscribeOnly = false;                  SubscribeDisconnected[PubnubInstance.InstanceId] = false;                    if (rawChannels.Length > 0)                  {                      if (rawChannels.Length != rawChannels.Distinct().Count())                      {                          rawChannels = rawChannels.Distinct().ToArray();                      }                        for (int index = 0; index < rawChannels.Length; index++)                      {                          if (rawChannels[index].Trim().Length > 0)                          {                              string channelName = rawChannels[index].Trim();                              if (!string.IsNullOrEmpty(channelName))                              {                                  if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName))                                  {                                      validChannels.Add(channelName);                                  }                              }                          }                      }                  }                    if (rawChannelGroups != null && rawChannelGroups.Length > 0)                  {                      if (rawChannelGroups.Length != rawChannelGroups.Distinct().Count())                      {                          rawChannelGroups = rawChannelGroups.Distinct().ToArray();                      }                        for (int index = 0; index < rawChannelGroups.Length; index++)                      {                          if (rawChannelGroups[index].Trim().Length > 0)                          {                              string channelGroupName = rawChannelGroups[index].Trim();                              if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName))                              {                                  validChannelGroups.Add(channelGroupName);                              }                          }                      }                  }                    if (validChannels.Count > 0 || validChannelGroups.Count > 0)                  {                      //Retrieve the current channels already subscribed previously and terminate them                      string[] currentChannels = MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                      string[] currentChannelGroups = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                        if (currentChannels != null && currentChannels.Length >= 0)                      {                          string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : "";                          if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId))                          {                              List<string> keysList = ChannelRequest[PubnubInstance.InstanceId].Keys.ToList();                              for (int keyIndex = 0; keyIndex < keysList.Count; keyIndex++)                              {                                  string multiChannelName = keysList[keyIndex];                                  if (ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannelName))                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      HttpWebRequest webRequest = ChannelRequest[PubnubInstance.InstanceId][multiChannelName];                                      ChannelRequest[PubnubInstance.InstanceId][multiChannelName] = null;                                        HttpWebRequest removedRequest;                                      bool removedChannel = ChannelRequest[PubnubInstance.InstanceId].TryRemove(multiChannelName' out removedRequest);                                      if (removedChannel)                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      }                                      else                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                      }                                      if (webRequest != null)                                          TerminatePendingWebRequest(webRequest);                                  }                                  else                                  {                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity);                                  }                              }                          }                          else                          {                              LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to find instance id = {1} from _channelRequest."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubInstance.InstanceId)' config.LogVerbosity);                          }                      }                        TerminateCurrentSubscriberRequest();                        //Add the valid channels to the channels subscribe list for tracking                      for (int index = 0; index < validChannels.Count; index++)                      {                          string currentLoopChannel = validChannels[index].ToString();                          MultiChannelSubscribe[PubnubInstance.InstanceId].GetOrAdd(currentLoopChannel' 0);                      }                          for (int index = 0; index < validChannelGroups.Count; index++)                      {                          string currentLoopChannelGroup = validChannelGroups[index].ToString();                          MultiChannelGroupSubscribe[PubnubInstance.InstanceId].GetOrAdd(currentLoopChannelGroup' 0);                      }                        //Get all the channels                      string[] channels = MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                      string[] channelGroups = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.ToArray<string>();                        if (channelGroups != null && channelGroups.Length > 0 && (channels == null || channels.Length == 0))                      {                          channelGroupSubscribeOnly = true;                      }                        RequestState<T> state = new RequestState<T>();                      if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId))                      {                          if (channelGroupSubscribeOnly)                          {                              ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate("'"' state.Request' (key' oldValue) => state.Request);                          }                          else                          {                              ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(string.Join("'"' channels.OrderBy(x => x).ToArray())' state.Request' (key' oldValue) => state.Request);                          }                      }                        ResetInternetCheckSettings(channels' channelGroups);                      MultiChannelSubscribeRequest<T>(responseType' channels' channelGroups' 0' false' initialSubscribeUrlParams);                        if (SubscribeHeartbeatCheckTimer != null)                      {                          try                          {                              SubscribeHeartbeatCheckTimer.Change(Timeout.Infinite' Timeout.Infinite);                              SubscribeHeartbeatCheckTimer.Dispose();                              SubscribeHeartbeatCheckTimer = null;                          }                          catch {  /* ignore */ }                      }                      SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 1000' config.SubscribeTimeout * 1000);                  }              }              catch(Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: if (message != null && message.Count >= 3)              {                  if (message[message.Count - 1] is string[])                  {                      channels = message[message.Count - 1] as string[];                  }                  else                  {                      channels = message[message.Count - 1].ToString().Split(''');                  }                    if (channels.Length == 1 && channels[0] == "")                  {                      channels = new string[] { };                  }                  if (message.Count >= 4)                  {                      if (message[message.Count - 2] is string[])                      {                          channelGroups = message[message.Count - 2] as string[];                      }                      else if (message[message.Count - 2].ToString() != "")                      {                          channelGroups = message[message.Count - 2].ToString().Split(''');                      }                  }                    long timetoken = GetTimetokenFromMultiplexResult(message);                  System.Threading.Tasks.Task.Factory.StartNew(() =>                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity);                      MultiChannelSubscribeRequest<T>(type' channels' channelGroups' timetoken' false' null);                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The following statement contains a magic number: if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)))              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager ReconnectNetwork interval = {1} sec"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubNetworkTcpCheckIntervalInSeconds)' config.LogVerbosity);                    System.Threading.Timer timer;                    if (netState.Channels != null && netState.Channels.Length > 0)                  {                      string reconnectChannelTimerKey = string.Join("'"' netState.Channels.OrderBy(x => x).ToArray());                        if (!ChannelReconnectTimer[PubnubInstance.InstanceId].ContainsKey(reconnectChannelTimerKey))                      {                          timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                                (-1 == PubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : PubnubNetworkTcpCheckIntervalInSeconds * 1000);                          ChannelReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelTimerKey' timer' (key' oldState) => timer);                      }                  }                  else if (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)                  {                      string reconnectChannelGroupTimerKey = string.Join("'"' netState.ChannelGroups.OrderBy(x => x).ToArray());                        if (!ChannelGroupReconnectTimer[PubnubInstance.InstanceId].ContainsKey(reconnectChannelGroupTimerKey))                      {                          timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                                (-1 == PubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : PubnubNetworkTcpCheckIntervalInSeconds * 1000);                          ChannelGroupReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelGroupTimerKey' timer' (key' oldState) => timer);                      }                  }              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The following statement contains a magic number: if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)))              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager ReconnectNetwork interval = {1} sec"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubNetworkTcpCheckIntervalInSeconds)' config.LogVerbosity);                    System.Threading.Timer timer;                    if (netState.Channels != null && netState.Channels.Length > 0)                  {                      string reconnectChannelTimerKey = string.Join("'"' netState.Channels.OrderBy(x => x).ToArray());                        if (!ChannelReconnectTimer[PubnubInstance.InstanceId].ContainsKey(reconnectChannelTimerKey))                      {                          timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                                (-1 == PubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : PubnubNetworkTcpCheckIntervalInSeconds * 1000);                          ChannelReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelTimerKey' timer' (key' oldState) => timer);                      }                  }                  else if (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0)                  {                      string reconnectChannelGroupTimerKey = string.Join("'"' netState.ChannelGroups.OrderBy(x => x).ToArray());                        if (!ChannelGroupReconnectTimer[PubnubInstance.InstanceId].ContainsKey(reconnectChannelGroupTimerKey))                      {                          timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                                (-1 == PubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : PubnubNetworkTcpCheckIntervalInSeconds * 1000);                          ChannelGroupReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelGroupTimerKey' timer' (key' oldState) => timer);                      }                  }              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The following statement contains a magic number: if ((channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0))              {                  string channel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'";                  string channelGroup = (chananelGroups != null && chananelGroups.Length > 0) ? string.Join("'"' chananelGroups.OrderBy(x => x).ToArray()) : "";                    bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups);                  if (!networkConnection)                  {                      //Recheck for false alert with 1 sec delay  #if !NET35 && !NET40                      Task.Delay(1000).Wait();  #else                      Thread.Sleep(1000);  #endif                        networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups);                  }                  if (networkConnection)                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Network available for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                      if (!string.IsNullOrEmpty(channel) && ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(channel))                      {                          ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection);                      }                      if (!string.IsNullOrEmpty(channelGroup) && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup))                      {                          ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection);                      }                  }                  else                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No network for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                        PNStatusCategory errorCategory = PNStatusCategory.PNNetworkIssuesCategory;                      PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNSubscribeOperation' errorCategory' null' (int)HttpStatusCode.NotFound' new Exception("SDK Network related error"));                      status.AffectedChannels.AddRange(channels);                      status.AffectedChannels.AddRange(chananelGroups);                      Announce(status);                        return false;                  }              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No channels/channelgroups for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                  return false;              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The following statement contains a magic number: if ((channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0))              {                  bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups);                  if (networkConnection && PubnubInstance != null && SubscribeRequestTracker.ContainsKey(PubnubInstance.InstanceId))                  {                      DateTime lastSubscribeRequestTime = SubscribeRequestTracker[PubnubInstance.InstanceId];                      if ((DateTime.Now - lastSubscribeRequestTime).TotalSeconds <= config.SubscribeTimeout)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - ok. expected subscribe within threshold limit of SubscribeTimeout. No action needed"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                      }                      else if ((DateTime.Now - lastSubscribeRequestTime).TotalSeconds > 2*config.SubscribeTimeout)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling MultiChannelSubscribeRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                          Task.Factory.StartNew(() =>                          {                              TerminateCurrentSubscriberRequest();                              MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' channels' chananelGroups' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null);                          }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);                      }                      else                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling TerminateCurrentSubscriberRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                          Task.Factory.StartNew(() =>                          {                              TerminateCurrentSubscriberRequest();                          }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default);                      }                  }              }              else              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - StartSubscribeHeartbeatCheckCallback - No channels/cgs avaialable"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity);                  try                  {                      SubscribeHeartbeatCheckTimer.Change(Timeout.Infinite' Timeout.Infinite);                      SubscribeHeartbeatCheckTimer.Dispose();                      SubscribeHeartbeatCheckTimer = null;                        TerminateCurrentSubscriberRequest();                  }                  catch {  /* ignore */ }              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The following statement contains a magic number: if ((channels != null && channels.Length > 0 && channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                  || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0))              {                  RequestState<T> presenceHeartbeatState = new RequestState<T>();                  presenceHeartbeatState.Channels = channels;                  presenceHeartbeatState.ChannelGroups = channelGroups;                  presenceHeartbeatState.ResponseType = PNOperationType.PNHeartbeatOperation;                  presenceHeartbeatState.Request = null;                  presenceHeartbeatState.Response = null;                    if (config.PresenceInterval > 0)                  {                      PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000);                  }              }
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The following statement contains a magic number: if ((channels != null && channels.Length > 0 && channels.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0)                  || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s.Contains("-pnpres") == false).ToArray().Length > 0))              {                  RequestState<T> presenceHeartbeatState = new RequestState<T>();                  presenceHeartbeatState.Channels = channels;                  presenceHeartbeatState.ChannelGroups = channelGroups;                  presenceHeartbeatState.ResponseType = PNOperationType.PNHeartbeatOperation;                  presenceHeartbeatState.Request = null;                  presenceHeartbeatState.Response = null;                    if (config.PresenceInterval > 0)                  {                      PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000);                  }              }
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StartTelemetryTimer,The following statement contains a magic number: telemetryTimer = new Timer(OnTelemetryIntervalTimeout' null' 0' TELEMETRY_TIMER_IN_SEC * 1000);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The following statement contains a magic number: try              {                  string latencyEndPoint = EndpointNameForOperation(type);                  if (latencyMillisec > 0 && !string.IsNullOrEmpty(latencyEndPoint))                  {                      double epochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                      if (dicEndpointLatency.ContainsKey(latencyEndPoint))                      {                          dicEndpointLatency[latencyEndPoint].AddOrUpdate(epochMillisec' latencyMillisec' (key' oldValue) => latencyMillisec);                      }                      else                      {                          ConcurrentDictionary<double' long> elapsedInfo = new ConcurrentDictionary<double' long>();                          elapsedInfo.AddOrUpdate(epochMillisec' latencyMillisec' (o'n) => latencyMillisec);                          dicEndpointLatency.AddOrUpdate(latencyEndPoint' elapsedInfo'(o' n) => elapsedInfo);                      }                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency {1} latency = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' type' latencyMillisec)' pubnubConfig.LogVerbosity);                  }              }              catch (Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The following statement contains a magic number: try              {                  foreach (string key in dicEndpointLatency.Keys)                  {                      if (dicEndpointLatency[key] != null && dicEndpointLatency[key].Count > 0)                      {                            dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec                      }                  }              }              catch (Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The following statement contains a magic number: try              {                  foreach (string key in dicEndpointLatency.Keys)                  {                      if (dicEndpointLatency[key] != null && dicEndpointLatency[key].Count > 0)                      {                            dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec                      }                  }              }              catch (Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The following statement contains a magic number: try              {                  double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                  string[] latencyOpKeys = dicEndpointLatency.Keys.ToArray<string>();                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => latencyOpKeys count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' latencyOpKeys.Length)' pubnubConfig.LogVerbosity);                  for (int keyIndex = 0; keyIndex < latencyOpKeys.Length; keyIndex++)                  {                      string opKey = latencyOpKeys[keyIndex];                      ConcurrentDictionary<double' long> outdatedLatencyValue = dicEndpointLatency[opKey];                      if (dicEndpointLatency != null)                      {                          IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000);                          if (enumerableOutdatedLatencies != null)                          {                              Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value);                              if (dicOutdatedLatencies != null && dicOutdatedLatencies.Count > 0)                              {                                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity);                                  double[] outLatencyKeys = dicOutdatedLatencies.Keys.ToArray<double>();                                  for (int outdateIndex = 0; outdateIndex < outLatencyKeys.Length; outdateIndex++)                                  {                                      double outKey = outLatencyKeys[outdateIndex];                                      if (dicEndpointLatency[opKey].ContainsKey(outKey))                                      {                                          long removeOutdatedLatency;                                          if (!dicEndpointLatency[opKey].TryRemove(outKey' out removeOutdatedLatency))                                          {                                              LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity);                                          }                                      }                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);              }
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The following statement contains a magic number: try              {                  double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                  string[] latencyOpKeys = dicEndpointLatency.Keys.ToArray<string>();                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => latencyOpKeys count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' latencyOpKeys.Length)' pubnubConfig.LogVerbosity);                  for (int keyIndex = 0; keyIndex < latencyOpKeys.Length; keyIndex++)                  {                      string opKey = latencyOpKeys[keyIndex];                      ConcurrentDictionary<double' long> outdatedLatencyValue = dicEndpointLatency[opKey];                      if (dicEndpointLatency != null)                      {                          IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000);                          if (enumerableOutdatedLatencies != null)                          {                              Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value);                              if (dicOutdatedLatencies != null && dicOutdatedLatencies.Count > 0)                              {                                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity);                                  double[] outLatencyKeys = dicOutdatedLatencies.Keys.ToArray<double>();                                  for (int outdateIndex = 0; outdateIndex < outLatencyKeys.Length; outdateIndex++)                                  {                                      double outKey = outLatencyKeys[outdateIndex];                                      if (dicEndpointLatency[opKey].ContainsKey(outKey))                                      {                                          long removeOutdatedLatency;                                          if (!dicEndpointLatency[opKey].TryRemove(outKey' out removeOutdatedLatency))                                          {                                              LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity);                                          }                                      }                                  }                              }                          }                      }                  }              }              catch (Exception ex)              {                  LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);              }
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 53)' (91' 128))
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((99' 121)' (170' 192)' (204' 226))
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((170' 195)' (204' 229))
Missing Default,PubnubApi,NewtonsoftJsonDotNet,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,ConvertToDataType,The following switch statement is missing a default case: switch (dataType.FullName)              {                  case "System.Int32":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Int32)' CultureInfo.InvariantCulture);                      break;                  case "System.Int16":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Int16)' CultureInfo.InvariantCulture);                      break;                  case "System.UInt64":                      userMessage = Convert.ChangeType(inputValue' typeof(System.UInt64)' CultureInfo.InvariantCulture);                      break;                  case "System.UInt32":                      userMessage = Convert.ChangeType(inputValue' typeof(System.UInt32)' CultureInfo.InvariantCulture);                      break;                  case "System.UInt16":                      userMessage = Convert.ChangeType(inputValue' typeof(System.UInt16)' CultureInfo.InvariantCulture);                      break;                  case "System.Byte":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Byte)' CultureInfo.InvariantCulture);                      break;                  case "System.SByte":                      userMessage = Convert.ChangeType(inputValue' typeof(System.SByte)' CultureInfo.InvariantCulture);                      break;                  case "System.Decimal":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Decimal)' CultureInfo.InvariantCulture);                      break;                  case "System.Boolean":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Boolean)' CultureInfo.InvariantCulture);                      break;                  case "System.Double":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Double)' CultureInfo.InvariantCulture);                      break;                  case "System.Char":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Char)' CultureInfo.InvariantCulture);                      break;                  case "System.String":                      userMessage = Convert.ChangeType(inputValue' typeof(System.String)' CultureInfo.InvariantCulture);                      break;                  case "System.Object":                      userMessage = Convert.ChangeType(inputValue' typeof(System.Object)' CultureInfo.InvariantCulture);                      break;              }
Missing Default,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetMessageFromMultiplexResult,The following switch statement is missing a default case: switch (key.ToLowerInvariant())                              {                                  case "a":                                      msg.Shard = dicItem[key].ToString();                                      break;                                  case "b":                                      msg.SubscriptionMatch = dicItem[key].ToString();                                      break;                                  case "c":                                      msg.Channel = dicItem[key].ToString();                                      break;                                  case "d":                                      msg.Payload = dicItem[key];                                      break;                                  case "f":                                      msg.Flags = dicItem[key].ToString();                                      break;                                  case "i":                                      msg.IssuingClientId = dicItem[key].ToString();                                      break;                                  case "k":                                      msg.SubscribeKey = dicItem[key].ToString();                                      break;                                  case "s":                                      int seqNum;                                      Int32.TryParse(dicItem[key].ToString()' out seqNum);                                      msg.SequenceNumber = seqNum;                                      break;                                  case "o":                                      Dictionary<string' object> ttOriginMetaData = jsonLib.ConvertToDictionaryObject(dicItem[key]);                                      if (ttOriginMetaData != null && ttOriginMetaData.Count > 0)                                      {                                          TimetokenMetadata ttMeta = new TimetokenMetadata();                                            foreach (string metaKey in ttOriginMetaData.Keys)                                          {                                              if (metaKey.ToLowerInvariant().Equals("t"' StringComparison.CurrentCultureIgnoreCase))                                              {                                                  long timetoken;                                                  Int64.TryParse(ttOriginMetaData[metaKey].ToString()' out timetoken);                                                  ttMeta.Timetoken = timetoken;                                              }                                              else if (metaKey.ToLowerInvariant().Equals("r"' StringComparison.CurrentCultureIgnoreCase))                                              {                                                  ttMeta.Region = ttOriginMetaData[metaKey].ToString();                                              }                                          }                                          msg.OriginatingTimetoken = ttMeta;                                      }                                      break;                                  case "p":                                      Dictionary<string' object> ttPublishMetaData = jsonLib.ConvertToDictionaryObject(dicItem[key]);                                      if (ttPublishMetaData != null && ttPublishMetaData.Count > 0)                                      {                                          TimetokenMetadata ttMeta = new TimetokenMetadata();                                            foreach (string metaKey in ttPublishMetaData.Keys)                                          {                                              switch (metaKey.ToLowerInvariant())                                              {                                                  case "t":                                                      long timetoken;                                                      Int64.TryParse(ttPublishMetaData[metaKey].ToString()' out timetoken);                                                      ttMeta.Timetoken = timetoken;                                                      break;                                                  case "r":                                                      ttMeta.Region = ttPublishMetaData[metaKey].ToString();                                                      break;                                              }                                          }                                          msg.PublishTimetokenMetadata = ttMeta;                                      }                                      break;                                  case "u":                                      msg.UserMetadata = dicItem[key];                                      break;                              }
Missing Default,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetMessageFromMultiplexResult,The following switch statement is missing a default case: switch (metaKey.ToLowerInvariant())                                              {                                                  case "t":                                                      long timetoken;                                                      Int64.TryParse(ttPublishMetaData[metaKey].ToString()' out timetoken);                                                      ttMeta.Timetoken = timetoken;                                                      break;                                                  case "r":                                                      ttMeta.Region = ttPublishMetaData[metaKey].ToString();                                                      break;                                              }
Missing Default,PubnubApi,PubnubCoreBase,C:\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following switch statement is missing a default case: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.Leave:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                                  result = SecureMessage.Instance(pubnubConfig' jsonLib' pubnubLog).DecodeDecryptLoop(result' channels' channelGroups' callback);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                          }
