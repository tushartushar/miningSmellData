Implementation smell,Namespace,Class,File,Method,Description
Long Method,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The method has 1127 lines of code.
Complex Method,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,Cyclomatic complexity of the method is 17
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "            Console.WriteLine("Presence Heartbeat Timeout disabled by default. (default). Enter the value to enable' else press ENTER"); " is 124.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                        Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup."); " is 127.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                        Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER"); " is 122.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                        //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList }; " is 149.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                        .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                        .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                        .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                                        .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } })); " is 148.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                        Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key"); " is 139.
Long Statement,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The length of the statement  "                        Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key"); " is 130.
Long Statement,PubnubApiDemo,DemoSubscribeCallback,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Status,The length of the statement  "            string msg = string.Format("Operation: {0}; Category: {1};  StatusCode: {2}"' status.Operation' status.Category' status.StatusCode); " is 132.
Long Statement,PubnubApiDemo,DemoSubscribeCallback,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Status,The length of the statement  "                //Console.WriteLine("CONNECTED {0} Channels = {1}' ChannelGroups = {2}"' status.StatusCode' string.Join("'"' status.AffectedChannels)' string.Join("'"' status.AffectedChannelGroups)); " is 183.
Long Statement,PubnubApiDemo,DemoSubscribeCallback,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Status,The length of the statement  "                //Console.WriteLine("RE-CONNECTED {0} Channels = {1}' ChannelGroups = {2}"' status.StatusCode' string.Join("'"' status.AffectedChannels)' string.Join("'"' status.AffectedChannelGroups)); " is 186.
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
Magic Number,PubnubApiDemo,PubnubExample,C:\repos\pubnub_c-sharp\src\Examples\PubnubApi.ConsoleExample\PubnubExample.cs,Main,The following statement contains a magic number: while (!exitFlag)              {                  if (currentUserChoice < 1 || (currentUserChoice > 40 && currentUserChoice != 99))                  {                      Console.WriteLine("ENTER 1 FOR Subscribe channel/channelgroup");                      Console.WriteLine("ENTER 2 FOR Publish");                      Console.WriteLine("ENTER 3 FOR History");                      Console.WriteLine("ENTER 4 FOR Here_Now");                      Console.WriteLine("ENTER 5 FOR Unsubscribe");                      Console.WriteLine("ENTER 6 FOR Time");                      Console.WriteLine("ENTER 7 FOR Disconnect/Reconnect existing Subscriber(s) (when internet is available)");                      Console.WriteLine("ENTER 8 FOR Grant Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 9 FOR Audit Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 10 FOR Revoke Access to channel/ChannelGroup");                      Console.WriteLine("ENTER 11 TO Simulate Machine Sleep Mode");                      Console.WriteLine("ENTER 12 TO Simulate Machine Awake Mode");                      Console.WriteLine("Enter 13 TO Set User State by Add/Modify Key-Pair");                      Console.WriteLine("Enter 14 TO Set User State by Deleting existing Key-Pair");                      Console.WriteLine("Enter 15 TO Get User State");                      Console.WriteLine("Enter 16 FOR WhereNow");                      Console.WriteLine("Enter 17 TO change UUID. (Current value = {0})"' config.Uuid);                      Console.WriteLine("Enter 18 FOR Disconnect");                      Console.WriteLine("Enter 19 FOR Reconnect");                      Console.WriteLine("Enter 20 FOR UnsubscribeAll");                      Console.WriteLine("Enter 21 FOR GetSubscribeChannels");                      Console.WriteLine("Enter 22 FOR GetSubscribeChannelGroups");                      Console.WriteLine("Enter 23 FOR DeleteMessages");                      Console.WriteLine("Enter 31 FOR Push - Register Device");                      Console.WriteLine("Enter 32 FOR Push - Remove Channel");                      Console.WriteLine("Enter 33 FOR Push - Get Current Channels");                      Console.WriteLine("Enter 34 FOR Push - Unregister Device");                      Console.WriteLine("Enter 38 FOR Channel Group - Add channel(s)");                      Console.WriteLine("Enter 39 FOR Channel Group - Remove channel/group/namespace");                      Console.WriteLine("Enter 40 FOR Channel Group - Get channel(s)/namespace(s)");                      Console.WriteLine("ENTER 99 FOR EXIT OR QUIT");                        userinput = Console.ReadLine();                  }                  switch (userinput)                  {                      case "99":                          exitFlag = true;                          pubnub.Destroy();                          break;                      case "1":                          Console.WriteLine("Enter CHANNEL name for subscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group(s)' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter CHANNEL GROUP name for subscribe. Use comma to enter multiple channel groups.");                          Console.WriteLine("To denote a namespaced CHANNEL GROUP' use the colon (:) character with the format namespace:channelgroup.");                          Console.WriteLine("NOTE: If you want to consider only Channel(s)' assuming you already entered ' just hit ENTER");                          channelGroup = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel Group= {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run subscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running subscribe()");                                pubnub.Subscribe<object>()                                  .WithPresence()                                  .Channels(channel.Split('''))                                  .ChannelGroups(channelGroup.Split('''))                                  .Execute();                          }                          break;                      case "2":                          Console.WriteLine("Enter CHANNEL name for publish.");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                            if (channel == "")                          {                              Console.WriteLine("Invalid CHANNEL name");                              break;                          }                            bool usePost = false;                          Console.WriteLine("UsePOST? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string userPostString = Console.ReadLine();                          if (userPostString.ToLower() == "y")                          {                              usePost = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("UsePOST = {0}"' usePost.ToString()));                          Console.ResetColor();                            bool useSync = false;                          Console.WriteLine("Use Sync? Enter Y for Yes or N for NO. To accept default(N)' just press ENTER");                          string useSyncString = Console.ReadLine();                          if (useSyncString.ToLower() == "y")                          {                              useSync = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Sync = {0}"' usePost.ToString()));                          Console.ResetColor();                            Console.WriteLine("Store In History? Enter Y for Yes or N for No. To accept default(Y)' just press ENTER");                          string storeInHistory = Console.ReadLine();                          bool store = true;                          if (storeInHistory.ToLower() == "n")                          {                              store = false;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Store In History = {0}"' storeInHistory));                          Console.ResetColor();                            Console.WriteLine("Enter User Meta Data in JSON dictionary format. If you don't want to enter for now' just press ENTER");                          string jsonUserMetaData = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Entered User Meta Data = {0}"' jsonUserMetaData));                          Console.ResetColor();                            Dictionary<string' object> meta = null;                          if (!string.IsNullOrEmpty(jsonUserMetaData))                          {                              meta = pubnub.JsonPluggableLibrary.DeserializeToObject<Dictionary<string' object>>(jsonUserMetaData);                              if (meta == null)                              {                                  Console.ForegroundColor = ConsoleColor.Red;                                  Console.WriteLine("INVALID META DATA");                                  Console.ResetColor();                              }                          }                              /* TO TEST SMALL TEXT PUBLISH ONLY */                          Console.WriteLine("Enter the message for publish and press ENTER key to submit");                          //string publishMsg = Console.ReadLine();                            /* UNCOMMENT THE FOLLOWING CODE BLOCK TO TEST LARGE TEXT PUBLISH ONLY */                          #region Code To Test Large Text Publish                          ConsoleKeyInfo enteredKey;                          StringBuilder publishBuilder = new StringBuilder();                          do                          {                              enteredKey = Console.ReadKey(); //This logic is being used to capture > 2K input in console window                              if (enteredKey.Key != ConsoleKey.Enter)                              {                                  publishBuilder.Append(enteredKey.KeyChar);                              }                          } while (enteredKey.Key != ConsoleKey.Enter);                          string publishMsg = publishBuilder.ToString();                          #endregion                            Console.WriteLine("Running publish()");                          //UserCreated userCreated = new UserCreated();                          //userCreated.TimeStamp = DateTime.Now;                          //List<Phone> phoneList = new List<Phone>();                          //phoneList.Add(new Phone() { Number = "111-222-2222"' PhoneType = PhoneType.Mobile' Extenion = "11" });                          //userCreated.User = new User { Id = 11' Name = "Doe"' Addressee = new Addressee { Id = Guid.NewGuid()' Street = "My Street" }' Phones = phoneList };                            //pubnub.Publish()                          //    .Channel(channel)                          //    .Message(userCreated)                          //    .Meta(meta)                          //    .ShouldStore(store).UsePOST(usePost)                          //    .Async(new PNPublishResultExt((r' s) => { Console.WriteLine(r.Timetoken); }));                              double doubleData;                          int intData;                          if (int.TryParse(publishMsg' out intData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(intData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else if (double.TryParse(publishMsg' out doubleData)) //capture numeric data                          {                              pubnub.Publish().Channel(channel).Message(doubleData).Meta(meta).ShouldStore(store).UsePOST(usePost)                                  .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                          }                          else                          {                              //check whether any numeric is sent in double quotes                              if (publishMsg.IndexOf("\"") == 0 && publishMsg.LastIndexOf("\"") == publishMsg.Length - 1)                              {                                  string strMsg = publishMsg.Substring(1' publishMsg.Length - 2);                                  if (int.TryParse(strMsg' out intData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else if (double.TryParse(strMsg' out doubleData))                                  {                                      pubnub.Publish().Channel(channel).Message(strMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                                  else                                  {                                      pubnub.Publish().Channel(channel).Message(publishMsg).Meta(meta).ShouldStore(store).UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                              else                              {                                  if (useSync)                                  {                                      PNPublishResult pubRes = pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost).Sync();                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(pubRes));                                  }                                  else                                  {                                      pubnub.Publish()                                          .Channel(channel)                                          .Message(publishMsg)                                          .Meta(meta)                                          .ShouldStore(store)                                          .UsePOST(usePost)                                          .Async(new PNPublishResultExt((r' s) => { if (s.Error) { Console.WriteLine(s.ErrorData.Information); } else { Console.WriteLine(r.Timetoken); } }));                                  }                              }                          }                          break;                      case "3":                          Console.WriteLine("Enter CHANNEL name for History");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running history()");                          pubnub.History()                              .Channel(channel)                              .Reverse(false)                              .Count(100)                              .IncludeTimetoken(true)                              .Async(new PNHistoryResultExt(                                  (r' s) =>                                  {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "4":                          bool showUUID = true;                          bool includeUserState = false;                            Console.WriteLine("Enter CHANNEL name for HereNow");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            Console.WriteLine("Show UUID List? Y or N? Default is Y. Press N for No Else press ENTER");                          string userChoiceShowUUID = Console.ReadLine();                          if (userChoiceShowUUID.ToLower() == "n")                          {                              showUUID = false;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Show UUID = {0}"' showUUID));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Include User State? Y or N? Default is N. Press Y for Yes Else press ENTER");                          string userChoiceIncludeUserState = Console.ReadLine();                          if (userChoiceIncludeUserState.ToLower() == "y")                          {                              includeUserState = true;                          }                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Include User State = {0}"' includeUserState));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Here_Now()");                          pubnub.HereNow()                              .Channels(channel.Split('''))                              .ChannelGroups(channelGroup.Split('''))                              .IncludeUUIDs(showUUID)                              .IncludeState(includeUserState)                              .Async(new PNHereNowResultEx(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "5":                          Console.WriteLine("Enter CHANNEL name for Unsubscribe. Use comma to enter multiple channels.");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          channel = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          channelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                            if (channel.Length <= 0 && channelGroup.Length <= 0)                          {                              Console.WriteLine("To run unsubscribe()' atleast provide either channel name or channel group name or both");                          }                          else                          {                              Console.WriteLine("Running unsubscribe()");                              pubnub.Unsubscribe<object>()                                  .Channels(new string[] { channel })                                  .ChannelGroups(new string[] { channelGroup })                                  .Execute();                            }                          break;                      case "6":                          Console.WriteLine("Running time()");                          pubnub.Time()                                  .Async(                                      new PNTimeResultExt(                                          (r' s) => {                                              Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                          }                                      ));                          break;                      case "7":                          Console.WriteLine("Running Disconnect/auto-Reconnect Subscriber Request Connection");                          pubnub.TerminateCurrentSubscriberRequest();                          break;                        case "8":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Grant.");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Grant.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                          string[] channelList = channel.Split(''');                          string[] channelGroupList = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Grant (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authGrant = Console.ReadLine();                          string[] authKeyList = authGrant.Split(''');                            Console.WriteLine("Read Access? Enter Y for Yes (default)' N for No.");                          string readAccess = Console.ReadLine();                          bool read = (readAccess.ToLower() == "n") ? false : true;                            bool write = false;                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine("Write Access? Enter Y for Yes (default)' N for No.");                              string writeAccess = Console.ReadLine();                              write = (writeAccess.ToLower() == "n") ? false : true;                          }                            bool manage = false;                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine("Manage Access? Enter Y for Yes (default)' N for No.");                              string manageAccess = Console.ReadLine();                              manage = (manageAccess.ToLower() == "n") ? false : true;                          }                          Console.WriteLine("How many minutes do you want to allow Grant Access? Enter the number of minutes.");                          Console.WriteLine("Default = 1440 minutes (24 hours). Press ENTER now to accept default value.");                          int grantTimeLimitInMinutes;                          string grantTimeLimit = Console.ReadLine();                          if (string.IsNullOrEmpty(grantTimeLimit.Trim()))                          {                              grantTimeLimitInMinutes = 1440;                          }                          else                          {                              Int32.TryParse(grantTimeLimit' out grantTimeLimitInMinutes);                              if (grantTimeLimitInMinutes < 0) grantTimeLimitInMinutes = 1440;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.WriteLine(string.Format("auth_key = {0}"' authGrant));                          Console.WriteLine(string.Format("Read Access = {0}"' read.ToString()));                          if (channel.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Write Access = {0}"' write.ToString()));                          }                          if (channelGroup.Trim().Length > 0)                          {                              Console.WriteLine(string.Format("Manage Access = {0}"' manage.ToString()));                          }                          Console.WriteLine(string.Format("Grant Access Time Limit = {0}"' grantTimeLimitInMinutes.ToString()));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamGrant()");                            pubnub.Grant()                              .Channels(channelList)                              .ChannelGroups(channelGroupList)                              .AuthKeys(authKeyList)                              .Read(read)                              .Write(write)                              .Manage(manage)                              .TTL(grantTimeLimitInMinutes)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "9":                          Console.WriteLine("Enter CHANNEL name for PAM Audit");                          Console.WriteLine("To enter CHANNEL GROUP name' just hit ENTER");                          channel = Console.ReadLine();                            if (channel.Trim().Length <= 0)                          {                              Console.WriteLine("Enter CHANNEL GROUP name for PAM Audit.");                              channelGroup = Console.ReadLine();                              channel = "";                          }                          else                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Enter the auth_key for PAM Audit (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authAudit = Console.ReadLine();                          string[] authKeyListAudit = authAudit.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authAudit));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamAudit()");                            pubnub.Audit()                              .Channel(channel)                              .ChannelGroup(channelGroup)                              .AuthKeys(authKeyListAudit)                              .Async(new PNAccessManagerAuditResultExt(                                  (r' s) => {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                               );                          break;                      case "10":                          Console.WriteLine("Enter CHANNEL name(s) for PAM Revoke");                          channel = Console.ReadLine();                          if (channel.Trim().Length <= 0)                          {                              channel = "";                          }                            Console.WriteLine("Enter CHANNEL GROUP name(s) for PAM Revoke.");                          channelGroup = Console.ReadLine();                          if (channelGroup.Trim().Length <= 0)                          {                              channelGroup = "";                          }                            if (channel.Trim().Length <= 0 && channelGroup.Trim().Length <= 0)                          {                              Console.WriteLine("Channel or ChannelGroup not provided. Please try again.");                              break;                          }                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' channelGroup));                          Console.ResetColor();                          Console.WriteLine();                            string[] channelList2 = channel.Split(''');                          string[] channelGroupList2 = channelGroup.Split(''');                            Console.WriteLine("Enter the auth_key for PAM Revoke (optional)");                          Console.WriteLine("Press Enter Key if there is no auth_key at this time.");                          string authRevoke = Console.ReadLine();                          string[] authKeyList2 = authRevoke.Split(''');                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("auth_key = {0}"' authRevoke));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running PamRevoke()");                          pubnub.Grant()                              .Channels(channelList2)                              .ChannelGroups(channelGroupList2)                              .AuthKeys(authKeyList2)                              .Read(false)                              .Write(false)                              .Manage(false)                              .Async(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      if (r != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                      else if (s != null)                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                      }                                  })                                  );                          break;                      case "11":                          Console.WriteLine("Enabling simulation of Sleep/Suspend Mode");                          pubnub.EnableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Machine Sleep Mode simulation activated");                          Console.ResetColor();                          break;                      case "12":                          Console.WriteLine("Disabling simulation of Sleep/Suspend Mode");                          pubnub.DisableMachineSleepModeForTestingOnly();                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("Simulation going to awake mode");                          Console.ResetColor();                          break;                      case "13":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string userStateChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' userStateChannel));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string userStateChannelGroup = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' userStateChannelGroup));                          Console.ResetColor();                            Console.WriteLine("User State will be accepted as dictionary key:value pair");                            Console.WriteLine("Enter key. ");                          string keyUserState = Console.ReadLine();                          if (string.IsNullOrEmpty(keyUserState.Trim()))                          {                              Console.WriteLine("dictionary key:value pair entry completed.");                              break;                          }                          Console.WriteLine("Enter value");                          string valueUserState = Console.ReadLine();                            int valueInt;                          double valueDouble;                            Dictionary<string' object> addOrModifystate = new Dictionary<string' object>();                          if (Int32.TryParse(valueUserState' out valueInt))                          {                              addOrModifystate.Add(keyUserState' valueInt);                          }                          else if (Double.TryParse(valueUserState' out valueDouble))                          {                              addOrModifystate.Add(keyUserState' valueDouble);                          }                          else                          {                              addOrModifystate.Add(keyUserState' valueUserState);                          }                          pubnub.SetPresenceState()                              .Channels(userStateChannel.Split('''))                              .ChannelGroups(userStateChannelGroup.Split('''))                              .State(addOrModifystate)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "14":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteChannelUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteChannelUserState));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string deleteChannelGroupUserState = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' deleteChannelGroupUserState));                          Console.ResetColor();                            Console.WriteLine("Enter key of the User State Key-Value pair to be deleted");                          string deleteKeyUserState = Console.ReadLine();                          Dictionary<string' object> deleteDic = new Dictionary<string' object>();                          deleteDic.Add(deleteKeyUserState' null);                          pubnub.SetPresenceState()                              .Channels(new string[] { deleteChannelUserState })                              .ChannelGroups(new string[] { deleteChannelGroupUserState })                              .State(deleteDic)                              .Async(new PNSetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "15":                          Console.WriteLine("Enter channel name");                          Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string getUserStateChannel2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' getUserStateChannel2));                          Console.ResetColor();                            Console.WriteLine("Enter channel group name");                          Console.WriteLine("NOTE: If you want to consider only Channel' just hit ENTER");                          string getUserStateChannelGroup2 = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("ChannelGroup = {0}"' getUserStateChannelGroup2));                          Console.ResetColor();                            Console.WriteLine("Enter UUID. (Optional. Press ENTER to skip it)");                          string uuid2 = Console.ReadLine();                            string[] getUserStateChannel2List = getUserStateChannel2.Split(''');                          string[] getUserStateChannelGroup2List = getUserStateChannelGroup2.Split(''');                            pubnub.GetPresenceState()                              .Channels(getUserStateChannel2List)                              .ChannelGroups(getUserStateChannelGroup2List)                              .Uuid(uuid2)                              .Async(new PNGetStateResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                            break;                      case "16":                          Console.WriteLine("Enter uuid for WhereNow. To consider SessionUUID' just press ENTER");                          string whereNowUuid = Console.ReadLine();                            Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("uuid = {0}"' whereNowUuid));                          Console.ResetColor();                          Console.WriteLine();                            Console.WriteLine("Running Where_Now()");                          pubnub.WhereNow()                              .Uuid(whereNowUuid)                              .Async(new PNWhereNowResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "17":                          Console.WriteLine("ENTER UUID.");                          string sessionUUID = Console.ReadLine();                          pubnub.ChangeUUID(sessionUUID);                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine("UUID = {0}"' config.Uuid);                          Console.ResetColor();                          break;                      case "18":                          Console.WriteLine("Disconnect");                          if (pubnub.Disconnect<object>())                          {                              Console.WriteLine("Disconnect success");                          }                          else                          {                              Console.WriteLine("Disconnect failed");                          }                          break;                      case "19":                          Console.WriteLine("Re-connect");                          if (pubnub.Reconnect<object>())                          {                              Console.WriteLine("Reconnect success");                          }                          else                          {                              Console.WriteLine("Reconnect failed");                          }                          break;                      case "20":                          Console.WriteLine("UnsubscribeAll");                          pubnub.UnsubscribeAll<object>();                          break;                      case "21":                          Console.WriteLine("GetSubscribedChannels");                          List<string> chList = pubnub.GetSubscribedChannels();                          if (chList != null && chList.Count > 0)                          {                              Console.WriteLine(chList.Aggregate((x'y)=> x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channels");                          }                          break;                      case "22":                          Console.WriteLine("GetSubscribedChannelGroups");                          List<string> cgList = pubnub.GetSubscribedChannelGroups();                          if (cgList != null && cgList.Count > 0)                          {                              Console.WriteLine(cgList.Aggregate((x' y) => x + "'" + y));                          }                          else                          {                              Console.WriteLine("No channelgroups");                          }                          break;                      case "23":                          Console.WriteLine("Enter channel name: ");                          //Console.WriteLine("NOTE: If you want to consider only Channel Group' just hit ENTER");                          string deleteMessageChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' deleteMessageChannel));                          Console.ResetColor();                          pubnub.DeleteMessages().Channel(deleteMessageChannel) //.Start(15021998840118350).End(15026815715586992)                              .Start(15088506076921021)                                .End(15088532035597390)                              .Async(new PNDeleteMessageResultExt(                                  (r' s) => {                                      if (s != null && s.Error)                                      {                                          Console.WriteLine(s.ErrorData.Information);                                      }                                      else                                      {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }                                  }));                            break;                      case "31":                          Console.WriteLine("Enter channel name");                          string pushRegisterChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRegisterChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushToken = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushToken));                          Console.ResetColor();                            Console.WriteLine("Running AddPushNotificationsOnChannels()");                          pubnub.AddPushNotificationsOnChannels().Channels(new string[] { pushRegisterChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushToken)                              .Async(new PNPushAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "32":                          Console.WriteLine("Enter channel name");                          string pushRemoveChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' pushRemoveChannel));                          Console.ResetColor();                            Console.WriteLine("Enter Push Token for APNS");                          string pushTokenRemove = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenRemove));                          Console.ResetColor();                            Console.WriteLine("Running RemovePushNotificationsFromChannels()");                          pubnub.RemovePushNotificationsFromChannels()                              .Channels(new string[] { pushRemoveChannel })                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenRemove)                              .Async(new PNPushRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "33":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenGetChannel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenGetChannel));                          Console.ResetColor();                            Console.WriteLine("Running AuditPushChannelProvisions()");                          pubnub.AuditPushChannelProvisions()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenGetChannel)                              .Async(new PNPushListProvisionsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "34":                          Console.WriteLine("Enter Push Token for APNS");                          string pushTokenUnregisterDevice = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Push Token = {0}"' pushTokenUnregisterDevice));                          Console.ResetColor();                            Console.WriteLine("Running RemoveAllPushNotificationsFromDeviceWithPushToken()");                          pubnub.RemoveAllPushNotificationsFromDeviceWithPushToken()                              .PushType(PNPushType.APNS)                              .DeviceId(pushTokenUnregisterDevice)                              .Async(new PNPushRemoveAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                        case "38":                          Console.WriteLine("Enter channel group name");                          string addChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' addChannelGroupName));                          Console.ResetColor();                              Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.AddChannelsToChannelGroup()                              .ChannelGroup(addChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "39":                          Console.WriteLine("Enter channel group name");                          string removeChannelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' removeChannelGroupName));                          Console.ResetColor();                            if (removeChannelGroupName.Trim().Length <= 0)                          {                              Console.WriteLine("Channel group not provided. Try again");                              break;                          }                          Console.WriteLine("Do you want to delete the channel group and all its channels? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string removeExistingGroup = Console.ReadLine();                          if (removeExistingGroup.ToLower() == "y")                          {                              pubnub.DeleteChannelGroup()                                  .ChannelGroup(removeChannelGroupName)                                  .Async(new PNChannelGroupsDeleteGroupResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter CHANNEL name. Use comma to enter multiple channels.");                          channel = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("Channel = {0}"' channel));                          Console.ResetColor();                          Console.WriteLine();                          pubnub.RemoveChannelsFromChannelGroup()                              .ChannelGroup(removeChannelGroupName)                              .Channels(channel.Split('''))                              .Async(new PNChannelGroupsRemoveChannelResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      case "40":                          Console.WriteLine("Do you want to get all existing channel group names? Default is No. Enter Y for Yes' Else just hit ENTER key");                          string getExistingGroupNames = Console.ReadLine();                          if (getExistingGroupNames.ToLower() == "y")                          {                              pubnub.ListChannelGroups()                                  .Async(new PNChannelGroupsListAllResultExt(                                      (r' s) => {                                          Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                      }));                              break;                          }                            Console.WriteLine("Enter channel group name");                          string channelGroupName = Console.ReadLine();                          Console.ForegroundColor = ConsoleColor.Blue;                          Console.WriteLine(string.Format("channel group name = {0}"' channelGroupName));                          Console.ResetColor();                            pubnub.ListChannelsForChannelGroup()                              .ChannelGroup(channelGroupName)                              .Async(new PNChannelGroupsAllChannelsResultExt(                                  (r' s) => {                                      Console.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                  }));                          break;                      default:                          Console.ForegroundColor = ConsoleColor.Red;                          Console.WriteLine("INVALID CHOICE. ENTER 99 FOR EXIT OR QUIT");                          Console.ResetColor();                          break;                  }                  if (!exitFlag)                  {                      userinput = Console.ReadLine();                      Int32.TryParse(userinput' out currentUserChoice);                  }              }
