Implementation smell,Namespace,Class,File,Method,Description
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The method has 100 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The method has 101 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The method has 100 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The method has 100 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The method has 133 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The method has 113 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The method has 127 lines of code.
Long Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The method has 129 lines of code.
Long Method,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The method has 108 lines of code.
Long Method,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method has 288 lines of code.
Long Method,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has 289 lines of code.
Long Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The method has 103 lines of code.
Long Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The method has 111 lines of code.
Long Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method has 292 lines of code.
Long Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has 302 lines of code.
Long Method,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The method has 132 lines of code.
Long Method,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The method has 140 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The method has 232 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The method has 235 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The method has 222 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The method has 235 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The method has 132 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The method has 122 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The method has 135 lines of code.
Long Method,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The method has 123 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The method has 131 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The method has 106 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The method has 106 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The method has 143 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The method has 106 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The method has 143 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has 356 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The method has 132 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The method has 132 lines of code.
Long Method,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The method has 196 lines of code.
Long Method,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The method has 122 lines of code.
Complex Method,PubNubMessaging.Tests,GrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,OnResponse,Cyclomatic complexity of the method is 17
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,Cyclomatic complexity of the method is 8
Complex Method,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,Cyclomatic complexity of the method is 9
Complex Method,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,Cyclomatic complexity of the method is 12
Complex Method,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,Cyclomatic complexity of the method is 17
Complex Method,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,Cyclomatic complexity of the method is 17
Complex Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,Cyclomatic complexity of the method is 14
Complex Method,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,Cyclomatic complexity of the method is 17
Complex Method,PubNubMessaging.Tests,RevokeGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,OnResponse,Cyclomatic complexity of the method is 13
Complex Method,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,Cyclomatic complexity of the method is 12
Complex Method,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,Cyclomatic complexity of the method is 11
Complex Method,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,Cyclomatic complexity of the method is 12
Complex Method,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,Cyclomatic complexity of the method is 11
Complex Method,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,Cyclomatic complexity of the method is 9
Complex Method,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,Cyclomatic complexity of the method is 9
Complex Method,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,Cyclomatic complexity of the method is 8
Long Identifier,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,,The length of the parameter messageForSecretEncryptPublish is 30.
Long Statement,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtUserLevel,The length of the statement  "                                    Debug.WriteLine("CleanupGrant / AtUserLevel / UserCallbackForCleanUpAccess - Channel Count = {0}"' channels.Length.ToString()); " is 127.
Long Statement,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtChannelLevel,The length of the statement  "                                    Debug.WriteLine("CleanupGrant / AtUserLevel / UserCallbackForCleanUpAccess - Channel Count = {0}"' channels.Length.ToString()); " is 127.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,ParseGrantTokenTest,The length of the statement  "            string expected = "{\"Version\":2'\"Timestamp\":1568739458'\"TTL\":100'\"Channels\":{}'\"ChannelGroups\":{}'\"Users\":{}'\"Spaces\":{}'\"ChannelPatterns\":{}'\"GroupPatterns\":{}'\"UserPatterns\":{\"^emp-*\":{\"Read\":true'\"Write\":true'\"Manage\":false'\"Delete\":false'\"Create\":false}'\"^mgr-*\":{\"Read\":true'\"Write\":true'\"Manage\":false'\"Delete\":true'\"Create\":true}}'\"SpacePatterns\":{\"^public-*\":{\"Read\":true'\"Write\":true'\"Manage\":false'\"Delete\":false'\"Create\":false}'\"^private-*\":{\"Read\":true'\"Write\":true'\"Manage\":false'\"Delete\":true'\"Create\":true}}'\"Meta\":{}'\"Signature\":\"LL8xpndq3ILa/a3LOK9ragvO2EqaUmKrPQin2jOSEWQ=\"}"; " is 670.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,ParseGrantTokenTest,The length of the statement  "            string token = "p0F2AkF0Gl2BEIJDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyomZeZW1wLSoDZl5tZ3ItKhgbQ3NwY6JpXnB1YmxpYy0qA2pecHJpdmF0ZS0qGBtEbWV0YaBDc2lnWCAsvzGmd2rcgtr9rcs4r2tqC87YSppSYqs9CKfaM5IRZA=="; " is 226.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetTokenByResourceTypeAndIdTest,The length of the statement  "            string expected = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 237.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetTokenByResourceTypeAndIdTest,The length of the statement  "            string token = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 234.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetTokenByResourceTypeTest,The length of the statement  "            string expected = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 237.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetTokenByResourceTypeTest,The length of the statement  "            string token = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 234.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetAllTokensTest,The length of the statement  "            string expected = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 237.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,GetAllTokensTest,The length of the statement  "            string token = "p0F2AkF0Gl2BkWVDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyo2ZeZW1wLSoDZl5tZ3ItKhgbYl4kAUNzcGOjaV5wdWJsaWMtKgNqXnByaXZhdGUtKhgbYl4kAURtZXRhoENzaWdYIBzbsFygBNyhETvsHwgDJm79KaCNk7nNwG8P0ra4UBoh"; " is 234.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,NewCborParseTest,The length of the statement  "            string expected = "{\"v\":2'\"t\":1568264210'\"ttl\":100'\"res\":{\"chan\":{}'\"grp\":{}'\"usr\":{\"myuser1\":19}'\"spc\":{\"myspace1\":11}}'\"pat\":{\"chan\":{}'\"grp\":{}'\"usr\":{}'\"spc\":{}}'\"meta\":{}'\"sig\":\"HtcG6s5fuao9T2bZCgWRQ3cmR27lnYT03yVs6c6H23o=\"}"; " is 267.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,NewCborParseTest,The length of the statement  "            string token = "p0F2AkF0Gl150BJDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqFnbXl1c2VyMRNDc3BjoWhteXNwYWNlMQtDcGF0pERjaGFuoENncnCgQ3VzcqBDc3BjoERtZXRhoENzaWdYIB7XBurOX7mqPU9m2QoFkUN3Jkdu5Z2E9N8lbOnOh9t6"; " is 194.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,NewCborParseTest,The length of the statement  "            //string token = "p0F2AkF0Gl2BEIJDdHRsGGRDcmVzpERjaGFuoENncnCgQ3VzcqBDc3BjoENwYXSkRGNoYW6gQ2dycKBDdXNyomZeZW1wLSoDZl5tZ3ItKhgbQ3NwY6JpXnB1YmxpYy0qA2pecHJpdmF0ZS0qGBtEbWV0YaBDc2lnWCAsvzGmd2rcgtr9rcs4r2tqC87YSppSYqs9CKfaM5IRZA=="; " is 228.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,NewCborParseTest,The length of the statement  "            //string token = "p0F2AkF0Gl2B12pDdHRsA0NyZXOkRGNoYW6gQ2dycKBDdXNyoW50ZXN0dXNlcl8xODIyORgfQ3NwY6FvdGVzdHNwYWNlXzk4NjI4GB9DcGF0pERjaGFuoENncnCgQ3VzcqBDc3BjoERtZXRhoENzaWdYIPVDkcaEMDN6R7-98i84C5BXMn0NsXCmTV3EmWkMyz0y"; //Rajat " is 224.
Long Statement,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,TestPAMv3Signature,The length of the statement  "            string message = "POST\ndemo\n/v3/pam/demo/grant\nPoundsSterling=%C2%A313.37&timestamp=123456789\n{\n  \"ttl\": 1440'\n  \"permissions\": {\n    \"resources\" : {\n      \"channels\": {\n        \"inbox-jay\": 3\n      }'\n      \"groups\": {}'\n      \"users\": {}'\n      \"spaces\": {}\n    }'\n    \"patterns\" : {\n      \"channels\": {}'\n      \"groups\": {}'\n      \"users\": {}'\n      \"spaces\": {}\n    }'\n    \"meta\": {\n      \"user-id\": \"jay@example.com\"'\n      \"contains-unicode\": \"The 💩 test.\"\n    }\n  }\n}"; " is 539.
Long Statement,PubNubMessaging.Tests,GenerateSampleGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,AtUserLevel,The length of the statement  "                string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group\"'\"subscribe_key\":\"pam\"'\"ttl\":20'\"channel-groups\":{\"hello_my_group\":{\"r\":1'\"w\":0'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 237.
Long Statement,PubNubMessaging.Tests,GenerateSampleGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,AtUserLevel,The length of the statement  "                pubnub.Grant().Channels(new [] { channelName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(false).Execute(new GrantResult()); " is 141.
Long Statement,PubNubMessaging.Tests,GenerateSampleGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,AtChannelLevel,The length of the statement  "                string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group\"'\"subscribe_key\":\"pam\"'\"ttl\":20'\"channel-groups\":{\"hello_my_group\":{\"r\":1'\"w\":0'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 237.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,Init,The length of the statement  "            pubnub.Grant().Channels(new [] { channel' channel+"-pnpres" }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20) " is 135.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The length of the statement  "            string expected = "{\"t\":{\"t\":\"14833694874957031\"'\"r\":7}'\"m\":[{\"a\":\"4\"'\"f\":512'\"p\":{\"t\":\"14833694873794045\"'\"r\":2}'\"k\":\"demo-36\"'\"c\":\"hello_my_channel-pnpres\"'\"d\":{\"action\": \"join\"' \"timestamp\": 1483369487' \"uuid\": \"mylocalmachine.mydomain.com\"' \"occupancy\": 1}'\"b\":\"hello_my_channel-pnpres\"}]}"; " is 345.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The length of the statement  "            string expected = "{\"t\":{\"t\":\"14833694874957031\"'\"r\":7}'\"m\":[{\"a\":\"4\"'\"f\":512'\"p\":{\"t\":\"14833694873794045\"'\"r\":2}'\"k\":\"demo-36\"'\"c\":\"hello_my_channel-pnpres\"'\"d\":{\"action\": \"join\"' \"timestamp\": 1483369487' \"uuid\": \"mylocalmachine.mydomain.com\"' \"occupancy\": 1}'\"b\":\"hello_my_channel-pnpres\"}]}"; " is 345.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The length of the statement  "            string expected = "{\"t\":{\"t\":\"14833694874957031\"'\"r\":7}'\"m\":[{\"a\":\"4\"'\"f\":512'\"p\":{\"t\":\"14833694873794045\"'\"r\":2}'\"k\":\"demo-36\"'\"c\":\"hello_my_channel-pnpres\"'\"d\":{\"action\": \"join\"' \"timestamp\": 1483369487' \"uuid\": \"mylocalmachine.mydomain.com\"' \"occupancy\": 1}'\"b\":\"hello_my_channel-pnpres\"}]}"; " is 345.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The length of the statement  "                expected = "{\"status\": 200' \"message\": \"OK\"' \"service\": \"Presence\"' \"uuids\": [\"mytestuuid\"]' \"occupancy\": 1}"; " is 126.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The length of the statement  "                expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The length of the statement  "            expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The length of the statement  "            expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The length of the statement  "                expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The length of the statement  "            expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The length of the statement  "            expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The length of the statement  "                expected = "{\"TotalChannels\":1'\"TotalOccupancy\":1'\"Channels\":{\"hello_my_channel\":{\"ChannelName\":\"hello_my_channel\"'\"Occupancy\":1'\"Occupants\":[{\"Uuid\":\"mytestuuid\"'\"State\":null}]}}}"; " is 204.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The length of the statement  "                expected = "{\"status\": 200' \"message\": \"OK\"' \"payload\": {\"testkey\": \"testval\"}' \"service\": \"Presence\"}"; " is 120.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The length of the statement  "                        .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}/data"' PubnubCommon.SubscribeKey' channel' config.Uuid)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The length of the statement  "                expected = "{\"status\": 200' \"message\": \"OK\"' \"service\": \"Presence\"' \"uuids\": [{\"state\": {\"testkey\": \"testval\"}' \"uuid\": \"mytestuuid\"}]' \"occupancy\": 1}"; " is 177.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The length of the statement  "            expected = "{\"status\": 200' \"message\": \"OK\"' \"payload\": {\"channels\": {}' \"total_channels\": 0' \"total_occupancy\": 0}' \"service\": \"Presence\"}"; " is 159.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The length of the statement  "                    .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}/data"' PubnubCommon.SubscribeKey' channel' config.Uuid)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The length of the statement  "            expected = "{\"status\": 200' \"message\": \"OK\"' \"payload\": {\"channels\": {\"bot_object\": {\"uuids\": [{\"uuid\": \"0ccff0c1-aa81-421b-8c2b-08a59bd5138c\"}]' \"occupancy\": 1}' \"hello_my_channel\": {\"uuids\": [{\"state\": {\"testkey\": \"testval\"}' \"uuid\": \"mytestuuid\"}]' \"occupancy\": 1}}' \"total_channels\": 2' \"total_occupancy\": 2}' \"service\": \"Presence\"}"; " is 382.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The length of the statement  "            expected = "{\"status\": 200' \"message\": \"OK\"' \"payload\": {\"channels\": {}' \"total_channels\": 0' \"total_occupancy\": 0}' \"service\": \"Presence\"}"; " is 159.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The length of the statement  "            string expected = "{\"status\": 200' \"message\": \"OK\"' \"payload\": {\"testkey\": \"testval\"}' \"service\": \"Presence\"}"; " is 127.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The length of the statement  "                    .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}/data"' PubnubCommon.SubscribeKey' channel' customUUID)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The length of the statement  "                expected = "{\"status\": 200' \"uuid\": \"mylocalmachine.mydomain.com\"' \"service\": \"Presence\"' \"message\": \"OK\"' \"payload\": {\"testkey\": \"testval\"}' \"channel\": \"hello_my_channel\"}"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The length of the statement  "                        .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}"' PubnubCommon.SubscribeKey' channel' customUUID)) " is 121.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The length of the statement  "                    .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}/data"' PubnubCommon.SubscribeKey' channel' config.Uuid)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The length of the statement  "                expected = "{\"status\": 200' \"uuid\": \"mytestuuid\"' \"service\": \"Presence\"' \"message\": \"OK\"' \"payload\": {\"k\": \"v\"}' \"channel\": \"hello_my_channel\"}"; " is 169.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The length of the statement  "                    .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}"' PubnubCommon.SubscribeKey' channel' config.Uuid)) " is 122.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The length of the statement  "                        .WithPath(String.Format("/v2/presence/sub_key/{0}/channel/{1}/uuid/{2}/data"' PubnubCommon.SubscribeKey' channel' config.Uuid)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The length of the statement  "                expected = "{\"status\": 200' \"uuid\": \"mytestuuid\"' \"service\": \"Presence\"' \"message\": \"OK\"' \"payload\": {\"k\": null}' \"channel\": \"hello_my_channel\"}"; " is 168.
Long Statement,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The length of the statement  "            string expected = "{\"t\":{\"t\":\"14828440156769626\"'\"r\":7}'\"m\":[{\"a\":\"4\"'\"f\":512'\"p\":{\"t\":\"14828440155770431\"'\"r\":2}'\"k\":\"demo-36\"'\"c\":\"hello_my_channel-pnpres\"'\"d\":{\"action\": \"join\"' \"timestamp\": 1482844015' \"uuid\": \"mytestuuid\"' \"occupancy\": 1}'\"b\":\"hello_my_channel-pnpres\"}]}"; " is 328.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenNullMessageShouldReturnException,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' message)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishGETShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22Pubnub%20Messaging%20API%201%22")) " is 155.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishPOSTShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22Pubnub%20Messaging%20API%201%22")) " is 155.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptObjectPublishShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%7B%22foo%22%3A%22hi%21%22%2C%22bar%22%3A%5B1%2C2%2C3%2C4%2C5%5D%7D")) " is 188.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22nQTUCOeyWWgWh5NRLhSlhIingu92WIQ6RFloD9rOZsTUjAhD7AkMaZJVgU7l28e2%22")) " is 191.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfo,The length of the statement  "                expected = "[[\"nQTUCOeyWWgWh5NRLhSlhIingu92WIQ6RFloD9rOZsTUjAhD7AkMaZJVgU7l28e2\"]'14715325858469956'14715325858469956]"; " is 122.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfoWithSSL,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22nQTUCOeyWWgWh5NRLhSlhIingu92WIQ6RFloD9rOZsTUjAhD7AkMaZJVgU7l28e2%22")) " is 191.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfoWithSSL,The length of the statement  "                expected = "[[\"nQTUCOeyWWgWh5NRLhSlhIingu92WIQ6RFloD9rOZsTUjAhD7AkMaZJVgU7l28e2\"]'14715325858469956'14715325858469956]"; " is 122.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptPublishShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22%2BBY5%2FmiAA8aeuhVl4d13Kg%3D%3D%22")) " is 159.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenSecretKeyWithEncryptPublishShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22f42pIQcWZ9zbTbH8cyLwB%2FtdvRxjFLOYcBNMVKeHS54%3D%22")) " is 175.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%7B%22VersionID%22:3.4%2C%22Timetoken%22:%2213601488652764619%22%2C%22OperationName%22:%22Publish%22%2C%22Channels%22:%5B%22ch1%22%5D%2C%22DemoMessage%22:%7B%22DefaultMessage%22:%22~!%40%23%24%25%5E%26*()_%2B%20%601234567890-%3D%20qwertyuiop%5B%5D%5C%5C%20%7B%7D%7C%20asdfghjkl%3B'%20:%5C%22%20zxcvbnm%2C.%2F%20%3C%3E%3F%20%22%7D%2C%22CustomMessage%22:%7B%22DefaultMessage%22:%22Welcome%20to%20the%20world%20of%20Pubnub%20for%20Publish%20and%20Subscribe.%20Hah!%22%7D%2C%22SampleXml%22:%5B%7B%22ID%22:%22ABCD123%22%2C%22Name%22:%7B%22First%22:%22John%22%2C%22Middle%22:%22P.%22%2C%22Last%22:%22Doe%22%7D%2C%22Address%22:%7B%22Street%22:%22123%20Duck%20Street%22%2C%22City%22:%22New%20City%22%2C%22State%22:%22New%20York%22%2C%22Country%22:%22United%20States%22%7D%7D%2C%7B%22ID%22:%22ABCD456%22%2C%22Name%22:%7B%22First%22:%22Peter%22%2C%22Middle%22:%22Z.%22%2C%22Last%22:%22Smith%22%7D%2C%22Address%22:%7B%22Street%22:%2212%20Hollow%20Street%22%2C%22City%22:%22Philadelphia%22%2C%22State%22:%22Pennsylvania%22%2C%22Country%22:%22United%20States%22%7D%7D%5D%7D"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 1174.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo,The length of the statement  "                Debug.WriteLine("WhenAMessageIsPublished-ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo - Publish OK. Now checking detailed history"); " is 142.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenOptionalSecretKeyShouldBeProvidedInConfig,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22Pubnub%20API%20Usage%20Example%22")) " is 157.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSSLNotProvidedThenDefaultShouldBeTrue,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Pubnub%20API%20Usage%20Example%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 150.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample1SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample1SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample2SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample2SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample3SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample3SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample4SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample4SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample5SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample5SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample6SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample6SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample7SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample7SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample8SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample8SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample9SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample9SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample10SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedPublishMessage' "FAILED - IfSample10SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,SampleXSecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22%21%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22%21%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22%21%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22%21%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfMobilePayloadThenPublishReturnSuccess,The length of the statement  "            Dictionary<PNPushType' Dictionary<string' object>> pushTypeCustomData = new Dictionary<PNPushType' Dictionary<string' object>>(); " is 129.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The length of the statement  "                        Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message))); " is 143.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The length of the statement  "                Assert.IsTrue(internalReceivedMessage' "WhenSubscribedToAChannel --> ThenUnencryptSignalListenerShouldGetMessagae Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The length of the statement  "                        Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message))); " is 143.
Long Statement,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The length of the statement  "                Assert.IsTrue(internalReceivedMessage' "WhenSubscribedToAChannel --> ThenUnencryptSignalListenerShouldGetMessagae Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenSubKeyLevelShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"subkey\"'\"subscribe_key\":\"demo-36\"'\"channels\":{}'\"objects\":{}'\"channel-groups\":{}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 210.
Long Statement,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenChannelLevelShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel\"'\"subscribe_key\":\"demo-36\"'\"channels\":{}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 174.
Long Statement,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenChannelGroupLevelShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group\"'\"subscribe_key\":\"demo-36\"'\"channel-groups\":{}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 186.
Long Statement,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,The length of the statement  "                                    Debug.WriteLine(string.Format("{0} - AccessToSubKeyLevelCallback - Audit Count = {1}"' currentUnitTestCase' channels.Length)); " is 126.
Long Statement,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,The length of the statement  "                                    Debug.WriteLine(string.Format("{0} - AccessToChannelLevelCallback - Audit Channel Count = {1}"' currentUnitTestCase' channels.Length)); " is 135.
Long Statement,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,The length of the statement  "                                    Debug.WriteLine(string.Format("{0} - AccessToChannelLevelCallback - Audit ChannelGroup Count = {1}"' currentUnitTestCase' channelgroups.Length)); " is 145.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel-groups\":{\"hello_my_group\":{\"r\":1'\"w\":0'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 241.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,Init,The length of the statement  "            pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new GrantResult()); " is 158.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenAddChannelShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenAddChannelShouldReturnSuccess,The length of the statement  "            pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName).Execute(new ChannelGroupAddChannelResult()); " is 143.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenRemoveChannelShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenRemoveChannelShouldReturnSuccess,The length of the statement  "            pubnub.RemoveChannelsFromChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName).Execute(new ChannelGroupRemoveChannel()); " is 145.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenRemoveChannelShouldReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedChannelGroupMessage' "WhenChannelGroupIsRequested -> ThenRemoveChannelShouldReturnSuccess failed."); " is 122.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetChannelListShouldReturnSuccess,The length of the statement  "            string expected = "{\"status\": 200' \"payload\": {\"channels\": [\"" + channelName + "\"]' \"group\": \"" + channelGroupName + "\"}' \"service\": \"channel-registry\"' \"error\": false}"; " is 188.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetChannelListShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetChannelListShouldReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedChannelGroupMessage' "WhenChannelGroupIsRequested -> ThenGetChannelListShouldReturnSuccess failed."); " is 123.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetAllChannelGroupShouldReturnSuccess,The length of the statement  "            string expected = "{\"status\": 200' \"payload\": {\"namespace\": \"\"' \"groups\": [\"" + channelGroupName + "\"' \"hello_my_group1\"]}' \"service\": \"channel-registry\"' \"error\": false}"; " is 192.
Long Statement,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetAllChannelGroupShouldReturnSuccess,The length of the statement  "            Assert.IsTrue(receivedChannelGroupMessage' "WhenChannelGroupIsRequested -> ThenGetChannelListShouldReturnSuccess failed."); " is 123.
Long Statement,PubNubMessaging.Tests,ChannelGroupRemoveChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The length of the statement  "                        if (status.StatusCode == 200 && result.Message.ToLower() == "ok" && result.Service == "channel-registry" && status.Error == false && result.ChannelGroup == channelGroupName) " is 173.
Long Statement,PubNubMessaging.Tests,ChannelGroupAllChannels,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The length of the statement  "                        if (status.StatusCode == 200 && status.Error == false && result.ChannelGroup==channelGroupName && result.Channels.Count>0) " is 122.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,Init,The length of the statement  "            pubnub.Grant().Channels(new [] { grantChannel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20) " is 121.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22Pubnub%20Messaging%20With%20No%20Storage%22")) " is 167.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22f42pIQcWZ9zbTbH8cyLwByD%2FGsviOE0vcREIEVPARR0%3D%22")) " is 175.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The length of the statement  "                expected = "[[{\"message\":\"f42pIQcWZ9zbTbH8cyLwByD/GsviOE0vcREIEVPARR0=\"'\"timetoken\":14715322883933786}]'14834460344901569'14834460344901569]"; " is 148.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The length of the statement  "            string expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 331.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReverseTrueReturnsRecords,The length of the statement  "            string expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 331.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' String.Format("%22DetailedHistoryStartTimeWithReverseTrue%20{0}%22"'index))) " is 193.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The length of the statement  "                expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 324.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnUnencrypedSecretMessage,The length of the statement  "            CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams(PubnubCommon.SecretKey' ""' false' out receivedMessage); " is 121.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnUnencrypedSecretMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "DetailHistoryShouldReturnUnencrypedSecretMessage - Detailed History Result not expected"); " is 122.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnUnencrypedSecretSSLMessage,The length of the statement  "            CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams(PubnubCommon.SecretKey' ""' true' out receivedMessage); " is 120.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnUnencrypedSecretSSLMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "DetailHistoryShouldReturnUnencrypedSecretSSLMessage - Detailed History Result not expected"); " is 125.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnEncrypedSecretMessage,The length of the statement  "            CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' false' out receivedMessage); " is 125.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnEncrypedSecretMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "DetailHistoryShouldReturnEncrypedSecretMessage - Detailed History Result not expected"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnEncrypedSecretSSLMessage,The length of the statement  "            CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' true' out receivedMessage); " is 124.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnEncrypedSecretSSLMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "DetailHistoryShouldReturnEncrypedSecretSSLMessage - Detailed History Result not expected"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' index)) " is 124.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("Message #{0} publish {1}"' index' (receivedMessage) ? "SUCCESS" : "FAILED")); " is 127.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' message)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("Message #{0} publish {1}"' index' (receivedMessage) ? "SUCCESS" : "FAILED")); " is 127.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "            expected = "[[\"kvIeHmojsLyV1KMBo82DYQ==\"'\"Ld0rZfbe4yN0Qj4V7o2BuQ==\"'\"zNlnhYco9o6a646+Ox6ksg==\"'\"mR8EEMx154BBHU3OOa+YjQ==\"'\"v+viLoq0Gj2docUMAYyoYg==\"]'14835539837820376'14835539843298232]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                expected = "[[\"F2ZPfJnzuU34VKe24ds81A==\"'\"2K/TO5WADvJRhvX7Zk0IpQ==\"'\"oWOYyGxkWFJ1gpJxhcyzjA==\"'\"LwEzvPCHdM8Yagg6oKknvg==\"'\"/jjH/PT4NrK5HHjDT2KAlQ==\"]'14835549524365492'14835549537755368]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                    expected = "[[\"kvIeHmojsLyV1KMBo82DYQ==\"'\"Ld0rZfbe4yN0Qj4V7o2BuQ==\"'\"zNlnhYco9o6a646+Ox6ksg==\"'\"mR8EEMx154BBHU3OOa+YjQ==\"'\"v+viLoq0Gj2docUMAYyoYg==\"]'14835550731714499'14835550737165103]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' index)) " is 124.
Long Statement,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' message)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22Pubnub%20Messaging%20With%20No%20Storage%22")) " is 167.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The length of the statement  "                        if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' "%22f42pIQcWZ9zbTbH8cyLwByD%2FGsviOE0vcREIEVPARR0%3D%22")) " is 175.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The length of the statement  "                expected = "[[{\"message\":\"f42pIQcWZ9zbTbH8cyLwByD/GsviOE0vcREIEVPARR0=\"'\"timetoken\":14715322883933786}]'14834460344901569'14834460344901569]"; " is 148.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The length of the statement  "                        if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The length of the statement  "            string expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 331.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The length of the statement  "                    if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10) " is 141.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The length of the statement  "            string expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 331.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The length of the statement  "                    if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10) " is 141.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The length of the statement  "            string expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 331.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The length of the statement  "                    if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10) " is 141.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' String.Format("%22DetailedHistoryStartTimeWithReverseTrue%20{0}%22"' index))) " is 194.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The length of the statement  "                expected = "[[\"Pubnub Messaging API 1\"'\"Pubnub Messaging API 2\"'\"Pubnub Messaging API 3\"'\"Pubnub Messaging API 4\"'\"Pubnub Messaging API 5\"'\"Pubnub Messaging API 6\"'\"Pubnub Messaging API 7\"'\"Pubnub Messaging API 8\"'\"Pubnub Messaging API 9\"'\"Pubnub Messaging API 10\"]'14715432709547189'14715432709547189]"; " is 324.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnUnencrypedSecretSSLMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "FetchHistoryShouldReturnUnencrypedSecretSSLMessage - Fetch History Result not expected"); " is 121.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnEncrypedSecretMessage,The length of the statement  "            CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' false' out receivedMessage); " is 122.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnEncrypedSecretSSLMessage,The length of the statement  "            CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' true' out receivedMessage); " is 121.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' index)) " is 124.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("Message #{0} publish {1}"' index' (receivedMessage) ? "SUCCESS" : "FAILED")); " is 127.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' message)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("Message #{0} publish {1}"' index' (receivedMessage) ? "SUCCESS" : "FAILED")); " is 127.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "            expected = "[[\"kvIeHmojsLyV1KMBo82DYQ==\"'\"Ld0rZfbe4yN0Qj4V7o2BuQ==\"'\"zNlnhYco9o6a646+Ox6ksg==\"'\"mR8EEMx154BBHU3OOa+YjQ==\"'\"v+viLoq0Gj2docUMAYyoYg==\"]'14835539837820376'14835539843298232]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                    if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                expected = "[[\"F2ZPfJnzuU34VKe24ds81A==\"'\"2K/TO5WADvJRhvX7Zk0IpQ==\"'\"oWOYyGxkWFJ1gpJxhcyzjA==\"'\"LwEzvPCHdM8Yagg6oKknvg==\"'\"/jjH/PT4NrK5HHjDT2KAlQ==\"]'14835549524365492'14835549537755368]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                        if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                    expected = "[[\"kvIeHmojsLyV1KMBo82DYQ==\"'\"Ld0rZfbe4yN0Qj4V7o2BuQ==\"'\"zNlnhYco9o6a646+Ox6ksg==\"'\"mR8EEMx154BBHU3OOa+YjQ==\"'\"v+viLoq0Gj2docUMAYyoYg==\"]'14835550731714499'14835550737165103]"; " is 198.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The length of the statement  "                            if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' index)) " is 124.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/{3}"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel' message)) " is 126.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                    if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                        if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The length of the statement  "                            if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0) " is 139.
Long Statement,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The length of the statement  "                        if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)) " is 129.
Long Statement,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The length of the statement  "                        if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)) " is 129.
Long Statement,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The length of the statement  "                        if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)) " is 129.
Long Statement,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The length of the statement  "                            if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)) " is 129.
Long Statement,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The length of the statement  "                            if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)) " is 129.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadWriteShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel\":\"hello_my_channel\"'\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 257.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadWriteShouldReturnSuccess,The length of the statement  "                pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult()); " is 144.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel\":\"hello_my_channel\"'\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":0'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 257.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadShouldReturnSuccess,The length of the statement  "                pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(false).Manage(false).TTL(5).Execute(new GrantResult()); " is 145.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithWriteShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel\":\"hello_my_channel\"'\"auths\":{\"hello_my_authkey\":{\"r\":0'\"w\":1'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 257.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithWriteShouldReturnSuccess,The length of the statement  "                pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(false).Write(true).Manage(false).TTL(5).Execute(new GrantResult()); " is 145.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleChannelGrantShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channels\":{\"csharp-hello_my_channel-0\":{\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-1\":{\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-2\":{\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-3\":{\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-4\":{\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 635.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleChannelGrantShouldReturnSuccess,The length of the statement  "                    .WithParameter("channel"' "csharp-hello_my_channel-0%2Ccsharp-hello_my_channel-1%2Ccsharp-hello_my_channel-2%2Ccsharp-hello_my_channel-3%2Ccsharp-hello_my_channel-4") " is 166.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleChannelGrantShouldReturnSuccess,The length of the statement  "                pubnub.Grant().AuthKeys(new [] { authKey }).Channels(channelBuilder).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult()); " is 140.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channels\":{\"csharp-hello_my_channel-0\":{\"auths\":{\"AuthKey-csharp-hello_my_channel-0\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-1\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-2\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-3\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-4\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-1\":{\"auths\":{\"AuthKey-csharp-hello_my_channel-0\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-1\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-2\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-3\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-4\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-2\":{\"auths\":{\"AuthKey-csharp-hello_my_channel-0\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-1\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-2\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-3\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-4\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-3\":{\"auths\":{\"AuthKey-csharp-hello_my_channel-0\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-1\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-2\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-3\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-4\":{\"r\":1'\"w\":1'\"m\":0}}}'\"csharp-hello_my_channel-4\":{\"auths\":{\"AuthKey-csharp-hello_my_channel-0\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-1\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-2\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-3\":{\"r\":1'\"w\":1'\"m\":0}'\"AuthKey-csharp-hello_my_channel-4\":{\"r\":1'\"w\":1'\"m\":0}}}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 2000.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The length of the statement  "                    .WithParameter("auth"' "AuthKey-csharp-hello_my_channel-0%2CAuthKey-csharp-hello_my_channel-1%2CAuthKey-csharp-hello_my_channel-2%2CAuthKey-csharp-hello_my_channel-3%2CAuthKey-csharp-hello_my_channel-4") " is 203.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The length of the statement  "                    .WithParameter("channel"' "csharp-hello_my_channel-0%2Ccsharp-hello_my_channel-1%2Ccsharp-hello_my_channel-2%2Ccsharp-hello_my_channel-3%2Ccsharp-hello_my_channel-4") " is 166.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The length of the statement  "                pubnub.Grant().Channels(channelBuilder).AuthKeys(authKeyBuilder).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult()); " is 136.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "            string expectedGrant = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel\":\"hello_my_channel\"'\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 262.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "            string expectedRevoke = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":1'\"channel\":\"hello_my_channel\"'\"auths\":{\"hello_my_authkey\":{\"r\":0'\"w\":0'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 263.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "                pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult()); " is 144.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "                    pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(false).Write(false).Manage(false).TTL(0).Execute(new RevokeGrantResult()); " is 152.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "                    Assert.IsTrue(receivedRevokeMessage' "WhenGrantIsRequested -> ThenRevokeAtUserLevelReturnSuccess -> Grant success but revoke failed."); " is 135.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The length of the statement  "                    Assert.IsTrue(receivedGrantMessage' "WhenGrantIsRequested -> ThenRevokeAtUserLevelReturnSuccess failed. -> Grant not occured' so is revoke"); " is 141.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadManageShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group+auth\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel-groups\":\"myChannelGroup\"'\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 276.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadManageShouldReturnSuccess,The length of the statement  "                pubnub.Grant().ChannelGroups(new [] { channelGroup }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(5).Execute(new GrantResult()); " is 153.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadManageShouldReturnSuccess,The length of the statement  "                Assert.IsTrue(receivedGrantMessage' "WhenGrantIsRequested -> ThenChannelGroupLevelWithReadManageShouldReturnSuccess failed."); " is 126.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadShouldReturnSuccess,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"channel-group+auth\"'\"subscribe_key\":\"demo-36\"'\"ttl\":5'\"channel-groups\":\"myChannelGroup\"'\"auths\":{\"hello_my_authkey\":{\"r\":1'\"w\":0'\"m\":0}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 276.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadShouldReturnSuccess,The length of the statement  "                pubnub.Grant().ChannelGroups(new [] { channelGroup }).AuthKeys(new [] { authKey }).Read(true).Write(false).Manage(false).TTL(5).Execute(new GrantResult()); " is 155.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadShouldReturnSuccess,The length of the statement  "                Assert.IsTrue(receivedGrantMessage' "WhenGrantIsRequested -> ThenChannelGroupLevelWithReadShouldReturnSuccess failed."); " is 120.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu_userid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 120.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu_userid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 120.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu-ut-uid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 120.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu-ut-uid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } }) " is 122.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu_spaceid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 121.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu_spaceid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 121.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu-ut-sid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }' " is 120.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                                { "pandu-ut-sid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } }) " is 122.
Long Statement,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The length of the statement  "                    //.Meta(new System.Collections.Generic.Dictionary<string' object>() { { "user-id"' "jay@example.com" }' { "contains-unicode"' "The 💩 test." } }) " is 145.
Long Statement,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The length of the statement  "                        System.Diagnostics.Debug.WriteLine("RemoveMessageAction To Confirm = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r)); " is 127.
Long Statement,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channels\":{\"hello_my_channel1\":{\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1'\"d\":0}}}'\"hello_my_channel2\":{\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1'\"d\":0}}}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 343.
Long Statement,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,Init,The length of the statement  "            pubnub.Grant().Channels(new[] { channelName1' channelName2 }).AuthKeys(new[] { authKey }).Read(true).Write(true).Manage(true).TTL(20) " is 133.
Long Statement,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel1Timetoken1ShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel2Timetoken2ShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,Init,The length of the statement  "            pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).Delete(true).TTL(20).Execute(new UTGrantResult()); " is 159.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsToastShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%7B%22pn_mpns%22%3A%7B%22type%22%3A%22toast%22%2C%22text1%22%3A%22hardcode%20message%22%2C%22text2%22%3A%22%22%2C%22param%22%3A%22%22%7D%7D")) " is 239.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsFlipTileShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%7B%22pn_mpns%22%3A%7B%22type%22%3A%22flip%22%2C%22delay%22%3A0%2C%22title%22%3A%22front%20title%22%2C%22count%22%3A6%2C%22small_background_image%22%3A%22%22%2C%22background_image%22%3A%22http%3A%2F%2Fcdn.flaticon.com%2Fpng%2F256%2F37985.png%22%2C%22back_background_image%22%3A%22Assets%2FTiles%2Fpubnub3.png%22%2C%22back_content%22%3A%22back%20message%22%2C%22back_title%22%3A%22back%20title%22%2C%22wide_background_image%22%3A%22%22%2C%22wide_back_background_image%22%3A%22%22%2C%22wide_back_content%22%3A%22%22%7D%7D")) " is 619.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The length of the statement  "            tile.images = new [] { "Assets/Tiles/pubnub1.png"' "Assets/Tiles/pubnub2.png"' "Assets/Tiles/pubnub3.png"' "Assets/Tiles/pubnub4.png" }; " is 136.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%7B%22pn_mpns%22%3A%7B%22type%22%3A%22cycle%22%2C%22delay%22%3A0%2C%22title%22%3A%22front%20title%22%2C%22count%22%3A2%2C%22small_background_image%22%3A%22%22%2C%22images%22%3A%5B%22Assets%2FTiles%2Fpubnub1.png%22%2C%22Assets%2FTiles%2Fpubnub2.png%22%2C%22Assets%2FTiles%2Fpubnub3.png%22%2C%22Assets%2FTiles%2Fpubnub4.png%22%5D%7D%7D")) " is 433.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsIconicTileShouldReturnSuccess,The length of the statement  "                    .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%7B%22pn_mpns%22%3A%7B%22type%22%3A%22iconic%22%2C%22delay%22%3A0%2C%22title%22%3A%22front%20title%22%2C%22count%22%3A2%2C%22icon_image%22%3A%22%22%2C%22small_icon_image%22%3A%22%22%2C%22background_color%22%3A%22%22%2C%22wide_content_1%22%3A%22my%20wide%20content%22%2C%22wide_content_2%22%3A%22%22%2C%22wide_content_3%22%3A%22%22%7D%7D")) " is 436.
Long Statement,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAuditPushChannelProvisionsShouldReturnSuccess,The length of the statement  "            pubnub.AuditPushChannelProvisions().DeviceId("4e71acc275a8eeb400654d923724c073956661455697c92ca6c5438f2c19aa7b").PushType(PNPushType.APNS) " is 138.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageSubscribeShouldReturnReceivedMessage Failed"); " is 125.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%7B%22foo%22%3A%22hi%21%22%2C%22bar%22%3A%5B1%2C2%2C3%2C4%2C5%5D%7D")) " is 167.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                .WithPath(string.Format("/publish/demo-36/{0}/0/{1}/0/{2}"' PubnubCommon.SubscribeKey' channel' "%22Zbr7pEF%2FGFGKj1rOstp0tWzA4nwJXEfj%2BezLtAr8qqE%3D%22")) " is 156.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageSSLSubscribeShouldReturnReceivedMessage Failed"); " is 128.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSecretSubscribeShouldReturnReceivedMessage,The length of the statement  "            CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams(PubnubCommon.SecretKey' ""' false' out receivedMessage); " is 126.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSecretSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageSecretSubscribeShouldReturnReceivedMessage Failed"); " is 131.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSecretSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams(PubnubCommon.SecretKey' ""' true' out receivedMessage); " is 125.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageSecretSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageSecretSSLSubscribeShouldReturnReceivedMessage Failed"); " is 134.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageCipherSubscribeShouldReturnReceivedMessage Failed"); " is 131.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageCipherSSLSubscribeShouldReturnReceivedMessage Failed"); " is 134.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSecretSubscribeShouldReturnReceivedMessage,The length of the statement  "            CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' false' out receivedMessage); " is 132.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSecretSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageCipherSecretSubscribeShouldReturnReceivedMessage Failed"); " is 137.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSecretSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams(PubnubCommon.SecretKey' "enigma"' true' out receivedMessage); " is 131.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenComplexMessageCipherSecretSSLSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenComplexMessageCipherSecretSSLSubscribeShouldReturnReceivedMessage Failed"); " is 140.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Init,The length of the statement  "            pubnub.Grant().Channels(channelsGrant).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult()); " is 141.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "            pubnub.Subscribe<string>().Channels(new [] { channel }).QueryParam(new Dictionary<string' object> { { "ut"' currentTestCase } }).Execute(); " is 139.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20WhenSubscribedToAChannel%20ThenItShouldReturnReceivedMessage%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 193.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22QoHwTga0QtOCtJRQ6sqtyateB%2FVotNt%2F50y23yXW7rpCbZdJLUAVKKbf01SpN6zghA6MqQaaHRXoYqAf84RF56C7Ky6Oi6jLqN2I5%2FlXSCw%3D%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 236.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "            pubnub.Publish().Channel(channel).Message(publishedMessage).QueryParam(new Dictionary<string' object> { { "ut"' currentTestCase } }).Execute(new UTPublishResult()); " is 164.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "            pubnub.Unsubscribe<string>().Channels(new [] { channel }).QueryParam(new Dictionary<string' object> { { "ut"' currentTestCase } }).Execute(); " is 141.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnReceivedMessageCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnReceivedMessageCipherSSL Failed"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnReceivedMessageSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnReceivedMessageSecretSSL Failed"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnReceivedMessageSecretCipher,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnReceivedMessageSecretCipher Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnReceivedMessageSecretCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnReceivedMessageSecretCipherSSL Failed"); " is 126.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "            pubnub.Subscribe<string>().Channels(new [] { channel }).QueryParam(new Dictionary<string' object>() { {"ut"' currentTestCase } }).Execute(); " is 140.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Text%20with%20%F0%9F%98%9C%20emoji%20%F0%9F%8E%89.%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 170.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22vaD98V5XDtEvByw6RrxT9Ya76GKQLhyrEZw9Otrsu1KBVDIqGgWkrAD8X6TM%2FXC6%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 186.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "            pubnub.Publish().Channel(channel).Message(publishedMessage).QueryParam(new Dictionary<string' object>() { { "ut"' currentTestCase } }).Execute(new UTPublishResult()); " is 166.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "            pubnub.Unsubscribe<string>().Channels(new [] { channel }).QueryParam(new Dictionary<string' object>() { { "ut"' currentTestCase } }).Execute(); " is 143.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnEmojiMessageCipherSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnEmojiMessageCipherSecret Failed"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,ThenSubscribeShouldReturnEmojiMessageCipherSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnEmojiMessageCipherSecretSSL Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Message,The length of the statement  "                    Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(message.Message)); " is 127.
Long Statement,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Message,The length of the statement  "                    Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(message.Message)); " is 127.
Long Statement,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Message,The length of the statement  "                    Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(message.Message)); " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,Init,The length of the statement  "            pubnub.Grant().Channels(channelsGrant).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult()); " is 141.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Text%20with%20%C3%9C%C3%96%E6%BC%A2%E8%AA%9E%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 164.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22QoHwTga0QtOCtJRQ6sqtyateB%2FVotNt%2F50y23yXW7rpCbZdJLUAVKKbf01SpN6zghA6MqQaaHRXoYqAf84RF56C7Ky6Oi6jLqN2I5%2FlXSCw%3D%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 236.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Text%20with%20%2F%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 137.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22s98XlGoA68ypX1Z7A7mOwQ%3D%3D%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 148.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageCipher,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageCipher Failed"); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageCipherSSL Failed"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageSecret Failed"); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageCipherSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageCipherSecret Failed"); " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageCipherSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageCipherSecretSSL Failed"); " is 130.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnForwardSlashMessageSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnForwardSlashMessageSecretSSL Failed"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Text%20with%20%27%5C%22%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 143.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22kl7vmPUMMz6UdliN7t6XYw%3D%3D%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 148.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageCipher,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageCipher Failed"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageCipherSSL Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageSecret Failed"); " is 120.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageCipherSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageCipherSecret Failed"); " is 126.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageCipherSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageCipherSecretSSL Failed"); " is 129.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,ThenSubscribeShouldReturnSpecialCharMessageSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToAChannel --> ThenSubscribeShouldReturnSpecialCharMessageSecretSSL Failed"); " is 123.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 248.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The length of the statement  "            pubnub.Grant().AuthKeys(new [] { authKey }).ChannelGroups(new [] { channelGroupName' channelGroupName1' channelGroupName2 }).Channels(new [] { channelName }).Read(true).Write(true).Manage(true).TTL(20) " is 201.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                    else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory)) " is 142.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "            pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } }) " is 198.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                pubnub.Subscribe<string>().ChannelGroups(new [] { channelGroupName }).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } }).Execute(); " is 180.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20WhenSubscribedToAChannelGroup%20ThenItShouldReturnReceivedMessage%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channelName)) " is 202.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                pubnub.Publish().Channel(channelName).Message(publishedMessage).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } }) " is 163.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The length of the statement  "                pubnub.Unsubscribe<string>().ChannelGroups(new [] { channelGroupName }).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } }).Execute(); " is 182.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The length of the statement  "                    else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory)) " is 142.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The length of the statement  "                        && (s.AffectedChannelGroups != null && s.AffectedChannelGroups.Contains(channelGroupName1) && s.AffectedChannelGroups.Contains(channelGroupName2)) " is 146.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName1)) " is 128.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The length of the statement  "                            if (s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2))) " is 156.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The length of the statement  "                        .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName2)) " is 128.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The length of the statement  "                            if (s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2))) " is 156.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"foo.*\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 237.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "                expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"foo.bar\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 232.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "                expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 241.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "                expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"hello_my_channel1\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 242.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "                expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel-group\":\"hello_my_group\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 245.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The length of the statement  "                pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20) " is 130.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20WhenSubscribedToAChannel%20ThenItShouldReturnReceivedMessage%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' publishChannel)) " is 200.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22QoHwTga0QtOCtJRQ6sqtyateB%2FVotNt%2F50y23yXW7rpCbZdJLUAVKKbf01SpN6zghA6MqQaaHRXoYqAf84RF56C7Ky6Oi6jLqN2I5%2FlXSCw%3D%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' publishChannel)) " is 243.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageSSL Failed"); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageCipherSSL Failed"); " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageSecret Failed"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageSecretSSL Failed"); " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageSecretCipher,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageSecretCipher Failed"); " is 130.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageSecretCipherSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageSecretCipherSSL Failed"); " is 133.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnReceivedMessageCipher,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnReceivedMessageCipher Failed"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Text%20with%20%F0%9F%98%9C%20emoji%20%F0%9F%8E%89.%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' publishChannel)) " is 177.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22vaD98V5XDtEvByw6RrxT9Ya76GKQLhyrEZw9Otrsu1KBVDIqGgWkrAD8X6TM%2FXC6%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' publishChannel)) " is 193.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnEmojiMessageSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnEmojiMessageSecret Failed"); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnEmojiMessageCipherSecret,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnEmojiMessageCipherSecret Failed"); " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnEmojiMessageCipherSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnEmojiMessageCipherSecretSSL Failed"); " is 130.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnEmojiMessageSecretSSL,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnEmojiMessageSecretSSL Failed"); " is 124.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "                    .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20cg%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' channel)) " is 135.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20wc%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' pubWildChannelName)) " is 146.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "                        .WithPath(String.Format("/publish/{0}/{1}/0/{2}/0/%22Test%20for%20normal%20ch%22"' PubnubCommon.PublishKey' PubnubCommon.SubscribeKey' subChannelName)) " is 151.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage Failed"); " is 154.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The length of the statement  "                        Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)); " is 121.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The length of the statement  "            string expected = "{\"t\":{\"t\":\"14843277463968146\"'\"r\":7}'\"m\":[{\"a\":\"4\"'\"f\":512'\"p\":{\"t\":\"14843277462084783\"'\"r\":1}'\"k\":\"demo-36\"'\"c\":\"foo.*-pnpres\"'\"d\":{\"action\": \"join\"' \"timestamp\": 1484327746' \"uuid\": \"mytestuuid\"' \"occupancy\": 1}'\"b\":\"foo.*\"}]}"; " is 299.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The length of the statement  "            pubnub.Subscribe<string>().Channels(new [] { wildCardSubscribeChannel }).ChannelGroups(new [] { channelGroupName }).Execute(); " is 126.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The length of the statement  "                pubnub.Unsubscribe<string>().Channels(new[] { wildCardSubscribeChannel }).ChannelGroups(new[] { channelGroupName }).Execute(); " is 126.
Long Statement,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The length of the statement  "            Assert.IsTrue(receivedMessage' "WhenSubscribedToWildcardChannel --> ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback Failed"); " is 150.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel\":\"foo.*\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 237.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,Init,The length of the statement  "            pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult()); " is 146.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,Init,The length of the statement  "            string expected = "{\"message\":\"Success\"'\"payload\":{\"level\":\"user\"'\"subscribe_key\":\"demo-36\"'\"ttl\":20'\"channel-group\":\"hello_my_group\"'\"auths\":{\"myAuth\":{\"r\":1'\"w\":1'\"m\":1}}}'\"service\":\"Access Manager\"'\"status\":200}"; " is 252.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,Init,The length of the statement  "            pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20) " is 130.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The length of the statement  "                    else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory)) " is 142.
Long Statement,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The length of the statement  "                    .WithPath(string.Format("/v1/channel-registration/sub-key/{0}/channel-group/{1}"' PubnubCommon.SubscribeKey' channelGroupName)) " is 127.
Complex Conditional,PubNubMessaging.Tests,ChannelGroupRemoveChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The conditional expression  "status.StatusCode == 200 && result.Message.ToLower() == "ok" && result.Service == "channel-registry" && status.Error == false && result.ChannelGroup == channelGroupName"  is complex.
Complex Conditional,PubNubMessaging.Tests,ChannelGroupAllChannels,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The conditional expression  "status.StatusCode == 200 && status.Error == false && result.ChannelGroup==channelGroupName && result.Channels.Count>0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReverseTrueReturnsRecords,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The conditional expression  "s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The conditional expression  "s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The conditional expression  "s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The conditional expression  "s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The conditional expression  "s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0)"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.MessageTimetoken == currentMessageTimetoken"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The conditional expression  "r != null && s.StatusCode == 200 && !s.Error && r.MessageTimetoken == currentMessageTimetoken"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The conditional expression  "receivedMessage && currentActionTimetoken > 0 && currentMessageTimetoken > 0 && !receivedRemoveEvent"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The conditional expression  "s.StatusCode == 200                           && (s.AffectedChannelGroups != null && s.AffectedChannelGroups.Contains(channelGroupName1) && s.AffectedChannelGroups.Contains(channelGroupName2))                          && s.Category == PNStatusCategory.PNConnectedCategory"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The conditional expression  "s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2))"  is complex.
Complex Conditional,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The conditional expression  "s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2))"  is complex.
Empty Catch Block,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtUserLevel,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtUserLevel,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtChannelLevel,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtChannelLevel,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,GrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,GrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,GrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,ChannelGroupAddChannelResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,ChannelGroupRemoveChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,ChannelGroupAllChannels,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,ChannelGroupAll,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,TimeResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,RevokeGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,UTGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,UTGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,UTGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,UTGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,UTGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,OnResponse,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,Init,The method has an empty catch block.
Empty Catch Block,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The method has an empty catch block.
Magic Number,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtUserLevel,The following statement contains a magic number: pubnub.Audit().Execute(new PNAccessManagerAuditResultExt((r's)=> {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                            if (r != null)                          {                              Debug.WriteLine("PNAccessManagerAuditResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false)                              {                                  if (!String.IsNullOrEmpty(r.Channel))                                  {                                      var channels = r.Channel.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);                                      Debug.WriteLine("CleanupGrant / AtUserLevel / UserCallbackForCleanUpAccess - Channel Count = {0}"' channels.Length.ToString());                                      foreach (string channelName in channels)                                      {                                          if (r.AuthKeys != null)                                          {                                              foreach (string authKey in r.AuthKeys.Keys)                                              {                                                  Debug.WriteLine("Auth Key = " + authKey);                                                  ManualResetEvent revokeManualEvent = new ManualResetEvent(false);                                                  pubnub.Grant().Channels(new[] { channelName }).AuthKeys(new[] { authKey }).Read(false).Write(false).Manage(false)                                                  .Execute(new PNAccessManagerGrantResultExt((r1's1)=>                                                   {                                                      try                                                      {                                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s1));                                                            if (r1 != null)                                                          {                                                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r1));                                                          }                                                      }                                                      catch {  /* ignore */ }                                                      finally                                                      {                                                          revokeManualEvent.Set();                                                      }                                                  }));                                                  revokeManualEvent.WaitOne();                                              }                                          }                                      }                                  }                                    if (r.Level == "subkey")                                  {                                      receivedAuditMessage = true;                                  }                              }                          }                      }                      catch {  /* ignore */  }                      finally                      {                          auditManualEvent.Set();                      }                  }));
Magic Number,PubNubMessaging.Tests,CleanupGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\CleanupGrant.cs,AtChannelLevel,The following statement contains a magic number: pubnub.Audit().Execute(new PNAccessManagerAuditResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                            if (r != null)                          {                              Debug.WriteLine("PNAccessManagerAuditResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false)                              {                                  if (!String.IsNullOrEmpty(r.Channel))                                  {                                      var channels = r.Channel.Split(new char[] { ''' }' StringSplitOptions.RemoveEmptyEntries);                                      Debug.WriteLine("CleanupGrant / AtUserLevel / UserCallbackForCleanUpAccess - Channel Count = {0}"' channels.Length.ToString());                                      foreach (string channelName in channels)                                      {                                          if (r.AuthKeys != null)                                          {                                              foreach (string authKey in r.AuthKeys.Keys)                                              {                                                  Debug.WriteLine("Auth Key = " + authKey);                                                  ManualResetEvent revokeManualEvent = new ManualResetEvent(false);                                                  pubnub.Grant().Channels(new[] { channelName }).AuthKeys(new[] { authKey }).Read(false).Write(false).Manage(false)                                                  .Execute(new PNAccessManagerGrantResultExt((r1' s1) =>                                                  {                                                      try                                                      {                                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s1));                                                            if (r1 != null)                                                          {                                                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r1));                                                          }                                                      }                                                      catch {  /* ignore */ }                                                      finally                                                      {                                                          revokeManualEvent.Set();                                                      }                                                  }));                                                  revokeManualEvent.WaitOne();                                              }                                          }                                      }                                  }                                    if (r.Level == "subkey")                                  {                                      receivedAuditMessage = true;                                  }                              }                          }                      }                      catch {  /* ignore */  }                      finally                      {                          auditManualEvent.Set();                      }                  }));
Magic Number,PubNubMessaging.Tests,EncryptionTests,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\EncryptionTests.cs,EncodeNonAsciiCharacters,The following statement contains a magic number: c > 127
Magic Number,PubNubMessaging.Tests,GenerateSampleGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,AtUserLevel,The following statement contains a magic number: grantManualEvent.WaitOne(5000);
Magic Number,PubNubMessaging.Tests,GenerateSampleGrant,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,AtChannelLevel,The following statement contains a magic number: grantManualEvent.WaitOne(5000);
Magic Number,PubNubMessaging.Tests,TestHarness,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\TestHarness.cs,createPubNubInstance,The following statement contains a magic number: unitTest.Timetoken = 1567581283;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel' channel+"-pnpres" }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write) { receivedGrantMessage = true; }                                              }                                          }                                      }                                      catch { /* ignore */ }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,Init,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(p));                      if (p.Event == "join") { receivedPresenceMessage = true; }                      presenceManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          presenceManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(p));                      if (p.Event == "join") { receivedPresenceMessage = true; }                      presenceManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          presenceManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnReceivedMessageSSL,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(p));                      receivedCustomUUID = true;                      presenceManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          presenceManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceShouldReturnCustomUUID,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipher,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecret,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSecretSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                              (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                              (o' p) => {                                  subscribeManualEvent.Set();                              }'                              (o' s) => {                                  Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                                  if (s.StatusCode != 200 || s.Error)                                  {                                      receivedErrorMessage = true;                                      if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                                  }                                  subscribeManualEvent.Set();                              });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoCipherSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecret,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSecretSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest ? 2000 : 310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest ? 2000 : 310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest ? 2000 : 310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfGlobalHereNowIsCalledThenItShouldReturnInfoWithUserState,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfWhereNowIsCalledThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndGetUserStateThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,IfSetAndDeleteUserStateThenItShouldReturnInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); }'                  (o' p) => {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(p));                      if (p.Event == "join") { receivedPresenceMessage = true; }                      presenceManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          presenceManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: Thread.Sleep(pubnub.PNConfig.PresenceTimeout + (3 * 1000));
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: Thread.Sleep(pubnub.PNConfig.PresenceTimeout + (3 * 1000));
Magic Number,PubNubMessaging.Tests,WhenAClientIsPresented,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAClientIsPresented.cs,ThenPresenceHeartbeatShouldReturnMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write) { receivedGrantMessage = true; }                                              }                                          }                                      }                                      catch { /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishGETShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishGETShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishGETShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishPOSTShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishPOSTShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptPublishPOSTShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).UsePOST(true)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenUnencryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfoWithSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfoWithSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptObjectPublishShouldReturnSuccessCodeAndInfoWithSSL,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                              publishManualEvent.Set();                          }                          else                          {                              publishManualEvent.Set();                          }                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenSecretKeyWithEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenSecretKeyWithEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenSecretKeyWithEncryptPublishShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenComplexMessageObjectShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenOptionalSecretKeyShouldBeProvidedInConfig,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenOptionalSecretKeyShouldBeProvidedInConfig,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,ThenOptionalSecretKeyShouldBeProvidedInConfig,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSSLNotProvidedThenDefaultShouldBeTrue,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSSLNotProvidedThenDefaultShouldBeTrue,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSSLNotProvidedThenDefaultShouldBeTrue,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample9SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: object message = new              {                  id = "c670e9a9-fe5b-436c-8c0e-785a9201a5ef"'                  senderId = "yigit@armut.com"'                  quoteId = 2208445'                  shouldImport = false'                  type = "TEXT"'                  text = @"              Merhabalar :)                Kare ya da çember arka fon tercihinize göre kullanılabilir.                Jardinyer Takım              Şamdanlar ve mumlar              Çember ya da Kare arka fon              Çiçekli vazo              Lokumluklar              Kolonyalık              Led ışıklar              Led mumlar              Maket pasta              Damat fincanı              Yüzük tepsisi              Kıyafet renginize göre hafif süsleme.                    Nakliye Kurulum dahildir.              Kırılan ya da eksilen malzeme size aittir' ödemesi alınır.                Çiçek karışık renk ya da beyaz seçilebilir. Ya da mor seçilebilir                          "              };
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSample10SecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: object message = new              {                  id = "c670e9a9-fe5b-436c-8c0e-785a9201a5ef"'                  senderId = "yigit@armut.com"'                  quoteId = 2208445'                  shouldImport = false'                  type = "TEXT Its me (Pandu) Ok ç!~:)@"'                  text = @"              Merhabalar :)                Kare ya da çember arka fon tercihinize göre kullanılabilir.                Jardinyer Takım              Şamdanlar ve mumlar              Çember ya da Kare arka fon              Çiçekli vazo              Lokumluklar              Kolonyalık              Led ışıklar              Led mumlar              Maket pasta              Damat fincanı              Yüzük tepsisi              Kıyafet renginize göre hafif süsleme.                    Nakliye Kurulum dahildir.              Kırılan ya da eksilen malzeme size aittir' ödemesi alınır.                Çiçek karışık renk ya da beyaz seçilebilir. Ya da mor seçilebilir                          "              };
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,SampleXSecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,SampleXSecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,SampleXSecretKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).QueryParam(cp)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          else                          {                              //System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s.ErrorData));                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenGetMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).QueryParam(cp)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          else                          {                              //System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s.ErrorData));                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).QueryParam(cp).UsePOST(true)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          else                          {                              //System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s.ErrorData));                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfSecretKeyCipherKeyWithoutAuthThenPostMessageWithSpecialCharsReturnSuccess,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).QueryParam(cp).UsePOST(true)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedPublishMessage = true;                          }                          else                          {                              //System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(s.ErrorData));                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfMobilePayloadThenPublishReturnSuccess,The following statement contains a magic number: pushTypeCustomData.Add(PNPushType.APNS2' new Dictionary<string' object>                                  {                                      {"teams"' new string[] { "49ers"' "raiders" } }'                                      {"score"' new int[] { 7' 0 } }                                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfMobilePayloadThenPublishReturnSuccess,The following statement contains a magic number: pushTypeCustomData.Add(PNPushType.FCM' new Dictionary<string' object>                                  {                                      {"teams"' new string[] { "49ers"' "raiders" } }'                                      {"score"' new int[] { 7' 0 } }'                                      {"lastplay"' "5yd run up the middle" }                                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsPublished,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsPublished.cs,IfMobilePayloadThenPublishReturnSuccess,The following statement contains a magic number: Dictionary<string' object> payload =                  new MobilePushHelper()                  .PushTypeSupport(new PNPushType[] { PNPushType.APNS2' PNPushType.FCM' PNPushType.MPNS })                  .Title("Game update 49ers touchdown")                  .Badge(2)                  .Apns2Data(new List<Apns2Data>() { apns2Data })                  .Custom(pushTypeCustomData)                  .GetPayload();
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new[] { channel }).AuthKeys(new[] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write) { receivedGrantMessage = true; }                                              }                                          }                                      }                                      catch { /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.Signal().Channel(channel).Message(message)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              signalTimetoken = r.Timetoken;                              receivedSignalMessage = true;                          }                          signalManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(messageForUnencryptSignal) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(messageForUnencryptSignal) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: pubnub.Signal().Channel(channel).Message(messageForUnencryptSignal)                          .Execute(new PNPublishResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  internalReceivedMessage = true;                              }                              signalManualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  delegate(Pubnub o' PNSignalResult<object> m)                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(messageForUnencryptSignal) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  delegate(Pubnub o' PNStatus s) {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  delegate(Pubnub o' PNSignalResult<object> m)                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine(string.Format("Signal SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message)));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(messageForUnencryptSignal) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  delegate(Pubnub o' PNStatus s) {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: pubnub.Signal().Channel(channel).Message(messageForUnencryptSignal)                          .Execute(new PNPublishResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  internalReceivedMessage = true;                              }                              signalManualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenAMessageIsSignaled,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAMessageIsSignaled.cs,ThenIgnoreCipherKeyUnencryptSignalListenerShouldGetMessagae,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenSubKeyLevelShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenChannelLevelShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenAuditIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,ThenChannelGroupLevelShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,AuditResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenAuditIsRequested.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && status.Error == false
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,Init,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenAddChannelShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenRemoveChannelShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetChannelListShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenChannelGroupIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,ThenGetAllChannelGroupShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,ChannelGroupAddChannelResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && status.Error == false
Magic Number,PubNubMessaging.Tests,ChannelGroupRemoveChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && result.Message.ToLower() == "ok" && result.Service == "channel-registry" && status.Error == false && result.ChannelGroup == channelGroupName
Magic Number,PubNubMessaging.Tests,ChannelGroupAllChannels,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && status.Error == false && result.ChannelGroup==channelGroupName && result.Channels.Count>0
Magic Number,PubNubMessaging.Tests,ChannelGroupAll,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenChannelGroupIsRequested.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && status.Error == false
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { grantChannel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt((r's)=> {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                            if (r != null)                          {                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (r.Channels != null && r.Channels.Count > 0)                              {                                  var read = r.Channels[channel][authKey].ReadEnabled;                                  var write = r.Channels[channel][authKey].WriteEnabled;                                  if (read && write)                                  {                                      receivedGrantMessage = true;                                  }                              }                          }                      }                      catch { /* ignore */ }                      finally { grantManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(false)                  .Execute(new PNPublishResultExt((r's)=> {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          publishTimetoken = r.Timetoken;                          receivedMessage = true;                      }                      publishManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryShouldReturnDecryptMessage,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                  .Execute(new PNPublishResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          publishTimetoken = r.Timetoken;                          receivedMessage = true;                      }                      publishManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r's)=> {                  try{                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  } catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.Publish().Channel(channel)                      .Message(string.Format("DetailedHistoryStartTimeWithReverseTrue {0}"' index))                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: index < 10
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.History().Channel(channel)                      .Start(currentTimetoken)                      .Reverse(false)                      .Execute(new PNHistoryResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                          {                              receivedMessage = true;                          }                          historyManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailedHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.History().Channel(channel)                      .Start(currentTimetoken)                      .Reverse(false)                      .Execute(new PNHistoryResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                          {                              receivedMessage = true;                          }                          historyManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryWithNullKeysReturnsError,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      receivedMessage = r == null || s.StatusCode != 200 || s.Error;                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,DetailHistoryWithNullKeysReturnsError,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Count(10)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      receivedMessage = r == null || s.StatusCode != 200 || s.Error;                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: int totalMessages = 10;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: index < totalMessages / 2
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: object message = (double)index + 0.1D;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: secondPublishSet.Add((double)index + 0.1D);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Start(starttime)                  .End(midtime)                  .Count(totalMessages / 2)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0)                      {                          foreach (PNHistoryItemResult item in r.Messages)                          {                              if (item.Entry != null)                              {                                  historyMessageList.Add(item.Entry);                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Start(starttime)                  .End(midtime)                  .Count(totalMessages / 2)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0)                      {                          foreach (PNHistoryItemResult item in r.Messages)                          {                              if (item.Entry != null)                              {                                  historyMessageList.Add(item.Entry);                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: int totalMessages = 10;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: index < totalMessages / 2
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: object message = (double)index + 0.1D;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: secondPublishSet.Add((double)index + 0.1D);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Start(starttime)                  .End(midtime)                  .Count(totalMessages / 2)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0)                      {                          foreach (PNHistoryItemResult item in r.Messages)                          {                              if (item.Entry != null)                              {                                  historyMessageList.Add(item.Entry);                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.History().Channel(channel)                  .Start(starttime)                  .End(midtime)                  .Count(totalMessages / 2)                  .Reverse(true)                  .IncludeTimetoken(false)                  .Execute(new PNHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count > 0)                      {                          foreach (PNHistoryItemResult item in r.Messages)                          {                              if (item.Entry != null)                              {                                  historyMessageList.Add(item.Entry);                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new[] { grantChannel }).AuthKeys(new[] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                            if (r != null)                          {                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (r.Channels != null && r.Channels.Count > 0)                              {                                  var read = r.Channels[channel][authKey].ReadEnabled;                                  var write = r.Channels[channel][authKey].WriteEnabled;                                  if (read && write)                                  {                                      receivedGrantMessage = true;                                  }                              }                          }                      }                      catch { /* ignore */ }                      finally { grantManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryNoStoreShouldNotGetMessage,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(false)                  .Execute(new PNPublishResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          publishTimetoken = r.Timetoken;                          receivedMessage = true;                      }                      publishManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryShouldReturnDecryptMessage,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                  .Execute(new PNPublishResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          publishTimetoken = r.Timetoken;                          receivedMessage = true;                      }                      publishManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] { channel })                  .MaximumPerChannel(10)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] { channel })                  .MaximumPerChannel(10)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] { channel })                  .MaximumPerChannel(10)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] { channel })                  .IncludeMeta(false)                  .IncludeMessageActions(true)                  .Execute(new PNFetchHistoryResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithMessageActionsReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] { channel })                  .IncludeMeta(false)                  .IncludeMessageActions(true)                  .Execute(new PNFetchHistoryResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .MaximumPerChannel(10)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .MaximumPerChannel(10)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryCount10ReverseTrueReturnsRecords,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .MaximumPerChannel(10)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count >= 10)                      {                          receivedMessage = true;                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.Publish().Channel(channel)                      .Message(string.Format("DetailedHistoryStartTimeWithReverseTrue {0}"' index))                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              publishTimetoken = r.Timetoken;                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: index < 10
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                      .Start(currentTimetoken)                      .Reverse(false)                      .IncludeMeta(false)                      .Execute(new PNFetchHistoryResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                          {                              receivedMessage = true;                          }                          historyManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryStartWithReverseTrue,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                      .Start(currentTimetoken)                      .Reverse(false)                      .IncludeMeta(false)                      .Execute(new PNFetchHistoryResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.Count >= 10)                          {                              receivedMessage = true;                          }                          historyManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithNullKeysReturnsError,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithNullKeysReturnsError,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .MaximumPerChannel(10)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      receivedMessage = r == null || s.StatusCode != 200 || s.Error;                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,FetchHistoryWithNullKeysReturnsError,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .MaximumPerChannel(10)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      receivedMessage = r == null || s.StatusCode != 200 || s.Error;                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: int totalMessages = 10;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: index < totalMessages / 2
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: object message = string.Format("Set2-{0}"' (double)index + 0.1D);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: secondPublishSet.Add(string.Format("Set2-{0}"' (double)index + 0.1D));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .Start(starttime)                  .End(midtime)                  .MaximumPerChannel(totalMessages / 2)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          foreach (KeyValuePair<string' List<PNHistoryItemResult>> channelItem in r.Messages)                          {                              List<PNHistoryItemResult> itemList = channelItem.Value;                              foreach (PNHistoryItemResult item in itemList)                              {                                  if (item.Entry != null)                                  {                                      historyMessageList.Add(item.Entry);                                  }                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .Start(starttime)                  .End(midtime)                  .MaximumPerChannel(totalMessages / 2)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0)                      {                          System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          foreach (KeyValuePair<string' List<PNHistoryItemResult>> channelItem in r.Messages)                          {                              List<PNHistoryItemResult> itemList = channelItem.Value;                              foreach (PNHistoryItemResult item in itemList)                              {                                  if (item.Entry != null)                                  {                                      historyMessageList.Add(item.Entry);                                  }                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: int totalMessages = 10;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: index < totalMessages / 2
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: object message = (double)index + 0.1D;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: secondPublishSet.Add((double)index + 0.1D);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(message).ShouldStore(true)                      .Execute(new PNPublishResultExt((r' s) => {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("result={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                      currentTimetoken = (r != null && s.StatusCode == 200 && s.Error == false) ? r.Timetoken : 0;                  }                  catch { /* ignore */ }                  finally { timeManualEvent.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .Start(starttime)                  .End(midtime)                  .MaximumPerChannel(totalMessages / 2)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0)                      {                          foreach (KeyValuePair<string' List<PNHistoryItemResult>> channelItem in r.Messages)                          {                              List<PNHistoryItemResult> itemList = channelItem.Value;                              foreach (PNHistoryItemResult item in itemList)                              {                                  if (item.Entry != null)                                  {                                      historyMessageList.Add(item.Entry);                                  }                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The following statement contains a magic number: pubnub.FetchHistory().Channels(new string[] {channel })                  .Start(starttime)                  .End(midtime)                  .MaximumPerChannel(totalMessages / 2)                  .Reverse(true)                  .IncludeMeta(false)                  .Execute(new PNFetchHistoryResultExt((r' s) => {                      historyMessageList = new List<object>();                      if (r != null && s.StatusCode == 200 && !s.Error && r.Messages != null && r.Messages.ContainsKey(channel) && r.Messages[channel].Count > 0)                      {                          foreach (KeyValuePair<string' List<PNHistoryItemResult>> channelItem in r.Messages)                          {                              List<PNHistoryItemResult> itemList = channelItem.Value;                              foreach (PNHistoryItemResult item in itemList)                              {                                  if (item.Entry != null)                                  {                                      historyMessageList.Add(item.Entry);                                  }                              }                          }                      }                      historyManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: expectedTime = 14725889985315301;
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: Assert.True(13406688000000000 == nanoSecondTime);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTime,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime actualDate = Pubnub.TranslatePubnubUnixNanoSecondsToDateTime(13406688000000000);
Magic Number,PubNubMessaging.Tests,TimeResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTime.cs,OnResponse,The following statement contains a magic number: status.StatusCode == 200 && status.Error == false
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: pubnub1.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("PNStatus={0}"' pubnub1.JsonPluggableLibrary.SerializeToJsonString(s));                      if (r != null)                      {                          Debug.WriteLine(pubnub1.JsonPluggableLibrary.SerializeToJsonString(r));                          if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0))                          {                              timeReceived1 = true;                          }                      }                  }                  catch { /* ignore */ }                  finally { mreTime.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: pubnub2.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("PNStatus={0}"' pubnub1.JsonPluggableLibrary.SerializeToJsonString(s));                      if (r != null)                      {                          Debug.WriteLine(pubnub1.JsonPluggableLibrary.SerializeToJsonString(r));                          if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0))                          {                              timeReceived1 = true;                          }                      }                  }                  catch { /* ignore */ }                  finally { mreTime.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The following statement contains a magic number: pubnub1.Time().Execute(new PNTimeResultExt((r' s) => {                  try                  {                      Debug.WriteLine("PNStatus={0}"' pubnub1.JsonPluggableLibrary.SerializeToJsonString(s));                      if (r != null)                      {                          Debug.WriteLine(pubnub1.JsonPluggableLibrary.SerializeToJsonString(r));                          if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0))                          {                              timeReceived1 = true;                          }                      }                  }                  catch { /* ignore */ }                  finally { mreTime.Set(); }              }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: expectedTime = 14725889985315301;
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: pubnub1.Time().Execute(new PNTimeResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub1.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub1.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0))                              {                                  timeReceived1 = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { mreTime.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStamp,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The following statement contains a magic number: pubnub1.Time().Execute(new PNTimeResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub1.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub1.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && ((PubnubCommon.EnableStubTest && expectedTime == r.Timetoken) || r.Timetoken > 0))                              {                                  timeReceived1 = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { mreTime.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,ThenWithProxyItShouldReturnTimeStampWithSSL,The following statement contains a magic number: mreTime.WaitOne(310 * 1000);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: DateTime dt = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateDateTimeToUnixTime,The following statement contains a magic number: Assert.True(13406688000000000 == nanoSecondTime);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime expectedDate = new DateTime(2012' 6' 26' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubNubMessaging.Tests,WhenGetRequestServerTimeMultiInstance,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGetRequestServerTimeMultiInstance.cs,TranslateUnixTimeToDateTime,The following statement contains a magic number: DateTime actualDate = Pubnub.TranslatePubnubUnixNanoSecondsToDateTime(13406688000000000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadWriteShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadWriteShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(false).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithReadShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithWriteShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(false).Write(true).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenUserLevelWithWriteShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleChannelGrantShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().AuthKeys(new [] { authKey }).Channels(channelBuilder).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleChannelGrantShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().Channels(channelBuilder).AuthKeys(authKeyBuilder).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenMultipleAuthGrantShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenRevokeAtUserLevelReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadManageShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroup }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadManageShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadShouldReturnSuccess,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroup }).AuthKeys(new [] { authKey }).Read(true).Write(false).Manage(false).TTL(5).Execute(new GrantResult());
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenChannelGroupLevelWithReadShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,HexStringToByteArray,The following statement contains a magic number: return Enumerable.Range(0' hex.Length)                               .Where(x => x % 2 == 0)                               .Select(x => Convert.ToByte(hex.Substring(x' 2)' 16))                               .ToArray();
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: chBitmaskPermDic.Add(channelList[chIndex]' 3);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: messageEnvelope.Add("ttl"' 1440);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: pubnub.GrantToken()                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_userid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_userid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_spaceid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_spaceid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "^emp-gen-*"' new PNResourcePermission() { Read = true' Write = true } }'                                  { "^emp-mgr-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "^public-*"' new PNResourcePermission() { Read = true } }'                                  { "^private-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                                //.Users(new Dictionary<string' PNResourcePermission>() {                              //    { "myuser1"' new PNResourcePermission() { Read = true' Write = true' Create = true } } })                              //.Spaces(new Dictionary<string' PNResourcePermission>() {                              //    { "myspace1"' new PNResourcePermission() { Read = true' Write = true' Delete = true } } })                              .TTL(30*24*60)                              .AuthKey("myauth")                      //.QueryParam(new System.Collections.Generic.Dictionary<string' object>() { { "PoundsSterling"' "£13.37" } })                      //.Meta(new System.Collections.Generic.Dictionary<string' object>() { { "user-id"' "jay@example.com" }' { "contains-unicode"' "The 💩 test." } })                      .Execute(new PNAccessManagerTokenResultExt((result' status)=>                       {                          if (result != null)                          {                              try                              {                                  string token = result.Token;                                  PNGrantToken grantObject = pubnub.ParseToken(token);                                  System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(grantObject));                              }                              catch (Exception ex)                              {                                  System.Diagnostics.Debug.WriteLine(ex.ToString());                              }                              receivedGrantMessage = true;                          }                          else                          {                              System.Diagnostics.Debug.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(status));                          }                          grantManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: pubnub.GrantToken()                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_userid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_userid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_spaceid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_spaceid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "^emp-gen-*"' new PNResourcePermission() { Read = true' Write = true } }'                                  { "^emp-mgr-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "^public-*"' new PNResourcePermission() { Read = true } }'                                  { "^private-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                                //.Users(new Dictionary<string' PNResourcePermission>() {                              //    { "myuser1"' new PNResourcePermission() { Read = true' Write = true' Create = true } } })                              //.Spaces(new Dictionary<string' PNResourcePermission>() {                              //    { "myspace1"' new PNResourcePermission() { Read = true' Write = true' Delete = true } } })                              .TTL(30*24*60)                              .AuthKey("myauth")                      //.QueryParam(new System.Collections.Generic.Dictionary<string' object>() { { "PoundsSterling"' "£13.37" } })                      //.Meta(new System.Collections.Generic.Dictionary<string' object>() { { "user-id"' "jay@example.com" }' { "contains-unicode"' "The 💩 test." } })                      .Execute(new PNAccessManagerTokenResultExt((result' status)=>                       {                          if (result != null)                          {                              try                              {                                  string token = result.Token;                                  PNGrantToken grantObject = pubnub.ParseToken(token);                                  System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(grantObject));                              }                              catch (Exception ex)                              {                                  System.Diagnostics.Debug.WriteLine(ex.ToString());                              }                              receivedGrantMessage = true;                          }                          else                          {                              System.Diagnostics.Debug.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(status));                          }                          grantManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: pubnub.GrantToken()                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_userid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_userid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-uid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "pandu_spaceid0"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu_spaceid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid1"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } }'                                  { "pandu-ut-sid2"' new PNResourcePermission() { Read = true' Write = true' Manage= true' Create = true' Delete=true } } })                              .Users(new Dictionary<string' PNResourcePermission>() {                                  { "^emp-gen-*"' new PNResourcePermission() { Read = true' Write = true } }'                                  { "^emp-mgr-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                              .Spaces(new Dictionary<string' PNResourcePermission>() {                                  { "^public-*"' new PNResourcePermission() { Read = true } }'                                  { "^private-*"' new PNResourcePermission() { Read = true' Write = true' Create = true' Delete = true } } }' true)                                //.Users(new Dictionary<string' PNResourcePermission>() {                              //    { "myuser1"' new PNResourcePermission() { Read = true' Write = true' Create = true } } })                              //.Spaces(new Dictionary<string' PNResourcePermission>() {                              //    { "myspace1"' new PNResourcePermission() { Read = true' Write = true' Delete = true } } })                              .TTL(30*24*60)                              .AuthKey("myauth")                      //.QueryParam(new System.Collections.Generic.Dictionary<string' object>() { { "PoundsSterling"' "£13.37" } })                      //.Meta(new System.Collections.Generic.Dictionary<string' object>() { { "user-id"' "jay@example.com" }' { "contains-unicode"' "The 💩 test." } })                      .Execute(new PNAccessManagerTokenResultExt((result' status)=>                       {                          if (result != null)                          {                              try                              {                                  string token = result.Token;                                  PNGrantToken grantObject = pubnub.ParseToken(token);                                  System.Diagnostics.Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(grantObject));                              }                              catch (Exception ex)                              {                                  System.Diagnostics.Debug.WriteLine(ex.ToString());                              }                              receivedGrantMessage = true;                          }                          else                          {                              System.Diagnostics.Debug.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(status));                          }                          grantManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenGrantIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,ThenPAMv3ChannelShouldReturnTokenSuccess,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new[] { grantChannel }).AuthKeys(new[] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                            if (r != null)                          {                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (r.Channels != null && r.Channels.Count > 0)                              {                                  var read = r.Channels[channel][authKey].ReadEnabled;                                  var write = r.Channels[channel][authKey].WriteEnabled;                                  if (read && write)                                  {                                      receivedGrantMessage = true;                                  }                              }                          }                      }                      catch { /* ignore */ }                      finally { grantManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: pubnub.GetMessageActions()                  .Channel(channel)                  .Execute(new PNGetMessageActionsResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("GetMessageActions = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                            if (r.MessageActions != null && r.MessageActions.Exists(x => x.MessageTimetoken == currentMessageTimetoken))                          {                              PNMessageActionItem actionItem = r.MessageActions.Find(x => x.MessageTimetoken == currentMessageTimetoken);                              currentActionTimetoken = actionItem.ActionTimetoken;                              currentUUID = actionItem.Uuid;                          }                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: pubnub.RemoveMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .ActionTimetoken(currentActionTimetoken)                  .Uuid(currentUUID)                  .Execute(new PNRemoveMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("RemoveMessageAction = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddMessageActionReturnsSuccess,The following statement contains a magic number: pubnub.AddMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .Action(new PNMessageAction { Type = "reaction"' Value = "smily_face" })                  .Execute(new PNAddMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.MessageTimetoken == currentMessageTimetoken)                      {                          System.Diagnostics.Debug.WriteLine("AddMessageAction = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,RemoveMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,RemoveMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,RemoveMessageActionReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,RemoveMessageActionReturnsSuccess,The following statement contains a magic number: pubnub.GetMessageActions()                  .Channel(channel)                  .Limit(1)                  .Execute(new PNGetMessageActionsResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("GetMessageActions = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                            if (r.MessageActions != null && r.MessageActions.Count > 0)                          {                              PNMessageActionItem actionItem = r.MessageActions[0];                              currentMessageTimetoken = actionItem.MessageTimetoken;                              currentActionTimetoken = actionItem.ActionTimetoken;                              currentUUID = actionItem.Uuid;                          }                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,RemoveMessageActionReturnsSuccess,The following statement contains a magic number: pubnub.RemoveMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .ActionTimetoken(currentActionTimetoken)                  .Uuid(currentUUID)                  .Execute(new PNRemoveMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("RemoveMessageAction = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,GetMessageActionsReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,GetMessageActionsReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,GetMessageActionsReturnsSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,GetMessageActionsReturnsSuccess,The following statement contains a magic number: pubnub.GetMessageActions()                  .Channel(channel)                  .Execute(new PNGetMessageActionsResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("GetMessageActions = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: me.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: pubnub.GetMessageActions()                  .Channel(channel)                  .Execute(new PNGetMessageActionsResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("GetMessageActions = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                            if (r.MessageActions != null && r.MessageActions.Exists(x => x.MessageTimetoken == currentMessageTimetoken))                          {                              PNMessageActionItem actionItem = r.MessageActions.Find(x => x.MessageTimetoken == currentMessageTimetoken);                              currentActionTimetoken = actionItem.ActionTimetoken;                              currentUUID = actionItem.Uuid;                          }                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: pubnub.RemoveMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .ActionTimetoken(currentActionTimetoken)                  .Uuid(currentUUID)                  .Execute(new PNRemoveMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("RemoveMessageAction = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: pubnub.AddMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .Action(new PNMessageAction { Type = "reaction"' Value = "smily_face" })                  .Execute(new PNAddMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error && r.MessageTimetoken == currentMessageTimetoken)                      {                          System.Diagnostics.Debug.WriteLine("AddMessageAction = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                          currentActionTimetoken = r.ActionTimetoken;                          currentUUID = r.Uuid;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: pubnub.RemoveMessageAction()                  .Channel(channel)                  .MessageTimetoken(currentMessageTimetoken)                  .ActionTimetoken(currentActionTimetoken)                  .Uuid(currentUUID)                  .Execute(new PNRemoveMessageActionResultExt((r' s) =>                  {                      if (r != null && s.StatusCode == 200 && !s.Error)                      {                          System.Diagnostics.Debug.WriteLine("RemoveMessageAction To Confirm = " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                          receivedMessage = true;                      }                      me.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageAction,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageAction.cs,AddRemoveMessageActionReturnEventInfo,The following statement contains a magic number: Thread.Sleep(4000);
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new[] { channelName1' channelName2 }).AuthKeys(new[] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt((r's)=>                   {                      if (r != null)                      {                          receivedGrantMessage = true;                      }                      grantManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel1Timetoken1ShouldReturnSuccess,The following statement contains a magic number: pubnub.MessageCounts()                  .Channels(new[] { channelName1 })                  .ChannelsTimetoken(new long[] { 15505396580138884 })                  .Execute(new PNMessageCountResultExt((r's)=>                       {                          if (r != null && r.Channels != null)                          {                              receivedMessage = true;                          }                          unittestManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel1Timetoken1ShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel2Timetoken2ShouldReturnSuccess,The following statement contains a magic number: pubnub.MessageCounts()                  .Channels(new[] { channelName1' channelName2 })                  .ChannelsTimetoken(new long[] { 15505396580138884' 15505396580138884 })                  .Execute(new PNMessageCountResultExt((r' s) =>                  {                      if (r != null && r.Channels != null)                      {                          receivedMessage = true;                      }                      unittestManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel2Timetoken2ShouldReturnSuccess,The following statement contains a magic number: pubnub.MessageCounts()                  .Channels(new[] { channelName1' channelName2 })                  .ChannelsTimetoken(new long[] { 15505396580138884' 15505396580138884 })                  .Execute(new PNMessageCountResultExt((r' s) =>                  {                      if (r != null && r.Channels != null)                      {                          receivedMessage = true;                      }                      unittestManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenMessageCountIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageCountIsRequested.cs,ThenChannel2Timetoken2ShouldReturnSuccess,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).Delete(true).TTL(20).Execute(new UTGrantResult());
Magic Number,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,DeleteMessageShouldReturnSuccessMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenMessageDeletedFromChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenMessageDeletedFromChannel.cs,DeleteMessageShouldReturnSuccessMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,Init,The following statement contains a magic number: pubnub.GrantToken()                  .Users(new Dictionary<string' PNResourcePermission>() { { userId1' perm }' { userId2' perm } })                  .Spaces(new Dictionary<string' PNResourcePermission>() { { spaceId' perm } })                  .AuthKey(authKey)                  .TTL(20)                  .Execute(new PNAccessManagerTokenResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null && !string.IsNullOrEmpty(r.Token))                                          {                                              Debug.WriteLine("PNAccessManagerTokenResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              authToken = r.Token;                                              receivedGrantMessage = true;                                          }                                      }                                      catch {  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId1).Name("pandu-ut-un1")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId1 == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId2).Name("pandu-ut-un2")                          .Execute(new PNCreateUserResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (userId2 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMembers().SpaceId(spaceId)                      .Add(new List<PNMember>()                              {                              new PNMember() { UserId = userId1 }'                              new PNMember() { UserId = userId2 }                      })                      .Include(new PNMemberField[] { PNMemberField.CUSTOM' PNMemberField.USER' PNMemberField.USER_CUSTOM })                      .IncludeCount(true)                      .Page(new PNPage() { Next = ""' Prev = "" })                      .Execute(new PNManageMembersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Members != null                              && r.Members.Find(x => x.UserId == userId1) != null                              && r.Members.Find(x => x.UserId == userId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMembers().SpaceId(spaceId)                      .Update(new List<PNMember>()                              {                              new PNMember() { UserId = userId1' Custom = new Dictionary<string' object>(){ { "color"' "green1" } } }'                              new PNMember() { UserId = userId2' Custom = new Dictionary<string' object>(){ { "color"' "green2" } } }                      })                      .Include(new PNMemberField[] { PNMemberField.CUSTOM' PNMemberField.USER' PNMemberField.USER_CUSTOM })                      .IncludeCount(true)                      .Page(new PNPage() { Next = ""' Prev = "" })                      .Execute(new PNManageMembersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Members != null                              && r.Members.Find(x => x.UserId == userId1) != null                              && r.Members.Find(x => x.UserId == userId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMembers().SpaceId(spaceId)                      .Remove(new List<string>() { userId2 })                      .Include(new PNMemberField[] { PNMemberField.CUSTOM' PNMemberField.USER' PNMemberField.USER_CUSTOM })                      .IncludeCount(true)                      .Page(new PNPage() { Next = ""' Prev = "" })                      .Execute(new PNManageMembersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Members != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetMembers().SpaceId(spaceId)                      .Execute(new PNGetMembersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Members != null                              && r.Members.Find(x => x.UserId == userId1) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId1).Name("pandu-ut-un1")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId1 == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId2).Name("pandu-ut-un2")                          .Execute(new PNCreateUserResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (userId2 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.ManageMembers().SpaceId(spaceId)                      .Add(new List<PNMember>()                              {                              new PNMember() { UserId = userId1 }'                              new PNMember() { UserId = userId2 }                      })                      .Execute(new PNManageMembersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Members != null                              && r.Members.Find(x => x.UserId == userId1) != null                              && r.Members.Find(x => x.UserId == userId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.ManageMembers().SpaceId(spaceId)                          .Update(new List<PNMember>()                                  {                              new PNMember() { UserId = userId1' Custom = new Dictionary<string' object>(){ { "color"' "green1" } } }                          })                          .Remove(new List<string>() { userId2 })                          .Execute(new PNManageMembersResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (r.Members != null                                  && r.Members.Find(x => x.UserId == userId1) != null)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenMemberAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,Init,The following statement contains a magic number: pubnub.GrantToken()                  .Users(new Dictionary<string' PNResourcePermission>() { { userId' perm } })                  .Spaces(new Dictionary<string' PNResourcePermission>() { { spaceId1' perm }' { spaceId2' perm } })                  .AuthKey(authKey)                  .TTL(20)                  .Execute(new PNAccessManagerTokenResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null && !string.IsNullOrEmpty(r.Token))                                          {                                              Debug.WriteLine("PNAccessManagerTokenResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              authToken = r.Token;                                              receivedGrantMessage = true;                                          }                                      }                                      catch { }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId).Name("pandu-ut-un")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId1).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId1 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId2).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId2 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMemberships().UserId(userId)                      .Add(new List<PNMembership>()                              {                              new PNMembership() { SpaceId = spaceId1 }'                              new PNMembership() { SpaceId = spaceId2 }                      })                      .Execute(new PNManageMembershipsResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Memberships != null                               && r.Memberships.Find(x=> x.SpaceId == spaceId1) != null                              && r.Memberships.Find(x => x.SpaceId == spaceId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMemberships().UserId(userId)                      .Update(new List<PNMembership>()                              {                              new PNMembership() { SpaceId = spaceId1' Custom = new Dictionary<string' object>(){ { "color"' "green1" } } }'                              new PNMembership() { SpaceId = spaceId2' Custom = new Dictionary<string' object>(){ { "color"' "green2" } } }                      })                      .Execute(new PNManageMembershipsResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Memberships != null                              && r.Memberships.Find(x => x.SpaceId == spaceId1) != null                              && r.Memberships.Find(x => x.SpaceId == spaceId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.ManageMemberships().UserId(userId)                      .Remove(new List<string>() { spaceId2 })                      .Execute(new PNManageMembershipsResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Memberships != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenAddUpdateRemoveSpaceShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetMemberships().UserId(userId)                      .Execute(new PNGetMembershipsResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Memberships != null                              && r.Memberships.Find(x => x.SpaceId == spaceId1) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId).Name("pandu-ut-un")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId1).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId1 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId2).Name("pandu-ut-spname")                          .Execute(new PNCreateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId2 == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.ManageMemberships().UserId(userId)                      .Add(new List<PNMembership>()                              {                              new PNMembership() { SpaceId = spaceId1 }'                              new PNMembership() { SpaceId = spaceId2 }                      })                      .Execute(new PNManageMembershipsResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (r.Memberships != null                              && r.Memberships.Find(x => x.SpaceId == spaceId1) != null                              && r.Memberships.Find(x => x.SpaceId == spaceId2) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: pubnub.ManageMemberships().UserId(userId)                          .Update(new List<PNMembership>()                                  {                              new PNMembership() { SpaceId = spaceId1' Custom = new Dictionary<string' object>(){ { "color"' "green1" } } }                          })                          .Remove(new List<string>() { spaceId2 })                          .Execute(new PNManageMembershipsResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (r.Memberships != null                                  && r.Memberships.Find(x => x.SpaceId == spaceId1) != null)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectMembership,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMembership.cs,ThenMembershipAddUpdateRemoveShouldReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,Init,The following statement contains a magic number: pubnub.GrantToken()                  .Spaces(new Dictionary<string' PNResourcePermission>() { { spaceId' perm } })                  .AuthKey(authKey)                  .TTL(20)                  .Execute(new PNAccessManagerTokenResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null && !string.IsNullOrEmpty(r.Token))                                          {                                              Debug.WriteLine("PNAccessManagerTokenResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              authToken = r.Token;                                              receivedGrantMessage = true;                                          }                                      }                                      catch { }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId).Name("pandu-ut-spname")                      .Execute(new PNCreateSpaceResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (spaceId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.UpdateSpace().Id(spaceId).Name("pandu-ut-spname-upd")                      .Description("pandu-ut-spdesc")                      .CustomObject(new Dictionary<string' object>() { { "color"' "red" } })                          .Execute(new PNUpdateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetSpace().SpaceId(spaceId).IncludeCustom(true)                      .Execute(new PNGetSpaceResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (spaceId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetSpaces().IncludeCount(true)                      .Execute(new PNGetSpacesResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              List<PNSpaceResult> spaceList = r.Spaces;                              if (spaceList != null && spaceList.Count > 0 && spaceList.Find(x => x.Id == spaceId) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateSpace().Id(spaceId).Name("pandu-ut-spname")                      .Execute(new PNCreateSpaceResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (spaceId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: pubnub.UpdateSpace().Id(spaceId).Name("pandu-ut-spname-upd")                      .Description("pandu-ut-spdesc")                      .CustomObject(new Dictionary<string' object>() { { "color"' "red" } })                          .Execute(new PNUpdateSpaceResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (spaceId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectSpace,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectSpace.cs,ThenSpaceUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,Init,The following statement contains a magic number: pubnub.GrantToken()                  .Users(new Dictionary<string' PNResourcePermission>() { { userId' perm } })                  .AuthKey(authKey)                  .TTL(20)                  .Execute(new PNAccessManagerTokenResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null && !string.IsNullOrEmpty(r.Token))                                          {                                              Debug.WriteLine("PNAccessManagerTokenResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              authToken = r.Token;                                              receivedGrantMessage = true;                                          }                                      }                                      catch { }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId).Name("pandu-ut-un")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.UpdateUser().Id(userId).Name("pandu-ut-un-upd")                      .ProfileUrl("pandu-sample-profile-url").ExternalId("pandu-sample-ext-id")                      .Email("test@test.com")                      .CustomObject(new Dictionary<string' object>() { { "color"' "red" } })                          .Execute(new PNUpdateUserResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (userId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetUser().UserId(userId).IncludeCustom(true)                      .Execute(new PNGetUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserCRUDShouldReturnSuccessCodeAndInfo,The following statement contains a magic number: pubnub.GetUsers().IncludeCount(true)                      .Execute(new PNGetUsersResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              List<PNUserResult> userList = r.Users;                              if (userList != null && userList.Count > 0 && userList.Find(x => x.Id == userId) != null)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: pubnub.CreateUser().Id(userId).Name("pandu-ut-un")                      .Execute(new PNCreateUserResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                              if (userId == r.Id)                              {                                  receivedMessage = true;                              }                          }                          manualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: pubnub.UpdateUser().Id(userId).Name("pandu-ut-un-upd")                      .ProfileUrl("pandu-sample-profile-url").ExternalId("pandu-sample-ext-id")                      .Email("test@test.com")                      .CustomObject(new Dictionary<string' object>() { { "color"' "red" } })                          .Execute(new PNUpdateUserResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  pubnub.JsonPluggableLibrary.SerializeToJsonString(r);                                  if (userId == r.Id)                                  {                                      receivedMessage = true;                                  }                              }                              manualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: manualEvent.WaitOne(2000);
Magic Number,PubNubMessaging.Tests,WhenObjectUser,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectUser.cs,ThenUserUpdateDeleteShouldReturnEventInfo,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt((result' status)=>                   {                      if (result != null)                      {                          Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(result));                          if (result.Channels != null && result.Channels.Count > 0)                          {                              var read = result.Channels[channel][authKey].ReadEnabled;                              var write = result.Channels[channel][authKey].WriteEnabled;                              if (read && write)                              {                                  receivedGrantMessage = true;                              }                          }                      }                      grantManualEvent.Set();                  }));
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsToastShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsToastShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsToastShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsFlipTileShouldReturnSuccess,The following statement contains a magic number: tile.count = 6;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsFlipTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsFlipTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsFlipTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 2000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The following statement contains a magic number: tile.count = 2;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsCycleTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsIconicTileShouldReturnSuccess,The following statement contains a magic number: tile.count = 2;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsIconicTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsIconicTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenPublishMpnsIconicTileShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAuditPushChannelProvisionsShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAuditPushChannelProvisionsShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAuditPushChannelProvisionsShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2AddDeviceToPushChannelShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2AddDeviceToPushChannelShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2AddDeviceToPushChannelShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemovePushChannelFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemovePushChannelFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemovePushChannelFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2ListPushChannelsFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2ListPushChannelsFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2ListPushChannelsFromDeviceShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemoveDeviceFromPushShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemoveDeviceFromPushShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenPushIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenPushIsRequested.cs,ThenAPNS2RemoveDeviceFromPushShouldReturnSuccess,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(channelsGrant).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelKP in r.Channels)                                                  {                                                      string receivedChannel = channelKP.Key;                                                      if (Array.IndexOf(channelsGrant' receivedChannel) > -1)                                                      {                                                          var read = r.Channels[receivedChannel][authKey].ReadEnabled;                                                          var write = r.Channels[receivedChannel][authKey].WriteEnabled;                                                          if (read && write)                                                          {                                                              receivedGrantMessage = true;                                                          }                                                          else                                                          {                                                              receivedGrantMessage = false;                                                          }                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                          break;                                                      }                                                  }                                              }                                          }                                      }                                      catch { /* ignore */ }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                   {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                   {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(publishedMessage)                          .Execute(new PNPublishResultExt((r' s) =>                          {                              if (r != null && s.StatusCode == 200 && !s.Error)                              {                                  internalReceivedMessage = true;                              }                              publishManualEvent.Set();                          }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,CommonComplexMessageSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  Uuid = "mytestuuid"'                  Secure = false'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { }'                  (o' p) => { }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { }'                  (o' p) => { }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  Uuid = "mytestuuid"'                  Secure = true'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { }'                  (o' p) => { }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                      }                      subscribeManualEvent.Set();                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenMultiSubscribeShouldReturnConnectStatusSSL,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          numberOfReceivedMessages++;                          if (numberOfReceivedMessages >= 10)                          {                              receivedMessage = true;                              subscribeManualEvent.Set();                          }                      }                  }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          numberOfReceivedMessages++;                          if (numberOfReceivedMessages >= 10)                          {                              receivedMessage = true;                              subscribeManualEvent.Set();                          }                      }                  }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          numberOfReceivedMessages++;                          if (numberOfReceivedMessages >= 10)                          {                              receivedMessage = true;                              subscribeManualEvent.Set();                          }                      }                  }'                  (o' p) => {                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: pubnub.Publish().Channel(channel).Message(index.ToString())                              .Execute(new PNPublishResultExt((r' s) =>                              {                                  if (r != null && s.StatusCode == 200 && !s.Error)                                  {                                      receivedMessage = true;                                  }                                  publishManualEvent.Set();                              }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: index < 10
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel.cs,ThenSubscriberShouldBeAbleToReceiveManyMessages,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(channelsGrant).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult());
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  CipherKey = cipherKey'                  Uuid = "mytestuuid"'                  Secure = ssl'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  CipherKey = cipherKey'                  Uuid = "mytestuuid"'                  Secure = ssl'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel2,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,The following statement contains a magic number: status.StatusCode != 200 || status.Error
Magic Number,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,The following statement contains a magic number: status.StatusCode != 200 || status.Error
Magic Number,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,The following statement contains a magic number: status.StatusCode != 200 || status.Error
Magic Number,PubNubMessaging.Tests,UTPublishResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,OnResponse,The following statement contains a magic number: result != null && status.StatusCode == 200 && !status.Error
Magic Number,PubNubMessaging.Tests,UTPublishResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,OnResponse,The following statement contains a magic number: result != null && status.StatusCode == 200 && !status.Error
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(channelsGrant).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult());
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnUnicodeMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout =  310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout =  310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeReturnForwardSlashMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout =  310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout =  310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannel3,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel3.cs,CommonSubscribeShouldReturnSpecialCharMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: pubnub.Grant().AuthKeys(new [] { authKey }).ChannelGroups(new [] { channelGroupName' channelGroupName1' channelGroupName2 }).Channels(new [] { channelName }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                                if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelGroupKP in r.ChannelGroups)                                                  {                                                      receivedGrantMessage = false;                                                        string channelGroup = channelGroupKP.Key;                                                      var read = r.ChannelGroups[channelGroup][authKey].ReadEnabled;                                                      var write = r.ChannelGroups[channelGroup][authKey].WriteEnabled;                                                      var manage = r.ChannelGroups[channelGroup][authKey].ManageEnabled;                                                        if (read && write && manage)                                                      {                                                          receivedGrantMessage = true;                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                          break;                                                      }                                                  }                                              }                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelKP in r.Channels)                                                  {                                                      receivedGrantMessage = false;                                                        string channel = channelKP.Key;                                                      var read = r.Channels[channel][authKey].ReadEnabled;                                                      var write = r.Channels[channel][authKey].WriteEnabled;                                                      var manage = r.Channels[channel][authKey].ManageEnabled;                                                        if (read && write && manage)                                                      {                                                          receivedGrantMessage = true;                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                          break;                                                      }                                                  }                                              }                                            }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch { /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: pubnub.Grant().AuthKeys(new [] { authKey }).ChannelGroups(new [] { channelGroupName' channelGroupName1' channelGroupName2 }).Channels(new [] { channelName }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                                if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelGroupKP in r.ChannelGroups)                                                  {                                                      receivedGrantMessage = false;                                                        string channelGroup = channelGroupKP.Key;                                                      var read = r.ChannelGroups[channelGroup][authKey].ReadEnabled;                                                      var write = r.ChannelGroups[channelGroup][authKey].WriteEnabled;                                                      var manage = r.ChannelGroups[channelGroup][authKey].ManageEnabled;                                                        if (read && write && manage)                                                      {                                                          receivedGrantMessage = true;                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                          break;                                                      }                                                  }                                              }                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelKP in r.Channels)                                                  {                                                      receivedGrantMessage = false;                                                        string channel = channelKP.Key;                                                      var read = r.Channels[channel][authKey].ReadEnabled;                                                      var write = r.Channels[channel][authKey].WriteEnabled;                                                      var manage = r.Channels[channel][authKey].ManageEnabled;                                                        if (read && write && manage)                                                      {                                                          receivedGrantMessage = true;                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                          break;                                                      }                                                  }                                              }                                            }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch { /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  Uuid = "mytestuuid"'                  Secure = false'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => {                      if (m != null) {                          Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                          if (string.Compare(publishedMessage.ToString()' m.Message.ToString()' true) == 0)                          {                              receivedMessage = true;                          }                      }                      subscribeManualEvent.Set();                  }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => {                      if (m != null) {                          Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                          if (string.Compare(publishedMessage.ToString()' m.Message.ToString()' true) == 0)                          {                              receivedMessage = true;                          }                      }                      subscribeManualEvent.Set();                  }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } })                  .Execute(new PNChannelGroupsAddChannelResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && s.AffectedChannelGroups.Contains(channelGroupName))                              {                                  receivedMessage = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { channelGroupManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.Publish().Channel(channelName).Message(publishedMessage).QueryParam(new Dictionary<string' object> { { "ut"' "ThenSubscribeShouldReturnReceivedMessage" } })                      .Execute(new PNPublishResultExt((r' s) =>                      {                          Debug.WriteLine("Publish PNStatus => Status = : " + s.StatusCode.ToString());                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              Debug.WriteLine("Publish Response: " + pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              publishTimetoken = r.Timetoken;                              receivedMessage = true;                          }                            publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName)                  .Execute(new PNChannelGroupsAddChannelResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && s.AffectedChannelGroups.Contains(channelGroupName))                              {                                  receivedMessage = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { channelGroupManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200                           && (s.AffectedChannelGroups != null && s.AffectedChannelGroups.Contains(channelGroupName1) && s.AffectedChannelGroups.Contains(channelGroupName2))                          && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200                           && (s.AffectedChannelGroups != null && s.AffectedChannelGroups.Contains(channelGroupName1) && s.AffectedChannelGroups.Contains(channelGroupName2))                          && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName1 }).ChannelGroup(channelGroupName1)                  .Execute(new PNChannelGroupsAddChannelResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2)))                              {                                  receivedMessage = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { channelGroupManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName2 }).ChannelGroup(channelGroupName2)                  .Execute(new PNChannelGroupsAddChannelResultExt((r' s) => {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && (s.AffectedChannelGroups.Contains(channelGroupName1) || s.AffectedChannelGroups.Contains(channelGroupName2)))                              {                                  receivedMessage = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { channelGroupManualEvent.Set(); }                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannelGroup.cs,ThenMultiSubscribeShouldReturnConnectStatus,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch {  /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch {  /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          if (r != null && s.StatusCode == 200 && !s.Error)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.Channels != null && r.Channels.Count > 0)                                              {                                                  var read = r.Channels[channel][authKey].ReadEnabled;                                                  var write = r.Channels[channel][authKey].WriteEnabled;                                                  if (read && write)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                              else if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  var read = r.ChannelGroups[channelGroupName][authKey].ReadEnabled;                                                  var write = r.ChannelGroups[channelGroupName][authKey].WriteEnabled;                                                  var manage = r.ChannelGroups[channelGroupName][authKey].ManageEnabled;                                                  if (read && write && manage)                                                  {                                                      receivedGrantMessage = true;                                                  }                                              }                                          }                                          else                                          {                                              Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          }                                      }                                      catch                                      {                                      }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      internalReceivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      internalReceivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(publishChannel).Message(publishedMessage)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              internalReceivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnReceivedMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      internalReceivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              internalReceivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      internalReceivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          internalReceivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: manualResetEventWaitTimeout = (PubnubCommon.EnableStubTest) ? 1000 : 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: pubnub.Publish().Channel(publishChannel).Message(publishedMessage)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              internalReceivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,CommonSubscribeShouldReturnEmojiMessageBasedOnParams,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              receivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      receivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              receivedMessage = true;                          }                          subscribeManualEvent.Set();                      }                  }'                  (o' p) => {                      receivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                      else if (s.StatusCode == 200 && s.Category == PNStatusCategory.PNConnectedCategory)                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelAddForGroup }).ChannelGroup(channelGroupName)                  .Execute(new PNChannelGroupsAddChannelResultExt(                                  (r' s) => {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null)                                          {                                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (s.StatusCode == 200 && s.Error == false)                                              {                                                  receivedMessage = true;                                              }                                          }                                      }                                      catch { /* ignore */ }                                      finally                                      {                                          channelGroupManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.Publish().Channel(channelAddForGroup).Message(publishedMessage)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.Publish().Channel(pubWildChannelName).Message(publishedMessage)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: pubnub.Publish().Channel(subChannelName).Message(publishedMessage)                      .Execute(new PNPublishResultExt((r' s) =>                      {                          if (r != null && s.StatusCode == 200 && !s.Error)                          {                              receivedMessage = true;                          }                          publishManualEvent.Set();                      }));
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ChannelAndChannelGroupAndWildcardChannelSubscribeShouldReturnReceivedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The following statement contains a magic number: PNConfiguration config = new PNConfiguration              {                  PublishKey = PubnubCommon.PublishKey'                  SubscribeKey = PubnubCommon.SubscribeKey'                  Uuid = "mytestuuid"'                  Secure = false'                  LogVerbosity = PNLogVerbosity.BODY'                  PubnubLog = new TestLog()'                  NonSubscribeRequestTimeout = 120              };
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) =>                  {                      Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m));                      if (m != null)                      {                          Debug.WriteLine("SubscribeCallback: PNMessageResult: {0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(m.Message));                          if (pubnub.JsonPluggableLibrary.SerializeToJsonString(publishedMessage) == m.Message.ToString())                          {                              receivedMessage = true;                          }                      }                      subscribeManualEvent.Set();                  }'                  (o' p) => {                      receivedMessage = true;                      subscribeManualEvent.Set();                  }'                  (o' s) => {                      Debug.WriteLine(string.Format("{0} {1} {2}"' s.Operation' s.Category' s.StatusCode));                      if (s.StatusCode != 200 || s.Error)                      {                          receivedErrorMessage = true;                          if (s.ErrorData != null) { Debug.WriteLine(s.ErrorData.Information); }                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,ThenSubscribeShouldReturnWildCardPresenceEventInWildcardPresenceCallback,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,Init,The following statement contains a magic number: pubnub.Grant().Channels(new [] { channel }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20).Execute(new UTGrantResult());
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannel.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: pubnub.Grant().ChannelGroups(new [] { channelGroupName }).AuthKeys(new [] { authKey }).Read(true).Write(true).Manage(true).TTL(20)                  .Execute(new PNAccessManagerGrantResultExt(                                  (r' s) =>                                  {                                      try                                      {                                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                                          if (r != null)                                          {                                              Debug.WriteLine("PNAccessManagerGrantResult={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                                              if (r.ChannelGroups != null && r.ChannelGroups.Count > 0)                                              {                                                  foreach (KeyValuePair<string' Dictionary<string' PNAccessManagerKeyData>> channelGroupKP in r.ChannelGroups)                                                  {                                                      string channelGroup = channelGroupKP.Key;                                                      var read = r.ChannelGroups[channelGroup][authKey].ReadEnabled;                                                      var write = r.ChannelGroups[channelGroup][authKey].WriteEnabled;                                                      if (read && write)                                                      {                                                          receivedGrantMessage = true;                                                      }                                                      else                                                      {                                                          receivedGrantMessage = false;                                                      }                                                  }                                              }                                          }                                      }                                      catch { /* ignore */  }                                      finally                                      {                                          grantManualEvent.Set();                                      }                                  }));
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,Init,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: SubscribeCallback listenerSubCallack = new SubscribeCallbackExt(                  (o' m) => { if (m != null) { Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(m)); } }'                  (o' p) => { /* Catch the presence events */ }'                  (o' s) => {                      Debug.WriteLine("SubscribeCallback: PNStatus: " + s.StatusCode.ToString());                      if (s.StatusCode != 200 || s.Error)                      {                          subscribeManualEvent.Set();                          if (s.ErrorData != null)                          {                              Debug.WriteLine(s.ErrorData.Information);                          }                      }                      else if (s.StatusCode == 200 && (s.Category == PNStatusCategory.PNConnectedCategory || s.Category == PNStatusCategory.PNDisconnectedCategory))                      {                          receivedMessage = true;                          subscribeManualEvent.Set();                      }                  });
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: int manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: int manualResetEventWaitTimeout = 310 * 1000;
Magic Number,PubNubMessaging.Tests,WhenUnsubscribedToAChannelGroup,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenUnsubscribedToAChannelGroup.cs,ThenShouldReturnUnsubscribedMessage,The following statement contains a magic number: pubnub.AddChannelsToChannelGroup().Channels(new [] { channelName }).ChannelGroup(channelGroupName)                  .Execute(new PNChannelGroupsAddChannelResultExt((r's)=> {                      try                      {                          Debug.WriteLine("PNStatus={0}"' pubnub.JsonPluggableLibrary.SerializeToJsonString(s));                          if (r != null)                          {                              Debug.WriteLine(pubnub.JsonPluggableLibrary.SerializeToJsonString(r));                              if (s.StatusCode == 200 && s.Error == false && s.AffectedChannelGroups.Contains(channelGroupName))                              {                                  receivedMessage = true;                              }                          }                      }                      catch { /* ignore */ }                      finally { cgManualEvent.Set(); }                  }));
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 116)' (138' 178))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((200' 223)' (252' 275))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((202' 231)' (305' 334))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((254' 275)' (305' 326))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 116)' (138' 178))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((200' 223)' (253' 276))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((202' 231)' (306' 335))
Duplicate Code,PubNubMessaging.Tests,WhenDetailedHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenDetailedHistoryIsRequested.cs,CommonDetailedHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((255' 276)' (306' 327))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 116)' (138' 178))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((200' 225)' (255' 280))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnEncryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((208' 232)' (314' 338))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 116)' (138' 178))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((200' 227)' (258' 285))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((202' 235)' (315' 348))
Duplicate Code,PubNubMessaging.Tests,WhenFetchHistoryIsRequested,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenFetchHistoryIsRequested.cs,CommonFetchHistoryShouldReturnUnencryptedMessageBasedOnParams,The method contains a code clone-set at the following line numbers (starting from the method definition): ((260' 285)' (315' 340))
Duplicate Code,PubNubMessaging.Tests,WhenObjectMember,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenObjectMember.cs,ThenAddUpdateRemoveUserShouldReturnSuccessCodeAndInfo,The method contains a code clone-set at the following line numbers (starting from the method definition): ((134' 155)' (167' 188))
Duplicate Code,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,The method contains a code clone-set at the following line numbers (starting from the method definition): ((9' 31)' (42' 64))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((49' 83)' (118' 152)' (190' 224)' (262' 296))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((118' 168)' (190' 240))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((118' 167)' (262' 311)' (190' 239))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((51' 70)' (120' 139)' (192' 211)' (264' 283)' (335' 354))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((51' 83)' (335' 367))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((120' 164)' (335' 379)' (192' 236)' (264' 308))
Duplicate Code,PubNubMessaging.Tests,WhenSubscribedToWildcardChannel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToWildcardChannel.cs,Init,The method contains a code clone-set at the following line numbers (starting from the method definition): ((116' 136)' (188' 208)' (260' 280))
Missing Default,PubNubMessaging.Tests,GrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\GenerateSampleGrant.cs,OnResponse,The following switch statement is missing a default case: switch (currentUnitTestCase)                          {                              case "ThenUserLevelWithReadWriteShouldReturnSuccess":                              case "ThenRevokeAtUserLevelReturnSuccess":                                  {                                      if (result.Channels != null && result.Channels.Count > 0)                                      {                                          var read = result.Channels[channel][authKey].ReadEnabled;                                          var write = result.Channels[channel][authKey].WriteEnabled;                                          if (read && write)                                          {                                              receivedGrantMessage = true;                                          }                                      }                                      break;                                  }                              case "ThenUserLevelWithReadShouldReturnSuccess":                                  {                                      var read = result.Channels[channel][authKey].ReadEnabled;                                      var write = result.Channels[channel][authKey].WriteEnabled;                                      if (read && !write)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenUserLevelWithWriteShouldReturnSuccess":                                  {                                      var read = result.Channels[channel][authKey].ReadEnabled;                                      var write = result.Channels[channel][authKey].WriteEnabled;                                      if (!read && write)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenMultipleChannelGrantShouldReturnSuccess":                                  {                                      if (result.Channels.Count==multipleAuthGrantCount)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenMultipleAuthGrantShouldReturnSuccess":                                  {                                      if (result.Channels.Count == multipleAuthGrantCount)                                      {                                          if (result.Channels.ToList()[0].Value.Count == multipleAuthGrantCount)                                          {                                              receivedGrantMessage = true;                                          }                                      }                                      break;                                  }                              case "ThenChannelGroupLevelWithReadManageShouldReturnSuccess":                                  {                                      var read = result.ChannelGroups[channelGroup][authKey].ReadEnabled;                                      var write = result.ChannelGroups[channelGroup][authKey].WriteEnabled;                                      var manage = result.ChannelGroups[channelGroup][authKey].ManageEnabled;                                      if (read && write && manage)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenChannelGroupLevelWithReadShouldReturnSuccess":                                  {                                      var read = result.ChannelGroups[channelGroup][authKey].ReadEnabled;                                      var write = result.ChannelGroups[channelGroup][authKey].WriteEnabled;                                      var manage = result.ChannelGroups[channelGroup][authKey].ManageEnabled;                                      if (read && !write && !manage)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                          }
Missing Default,PubNubMessaging.Tests,RevokeGrantResult,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenGrantIsRequested.cs,OnResponse,The following switch statement is missing a default case: switch (currentUnitTestCase)                          {                              case "ThenRevokeAtUserLevelReturnSuccess":                                  {                                      if (result.Channels != null && result.Channels.Count > 0)                                      {                                          var read = result.Channels[channel][authKey].ReadEnabled;                                          var write = result.Channels[channel][authKey].WriteEnabled;                                          if (!read && !write)                                          {                                              receivedRevokeMessage = true;                                          }                                      }                                      break;                                  }                              case "ThenUserLevelWithReadShouldReturnSuccess":                                  {                                      var read = result.Channels[channel][authKey].ReadEnabled;                                      var write = result.Channels[channel][authKey].WriteEnabled;                                      if (read && !write)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenUserLevelWithWriteShouldReturnSuccess":                                  {                                      var read = result.Channels[channel][authKey].ReadEnabled;                                      var write = result.Channels[channel][authKey].WriteEnabled;                                      if (!read && write)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenMultipleChannelGrantShouldReturnSuccess":                                  {                                      if (result.Channels.Count == multipleAuthGrantCount)                                      {                                          receivedGrantMessage = true;                                      }                                      break;                                  }                              case "ThenMultipleAuthGrantShouldReturnSuccess":                                  {                                      if (result.Channels.Count == multipleAuthGrantCount)                                      {                                          if (result.Channels.ToList()[0].Value.Count == multipleAuthGrantCount)                                          {                                              receivedGrantMessage = true;                                          }                                      }                                      break;                                  }                          }
Missing Default,PubNubMessaging.Tests,UTSubscribeCallback,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\PubnubApi.Tests\WhenSubscribedToAChannel2.cs,Status,The following switch statement is missing a default case: switch (currentTestCase)                      {                          case "ThenPresenceShouldReturnReceivedMessage":                              break;                          case "ThenSubscribeShouldReturnReceivedMessage":                          case "ThenSubscribeShouldReturnReceivedMessageSSL":                          case "ThenSubscribeShouldReturnReceivedMessageCipherSSL":                          case "ThenSubscribeShouldReturnReceivedMessageSecret":                          case "ThenSubscribeShouldReturnReceivedMessageSecretSSL":                          case "ThenSubscribeShouldReturnReceivedMessageSecretCipher":                          case "ThenSubscribeShouldReturnReceivedMessageSecretCipherSSL":                          case "ThenSubscribeShouldReturnReceivedMessageCipher":                          case "ThenSubscribeShouldReturnEmojiMessage":                          case "ThenSubscribeShouldReturnEmojiMessageSSL":                          case "ThenSubscribeShouldReturnEmojiMessageSecret":                          case "ThenSubscribeShouldReturnEmojiMessageCipherSecret":                          case "ThenSubscribeShouldReturnEmojiMessageCipherSecretSSL":                          case "ThenSubscribeShouldReturnEmojiMessageSecretSSL":                              subscribeManualEvent.Set();                              break;                      }
