Implementation smell,Namespace,Class,File,Method,Description
Long Method,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The method has 126 lines of code.
Long Method,PubnubApi,PNStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Consumer\PNStatus.cs,Retry,The method has 380 lines of code.
Long Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The method has 130 lines of code.
Long Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has 950 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetMessageFromMultiplexResult,The method has 115 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The method has 283 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The method has 146 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has 205 lines of code.
Long Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The method has 101 lines of code.
Long Method,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The method has 151 lines of code.
Long Method,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The method has 166 lines of code.
Long Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The method has 108 lines of code.
Long Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The method has 105 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The method has 279 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The method has 144 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The method has 161 lines of code.
Long Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The method has 213 lines of code.
Long Method,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,ParseToken,The method has 208 lines of code.
Complex Method,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,Cyclomatic complexity of the method is 23
Complex Method,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,Cyclomatic complexity of the method is 13
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPublishRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHistoryRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildFetchRequest,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,Cyclomatic complexity of the method is 11
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetChannelsForChannelGroupRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllUsersRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllSpacesRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateSpaceMembershipsWithUserRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMembersAddUpdateRemoveRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembershipsRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembersRequest,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,Cyclomatic complexity of the method is 18
Complex Method,PubnubApi,MobilePushHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Helper\MobilePushHelper.cs,GetPayload,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi,HttpValueCollection,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\HttpUtility\HttpValueCollection.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,HttpValueCollection,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\HttpUtility\HttpValueCollection.cs,FillFromString,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,JsonDataParseInternalUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\JsonDataParseInternalUtil.cs,ConvertToDictionaryObject,Cyclomatic complexity of the method is 14
Complex Method,PubnubApi,PNFetchHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNFetchHistoryJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 19
Complex Method,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 16
Complex Method,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 16
Complex Method,PubnubApi,PNHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNHistoryJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 11
Complex Method,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,PNMessageActionEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNMessageActionEventJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi,PNStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Consumer\PNStatus.cs,Retry,Cyclomatic complexity of the method is 113
Complex Method,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,Cyclomatic complexity of the method is 18
Complex Method,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,Cyclomatic complexity of the method is 19
Complex Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,Cyclomatic complexity of the method is 171
Complex Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,ConvertToDictionaryObject,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,ConvertToDataType,Cyclomatic complexity of the method is 15
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetMessageFromMultiplexResult,Cyclomatic complexity of the method is 27
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,Cyclomatic complexity of the method is 37
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,Cyclomatic complexity of the method is 14
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,Cyclomatic complexity of the method is 21
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,Cyclomatic complexity of the method is 31
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,Cyclomatic complexity of the method is 17
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,Cyclomatic complexity of the method is 10
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,Cyclomatic complexity of the method is 22
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,Cyclomatic complexity of the method is 15
Complex Method,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,HistoryDecodeDecryptLoop,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,FetchHistoryDecodeDecryptLoop,Cyclomatic complexity of the method is 9
Complex Method,System.Numerics,Kernel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,Compare,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,Cyclomatic complexity of the method is 30
Complex Method,PubnubApi.CBOR.Tags,TagRegistry,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\TagRegistry.cs,RegisterTagTypes,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,Cyclomatic complexity of the method is 23
Complex Method,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,CreateUser,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,UpdateSpaceMembershipWithUser,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ProcessMembersOperationRequest,Cyclomatic complexity of the method is 12
Complex Method,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,UpdateUser,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetStateOperation,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,Cyclomatic complexity of the method is 13
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,Cyclomatic complexity of the method is 20
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,Cyclomatic complexity of the method is 14
Complex Method,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,Cyclomatic complexity of the method is 18
Complex Method,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,Cyclomatic complexity of the method is 45
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,Cyclomatic complexity of the method is 25
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,Cyclomatic complexity of the method is 19
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,Cyclomatic complexity of the method is 9
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,Cyclomatic complexity of the method is 35
Complex Method,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,Cyclomatic complexity of the method is 8
Complex Method,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,CurrentPubnubInstance,Cyclomatic complexity of the method is 15
Complex Method,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,EndpointNameForOperation,Cyclomatic complexity of the method is 13
Complex Method,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,ParseToken,Cyclomatic complexity of the method is 41
Complex Method,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,SetToken,Cyclomatic complexity of the method is 18
Long Parameter List,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The method has 5 parameters. Parameters: type' category' asyncRequestState' statusCode' throwable
Long Parameter List,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The method has 5 parameters. Parameters: s' type' ignoreComma' ignoreColon' ignorePercent2fEncode
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,UrlRequestBuilder,The method has 6 parameters. Parameters: config' jsonPluggableLibrary' pubnubUnitTest' log' pubnubTelemetryMgr' pubnubTokenMgr
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' timetoken' channelsJsonState' initialSubscribeUrlParams' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' jsonUserState' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPublishRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' channel' originalMessage' storeInHistory' ttl' userMetaData' additionalUrlParams' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSignalRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' originalMessage' userMetaData' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' showUUIDList' includeUserState' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHistoryRequest,The method has 10 parameters. Parameters: requestMethod' requestBody' channel' start' end' count' reverse' includeToken' includeMeta' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildFetchRequest,The method has 10 parameters. Parameters: requestMethod' requestBody' channels' start' end' count' reverse' includeMeta' includeMessageActions' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMessageCountsRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channels' timetokens' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildDeleteMessageRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' start' end' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,The method has 11 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' delete' manage' ttl' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' channelGroup' authKeysCommaDelimited' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetUserStateRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' uuid' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSetUserStateRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' uuid' jsonUserState' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAddChannelsToChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' nameSpace' groupName' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' nameSpace' groupName' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetChannelsForChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' nameSpace' groupName' limitToChannelGroupScopeOnly' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRegisterDevicePushRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUnregisterDevicePushRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelPushRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetChannelsPushRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' jsonUserState
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildCreateUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' userCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' userCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllUsersRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' start' end' limit' includeCount' includeCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetSingleUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' includeCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildCreateSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' spaceCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' spaceCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllSpacesRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' start' end' limit' includeCount' includeCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetSingleSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' includeCustom' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateSpaceMembershipsWithUserRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' userId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMembersAddUpdateRemoveRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' spaceId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembershipsRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' userId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembersRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' spaceId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAddMessageActionRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channel' messageTimetoken' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveMessageActionRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channel' messageTimetoken' actionTimetoken' messageActionUuid' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetMessageActionsRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channel' start' end' limit' externalQueryParam
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The method has 5 parameters. Parameters: type' resourceType' resourceId' checkResourcePattern' uuid
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GeneratePAMv3Signature,The method has 5 parameters. Parameters: method' requestBody' queryStringToSign' partialUrl' opType
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The method has 5 parameters. Parameters: type' queryStringParamDic' resourceType' resourceId' checkResourcePattern
Long Parameter List,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRestApiRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' urlComponents' type' queryString' isPamV3Sign
Long Parameter List,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The method has 5 parameters. Parameters: systemActive' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckClientNetworkAvailability,The method has 5 parameters. Parameters: internalCallback' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,SubscribeCallbackExt,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Derived\Pubsub\SubscribeCallbackExt.cs,SubscribeCallbackExt,The method has 5 parameters. Parameters: messageCallback' presenceCallback' signalCallback' objectApiCallback' statusCallback
Long Parameter List,PubnubApi,SubscribeCallbackExt,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Derived\Pubsub\SubscribeCallbackExt.cs,SubscribeCallbackExt,The method has 6 parameters. Parameters: messageCallback' presenceCallback' signalCallback' objectApiCallback' messageActionCallback' statusCallback
Long Parameter List,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,PubnubCoreBase,The method has 7 parameters. Parameters: pubnubConfiguation' jsonPluggableLibrary' pubnubUnitTest' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The method has 6 parameters. Parameters: pubnubConfiguation' jsonPluggableLibrary' pubnubUnitTest' log' telemetryManager' instance
Long Parameter List,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,CheckInternetConnectionStatus,The method has 5 parameters. Parameters: systemActive' type' callback' channels' channelGroups
Long Parameter List,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has 7 parameters. Parameters: type' jsonString' channels' channelGroups' reconnect' lastTimetoken' callback
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,FF,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,GG,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HH,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,II,The method has 7 parameters. Parameters: a' b' c' d' x' s' ac
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The method has 5 parameters. Parameters: output' outputOffset' input' inputOffset' count
Long Parameter List,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,HistoryDecodeDecryptLoop,The method has 5 parameters. Parameters: type' messageList' channels' channelGroups' errorCallback
Long Parameter List,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,FetchHistoryDecodeDecryptLoop,The method has 5 parameters. Parameters: type' messageContainer' channels' channelGroups' errorCallback
Long Parameter List,PubnubApi.EndPoint,AuditOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditOperation,The method has 6 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' instance
Long Parameter List,PubnubApi.EndPoint,AuditOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The method has 5 parameters. Parameters: channel' channelGroup' authKeys' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantOperation,The method has 6 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' instance
Long Parameter List,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The method has 10 parameters. Parameters: channels' channelGroups' authKeys' read' write' delete' manage' ttl' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantTokenOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The method has 12 parameters. Parameters: channelsPermission' channelGroupsPermission' usersPermission' spacesPermission' channelsPatternPermission' channelGroupsPatternPermission' usersPatternPermission' spacesPatternPermission' ttl' meta' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,CalculateGrantBitMaskValue,The method has 5 parameters. Parameters: read' write' manage' delete' create
Long Parameter List,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroupOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,DeleteChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\DeleteChannelGroupOperation.cs,DeleteChannelGroupOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,ListAllChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListAllChannelGroupOperation.cs,ListAllChannelGroupOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,ListChannelsForChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListChannelsForChannelGroupOperation.cs,ListChannelsForChannelGroupOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroupOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroup,The method has 5 parameters. Parameters: channels' nameSpace' groupName' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,CreateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateSpaceOperation.cs,CreateSpaceOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,CreateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateSpaceOperation.cs,CreateSpace,The method has 6 parameters. Parameters: spaceId' spaceName' spaceDescription' spaceCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,CreateUserOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,CreateUser,The method has 8 parameters. Parameters: userId' userName' userExternalId' userProfileUrl' userEmail' userCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,DeleteSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteSpaceOperation.cs,DeleteSpaceOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,DeleteUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteUserOperation.cs,DeleteUserOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,GetMembershipsOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,GetMembershipsList,The method has 7 parameters. Parameters: userId' page' limit' includeCount' includeOptions' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,GetMembersOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,GetMembersList,The method has 7 parameters. Parameters: spaceId' page' limit' includeCount' includeOptions' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GetSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpaceOperation.cs,GetSpaceOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetSpacesOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpacesOperation.cs,GetSpacesOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetSpacesOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpacesOperation.cs,GetSpaceList,The method has 6 parameters. Parameters: page' limit' includeCount' includeCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GetUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUserOperation.cs,GetUserOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetUsersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUsersOperation.cs,GetUsersOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetUsersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUsersOperation.cs,GetUserList,The method has 6 parameters. Parameters: page' limit' includeCount' includeCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,ManageMembershipsOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,UpdateSpaceMembershipWithUser,The method has 11 parameters. Parameters: userId' addMembership' updateMembership' removeMembership' custom' page' limit' includeCount' includeOptions' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ManageMembersOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ProcessMembersOperationRequest,The method has 11 parameters. Parameters: spaceId' addMemberList' updateMemberList' removeMemberList' custom' page' limit' includeCount' includeOptions' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,UpdateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateSpaceOperation.cs,UpdateSpaceOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,UpdateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateSpaceOperation.cs,CreateSpace,The method has 6 parameters. Parameters: spaceId' spaceName' spaceDescription' spaceCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,UpdateUserOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,UpdateUser,The method has 8 parameters. Parameters: userId' userName' userExternalId' userProfileUrl' userEmail' userCustom' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,OtherOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetStateOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The method has 5 parameters. Parameters: channels' channelGroups' uuid' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNowOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNow,The method has 6 parameters. Parameters: channels' channelGroups' showUUIDList' includeUserState' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetStateOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The method has 6 parameters. Parameters: channels' channelGroups' uuid' jsonUserState' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The method has 6 parameters. Parameters: channels' channelGroups' uuid' keyValuePair' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The method has 7 parameters. Parameters: channels' channelGroups' uuid' jsonChannelUserState' jsonChannelGroupUserState' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,WhereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\WhereNowOperation.cs,WhereNowOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,AddMessageActionOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,Publish,The method has 5 parameters. Parameters: channel' messageTimetoken' messageAction' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,FireOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The method has 7 parameters. Parameters: channel' message' storeInHistory' ttl' metaData' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,GetMessageActionsOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,GetMessageActions,The method has 6 parameters. Parameters: channel' start' end' limit' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,ListenerManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,ListenerManager,The method has 7 parameters. Parameters: config' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,PublishOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The method has 7 parameters. Parameters: channel' message' storeInHistory' ttl' metaData' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageActionOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageAction,The method has 6 parameters. Parameters: channel' messageTimetoken' actionTimetoken' messageActionUuid' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,SignalOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The method has 5 parameters. Parameters: channel' message' metaData' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,SubscribeManager,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The method has 5 parameters. Parameters: responseType' rawChannels' rawChannelGroups' initialSubscribeUrlParams' externalQueryParam
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The method has 7 parameters. Parameters: type' channels' channelGroups' timetoken' reconnect' initialSubscribeUrlParams' externalQueryParam
Long Parameter List,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The method has 5 parameters. Parameters: type' channels' channelGroups' timetoken' networkAvailable
Long Parameter List,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,SubscribeOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,UnsubscribeAllOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeAllOperation.cs,UnsubscribeAllOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,UnsubscribeOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,AddPushChannelOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,RegisterDevice,The method has 7 parameters. Parameters: channels' pushType' pushToken' environment' deviceTopic' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,AuditPushChannelOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,GetChannelsForDevice,The method has 6 parameters. Parameters: pushType' pushToken' environment' deviceTopic' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,RemoveAllPushChannelsOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,RemoveAllChannelsForDevice,The method has 6 parameters. Parameters: pushType' pushToken' environment' deviceTopic' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemovePushChannelOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemoveChannelForDevice,The method has 7 parameters. Parameters: channels' pushType' pushToken' environment' deviceTopic' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,DeleteMessageOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\DeleteMessageOperation.cs,DeleteMessageOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,DeleteMessageOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\DeleteMessageOperation.cs,DeleteMessage,The method has 5 parameters. Parameters: channel' start' end' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,FetchHistoryOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,History,The method has 9 parameters. Parameters: channels' start' end' count' reverse' includeMeta' includeMsgActions' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,HistoryOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,History,The method has 9 parameters. Parameters: channel' start' end' count' reverse' includeToken' includeMeta' externalQueryParam' callback
Long Parameter List,PubnubApi.EndPoint,MessageCountsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\MessageCountsOperation.cs,MessageCountsOperation,The method has 7 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' tokenManager' instance
Long Parameter List,PubnubApi.EndPoint,TimeOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TimeOperation.cs,TimeOperation,The method has 6 parameters. Parameters: pubnubConfig' jsonPluggableLibrary' pubnubUnit' log' telemetryManager' instance
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' timetoken' channelsJsonState' initialSubscribeUrlParams' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' jsonUserState' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildPublishRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' channel' originalMessage' storeInHistory' ttl' userMetaData' additionalUrlParams' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildSignalRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' originalMessage' userMetaData' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildHereNowRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' showUUIDList' includeUserState' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildHistoryRequest,The method has 10 parameters. Parameters: requestMethod' requestBody' channel' start' end' count' reverse' includeToken' includeMeta' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildFetchRequest,The method has 10 parameters. Parameters: requestMethod' requestBody' channels' start' end' count' reverse' includeMeta' includeMessageActions' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildDeleteMessageRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' start' end' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGrantV2AccessRequest,The method has 11 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' delete' manage' ttl' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildAuditAccessRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channel' channelGroup' authKeysCommaDelimited' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetUserStateRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' uuid' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildSetUserStateRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' channelGroupsCommaDelimited' uuid' jsonUserState' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildAddChannelsToChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' nameSpace' groupName' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' channelsCommaDelimited' nameSpace' groupName' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetChannelsForChannelGroupRequest,The method has 6 parameters. Parameters: requestMethod' requestBody' nameSpace' groupName' limitToChannelGroupScopeOnly' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildRegisterDevicePushRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildUnregisterDevicePushRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildRemoveChannelPushRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetChannelsPushRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' pushType' pushToken' environment' deviceTopic' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channels' channelGroups' jsonUserState
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildMessageCountsRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channels' timetokens' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildCreateUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' userCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildUpdateUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' userCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetAllUsersRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' start' end' limit' includeCount' includeCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetSingleUserRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' userId' includeCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildCreateSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' spaceCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildUpdateSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' spaceCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetAllSpacesRequest,The method has 8 parameters. Parameters: requestMethod' requestBody' start' end' limit' includeCount' includeCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetSingleSpaceRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' spaceId' includeCustom' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildUpdateSpaceMembershipsWithUserRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' userId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildMembersAddUpdateRemoveRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' spaceId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetAllMembershipsRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' userId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetAllMembersRequest,The method has 9 parameters. Parameters: requestMethod' requestBody' spaceId' start' end' limit' includeCount' includeOptions' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildAddMessageActionRequest,The method has 5 parameters. Parameters: requestMethod' requestBody' channel' messageTimetoken' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildRemoveMessageActionRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channel' messageTimetoken' actionTimetoken' messageActionUuid' externalQueryParam
Long Parameter List,PubnubApi.Interface,IUrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Interface\IUrlRequestBuilder.cs,BuildGetMessageActionsRequest,The method has 7 parameters. Parameters: requestMethod' requestBody' channel' start' end' limit' externalQueryParam
Long Identifier,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the parameter internalInitialSubscribeUrlParams is 33.
Long Identifier,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSetUserStateRequest,The length of the parameter internalChannelsCommaDelimited is 30.
Long Identifier,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the parameter channelGroupAllCgPayloadChannels is 32.
Long Identifier,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveAllPushNotificationsFromDeviceWithPushToken,The length of the parameter removeAllPushChannelsOperation is 30.
Long Identifier,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddChannelsToChannelGroup,The length of the parameter addChannelToChannelGroupOperation is 33.
Long Identifier,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveChannelsFromChannelGroup,The length of the parameter removeChannelsFromChannelGroupOperation is 39.
Long Identifier,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelsForChannelGroup,The length of the parameter listChannelsForChannelGroupOperation is 36.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelLocalUserStateCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelGroupLocalUserStateCollection is 36.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the parameter channelGroupUserStateCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the parameter channelGroupReconnectCollection is 31.
Long Identifier,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,,The length of the parameter clientNetworkStatusInternetStatus is 33.
Long Identifier,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The length of the parameter channelGroupsPatternPermission is 30.
Long Identifier,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,,The length of the parameter pubnubChannelGroupNamesPattern is 30.
Long Identifier,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,,The length of the parameter commandDelimitedIncludeOptions is 30.
Long Identifier,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,,The length of the parameter commandDelimitedIncludeOptions is 30.
Long Identifier,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,,The length of the parameter commandDelimitedIncludeOptions is 30.
Long Identifier,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,,The length of the parameter commandDelimitedIncludeOptions is 30.
Long Identifier,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,GetSubscribedChannelGroups,The length of the parameter currentSubscribedChannelGroups is 30.
Long Identifier,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the parameter deserializeChannelGroupUserState is 32.
Long Identifier,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the parameter channelGroupUserStateDictionary is 31.
Long Identifier,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the parameter originalMultiChannelGroupSubscribe is 34.
Long Statement,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The length of the statement  "                    PNErrorData errorData = new PNErrorData(jsonLibrary.SerializeToJsonString(targetException.InnerException.Message)' targetException); " is 132.
Long Statement,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The length of the statement  "                        && deserializeStatus.ContainsKey("error") && string.Equals(deserializeStatus["error"].ToString()' "true"' StringComparison.CurrentCultureIgnoreCase) " is 148.
Long Statement,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The length of the statement  "                        && deserializeStatus.ContainsKey("status") && Int32.TryParse(deserializeStatus["status"].ToString()' out serverErrorStatusCode)) " is 128.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildTimeRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "            Dictionary<string' string> requestQueryStringParams = new Dictionary<string' string>(internalInitialSubscribeUrlParams); " is 120.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                requestQueryStringParams.Add("filter-expr"' UriUtil.EncodeUriComponent(pubnubConfig.FilterExpression' currentType' false' false' false)); " is 137.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())' currentType' false' false' false)); " is 167.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelSubscribeRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())'currentType' false' false' false)); " is 166.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMultiChannelLeaveRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPublishRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSignalRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The length of the statement  "            string commaDelimitedchannelGroup = (channelGroups != null) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(commaDelimitedchannelGroup' currentType' false' false' false)); " is 136.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHereNowRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildHistoryRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildFetchRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMessageCountsRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildDeleteMessageRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildWhereNowRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,The length of the statement  "                requestQueryStringParams.Add("auth"' UriUtil.EncodeUriComponent(authKeysCommaDelimited' currentType' false' false' false)); " is 123.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel"' UriUtil.EncodeUriComponent(channelsCommaDelimited' currentType' false' false' false)); " is 126.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false' false)); " is 137.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV2AccessRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGrantV3AccessRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The length of the statement  "                requestQueryStringParams.Add("auth"' UriUtil.EncodeUriComponent(authKeysCommaDelimited' currentType' false' false' false)); " is 123.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(channelGroup' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAuditAccessRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetUserStateRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false' false)); " is 137.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetUserStateRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSetUserStateRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(channelGroupsCommaDelimited' currentType' false' false' false)); " is 137.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildSetUserStateRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAddChannelsToChannelGroupRequest,The length of the statement  "            requestQueryStringParams.Add("add"' UriUtil.EncodeUriComponent(channelsCommaDelimited' currentType'false' false' false)); " is 121.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAddChannelsToChannelGroupRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,The length of the statement  "                requestQueryStringParams.Add("remove"' UriUtil.EncodeUriComponent(channelsCommaDelimited' currentType' false' false' false)); " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelsFromChannelGroupRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetChannelsForChannelGroupRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllChannelGroupRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRegisterDevicePushRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUnregisterDevicePushRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveChannelPushRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetChannelsPushRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildPresenceHeartbeatRequest,The length of the statement  "                requestQueryStringParams.Add("channel-group"' UriUtil.EncodeUriComponent(string.Join("'"' channelGroups.OrderBy(x => x).ToArray())' currentType' false' false' false)); " is 167.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildCreateUserRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateUserRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildDeleteUserRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllUsersRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetSingleUserRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildCreateSpaceRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateSpaceRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildDeleteSpaceRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllSpacesRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetSingleSpaceRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildUpdateSpaceMembershipsWithUserRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildMembersAddUpdateRemoveRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembershipsRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetAllMembersRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildAddMessageActionRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRemoveMessageActionRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildGetMessageActionsRequest,The length of the statement  "                        requestQueryStringParams.Add(kvp.Key' UriUtil.EncodeUriComponent(kvp.Value.ToString()' currentType' false' false' false)); " is 122.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The length of the statement  "                    ret.Add("uuid"' UriUtil.EncodeUriComponent(this.pubnubConfig.Uuid' PNOperationType.PNSubscribeOperation' false' false' true)); " is 126.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The length of the statement  "                ret.Add("uuid"' UriUtil.EncodeUriComponent(uuid != null ? uuid : this.pubnubConfig.Uuid' PNOperationType.PNSubscribeOperation' false' false' true)); " is 148.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The length of the statement  "                if (pubnubConfig.IncludeInstanceIdentifier && !string.IsNullOrEmpty(pubnubInstanceId) && pubnubInstanceId.Trim().Length > 0) " is 124.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The length of the statement  "                        && type != PNOperationType.PNAccessManagerGrant && type != PNOperationType.PNAccessManagerGrantToken && type != PNOperationType.ChannelGroupGrantAccess " is 151.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GeneratePAMv2Signature,The length of the statement  "            PubnubCrypto pubnubCrypto = new PubnubCrypto((opType != PNOperationType.PNSignalOperation) ? this.pubnubConfig.CipherKey : ""' this.pubnubConfig' this.pubnubLog); " is 162.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GeneratePAMv3Signature,The length of the statement  "            PubnubCrypto pubnubCrypto = new PubnubCrypto((opType != PNOperationType.PNSignalOperation) ? this.pubnubConfig.CipherKey : ""' this.pubnubConfig' this.pubnubLog); " is 162.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The length of the statement  "                Dictionary<string' string> commonQueryStringParams = GenerateCommonQueryParams(type' resourceType' resourceId' checkResourcePattern' qsUuid); " is 141.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The length of the statement  "                Dictionary<string' string> queryStringParams = new Dictionary<string' string>(commonQueryStringParams.Concat(internalQueryStringParamDic).GroupBy(item => item.Key).ToDictionary(item => item.Key' item => item.First().Value)); " is 224.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildQueryString,The length of the statement  "                queryString = string.Join("&"' queryStringParams.OrderBy(kvp => kvp.Key' StringComparer.Ordinal).Select(kvp => string.Format("{0}={1}"' kvp.Key' kvp.Value)).ToArray()); " is 168.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,BuildRestApiRequest,The length of the statement  "            if (type == PNOperationType.PNPublishOperation || type == PNOperationType.PNSubscribeOperation || type == PNOperationType.Presence) " is 131.
Long Statement,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,ForceCanonicalPathAndQuery,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' "Inside ForceCanonicalPathAndQuery = " + requestUri.ToString()' pubnubConfig.LogVerbosity); " is 127.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                        await CheckClientNetworkAvailability(CallbackClientNetworkStatus' type' callback' channels' channelGroups).ConfigureAwait(false); " is 129.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                        await CheckClientNetworkAvailability(CallbackClientNetworkStatus' type' callback' channels' channelGroups).ConfigureAwait(false); " is 129.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} AggregateException CheckInternetStatus Error: {1} {2} "' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ie.GetType().Name' ie.Message)' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckInternetStatus,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Exception CheckInternetStatus Error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex.Message)' pubnubConfig.LogVerbosity); " is 200.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckClientNetworkAvailability,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} InternetCheckRunning Already running"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 184.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} CheckSocketConnect Entered"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 174.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "            PubnubApi.Interface.IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(pubnubConfig' jsonLib' unit' pubnubLog' null' null); " is 126.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,CheckSocketConnect,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} CheckSocketConnect (HttpClient Or Task.Factory) Failed {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex.Message)' pubnubConfig.LogVerbosity); " is 218.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "            PNStatus status = statusBuilder.CreateStatusResponse<T>(type' errorCategory' null' (int)System.Net.HttpStatusCode.NotFound' new PNException(ex)); " is 145.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,ParseCheckSocketConnectException,The length of the statement  "			LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} ParseCheckSocketConnectException Error. {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex.Message)' pubnubConfig.LogVerbosity); " is 203.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,GetTimeWithTaskFactoryAsync,The length of the statement  "                using (HttpWebResponse response = await Task.Factory.FromAsync<HttpWebResponse>(myRequest.BeginGetResponse' asyncPubnubResult => (HttpWebResponse)myRequest.EndGetResponse(asyncPubnubResult)' null)) " is 197.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,GetTimeWithTaskFactoryAsync,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} GetTimeWithTaskFactoryAsync Resp {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' response.StatusCode.ToString())' pubnubConfig.LogVerbosity); " is 216.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,GetTimeWithTaskFactoryAsync,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} GetTimeWithTaskFactoryAsync FAILED."' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 183.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,GetTimeWithClassicHttp,The length of the statement  "                new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' pubnubConfig.NonSubscribeRequestTimeout * 1000' Timeout.Infinite); " is 126.
Long Statement,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,OnPubnubWebRequestTimeout,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' GetTimeWithClassicHttp timedout"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 181.
Long Statement,PubnubApi,MobilePushHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Helper\MobilePushHelper.cs,BuildApnsPayload,The length of the statement  "                retApsPayload = new Dictionary<string' object>(apnsPayload.Concat(customData).GroupBy(item => item.Key).ToDictionary(item => item.Key' item => item.First().Value)); " is 164.
Long Statement,PubnubApi,MobilePushHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Helper\MobilePushHelper.cs,BuildFcmPayload,The length of the statement  "                fcmPayload = new Dictionary<string' object>(fcmData.Concat(customData).GroupBy(item => item.Key).ToDictionary(item => item.Key' item => item.First().Value)); " is 157.
Long Statement,PubnubApi,MobilePushHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Helper\MobilePushHelper.cs,BuildMpnsPayload,The length of the statement  "                retMpnsPayload = new Dictionary<string' object>(mpnsData.Concat(customData).GroupBy(item => item.Key).ToDictionary(item => item.Key' item => item.First().Value)); " is 162.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> addMsgActionDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(addMsgActionDicObj["data"]); " is 129.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                    if (addMsgActionDataDic.ContainsKey("messageTimetoken") && Int64.TryParse(addMsgActionDataDic["messageTimetoken"].ToString()' out messageTimetoken)) " is 148.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                    if (addMsgActionDataDic.ContainsKey("actionTimetoken") && Int64.TryParse(addMsgActionDataDic["actionTimetoken"].ToString()' out actionTimetoken)) " is 145.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                        Type = addMsgActionDataDic.ContainsKey("type") && addMsgActionDataDic["type"] != null ? addMsgActionDataDic["type"].ToString() : null' " is 134.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                        Value = addMsgActionDataDic.ContainsKey("value") && addMsgActionDataDic["value"] != null ? addMsgActionDataDic["value"].ToString() : null " is 137.
Long Statement,PubnubApi,PNAddMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNAddMessageActionJsonDataParse.cs,GetObject,The length of the statement  "                    result.Uuid = addMsgActionDataDic.ContainsKey("uuid") && addMsgActionDataDic["uuid"] != null ? addMsgActionDataDic["uuid"].ToString() : null; " is 141.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> getCreateSpaceDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(createSpaceDicObj["data"]); " is 130.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Id = getCreateSpaceDataDic.ContainsKey("id") && getCreateSpaceDataDic["id"] != null ? getCreateSpaceDataDic["id"].ToString() : null; " is 139.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Name = getCreateSpaceDataDic.ContainsKey("name") && getCreateSpaceDataDic["name"] != null ? getCreateSpaceDataDic["name"].ToString() : null; " is 147.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Description = getCreateSpaceDataDic.ContainsKey("description") && getCreateSpaceDataDic["description"] != null ? getCreateSpaceDataDic["description"].ToString() : null; " is 175.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Created = getCreateSpaceDataDic.ContainsKey("created") && getCreateSpaceDataDic["created"] != null ? getCreateSpaceDataDic["created"].ToString() : null; " is 159.
Long Statement,PubnubApi,PNCreateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Updated = getCreateSpaceDataDic.ContainsKey("updated") && getCreateSpaceDataDic["updated"] != null ? getCreateSpaceDataDic["updated"].ToString() : null; " is 159.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> getCreateUserDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(createUserDicObj["data"]); " is 128.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Id = getCreateUserDataDic.ContainsKey("id") && getCreateUserDataDic["id"] != null ? getCreateUserDataDic["id"].ToString() : null; " is 136.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Name = getCreateUserDataDic.ContainsKey("name") && getCreateUserDataDic["name"] != null ? getCreateUserDataDic["name"].ToString() : null; " is 144.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.ExternalId = getCreateUserDataDic.ContainsKey("externalId") && getCreateUserDataDic["externalId"] != null ? getCreateUserDataDic["externalId"].ToString() : null; " is 168.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.ProfileUrl = getCreateUserDataDic.ContainsKey("profileUrl") && getCreateUserDataDic["profileUrl"] != null ? getCreateUserDataDic["profileUrl"].ToString() : null; " is 168.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Email = getCreateUserDataDic.ContainsKey("email") && getCreateUserDataDic["email"] != null ? getCreateUserDataDic["email"].ToString() : null; " is 148.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Created = getCreateUserDataDic.ContainsKey("created") && getCreateUserDataDic["created"] != null ? getCreateUserDataDic["created"].ToString() : ""; " is 154.
Long Statement,PubnubApi,PNCreateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNCreateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Updated = getCreateUserDataDic.ContainsKey("updated") && getCreateUserDataDic["updated"] != null ? getCreateUserDataDic["updated"].ToString() : ""; " is 154.
Long Statement,PubnubApi,PNFetchHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNFetchHistoryJsonDataParse.cs,GetObject,The length of the statement  "                            object[] channelValArray = channelKVP.Value != null ? JsonDataParseInternalUtil.ConvertToObjectArray(channelKVP.Value) : new object[0]; " is 135.
Long Statement,PubnubApi,PNFetchHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNFetchHistoryJsonDataParse.cs,GetObject,The length of the statement  "                                        (messagesContainer.ContainsKey("timetoken") || messagesContainer.ContainsKey("meta") || messagesContainer.ContainsKey("actions"))) " is 130.
Long Statement,PubnubApi,PNFetchHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNFetchHistoryJsonDataParse.cs,GetObject,The length of the statement  "                                        if (messagesContainer.ContainsKey("timetoken") && Int64.TryParse(messagesContainer["timetoken"].ToString()' out messageTimetoken)) " is 130.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                Dictionary<string' object> getMbrshipItemDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(spaceArray[index]); " is 122.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        SpaceId = (getMbrshipItemDataDic.ContainsKey("id") && getMbrshipItemDataDic["id"] != null) ? getMbrshipItemDataDic["id"].ToString() : null' " is 139.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Created = (getMbrshipItemDataDic.ContainsKey("created") && getMbrshipItemDataDic["created"] != null) ? getMbrshipItemDataDic["created"].ToString() : null' " is 154.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Updated = (getMbrshipItemDataDic.ContainsKey("updated") && getMbrshipItemDataDic["updated"] != null) ? getMbrshipItemDataDic["updated"].ToString() : null " is 153.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Dictionary<string' object> spaceDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(getMbrshipItemDataDic["space"]); " is 122.
Long Statement,PubnubApi,PNGetMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                                Description = (spaceDic.ContainsKey("description") && spaceDic["description"] != null) ? spaceDic["description"].ToString() : null' " is 131.
Long Statement,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        UserId = (getMbrItemDataDic.ContainsKey("id") && getMbrItemDataDic["id"] != null) ? getMbrItemDataDic["id"].ToString() : null' " is 126.
Long Statement,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        Created = (getMbrItemDataDic.ContainsKey("created") && getMbrItemDataDic["created"] != null) ? getMbrItemDataDic["created"].ToString() : null' " is 142.
Long Statement,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        Updated = (getMbrItemDataDic.ContainsKey("updated") && getMbrItemDataDic["updated"] != null) ? getMbrItemDataDic["updated"].ToString() : null " is 141.
Long Statement,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,The length of the statement  "                                                ExternalId = (userDic.ContainsKey("externalId") && userDic["externalId"] != null) ? userDic["externalId"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMembersJsonDataParse.cs,GetObject,The length of the statement  "                                                ProfileUrl = (userDic.ContainsKey("profileUrl") && userDic["profileUrl"] != null) ? userDic["profileUrl"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                            if (getMsgActionItemDic.ContainsKey("messageTimetoken") && Int64.TryParse(getMsgActionItemDic["messageTimetoken"].ToString()' out messageTimetoken)) " is 148.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                            if (getMsgActionItemDic.ContainsKey("actionTimetoken") && Int64.TryParse(getMsgActionItemDic["actionTimetoken"].ToString()' out actionTimetoken)) " is 145.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                                Type = getMsgActionItemDic.ContainsKey("type") && getMsgActionItemDic["type"] != null ? getMsgActionItemDic["type"].ToString() : null' " is 134.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                                Value = getMsgActionItemDic.ContainsKey("value") && getMsgActionItemDic["value"] != null ? getMsgActionItemDic["value"].ToString() : null " is 137.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                            actionItem.Uuid = getMsgActionItemDic.ContainsKey("uuid") && getMsgActionItemDic["uuid"] != null ? getMsgActionItemDic["uuid"].ToString() : null; " is 145.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                    Dictionary<string' object> getMsgActionsMoreDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(getMsgActionsDicObj["more"]); " is 131.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                        if (getMsgActionsMoreDic.ContainsKey("start") && Int64.TryParse(getMsgActionsMoreDic["start"].ToString()' out moreStart)) " is 121.
Long Statement,PubnubApi,PNGetMessageActionsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetMessageActionsJsonDataParse.cs,GetObject,The length of the statement  "                        if (getMsgActionsMoreDic.ContainsKey("limit") && Int32.TryParse(getMsgActionsMoreDic["limit"].ToString()' out moreLimit)) " is 121.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "            Dictionary<string' object> getSpaceDicObj = (listObject.Count >= 2) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(listObject[1]) : null; " is 144.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> getSpaceDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(getSpaceDicObj["data"]); " is 121.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "                        Name = (getSpaceDataDic.ContainsKey("name") && getSpaceDataDic["name"] != null) ? getSpaceDataDic["name"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "                        Description = (getSpaceDataDic.ContainsKey("description") && getSpaceDataDic["description"] != null) ? getSpaceDataDic["description"].ToString() : null' " is 152.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "                        Created = (getSpaceDataDic.ContainsKey("created") && getSpaceDataDic["created"] != null) ? getSpaceDataDic["created"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The length of the statement  "                        Updated = (getSpaceDataDic.ContainsKey("updated") && getSpaceDataDic["updated"] != null) ? getSpaceDataDic["updated"].ToString() : null " is 135.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                Name = (getSpaceDataDic.ContainsKey("name") && getSpaceDataDic["name"] != null) ? getSpaceDataDic["name"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                Description = (getSpaceDataDic.ContainsKey("description") && getSpaceDataDic["description"] != null) ? getSpaceDataDic["description"].ToString() : null' " is 152.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                Created = (getSpaceDataDic.ContainsKey("created") && getSpaceDataDic["created"] != null) ? getSpaceDataDic["created"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                Updated = (getSpaceDataDic.ContainsKey("updated") && getSpaceDataDic["updated"] != null) ? getSpaceDataDic["updated"].ToString() : null " is 135.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                            Description = (spaceDataDic.ContainsKey("description") && spaceDataDic["description"] != null) ? spaceDataDic["description"].ToString() : null' " is 143.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                            Created = (spaceDataDic.ContainsKey("created") && spaceDataDic["created"] != null) ? spaceDataDic["created"].ToString() : null' " is 127.
Long Statement,PubnubApi,PNGetSpacesJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpacesJsonDataParse.cs,GetObject,The length of the statement  "                                            Updated = (spaceDataDic.ContainsKey("updated") && spaceDataDic["updated"] != null) ? spaceDataDic["updated"].ToString() : null " is 126.
Long Statement,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The length of the statement  "            Dictionary<string' object> getUserDicObj = (listObject.Count >= 2) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(listObject[1]) : null; " is 143.
Long Statement,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The length of the statement  "                        ExternalId = (userDataDic.ContainsKey("externalId") && userDataDic["externalId"] != null) ? userDataDic["externalId"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The length of the statement  "                        ProfileUrl = (userDataDic.ContainsKey("profileUrl") && userDataDic["profileUrl"] != null) ? userDataDic["profileUrl"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The length of the statement  "                        Created = (userDataDic.ContainsKey("created") && userDataDic["created"] != null) ? userDataDic["created"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The length of the statement  "                        Updated = (userDataDic.ContainsKey("updated") && userDataDic["updated"] != null) ? userDataDic["updated"].ToString() : null " is 123.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                Name = (getUserDataDic.ContainsKey("name") && getUserDataDic["name"] != null) ? getUserDataDic["name"].ToString() : null' " is 121.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                ExternalId = (getUserDataDic.ContainsKey("externalId") && getUserDataDic["externalId"] != null) ? getUserDataDic["externalId"].ToString() : null' " is 145.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                ProfileUrl = (getUserDataDic.ContainsKey("profileUrl") && getUserDataDic["profileUrl"] != null) ? getUserDataDic["profileUrl"].ToString() : null' " is 145.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                Email = (getUserDataDic.ContainsKey("email") && getUserDataDic["email"] != null) ? getUserDataDic["email"].ToString() : null' " is 125.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                Created = (getUserDataDic.ContainsKey("created") && getUserDataDic["created"] != null) ? getUserDataDic["created"].ToString() : null' " is 133.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                Updated = (getUserDataDic.ContainsKey("updated") && getUserDataDic["updated"] != null) ? getUserDataDic["updated"].ToString() : null " is 132.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                            ExternalId = (userDataDic.ContainsKey("externalId") && userDataDic["externalId"] != null) ? userDataDic["externalId"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                            ProfileUrl = (userDataDic.ContainsKey("profileUrl") && userDataDic["profileUrl"] != null) ? userDataDic["profileUrl"].ToString() : null' " is 136.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                            Created = (userDataDic.ContainsKey("created") && userDataDic["created"] != null) ? userDataDic["created"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNGetUsersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUsersJsonDataParse.cs,GetObject,The length of the statement  "                                            Updated = (userDataDic.ContainsKey("updated") && userDataDic["updated"] != null) ? userDataDic["updated"].ToString() : null " is 123.
Long Statement,PubnubApi,PNHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNHistoryJsonDataParse.cs,GetObject,The length of the statement  "                            if (dicMessageTimetoken.ContainsKey("timetoken") && Int64.TryParse(dicMessageTimetoken["timetoken"].ToString()' out messageTimetoken)) " is 134.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                Dictionary<string' object> getMbrshipItemDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(spaceArray[index]); " is 122.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        SpaceId = (getMbrshipItemDataDic.ContainsKey("id") && getMbrshipItemDataDic["id"] != null) ? getMbrshipItemDataDic["id"].ToString() : null' " is 139.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Created = (getMbrshipItemDataDic.ContainsKey("created") && getMbrshipItemDataDic["created"] != null) ? getMbrshipItemDataDic["created"].ToString() : null' " is 154.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Updated = (getMbrshipItemDataDic.ContainsKey("updated") && getMbrshipItemDataDic["updated"] != null) ? getMbrshipItemDataDic["updated"].ToString() : null " is 153.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                        Dictionary<string' object> spaceDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(getMbrshipItemDataDic["space"]); " is 122.
Long Statement,PubnubApi,PNMembershipsJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembershipsJsonDataParse.cs,GetObject,The length of the statement  "                                                Description = (spaceDic.ContainsKey("description") && spaceDic["description"] != null) ? spaceDic["description"].ToString() : null' " is 131.
Long Statement,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        UserId = (getMbrItemDataDic.ContainsKey("id") && getMbrItemDataDic["id"] != null) ? getMbrItemDataDic["id"].ToString() : ""' " is 124.
Long Statement,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        Created = (getMbrItemDataDic.ContainsKey("created") && getMbrItemDataDic["created"] != null) ? getMbrItemDataDic["created"].ToString() : ""' " is 140.
Long Statement,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,The length of the statement  "                                        Updated = (getMbrItemDataDic.ContainsKey("updated") && getMbrItemDataDic["updated"] != null) ? getMbrItemDataDic["updated"].ToString() : "" " is 139.
Long Statement,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,The length of the statement  "                                                ExternalId = (userDic.ContainsKey("externalId") && userDic["externalId"] != null) ? userDic["externalId"].ToString() : ""' " is 122.
Long Statement,PubnubApi,PNManageMembersJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNManageMembersJsonDataParse.cs,GetObject,The length of the statement  "                                                ProfileUrl = (userDic.ContainsKey("profileUrl") && userDic["profileUrl"] != null) ? userDic["profileUrl"].ToString() : ""' " is 122.
Long Statement,PubnubApi,PNMessageActionEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNMessageActionEventJsonDataParse.cs,GetObject,The length of the statement  "                        if (dataDic.ContainsKey("messageTimetoken") && Int64.TryParse(dataDic["messageTimetoken"].ToString()' out messageTimetoken)) " is 124.
Long Statement,PubnubApi,PNMessageActionEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNMessageActionEventJsonDataParse.cs,GetObject,The length of the statement  "                        if (dataDic.ContainsKey("actionTimetoken") && Int64.TryParse(dataDic["actionTimetoken"].ToString()' out actionTimetoken)) " is 121.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                                ExternalId = (dataDic.ContainsKey("externalId") && dataDic["externalId"] != null) ? dataDic["externalId"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                                ProfileUrl = (dataDic.ContainsKey("profileUrl") && dataDic["profileUrl"] != null) ? dataDic["profileUrl"].ToString() : null' " is 124.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                                Custom = (dataDic.ContainsKey("custom") && dataDic["custom"] != null) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(dataDic["custom"]) : null' " is 150.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                                Description = (dataDic.ContainsKey("description") && dataDic["description"] != null) ? dataDic["description"].ToString() : null' " is 128.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                                Custom = (dataDic.ContainsKey("custom") && dataDic["custom"] != null) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(dataDic["custom"]) : null' " is 150.
Long Statement,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The length of the statement  "                        else if (result.Type.ToLowerInvariant() == "membership" && dataDic.ContainsKey("userId") && dataDic.ContainsKey("spaceId")) " is 123.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> getCreateSpaceDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(updateSpaceDicObj["data"]); " is 130.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Id = getCreateSpaceDataDic.ContainsKey("id") && getCreateSpaceDataDic["id"] != null ? getCreateSpaceDataDic["id"].ToString() : null; " is 139.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Name = getCreateSpaceDataDic.ContainsKey("name") && getCreateSpaceDataDic["name"] != null ? getCreateSpaceDataDic["name"].ToString() : null; " is 147.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Description = getCreateSpaceDataDic.ContainsKey("description") && getCreateSpaceDataDic["description"] != null ? getCreateSpaceDataDic["description"].ToString() : null; " is 175.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Created = getCreateSpaceDataDic.ContainsKey("created") && getCreateSpaceDataDic["created"] != null ? getCreateSpaceDataDic["created"].ToString() : null; " is 159.
Long Statement,PubnubApi,PNUpdateSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateSpaceJsonDataParse.cs,GetObject,The length of the statement  "                    result.Updated = getCreateSpaceDataDic.ContainsKey("updated") && getCreateSpaceDataDic["updated"] != null ? getCreateSpaceDataDic["updated"].ToString() : null; " is 159.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                Dictionary<string' object> getUpdateUserDataDic = JsonDataParseInternalUtil.ConvertToDictionaryObject(updateUserDicObj["data"]); " is 128.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Id = getUpdateUserDataDic.ContainsKey("id") && getUpdateUserDataDic["id"] != null ? getUpdateUserDataDic["id"].ToString() : null; " is 136.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Name = getUpdateUserDataDic.ContainsKey("name") && getUpdateUserDataDic["name"] != null ? getUpdateUserDataDic["name"].ToString() : null; " is 144.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.ExternalId = getUpdateUserDataDic.ContainsKey("externalId") && getUpdateUserDataDic["externalId"] != null ? getUpdateUserDataDic["externalId"].ToString() : null; " is 168.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.ProfileUrl = getUpdateUserDataDic.ContainsKey("profileUrl") && getUpdateUserDataDic["profileUrl"] != null ? getUpdateUserDataDic["profileUrl"].ToString() : null; " is 168.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Email = getUpdateUserDataDic.ContainsKey("email") && getUpdateUserDataDic["email"] != null ? getUpdateUserDataDic["email"].ToString() : null; " is 148.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Created = getUpdateUserDataDic.ContainsKey("created") && getUpdateUserDataDic["created"] != null ? getUpdateUserDataDic["created"].ToString() : null; " is 156.
Long Statement,PubnubApi,PNUpdateUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNUpdateUserJsonDataParse.cs,GetObject,The length of the statement  "                    result.Updated = getUpdateUserDataDic.ContainsKey("updated") && getUpdateUserDataDic["updated"] != null ? getUpdateUserDataDic["updated"].ToString() : null; " is 156.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD10"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD11"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD12"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD13"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD14"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETSTANDARD20"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 160.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = UAP"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 150.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NETFX_CORE"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 157.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = WINDOWS_UWP"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 158.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET35"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET40"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "                        LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET45"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 152.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "            LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = NET461"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 153.
Long Statement,PubnubApi,PNPlatform,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Log\PNPlatform.cs,Print,The length of the statement  "            LoggingMethod.WriteToLog(log' string.Format("DateTime {0} PLATFORM = UNKNOWN"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 154.
Long Statement,PubnubApi,PNTokenKey,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\Consumer\PNTokenKey.cs,Equals,The length of the statement  "            return currentKey.ResourceType == this.ResourceType && currentKey.ResourceId == this.ResourceId && currentKey.PatternFlag == this.PatternFlag; " is 142.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "                    if (string.Compare(webExceptionStatus.ToString()' "SecureChannelFailure"' StringComparison.CurrentCultureIgnoreCase) == 0  " is 121.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "                        || string.Compare(webExceptionStatus.ToString()'"NameResolutionFailure"' StringComparison.CurrentCultureIgnoreCase) == 0) " is 121.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.FormatException" && errorMessage == "The input is not a valid Base-64 string as it contains a non-base 64 character' more than two padding characters' or an illegal character among the padding characters. ") " is 237.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Net.Sockets.SocketException" && errorMessage == "The requested name is valid' but no data of the requested type was found") " is 153.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Security.Cryptography.CryptographicException" && errorMessage == "Padding is invalid and cannot be removed.") " is 139.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Runtime.InteropServices.SEHException" && errorMessage == "External component has thrown an exception.") " is 133.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "            else if (errorType == "System.Net.WebException" && errorMessage.Contains("Unable to read data from the transport connection")) " is 126.
Long Statement,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The length of the statement  "                    else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY") " is 136.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsDictionaryCompatible,The length of the statement  "                                if (jsonTxtreader.LineNumber == 1 && jsonTxtreader.LinePosition == 1 && jsonTxtreader.TokenType == JsonToken.StartObject) " is 121.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "            object result = JsonConvert.DeserializeObject<object>(jsonString' new JsonSerializerSettings { DateParseHandling = DateParseHandling.None }); " is 141.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                ret = JsonConvert.DeserializeObject<T>(jsonString' new JsonSerializerSettings { DateParseHandling = DateParseHandling.None }); " is 126.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' NET35/40 IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 198.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "#elif (NETSTANDARD10 || NETSTANDARD11 || NETSTANDARD12 || NETSTANDARD13 || NETSTANDARD14 || NETSTANDARD20 || UAP || NETFX_CORE || WINDOWS_UWP) " is 142.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' typeof(T).GetTypeInfo().IsGenericType = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' typeof(T).GetTypeInfo().IsGenericType.ToString())' config.LogVerbosity); " is 237.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' typeof(T).GetGenericTypeDefinition() = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' typeof(T).GetGenericTypeDefinition().ToString())' config.LogVerbosity); " is 235.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' PCL/CORE IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 198.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsGenericTypeForMessage,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' IsGenericTypeForMessage = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ret.ToString())' config.LogVerbosity); " is 189.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The length of the statement  "                else if (listObject[0].GetType() == typeof(Newtonsoft.Json.Linq.JObject) || listObject[0].GetType() == typeof(Newtonsoft.Json.Linq.JArray)) " is 139.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The length of the statement  "#elif NETSTANDARD10 || NETSTANDARD11 || NETSTANDARD12 || NETSTANDARD13 || NETSTANDARD14 || NETSTANDARD20 || UAP || NETFX_CORE || WINDOWS_UWP " is 140.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The length of the statement  "                else if (listObject[0].GetType() == typeof(Newtonsoft.Json.Linq.JObject) || listObject[0].GetType() == typeof(Newtonsoft.Json.Linq.JArray)) " is 139.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                                authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                                authData.DeleteEnabled = grantAckChannelAuthDataDic.ContainsKey("d") ? grantAckChannelAuthDataDic["d"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.DeleteEnabled = grantAckChannelAuthDataDic.ContainsKey("d") ? grantAckChannelAuthDataDic["d"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                        authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                        authData.DeleteEnabled = grantAckChannelAuthDataDic.ContainsKey("d") ? grantAckChannelAuthDataDic["d"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.ManageEnabled = grantAckChannelAuthDataDic.ContainsKey("m") ? grantAckChannelAuthDataDic["m"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The length of the statement  "                                                    authData.DeleteEnabled = grantAckChannelAuthDataDic.ContainsKey("d") ? grantAckChannelAuthDataDic["d"].ToString() == "1" : false; " is 129.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Subscribe,The length of the statement  "            EndPoint.SubscribeOperation<T> subscribeOperation = new EndPoint.SubscribeOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' tokenManager' this); " is 176.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Unsubscribe,The length of the statement  "            EndPoint.UnsubscribeOperation<T>  unsubscribeOperation = new EndPoint.UnsubscribeOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 195.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,UnsubscribeAll,The length of the statement  "            EndPoint.UnsubscribeAllOperation<T> unSubscribeAllOperation = new EndPoint.UnsubscribeAllOperation<T>(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 203.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Publish,The length of the statement  "            EndPoint.PublishOperation publishOperation = new EndPoint.PublishOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 176.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Fire,The length of the statement  "            EndPoint.FireOperation fireOperation = new EndPoint.FireOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 167.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Signal,The length of the statement  "            EndPoint.SignalOperation signalOperation = new EndPoint.SignalOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 173.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,History,The length of the statement  "            EndPoint.HistoryOperation historyOperaton = new EndPoint.HistoryOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 175.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,FetchHistory,The length of the statement  "            EndPoint.FetchHistoryOperation historyOperaton = new EndPoint.FetchHistoryOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteMessages,The length of the statement  "            EndPoint.DeleteMessageOperation deleteMessageOperaton = new EndPoint.DeleteMessageOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 193.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,MessageCounts,The length of the statement  "            EndPoint.MessageCountsOperation messageCount = new EndPoint.MessageCountsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 184.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,HereNow,The length of the statement  "            EndPoint.HereNowOperation hereNowOperation = new EndPoint.HereNowOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 176.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,WhereNow,The length of the statement  "            EndPoint.WhereNowOperation whereNowOperation = new EndPoint.WhereNowOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 179.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Time,The length of the statement  "            EndPoint.TimeOperation timeOperation = new EndPoint.TimeOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' this); " is 153.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Audit,The length of the statement  "            EndPoint.AuditOperation auditOperation = new EndPoint.AuditOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' this); " is 156.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GrantToken,The length of the statement  "            EndPoint.GrantTokenOperation grantOperation = new EndPoint.GrantTokenOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 180.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Grant,The length of the statement  "            EndPoint.GrantOperation grantOperation = new EndPoint.GrantOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' this); " is 156.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,SetPresenceState,The length of the statement  "            EndPoint.SetStateOperation setStateOperation = new EndPoint.SetStateOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 179.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetPresenceState,The length of the statement  "            EndPoint.GetStateOperation getStateOperation = new EndPoint.GetStateOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 179.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddPushNotificationsOnChannels,The length of the statement  "            EndPoint.AddPushChannelOperation addPushChannelOperation = new EndPoint.AddPushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 197.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemovePushNotificationsFromChannels,The length of the statement  "            EndPoint.RemovePushChannelOperation removePushChannelOperation = new EndPoint.RemovePushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 206.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveAllPushNotificationsFromDeviceWithPushToken,The length of the statement  "            EndPoint.RemoveAllPushChannelsOperation removeAllPushChannelsOperation = new EndPoint.RemoveAllPushChannelsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 218.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AuditPushChannelProvisions,The length of the statement  "            EndPoint.AuditPushChannelOperation auditPushChannelOperation = new EndPoint.AuditPushChannelOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 203.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,CreateUser,The length of the statement  "            EndPoint.CreateUserOperation createUserOperation = new EndPoint.CreateUserOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,UpdateUser,The length of the statement  "            EndPoint.UpdateUserOperation updateUserOperation = new EndPoint.UpdateUserOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteUser,The length of the statement  "            EndPoint.DeleteUserOperation deleteUserOperation = new EndPoint.DeleteUserOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetUsers,The length of the statement  "            EndPoint.GetUsersOperation getUsersOperation = new EndPoint.GetUsersOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 179.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetUser,The length of the statement  "            EndPoint.GetUserOperation getUserOperation = new EndPoint.GetUserOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 176.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,CreateSpace,The length of the statement  "            EndPoint.CreateSpaceOperation createSpaceOperation = new EndPoint.CreateSpaceOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 188.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,UpdateSpace,The length of the statement  "            EndPoint.UpdateSpaceOperation updateSpaceOperation = new EndPoint.UpdateSpaceOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 188.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteSpace,The length of the statement  "            EndPoint.DeleteSpaceOperation deleteSpaceOperation = new EndPoint.DeleteSpaceOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 188.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSpaces,The length of the statement  "            EndPoint.GetSpacesOperation getAllSpacesOperation = new EndPoint.GetSpacesOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSpace,The length of the statement  "            EndPoint.GetSpaceOperation getSingleSpaceOperation = new EndPoint.GetSpaceOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ManageMemberships,The length of the statement  "            EndPoint.ManageMembershipsOperation membershipOperation = new EndPoint.ManageMembershipsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 199.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ManageMembers,The length of the statement  "            EndPoint.ManageMembersOperation membersOperation = new EndPoint.ManageMembersOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 188.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetMemberships,The length of the statement  "            EndPoint.GetMembershipsOperation getMembershipOperation = new EndPoint.GetMembershipsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 196.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetMembers,The length of the statement  "            EndPoint.GetMembersOperation getMembersOperation = new EndPoint.GetMembersOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 185.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddMessageAction,The length of the statement  "            EndPoint.AddMessageActionOperation addMessageActionOperation = new EndPoint.AddMessageActionOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 203.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveMessageAction,The length of the statement  "            EndPoint.RemoveMessageActionOperation removeMessageActionOperation = new EndPoint.RemoveMessageActionOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 212.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetMessageActions,The length of the statement  "            EndPoint.GetMessageActionsOperation getMessageActionsOperation = new EndPoint.GetMessageActionsOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 206.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddChannelsToChannelGroup,The length of the statement  "            EndPoint.AddChannelsToChannelGroupOperation addChannelToChannelGroupOperation = new EndPoint.AddChannelsToChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 229.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,RemoveChannelsFromChannelGroup,The length of the statement  "            EndPoint.RemoveChannelsFromChannelGroupOperation removeChannelsFromChannelGroupOperation = new EndPoint.RemoveChannelsFromChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 245.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,DeleteChannelGroup,The length of the statement  "            EndPoint.DeleteChannelGroupOperation deleteChannelGroupOperation = new EndPoint.DeleteChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 209.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelsForChannelGroup,The length of the statement  "            EndPoint.ListChannelsForChannelGroupOperation listChannelsForChannelGroupOperation = new EndPoint.ListChannelsForChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' tokenManager' this); " is 224.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ListChannelGroups,The length of the statement  "            EndPoint.ListAllChannelGroupOperation listAllChannelGroupOperation = new EndPoint.ListAllChannelGroupOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' tokenManager' this); " is 200.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,AddListener,The length of the statement  "                listenerManager = new EndPoint.ListenerManager(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' tokenManager' this); " is 136.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,TerminateCurrentSubscriberRequest,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' tokenManager' this); " is 152.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,ChangeUUID,The length of the statement  "            EndPoint.OtherOperation endPoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' telemetryManager' tokenManager' this); " is 164.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSubscribedChannels,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' null' this); " is 144.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,GetSubscribedChannelGroups,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' null' this); " is 144.
Long Statement,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Destroy,The length of the statement  "            EndPoint.OtherOperation endpoint = new EndPoint.OtherOperation(pubnubConfig' jsonPluggableLibrary' pubnubUnitTest' pubnubLog' null' null' this); " is 144.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The length of the statement  "                    pubnubHttpClientHandler = new PubnubHttpClientHandler("PubnubHttpClientHandler"' httpClientHandler' pubnubConfiguation' jsonLib' unitTest' log); " is 144.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The length of the statement  "                    pubnubHttpClientHandler = new PubnubHttpClientHandler("PubnubHttpClientHandler"' httpClientHandler' pubnubConfiguation' jsonLib' unitTest' log); " is 144.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The length of the statement  "            pubnubHttp = new PubnubHttp(pubnubConfiguation' jsonLib' log' pubnubTelemetryMgr' httpClientSubscribe' httpClientNonsubscribe); " is 127.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResetInternetCheckSettings,The length of the statement  "                    ChannelGroupInternetStatus[PubnubInstance.InstanceId].GetOrAdd(multiChannelGroup' true); //Set to true for internet connection " is 126.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,CheckInternetConnectionStatus,The length of the statement  "                clientNetworkStatusInternetStatus = ClientNetworkStatus.CheckInternetStatus<T>(PubnetSystemActive' type' callback' channels' channelGroups); " is 140.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                    if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' Dedupe - Duplicate skipped - msg = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(message))' currentConfig.LogVerbosity); " is 230.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                    if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' Dedupe - AddEntry - msg = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(message))' currentConfig.LogVerbosity); " is 221.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsTargetForDedup,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' IsTargetForDedup - dedupe error = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' currentConfig.LogVerbosity); " is 193.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The length of the statement  "                if (asyncRequestState != null && asyncRequestState.ResponseType == PNOperationType.PNSubscribeOperation && result != null && result.Count > 0) " is 142.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' IsZeroTimeTokenRequest - Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' currentConfig.LogVerbosity); " is 196.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToConnectCallback,The length of the statement  "            PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNConnectedCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 146.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 164.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity); " is 219.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity); " is 276.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity); " is 252.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                    if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2) " is 128.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available " is 133.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                                PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 157.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                            object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage); " is 126.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true); " is 130.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                            LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity); " is 239.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity); " is 248.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                            PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 151.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null); " is 142.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                        status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null); " is 137.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200) " is 121.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                                    PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message)); " is 177.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' currentConfig.LogVerbosity); " is 196.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetCurrentSubscriberChannels,The length of the statement  "            if (MultiChannelSubscribe != null && MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.Count > 0) " is 165.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,GetCurrentSubscriberChannelGroups,The length of the statement  "            if (MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.Count > 0) " is 180.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' PubnubInstance is null. Exiting UrlProcessRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 170.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    channel = (pubnubRequestState.Channels != null && pubnubRequestState.Channels.Length > 0) ? string.Join("'"' pubnubRequestState.Channels.OrderBy(x => x).ToArray()) : "'"; " is 170.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    if (ChannelRequest.ContainsKey(PubnubInstance.InstanceId) && !channel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(channel) && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence)) " is 332.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                        if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                            LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}' UrlProcessRequest ChannelRequest PubnubInstance.InstanceId Channel NOT matching"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' currentConfig.LogVerbosity); " is 230.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(channel' pubnubRequestState.Request' (key' oldState) => pubnubRequestState.Request); " is 138.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}' Request={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' requestUri.ToString())' currentConfig.LogVerbosity); " is 185.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    Task<string> jsonResponse = pubnubHttp.SendRequestAndGetJsonResponseWithPOST(requestUri' pubnubRequestState' null' jsonPostOrPatchData); " is 136.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    Task<string> jsonResponse = pubnubHttp.SendRequestAndGetJsonResponseWithPATCH(requestUri' pubnubRequestState' null' jsonPostOrPatchData); " is 137.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    Task<string> jsonResponse = pubnubHttp.SendRequestAndGetJsonResponseWithPOST(requestUri' pubnubRequestState' request' jsonPostOrPatchData); " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    Task<string> jsonResponse = pubnubHttp.SendRequestAndGetJsonResponseWithPATCH(requestUri' pubnubRequestState' request' jsonPostOrPatchData); " is 140.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}'Received JSON but SubscribeDisconnected = {1} for request={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonString' requestUri)' currentConfig.LogVerbosity); " is 235.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}' JSON= {1} for request={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonString' requestUri)' currentConfig.LogVerbosity); " is 200.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                if (exceptionMessage.IndexOf("The request was aborted: The request was canceled"' StringComparison.CurrentCultureIgnoreCase) == -1 " is 130.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                && exceptionMessage.IndexOf("Machine suspend mode enabled. No request will be processed."' StringComparison.CurrentCultureIgnoreCase) == -1 " is 139.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation && exceptionMessage.IndexOf("The operation has timed out"' StringComparison.CurrentCultureIgnoreCase) == -1) " is 184.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                        PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(pubnubRequestState.ResponseType' category' pubnubRequestState' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 198.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                    if (PubnubInstance != null && pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 169.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} PubnubBaseCore UrlProcessRequest Exception={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' webEx != null ? webEx.ToString() : exceptionMessage)' currentConfig.LogVerbosity); " is 249.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                if (deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("error") && string.Equals(deserializeStatus["error"].ToString()' "true"' StringComparison.CurrentCultureIgnoreCase)) " is 182.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                        status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' PNStatusCategory.PNUnknownCategory' asyncRequestState' (int)HttpStatusCode.NotFound' new PNException(jsonString)); " is 195.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                else if (deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("error") && deserializeStatus.ContainsKey("status") && Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode) && statusCode > 0) " is 215.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                                    status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' asyncRequestState' statusCode' new PNException(jsonString)); " is 151.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                else if (deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("status") && string.Equals(deserializeStatus["status"].ToString()' "error"' StringComparison.CurrentCultureIgnoreCase) && deserializeStatus.ContainsKey("error")) " is 232.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                                    status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' asyncRequestState' statusCode' new PNException(jsonString)); " is 151.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                            status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' asyncRequestState' statusCode' new PNException(jsonString)); " is 151.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The length of the statement  "                result = WrapResultBasedOnResponseType<T>(asyncRequestState.ResponseType' jsonString' asyncRequestState.Channels' asyncRequestState.ChannelGroups' asyncRequestState.Reconnect' asyncRequestState.Timetoken' asyncRequestState.PubnubCallback); " is 239.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "") " is 146.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                                        result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback); " is 158.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The length of the statement  "                                        result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback); " is 142.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessResponseCallbacks,The length of the statement  "                    ResponseToConnectCallback<T>(asyncRequestState.ResponseType' asyncRequestState.Channels' asyncRequestState.ChannelGroups' asyncRequestState); " is 141.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                throw new ArgumentException("BuildJsonUserState takes either channel or channelGroup at one time. Send one at a time by passing empty value for other."); " is 153.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                if (!string.IsNullOrEmpty(channelGroup) && ChannelGroupLocalUserState[PubnubInstance.InstanceId].ContainsKey(channelGroup)) " is 123.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelUserStateKey' (channelUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelUserStateValue) : channelUserStateValue); " is 205.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelGroupUserStateKey' channelGroupUserStateValue.ToString().ToLowerInvariant()); " is 129.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,BuildJsonUserState,The length of the statement  "                        jsonStateBuilder.AppendFormat("\"{0}\":{1}"' channelGroupUserStateKey' (channelGroupUserStateValue.GetType().ToString() == "System.String") ? string.Format("\"{0}\""' channelGroupUserStateValue) : channelGroupUserStateValue); " is 225.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The length of the statement  "                    if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' TerminatePendingWebRequest - {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' state.Request.RequestUri.ToString())' currentConfig.LogVerbosity); " is 221.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                    if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                            LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel)' currentConfig.LogVerbosity); " is 237.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                            LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel)' currentConfig.LogVerbosity); " is 247.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                            if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveChannelDictionary,The length of the statement  "                                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to remove web request from dictionary in RemoveChannelDictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 243.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                        if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 220.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 230.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                        if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 214.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channel= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 224.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                        if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 225.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to RemoveUserState from local user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 235.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                        if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 219.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,RemoveUserState,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} Unable to RemoveUserState from user state dictionary for channelgroup= {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 229.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The length of the statement  "                            LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval > MAXEXPONENTIALBACKOFF"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' currentConfig.LogVerbosity); " is 200.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The length of the statement  "                        LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0}' EXPONENTIAL timerInterval = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timerInterval.ToString())' currentConfig.LogVerbosity); " is 208.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                if (string.IsNullOrEmpty(PubnubInstance.InstanceId) || ChannelReconnectTimer == null || ChannelReconnectTimer.Count == 0 || !ChannelReconnectTimer.ContainsKey(PubnubInstance.InstanceId)) " is 186.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channel reconnect timer reference from collection for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' key)' currentConfig.LogVerbosity); " is 261.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                    ConcurrentDictionary<string' Timer> channelGroupReconnectCollection = ChannelGroupReconnectTimer[PubnubInstance.InstanceId]; " is 124.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} TerminateReconnectTimer(null) - Unable to remove channelgroup reconnect timer reference from collection for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' groupKey)' currentConfig.LogVerbosity); " is 271.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The length of the statement  "                    LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} TerminateReconnectTimer exception: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' currentConfig.LogVerbosity); " is 192.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,DeleteLocalChannelGroupUserState,The length of the statement  "                userStateDeleted = ChannelGroupLocalUserState[PubnubInstance.InstanceId].TryRemove(channelGroup' out returnedUserState); " is 120.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The length of the statement  "                    if (ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannel) && ChannelRequest[PubnubInstance.InstanceId].TryGetValue(multiChannel' out request) && request != null) " is 175.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The length of the statement  "                            if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog)) " is 143.
Long Statement,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The length of the statement  "                                LoggingMethod.WriteToLog(currentLog' string.Format("DateTime {0} TerminateCurrentSubsciberRequest {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())' currentConfig.LogVerbosity); " is 217.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' postData = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' postData)' pubnubConfig.LogVerbosity); " is 174.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                return await SendRequestAndGetJsonResponseClassicHttpWithPOST(requestUri' pubnubRequestState' request' postData).ConfigureAwait(false); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                    return await SendRequestAndGetJsonResponseTaskFactoryWithPOST(pubnubRequestState' request' postData).ConfigureAwait(false); " is 123.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                    return await SendRequestAndGetJsonResponseHttpClientWithPOST(requestUri' pubnubRequestState' request' postData).ConfigureAwait(false); " is 134.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPOST,The length of the statement  "                return await SendRequestAndGetJsonResponseTaskFactoryWithPOST(pubnubRequestState' request' postData).ConfigureAwait(false); " is 123.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPATCH,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' patchData = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' patchData)' pubnubConfig.LogVerbosity); " is 176.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPATCH,The length of the statement  "                return await SendRequestAndGetJsonResponseClassicHttpWithPATCH(pubnubRequestState' request' patchData).ConfigureAwait(false); " is 125.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPATCH,The length of the statement  "                    return await SendRequestAndGetJsonResponseTaskFactoryWithPATCH(pubnubRequestState' request' patchData).ConfigureAwait(false); " is 125.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPATCH,The length of the statement  "                    return await SendRequestAndGetJsonResponseHttpClientWithPATCH(requestUri' pubnubRequestState' patchData).ConfigureAwait(false); " is 127.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseWithPATCH,The length of the statement  "                return await SendRequestAndGetJsonResponseTaskFactoryWithPATCH(pubnubRequestState' request' patchData).ConfigureAwait(false); " is 125.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseTaskFactory"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 197.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                request.Method = (pubnubRequestState != null && (pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation  " is 124.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 154.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                response = await Task.Factory.FromAsync<HttpWebResponse>(request.BeginGetResponse' asyncPubnubResult => (HttpWebResponse)request.EndGetResponse(asyncPubnubResult)' pubnubRequestState).ConfigureAwait(false); " is 206.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())); " is 181.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 162.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before Task.Factory.FromAsync With POST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 160.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                WebResponse response = await Task.Factory.FromAsync(request.BeginGetResponse' request.EndGetResponse' pubnubRequestState).ConfigureAwait(false); " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse With POST for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())); " is 191.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 145.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 173.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before Task.Factory.FromAsync With PATCH"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 161.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                WebResponse response = await Task.Factory.FromAsync(request.BeginGetResponse' request.EndGetResponse' pubnubRequestState).ConfigureAwait(false); " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Got PubnubWebResponse With PATCH for {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' request.RequestUri.ToString())); " is 192.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                    System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With PATCH"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 146.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With PATCH from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 174.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseClassicHttp"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 197.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                request.Method = (pubnubRequestState != null && (pubnubRequestState.ResponseType == PNOperationType.PNDeleteMessageOperation  " is 124.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before BeginGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 144.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 142.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 141.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 140.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 135.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 162.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseClassicHttpWithPOST"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 205.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 153.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 152.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 151.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With POST "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 146.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With POST from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 173.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' Inside SendRequestAndGetJsonResponseClassicHttpWithPATCH"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 206.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                using (var requestStream = await Task<Stream>.Factory.FromAsync(request.BeginGetRequestStream' request.EndGetRequestStream' pubnubRequestState).ConfigureAwait(false)) " is 166.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Before EndGetResponse With PATCH "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 154.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                            System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' After EndGetResponse With PATCH "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 153.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Inside StreamReader With PATCH "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 152.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                                System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON With PATCH "' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 147.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite); " is 178.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The length of the statement  "                        System.Diagnostics.Debug.WriteLine(string.Format("DateTime {0}' Retrieved JSON  With PATCH from WebException response"' DateTime.Now.ToString(CultureInfo.InvariantCulture))); " is 174.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        string currentMultiChannel = (currentState.Channels == null) ? "" : string.Join("'"' currentState.Channels.OrderBy(x => x).ToArray()); " is 134.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        string currentMultiChannelGroup = (currentState.ChannelGroups == null) ? "" : string.Join("'"' currentState.ChannelGroups.OrderBy(x => x).ToArray()); " is 149.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached.Request abort for channel={1} ;channelgroup={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentMultiChannel' currentMultiChannelGroup)' pubnubConfig.LogVerbosity); " is 302.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' OnPubnubWebRequestTimeout: client request timeout reached. However state is unknown"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 233.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' **WP7 OnPubnubWebRequestTimeout**"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' pubnubConfig.LogVerbosity); " is 183.
Long Statement,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The length of the statement  "                    PNStatus status = new StatusBuilder(pubnubConfig' jsonLib).CreateStatusResponse<T>(currentState.ResponseType' errorCategory' currentState' (int)HttpStatusCode.NotFound' new PNException("Request timeout")); " is 205.
Long Statement,PubnubApi,PubnubCrypto,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCrypto.cs,EncryptOrDecrypt,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} Decrypt Error. {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' config.LogVerbosity); " is 164.
Long Statement,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,HistoryDecodeDecryptLoop,The length of the statement  "                            PNStatus status = new StatusBuilder(config' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 150.
Long Statement,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,HistoryDecodeDecryptLoop,The length of the statement  "                        object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage); " is 126.
Long Statement,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,FetchHistoryDecodeDecryptLoop,The length of the statement  "                                            PNStatus status = new StatusBuilder(config' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 150.
Long Statement,PubnubApi,SecureMessage,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\SecureMessage.cs,FetchHistoryDecodeDecryptLoop,The length of the statement  "                                        object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage); " is 126.
Long Statement,PubnubApi.EndPoint,AuditOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The length of the statement  "            if (string.IsNullOrEmpty(config.SecretKey) || string.IsNullOrEmpty(config.SecretKey.Trim()) || config.SecretKey.Length <= 0) " is 124.
Long Statement,PubnubApi.EndPoint,AuditOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The length of the statement  "            string authKeysCommaDelimited = (authKeys != null && authKeys.Length > 0) ? string.Join("'"' authKeys.OrderBy(x => x).ToArray()) : ""; " is 134.
Long Statement,PubnubApi.EndPoint,AuditOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\AuditOperation.cs,AuditAccess,The length of the statement  "            Uri request = urlBuilder.BuildAuditAccessRequest("GET"' ""' channel' channelGroup' authKeysCommaDelimited' externalQueryParam); " is 127.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Execute,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' WARNING: Grant() signature has changed! This specific call will be making a request to PAMv2. Please update your code if this is not the intended action."' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 297.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Execute,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantDelete' this.grantManage' this.grantTTL' this.queryParam' callback); " is 206.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Execute,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantDelete' this.grantManage' this.grantTTL' this.queryParam' callback); " is 206.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Retry,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantDelete' this.grantManage' this.grantTTL' this.queryParam' savedCallback); " is 211.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,Retry,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pamAuthenticationKeys' this.grantRead' this.grantWrite' this.grantDelete' this.grantManage' this.grantTTL' this.queryParam' savedCallback); " is 211.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "            if (string.IsNullOrEmpty(config.SecretKey) || string.IsNullOrEmpty(config.SecretKey.Trim()) || config.SecretKey.Length <= 0) " is 124.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,GrantOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantOperation.cs,GrantAccess,The length of the statement  "            Uri request = urlBuilder.BuildGrantV2AccessRequest("GET"' ""' channelsCommaDelimited' channelGroupsCommaDelimited' authKeysCommaDelimited' read' write' delete' manage' ttl' externalQueryParam); " is 193.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,Execute,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pubnubUsers' this.pubnubSpaces' this.pubnubChannelNamesPattern' this.pubnubChannelGroupNamesPattern' this.pubnubUsersPattern' this.pubnubSpacesPattern' this.grantTTL' this.grantMeta' this.queryParam' callback); " is 282.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,Execute,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pubnubUsers' this.pubnubSpaces' this.pubnubChannelNamesPattern' this.pubnubChannelGroupNamesPattern' this.pubnubUsersPattern' this.pubnubSpacesPattern' this.grantTTL' this.grantMeta' this.queryParam' callback); " is 282.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,Retry,The length of the statement  "                    GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pubnubUsers' this.pubnubSpaces' this.pubnubChannelNamesPattern' this.pubnubChannelGroupNamesPattern' this.pubnubUsersPattern' this.pubnubSpacesPattern' this.grantTTL' this.grantMeta' this.queryParam' savedCallbackGrantToken); " is 297.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,Retry,The length of the statement  "                GrantAccess(this.pubnubChannelNames' this.pubnubChannelGroupNames' this.pubnubUsers' this.pubnubSpaces' this.pubnubChannelNamesPattern' this.pubnubChannelGroupNamesPattern' this.pubnubUsersPattern' this.pubnubSpacesPattern' this.grantTTL' this.grantMeta' this.queryParam' savedCallbackGrantToken); " is 297.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The length of the statement  "            if (string.IsNullOrEmpty(config.SecretKey) || string.IsNullOrEmpty(config.SecretKey.Trim()) || config.SecretKey.Length <= 0) " is 124.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The length of the statement  "                    if (dicResult != null && dicResult.Count > 0 && dicResult.ContainsKey("status") && dicResult["status"].ToString() == "200") " is 123.
Long Statement,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The length of the statement  "                        EndPoint.GrantOperation pamv2GrantOperation = new GrantOperation(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' PubnubInstance); " is 139.
Long Statement,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroup,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pnTelemetryMgr' pubnubTokenMgr); " is 124.
Long Statement,PubnubApi.EndPoint,AddChannelsToChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\AddChannelsToChannelGroupOperation.cs,AddChannelsToChannelGroup,The length of the statement  "            Uri request = urlBuilder.BuildAddChannelsToChannelGroupRequest("GET"' ""' channelsCommaDelimited' nameSpace' groupName' externalQueryParam); " is 140.
Long Statement,PubnubApi.EndPoint,DeleteChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\DeleteChannelGroupOperation.cs,DeleteChannelGroup,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,DeleteChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\DeleteChannelGroupOperation.cs,DeleteChannelGroup,The length of the statement  "            Uri request = urlBuilder.BuildRemoveChannelsFromChannelGroupRequest("GET"' ""' null' ""' groupName' externalQueryParam); " is 120.
Long Statement,PubnubApi.EndPoint,ListAllChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListAllChannelGroupOperation.cs,GetAllChannelGroup,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,ListChannelsForChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\ListChannelsForChannelGroupOperation.cs,GetChannelsForChannelGroup,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroup,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,RemoveChannelsFromChannelGroupOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\ChannelGroup\RemoveChannelsFromChannelGroupOperation.cs,RemoveChannelsFromChannelGroup,The length of the statement  "            Uri request = urlBuilder.BuildRemoveChannelsFromChannelGroupRequest("GET"' ""' channelsCommaDelimited' nameSpace' groupName' externalQueryParam); " is 145.
Long Statement,PubnubApi.EndPoint,CreateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateSpaceOperation.cs,CreateSpace,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,CreateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateSpaceOperation.cs,CreateSpace,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,Execute,The length of the statement  "                CreateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,Execute,The length of the statement  "                CreateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,Retry,The length of the statement  "                CreateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,Retry,The length of the statement  "                CreateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,CreateUser,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,CreateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\CreateUserOperation.cs,CreateUser,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,DeleteSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteSpaceOperation.cs,DeleteSpace,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,DeleteSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteSpaceOperation.cs,DeleteSpace,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,DeleteUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteUserOperation.cs,DeleteUser,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,DeleteUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\DeleteUserOperation.cs,DeleteUser,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,Execute,The length of the statement  "                GetMembershipsList(this.usrId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 142.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,Execute,The length of the statement  "                GetMembershipsList(this.usrId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 142.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,Retry,The length of the statement  "                GetMembershipsList(this.usrId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 142.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,Retry,The length of the statement  "                GetMembershipsList(this.usrId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 142.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,GetMembershipsList,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembershipsOperation.cs,GetMembershipsList,The length of the statement  "            Uri request = urlBuilder.BuildGetAllMembershipsRequest("GET"' ""' userId' internalPage.Next' internalPage.Prev' limit' includeCount' includeOptions' externalQueryParam); " is 169.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,Execute,The length of the statement  "                GetMembersList(this.spcId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 138.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,Execute,The length of the statement  "                GetMembersList(this.spcId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 138.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,Retry,The length of the statement  "                GetMembersList(this.spcId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 138.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,Retry,The length of the statement  "                GetMembersList(this.spcId' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 138.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,GetMembersList,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetMembersOperation.cs,GetMembersList,The length of the statement  "            Uri request = urlBuilder.BuildGetAllMembersRequest("GET"' ""' spaceId' internalPage.Next' internalPage.Prev' limit' includeCount' includeOptions' externalQueryParam); " is 166.
Long Statement,PubnubApi.EndPoint,GetSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpaceOperation.cs,GetSingleSpace,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetSpacesOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpacesOperation.cs,GetSpaceList,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetSpacesOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetSpacesOperation.cs,GetSpaceList,The length of the statement  "            Uri request = urlBuilder.BuildGetAllSpacesRequest("GET"' ""' internalPage.Next' internalPage.Prev' limit' includeCount' includeCustom' externalQueryParam); " is 155.
Long Statement,PubnubApi.EndPoint,GetUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUserOperation.cs,GetSingleUser,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetUsersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUsersOperation.cs,GetUserList,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetUsersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\GetUsersOperation.cs,GetUserList,The length of the statement  "            Uri request = urlBuilder.BuildGetAllUsersRequest("GET"' ""' internalPage.Next' internalPage.Prev' limit' includeCount' includeCustom' externalQueryParam); " is 154.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,Execute,The length of the statement  "                UpdateSpaceMembershipWithUser(this.usrId' this.addMembership' this.updMembership' this.delMembership' this.mbrshipCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' callback); " is 228.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,Execute,The length of the statement  "                UpdateSpaceMembershipWithUser(this.usrId' this.addMembership' this.updMembership' this.delMembership' this.mbrshipCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' callback); " is 228.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,Retry,The length of the statement  "                UpdateSpaceMembershipWithUser(this.usrId' this.addMembership' this.updMembership' this.delMembership' this.mbrshipCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 233.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,Retry,The length of the statement  "                UpdateSpaceMembershipWithUser(this.usrId' this.addMembership' this.updMembership' this.delMembership' this.mbrshipCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 233.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,UpdateSpaceMembershipWithUser,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,UpdateSpaceMembershipWithUser,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,ManageMembershipsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembershipsOperation.cs,UpdateSpaceMembershipWithUser,The length of the statement  "            Uri request = urlBuilder.BuildUpdateSpaceMembershipsWithUserRequest("PATCH"' patchMessage' userId' internalPage.Next' internalPage.Prev' limit' includeCount' includeOptions' externalQueryParam); " is 194.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,Execute,The length of the statement  "                ProcessMembersOperationRequest(this.spcId' this.addMember' this.updMember' this.delMember' this.mbrCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' callback); " is 213.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,Execute,The length of the statement  "                ProcessMembersOperationRequest(this.spcId' this.addMember' this.updMember' this.delMember' this.mbrCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' callback); " is 213.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,Retry,The length of the statement  "                ProcessMembersOperationRequest(this.spcId' this.addMember' this.updMember' this.delMember' this.mbrCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 218.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,Retry,The length of the statement  "                ProcessMembersOperationRequest(this.spcId' this.addMember' this.updMember' this.delMember' this.mbrCustom' this.page' this.limit' this.includeCount' this.commandDelimitedIncludeOptions' this.queryParam' savedCallback); " is 218.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ProcessMembersOperationRequest,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ProcessMembersOperationRequest,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,ManageMembersOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\ManageMembersOperation.cs,ProcessMembersOperationRequest,The length of the statement  "            Uri request = urlBuilder.BuildMembersAddUpdateRemoveRequest("PATCH"' patchMessage' spaceId' internalPage.Next' internalPage.Prev' limit' includeCount' includeOptions' externalQueryParam); " is 187.
Long Statement,PubnubApi.EndPoint,UpdateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateSpaceOperation.cs,CreateSpace,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,UpdateSpaceOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateSpaceOperation.cs,CreateSpace,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,Execute,The length of the statement  "                UpdateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,Execute,The length of the statement  "                UpdateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,Retry,The length of the statement  "                UpdateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,Retry,The length of the statement  "                UpdateUser(this.usrId' this.usrName' this.usrExternalId' this.usrProfileUrl' this.usrEmail' this.usrCustom' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,UpdateUser,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,UpdateUserOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Objects\UpdateUserOperation.cs,UpdateUser,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,ChangeUUID,The length of the statement  "                        IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            string channelsCommaDelimited = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : ""; " is 134.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            string channelGroupsCommaDelimited = (channelGroups != null && channelGroups.Length > 0) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 154.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The length of the statement  "            Uri request = urlBuilder.BuildGetUserStateRequest("GET"' ""' channelsCommaDelimited' channelGroupsCommaDelimited' internalUuid' externalQueryParam); " is 148.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,Execute,The length of the statement  "                HereNow(this.channelNames' this.channelGroupNames' this.includeChannelUUIDs' this.includeUserState' this.queryParam' callback); " is 127.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,Execute,The length of the statement  "                HereNow(this.channelNames' this.channelGroupNames' this.includeChannelUUIDs' this.includeUserState' this.queryParam' callback); " is 127.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,Retry,The length of the statement  "                HereNow(this.channelNames' this.channelGroupNames' this.includeChannelUUIDs' this.includeUserState' this.queryParam' savedCallback); " is 132.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,Retry,The length of the statement  "                HereNow(this.channelNames' this.channelGroupNames' this.includeChannelUUIDs' this.includeUserState' this.queryParam' savedCallback); " is 132.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNow,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,HereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\HereNowOperation.cs,HereNow,The length of the statement  "            Uri request = urlBuilder.BuildHereNowRequest("GET"' ""' channels' channelGroups' showUUIDList' includeUserState' externalQueryParam); " is 133.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,Retry,The length of the statement  "                SetUserState(this.channelNames' this.channelGroupNames' this.channelUUID' serializedState' this.queryParam' savedCallback); " is 123.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,Retry,The length of the statement  "                SetUserState(this.channelNames' this.channelGroupNames' this.channelUUID' serializedState' this.queryParam' savedCallback); " is 123.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                        PNStatus status = statusBuilder.CreateStatusResponse< PNSetStateResult>(PNOperationType.PNSetStateOperation' PNStatusCategory.PNUnknownCategory' null' (int)System.Net.HttpStatusCode.NotModified' null); " is 201.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "            SharedSetUserState(filteredChannels' filteredChannelGroups' uuid' jsonUserState' jsonUserState' externalQueryParam' callback); " is 126.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "                PNStatus status = statusBuilder.CreateStatusResponse<PNSetStateResult>(PNOperationType.PNSetStateOperation' PNStatusCategory.PNUnknownCategory' null' (int)System.Net.HttpStatusCode.NotModified' null); " is 200.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The length of the statement  "            SharedSetUserState(channels' channelGroups' uuid' currentChannelUserState' currentChannelGroupUserState' externalQueryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                channelGroupList = channelGroupList.Where(cg => !string.IsNullOrEmpty(cg) && cg.Trim().Length > 0).Distinct<string>().ToList(); " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            string commaDelimitedChannels = (channelArray != null && channelArray.Length > 0) ? string.Join("'"' channelArray.OrderBy(x => x).ToArray()) : ""; " is 146.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            string commaDelimitedChannelGroups = (channelGroupsArray != null && channelGroupsArray.Length > 0) ? string.Join("'"' channelGroupsArray.OrderBy(x => x).ToArray()) : ""; " is 169.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelUserState = jsonLibrary.DeserializeToDictionaryOfObject(jsonChannelUserState); " is 123.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Dictionary<string' object> deserializeChannelGroupUserState = jsonLibrary.DeserializeToDictionaryOfObject(jsonChannelGroupUserState); " is 133.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 161.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannel.Trim()' deserializeChannelUserState' (oldState' newState) => deserializeChannelUserState); " is 166.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelGroupUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 181.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "                ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup.Trim()' deserializeChannelGroupUserState' (oldState' newState) => deserializeChannelGroupUserState); " is 186.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            if ((jsonChannelUserState == jsonChannelGroupUserState) || (jsonChannelUserState != "{}" && jsonChannelGroupUserState == "{}")) " is 127.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SharedSetUserState,The length of the statement  "            Uri request = urlBuilder.BuildSetUserStateRequest("GET"' ""' commaDelimitedChannels' commaDelimitedChannelGroups' currentUuid' jsonUserState' externalQueryParam); " is 162.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    if (ChannelLocalUserState[PubnubInstance.InstanceId].TryGetValue(channel' out channelUserStateDictionary) && channelUserStateDictionary != null) " is 144.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 148.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        ChannelLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channel' channelUserStateDictionary' (oldData' newData) => channelUserStateDictionary); " is 148.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    if (ChannelGroupLocalUserState[PubnubInstance.InstanceId].TryGetValue(channelGroup' out channelGroupUserStateDictionary) && channelGroupUserStateDictionary != null) " is 164.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                    ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 168.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                        ChannelGroupLocalUserState[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' channelGroupUserStateDictionary' (oldData' newData) => channelGroupUserStateDictionary); " is 168.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,AddOrUpdateOrDeleteLocalUserState,The length of the statement  "                retJsonUserState = string.Format("{{\"{0}\":{{{1}}}'\"{2}\":{{{3}}}}}"' channel' jsonChannelUserState' channelGroup' jsonChannelGroupUserState); " is 144.
Long Statement,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,GetLocalUserState,The length of the statement  "                jsonStateBuilder.AppendFormat("{0}:{1}'{2}:{3}"' channel' channelJsonUserState' channelGroup' channelGroupJsonUserState); " is 121.
Long Statement,PubnubApi.EndPoint,WhereNowOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\WhereNowOperation.cs,WhereNow,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,Publish,The length of the statement  "                status.ErrorData = new PNErrorData("Missing Channel or MessageAction"' new ArgumentException("Missing Channel or MessageAction")); " is 130.
Long Statement,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,Publish,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,Publish,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,AddMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\AddMessageActionOperation.cs,Publish,The length of the statement  "            Uri request = urlBuilder.BuildAddMessageActionRequest(requestMethodName' postMessage' channel' messageTimetoken' externalQueryParam); " is 133.
Long Statement,PubnubApi.EndPoint,DuplicationManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\DuplicationManager.cs,AddEntry,The length of the statement  "            HashHistory.Add(this.GetSubscribeMessageHashKey(message)'Pubnub.TranslateDateTimeToPubnubUnixNanoSeconds(DateTime.UtcNow)); " is 123.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Sync,The length of the statement  "                Fire(this.channelName' this.msg' false' this.ttl' this.userMetadata' this.queryParam' new PNPublishResultExt((r's)=> { SyncResult = r; syncEvent.Set(); })); " is 156.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The length of the statement  "            if (string.IsNullOrEmpty(config.PublishKey) || string.IsNullOrEmpty(config.PublishKey.Trim()) || config.PublishKey.Length <= 0) " is 127.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The length of the statement  "            Uri request = urlBuilder.BuildPublishRequest(requestMethodName' ""' channel' message' storeInHistory' ttl' metaData' urlParam' externalQueryParam); " is 147.
Long Statement,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<PNPublishResult>(PNOperationType.PNFireOperation' category' requestState' 400' new PNException(json)); " is 180.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,Execute,The length of the statement  "                GetMessageActions(this.messageActionChannelName' this.startTT' this.endTT' this.limitRecords' this.queryParam' callback); " is 121.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,Execute,The length of the statement  "                GetMessageActions(this.messageActionChannelName' this.startTT' this.endTT' this.limitRecords' this.queryParam' callback); " is 121.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,Retry,The length of the statement  "                GetMessageActions(this.messageActionChannelName' this.startTT' this.endTT' this.limitRecords' this.queryParam' savedCallback); " is 126.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,Retry,The length of the statement  "                GetMessageActions(this.messageActionChannelName' this.startTT' this.endTT' this.limitRecords' this.queryParam' savedCallback); " is 126.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,GetMessageActions,The length of the statement  "                status.ErrorData = new PNErrorData("Missing Channel or MessageAction"' new ArgumentException("Missing Channel or MessageAction")); " is 130.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,GetMessageActions,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,GetMessageActionsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\GetMessageActionsOperation.cs,GetMessageActions,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,ListenerManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,AddListener,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' ListenerManager AddListener => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 199.
Long Statement,PubnubApi.EndPoint,ListenerManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\ListenerManager.cs,RemoveListener,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' ListenerManager RemoveListener => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Sync,The length of the statement  "                Publish(this.channelName' this.msg' this.storeInHistory' this.ttl' this.userMetadata' this.queryParam' new PNPublishResultExt((r' s) => { SyncResult = r; syncEvent.Set(); })); " is 175.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The length of the statement  "            if (string.IsNullOrEmpty(config.PublishKey) || string.IsNullOrEmpty(config.PublishKey.Trim()) || config.PublishKey.Length <= 0) " is 127.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The length of the statement  "            Uri request = urlBuilder.BuildPublishRequest(requestMethodName' ""' channel' message' storeInHistory' ttl' metaData' null' externalQueryParam); " is 143.
Long Statement,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<PNPublishResult>(PNOperationType.PNPublishOperation' category' requestState' 400' new PNException(json)); " is 183.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,Execute,The length of the statement  "                RemoveMessageAction(this.msgActionChannelName' this.messageTimetoken' this.actionTimetoken' this.msgActionUuid' this.queryParam' callback); " is 139.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,Execute,The length of the statement  "                RemoveMessageAction(this.msgActionChannelName' this.messageTimetoken' this.actionTimetoken' this.msgActionUuid' this.queryParam' callback); " is 139.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,Retry,The length of the statement  "                RemoveMessageAction(this.msgActionChannelName' this.messageTimetoken' this.actionTimetoken' this.msgActionUuid' this.queryParam' savedCallback); " is 144.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,Retry,The length of the statement  "                RemoveMessageAction(this.msgActionChannelName' this.messageTimetoken' this.actionTimetoken' this.msgActionUuid' this.queryParam' savedCallback); " is 144.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageAction,The length of the statement  "                status.ErrorData = new PNErrorData("Missing Channel or MessageAction"' new ArgumentException("Missing Channel or MessageAction")); " is 130.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageAction,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageAction,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,RemoveMessageActionOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\RemoveMessageActionOperation.cs,RemoveMessageAction,The length of the statement  "            Uri request = urlBuilder.BuildRemoveMessageActionRequest("DELETE"' ""' channel' messageTimetoken' actionTimetoken' messageActionUuid' externalQueryParam); " is 154.
Long Statement,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The length of the statement  "            if (string.IsNullOrEmpty(config.PublishKey) || string.IsNullOrEmpty(config.PublishKey.Trim()) || config.PublishKey.Length <= 0) " is 127.
Long Statement,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The length of the statement  "            if (string.IsNullOrEmpty(config.SubscribeKey) || string.IsNullOrEmpty(config.SubscribeKey.Trim()) || config.SubscribeKey.Length <= 0) " is 133.
Long Statement,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<PNPublishResult>(PNOperationType.PNSignalOperation' category' requestState' 400' new PNException(json)); " is 182.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                string multiChannelName = (currentChannels.Length > 0) ? string.Join("'"' currentChannels.OrderBy(x => x).ToArray()) : "'"; " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 289.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 288.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                    IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeAll,The length of the statement  "                    Uri request = urlBuilder.BuildMultiChannelLeaveRequest("GET"' ""' currentChannels' currentChannelGroups' channelsJsonState' externalQueryParam); " is 144.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' PubnubInstance is null. exiting MultiChannelUnSubscribeInit"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                string[] rawChannelGroups = (channelGroup != null && channelGroup.Trim().Length > 0) ? channelGroup.Split(''') : new string[] { }; " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId] != null && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName)) " is 203.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNUnexpectedDisconnectCategory' null' (int)HttpStatusCode.NotFound' null); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId] != null && MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(presenceChannelName)) " is 210.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId] != null && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName)) " is 223.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNUnexpectedDisconnectCategory' null' (int)HttpStatusCode.NotFound' null); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId] != null && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(presenceChannelGroupName)) " is 230.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        string multiChannelName = (currentChannels.Length > 0) ? string.Join("'"' currentChannels.OrderBy(x => x).ToArray()) : "'"; " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 289.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelUnSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 288.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            Uri request = urlBuilder.BuildMultiChannelLeaveRequest("GET"' ""' validChannels.ToArray()' validChannelGroups.ToArray()' channelsJsonState' externalQueryParam); " is 160.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        originalMultiChannelSubscribe = MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0 ? MultiChannelSubscribe[PubnubInstance.InstanceId].ToDictionary(kvp => kvp.Key' kvp => kvp.Value) : null; " is 196.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        originalMultiChannelGroupSubscribe = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0 ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ToDictionary(kvp => kvp.Key' kvp => kvp.Value) : null; " is 211.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                    PNStatus successStatus = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNDisconnectedCategory' null' (int)HttpStatusCode.OK' null); " is 205.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                    PNStatus failStatus = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNUnsubscribeOperation' PNStatusCategory.PNDisconnectedCategory' null' (int)HttpStatusCode.NotFound' new PNException("Unsubscribe Error. Please retry unsubscribe operation")); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                            unsubscribeStatus = MultiChannelGroupSubscribe[PubnubInstance.InstanceId].TryRemove(channelGroupToBeRemoved' out timetokenValue); " is 129.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' channels' channelGroups' 0' false' null' this.customQueryParam); " is 134.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' All channels are Unsubscribed. Further subscription was stopped"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 206.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelUnSubscribeInit,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelUnSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity); " is 371.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                if (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelSubscribe[PubnubInstance.InstanceId].ContainsKey(channelName)) " is 143.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            if (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && !MultiChannelGroupSubscribe[PubnubInstance.InstanceId].ContainsKey(channelGroupName)) " is 158.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                        string multiChannelGroupName = (currentChannelGroups.Length > 0) ? string.Join("'"' currentChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Aborting previous subscribe/presence requests having channel(s)={1}; channelgroup(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 272.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Success to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 287.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to remove channel(s)={1}; channelgroup(s)={2} from _channelRequest (MultiChannelSubscribeInit)."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 286.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to capture channel(s)={1}; channelgroup(s)={2} from _channelRequest to abort request."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannelName' multiChannelGroupName)' config.LogVerbosity); " is 276.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unable to find instance id = {1} from _channelRequest."' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubInstance.InstanceId)' config.LogVerbosity); " is 224.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                            ChannelRequest[PubnubInstance.InstanceId].AddOrUpdate(string.Join("'"' channels.OrderBy(x => x).ToArray())' state.Request' (key' oldValue) => state.Request); " is 157.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                    MultiChannelSubscribeRequest<T>(responseType' channels' channelGroups' 0' false' initialSubscribeUrlParams' externalQueryParam); " is 128.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                    SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 500' config.SubscribeTimeout * 500); " is 150.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} SubscribeManager=> MultiChannelSubscribeInit \n channel(s)={1} \n cg(s)={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' validChannels.OrderBy(x => x).ToArray())' string.Join("'"' validChannelGroups.OrderBy(x => x).ToArray())' ex)' config.LogVerbosity); " is 369.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeDisconnected. Exiting MultiChannelSubscribeRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (MultiChannelSubscribe != null && MultiChannelSubscribe[PubnubInstance.InstanceId].Count <= 0 && MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count <= 0) " is 203.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Zero channels/channelGroups. Further subscription was stopped"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 204.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            string multiChannel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 125.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            string multiChannelGroup = (channelGroups != null && channelGroups.Length > 0) ? string.Join("'"' channelGroups.OrderBy(x => x).ToArray()) : ""; " is 144.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(multiChannel' networkConnection' (key' oldValue) => networkConnection); " is 132.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(multiChannelGroup' networkConnection' (key' oldValue) => networkConnection); " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (((ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannel) && ChannelInternetStatus[PubnubInstance.InstanceId].TryGetValue(multiChannel' out channelInternetFlag) && !channelInternetFlag) " is 208.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                || (multiChannelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannelGroup) && ChannelGroupInternetStatus[PubnubInstance.InstanceId].TryGetValue(multiChannelGroup' out channelGroupInternetFlag) && !channelGroupInternetFlag)) " is 264.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "            if (!ChannelRequest.ContainsKey(PubnubInstance.InstanceId) || (!multiChannel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(multiChannel))) " is 205.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' PubnubInstance.InstanceId NOT matching"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 181.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 167.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0; " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Building request for channel(s)={1}' channelgroup(s)={2} with timetoken={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' multiChannel' multiChannelGroup' lastTimetoken)' config.LogVerbosity); " is 266.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                Uri request = urlBuilder.BuildMultiChannelSubscribeRequest("GET"' ""' channels' channelGroups' (Convert.ToInt64(timetoken.ToString()) == 0) ? Convert.ToInt64(timetoken.ToString()) : lastTimetoken' channelsJsonState' initialSubscribeUrlParams' externalQueryParam); " is 263.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string subscribedChannels = (MultiChannelSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x=>x).Aggregate((x' y) => x + "'" + y) : ""; " is 261.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string currentChannels = (channels != null && channels.Length > 0) ? channels.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 132.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string subscribedChannelGroups = (MultiChannelGroupSubscribe.ContainsKey(PubnubInstance.InstanceId) && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 283.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    string currentChannelGroups = (channelGroups != null && channelGroups.Length > 0) ? channelGroups.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 152.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                    if (subscribedChannels.Equals(currentChannels' StringComparison.CurrentCultureIgnoreCase) && subscribedChannelGroups.Equals(currentChannelGroups' StringComparison.CurrentCultureIgnoreCase)) " is 189.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' result count of ProcessJsonResponse = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' (result != null) ? result.Count : -1)' config.LogVerbosity); " is 223.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        if ((pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) && (result != null) && (result.Count > 0)) " is 183.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' jsonTimetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonTimetoken)' config.LogVerbosity); " is 178.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                                        MultiChannelSubscribe[PubnubInstance.InstanceId].AddOrUpdate(currentChannel' jsonTimetoken' (key' oldValue) => jsonTimetoken); " is 126.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                                        MultiChannelGroupSubscribe[PubnubInstance.InstanceId].AddOrUpdate(currentChannelGroup' jsonTimetoken' (key' oldValue) => jsonTimetoken); " is 136.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' condition failed for subscribedChannels == currentChannels && subscribedChannelGroups == currentChannelGroups"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 253.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' subscribedChannels = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' subscribedChannels)' config.LogVerbosity); " is 188.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' currentChannels = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentChannels)' config.LogVerbosity); " is 182.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' subscribedChannelGroups = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' subscribedChannelGroups)' config.LogVerbosity); " is 198.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime: {0}' currentChannelGroups = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' currentChannelGroups)' config.LogVerbosity); " is 192.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} method:_subscribe \n channel={1} \n timetoken={2} \n Exception Details={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' channels.OrderBy(x => x).ToArray())' timetoken' ex)' config.LogVerbosity); " is 285.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(type' errorCategory' pubnubRequestState' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 173.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The length of the statement  "                MultiChannelSubscribeRequest<T>(type' channels' channelGroups' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null' externalQueryParam); " is 147.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexExceptionHandlerTimerCallback,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexExceptionHandlerTimerCallback"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 180.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexExceptionHandler,The length of the statement  "            if (resumeOnReconnect || LastSubscribeTimetoken == null || !LastSubscribeTimetoken.ContainsKey(PubnubInstance.InstanceId)) " is 122.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} MultiplexInternalCallback timetoken = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' timetoken)' config.LogVerbosity); " is 194.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Lost Channel Name for resubscribe"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 176.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Subscribe is still Disconnected. So no reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Subscribe - No internet connection for channel={1} and channelgroup={2}; networkAvailable={3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' string.Join("'"' channels.OrderBy(x => x).ToArray())' channelGroups != null ? string.Join("'"' channelGroups) : ""' networkAvailable)' config.LogVerbosity); " is 370.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' reconnection policy is DISABLED' please handle reconnection manually."' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 212.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkIfOverrideTcpKeepAlive,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(type' errorCategory' null' (int)HttpStatusCode.NotFound' new PNException("SDK Network related error")); " is 184.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "            if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))) " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager ReconnectNetwork interval = {1} sec"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' PubnubNetworkTcpCheckIntervalInSeconds)' config.LogVerbosity); " is 235.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                        ChannelReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelTimerKey' timer' (key' oldState) => timer); " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The length of the statement  "                        ChannelGroupReconnectTimer[PubnubInstance.InstanceId].AddOrUpdate(reconnectChannelGroupTimerKey' timer' (key' oldState) => timer); " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                string channel = (channels != null && channels.Length > 0) ? string.Join("'"' channels.OrderBy(x => x).ToArray()) : "'"; " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                string channelGroup = (chananelGroups != null && chananelGroups.Length > 0) ? string.Join("'"' chananelGroups.OrderBy(x => x).ToArray()) : ""; " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 143.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Network available for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 198.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                        ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    if (!string.IsNullOrEmpty(channelGroup) && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup)) " is 123.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                        ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No network for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNSubscribeOperation' errorCategory' null' (int)HttpStatusCode.NotFound' new PNException("SDK Network related error")); " is 216.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' No channels/channelgroups for SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 206.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager Manual Reconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 176.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The length of the statement  "                MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' GetCurrentSubscriberChannels()' GetCurrentSubscriberChannelGroups()' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null' this.customQueryParam); " is 226.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Disconnect,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager Manual Disconnect"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 177.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - SubscribeDisconnected. No heartbeat check."' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 204.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                    bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' PNOperationType.PNSubscribeOperation' null' channels' chananelGroups); " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - ok. expected subscribe within threshold limit of SubscribeTimeout. No action needed"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 245.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling MultiChannelSubscribeRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 264.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                                MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' channels' chananelGroups' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null' this.customQueryParam); " is 183.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - **No auto subscribe within threshold limit of SubscribeTimeout**. Calling TerminateCurrentSubscriberRequest"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 269.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - StartSubscribeHeartbeatCheckCallback - No network or no pubnub instance mapping"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 241.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                            PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNSubscribeOperation' PNStatusCategory.PNNetworkIssuesCategory' null' (int)System.Net.HttpStatusCode.NotFound' new PNException("Internet connection problem during subscribe heartbeat.")); " is 284.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                                MultiChannelSubscribeRequest<T>(PNOperationType.PNSubscribeOperation' GetCurrentSubscriberChannels()' GetCurrentSubscriberChannelGroups()' LastSubscribeTimetoken[PubnubInstance.InstanceId]' false' null' this.customQueryParam); " is 226.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - StartSubscribeHeartbeatCheckCallback - No channels/cgs avaialable"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 227.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' SubscribeManager - StartSubscribeHeartbeatCheckCallback - EXCEPTION: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)'ex)' config.LogVerbosity); " is 218.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                string subscribedChannels = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 199.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                string subscribedChannelGroups = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Keys.OrderBy(x => x).Aggregate((x' y) => x + "'" + y) : ""; " is 214.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                if (netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))) " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        channelGroup = (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0) ? string.Join("'"' netState.ChannelGroups.OrderBy(x => x).ToArray()) : ""; " is 159.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)) " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            bool networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 166.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            if (ChannelInternetStatus[PubnubInstance.InstanceId].TryGetValue(channel' out channelInternetFlag) && channelInternetFlag) " is 122.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channel={1} {2} reconnectNetworkCallback. Retry"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType)' config.LogVerbosity); " is 222.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.NotFound' new PNException("Internet connection problem. Retrying connection")); " is 260.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        if (ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(channel) && ChannelInternetStatus[PubnubInstance.InstanceId].TryGetValue(channel' out channelInternetFlag) && channelInternetFlag) " is 195.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' {1} {2} terminating ch reconnectimer"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType)' config.LogVerbosity); " is 211.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.OK' null); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channel={1} {2} reconnectNetworkCallback. Internet Available : {3}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' netState.ResponseType' channelInternetFlag.ToString())' config.LogVerbosity); " is 273.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.ResponseType' netState.Channels' netState.ChannelGroups' netState.Timetoken' true' null' this.customQueryParam); " is 153.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        channel = (netState.Channels != null && netState.Channels.Length > 0) ? string.Join("'"' netState.Channels.OrderBy(x => x).ToArray()) : "'"; " is 140.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        if (subscribedChannelGroups == channelGroup && channelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup) " is 148.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)) " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            bool networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 166.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                networkConnection = CheckInternetConnectionStatus(PubnetSystemActive' netState.ResponseType' netState.PubnubCallback' netState.Channels' netState.ChannelGroups); " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            if (ChannelGroupInternetStatus[PubnubInstance.InstanceId].TryGetValue(channelGroup' out channelGroupInternetFlag) && channelGroupInternetFlag) " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                ChannelGroupInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channelGroup' networkConnection' (key' oldValue) => networkConnection); " is 137.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    ChannelInternetStatus[PubnubInstance.InstanceId].AddOrUpdate(channel' networkConnection' (key' oldValue) => networkConnection); " is 127.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Retrying"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 235.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.NotFound' new PNException("Internet connection problem. Retrying connection")); " is 260.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                        if (ChannelGroupInternetStatus[PubnubInstance.InstanceId].TryGetValue(channelGroup' out channelGroupInternetFlag) && channelGroupInternetFlag) " is 142.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' {1} {2} terminating cg reconnectimer"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 216.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' PNStatusCategory.PNReconnectedCategory' null' (int)System.Net.HttpStatusCode.OK' null); " is 191.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' channelgroup={1} {2} reconnectNetworkCallback. Internet Available"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channelGroup' netState.ResponseType)' config.LogVerbosity); " is 245.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                                    MultiChannelSubscribeRequest<T>(netState.ResponseType' netState.Channels' netState.ChannelGroups' netState.Timetoken' true' null' this.customQueryParam); " is 153.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' Unknown request state in reconnectNetworkCallback"' DateTime.Now.ToString(CultureInfo.InvariantCulture))' config.LogVerbosity); " is 192.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                    PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(netState.ResponseType' errorCategory' null' (int)HttpStatusCode.NotFound' new PNException(ex)); " is 176.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The length of the statement  "                LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0} method:reconnectNetworkCallback \n Exception Details={1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' config.LogVerbosity); " is 202.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The length of the statement  "                || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s != null && s.Contains("-pnpres") == false).Any())) " is 134.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The length of the statement  "                    PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000); " is 162.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                string[] subscriberChannels = (currentState.Channels != null) ? currentState.Channels.Where(s => s.Contains("-pnpres") == false).ToArray() : null; " is 146.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                string[] subscriberChannelGroups = (currentState.ChannelGroups != null) ? currentState.ChannelGroups.Where(s => s.Contains("-pnpres") == false).ToArray() : null; " is 161.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                bool networkConnection = CheckInternetConnectionStatus<T>(PubnetSystemActive' currentState.ResponseType' currentState.PubnubCallback' currentState.Channels' currentState.ChannelGroups); " is 185.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                    if ((subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)) " is 141.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                        IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                        Uri request = urlBuilder.BuildPresenceHeartbeatRequest("GET"' ""' subscriberChannels' subscriberChannelGroups' channelsJsonState); " is 130.
Long Statement,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The length of the statement  "                        PNStatus status = new StatusBuilder(config' jsonLibrary).CreateStatusResponse<T>(PNOperationType.PNSubscribeOperation' PNStatusCategory.PNNetworkIssuesCategory' null' (int)System.Net.HttpStatusCode.NotFound' new PNException("Internet connection problem during presence heartbeat.")); " is 283.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Execute,The length of the statement  "                List<string> presenceChannelNames = (this.subscribeChannelNames != null && this.subscribeChannelNames.Count > 0 && !string.IsNullOrEmpty(this.subscribeChannelNames[0]))  " is 168.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Execute,The length of the statement  "                List<string> presenceChannelGroupNames = (this.subscribeChannelGroupNames != null && this.subscribeChannelGroupNames.Count > 0 && !string.IsNullOrEmpty(this.subscribeChannelGroupNames[0]))  " is 188.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Execute,The length of the statement  "            string[] channelGroupNames = this.subscribeChannelGroupNames != null ? this.subscribeChannelGroupNames.ToArray() : null; " is 120.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' requested subscribe for channel(s)={1} and channel group(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' channelGroup)' config.LogVerbosity); " is 229.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                initialSubscribeUrlParams.Add("filter-expr"' UriUtil.EncodeUriComponent(config.FilterExpression' PNOperationType.PNSubscribeOperation' false' false' false)); " is 157.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 121.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                manager.MultiChannelSubscribeInit<T>(PNOperationType.PNSubscribeOperation' channels' channelGroups' initialSubscribeUrlParams' externalQueryParam); " is 147.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 121.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The length of the statement  "                manager.MultiChannelSubscribeInit<T>(PNOperationType.PNSubscribeOperation' channels' channelGroups' initialSubscribeUrlParams' externalQueryParam); " is 147.
Long Statement,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,CurrentPubnubInstance,The length of the statement  "                ChannelGroupLocalUserState.GetOrAdd(instance.InstanceId' new ConcurrentDictionary<string' Dictionary<string' object>>()); " is 121.
Long Statement,PubnubApi.EndPoint,UnsubscribeAllOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeAllOperation.cs,UnsubscribeAll,The length of the statement  "                SubscribeManager manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 138.
Long Statement,PubnubApi.EndPoint,UnsubscribeAllOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeAllOperation.cs,UnsubscribeAll,The length of the statement  "                SubscribeManager manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 138.
Long Statement,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The length of the statement  "            LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' requested unsubscribe for channel(s)={1}' cg(s)={2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' channel' channelGroup)' config.LogVerbosity); " is 217.
Long Statement,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The length of the statement  "                SubscribeManager manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 138.
Long Statement,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The length of the statement  "                SubscribeManager manager = new SubscribeManager(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr' PubnubInstance); " is 138.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,Execute,The length of the statement  "                RegisterDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 142.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,Execute,The length of the statement  "                RegisterDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 142.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,Retry,The length of the statement  "                RegisterDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 147.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,Retry,The length of the statement  "                RegisterDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 147.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,RegisterDevice,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,RegisterDevice,The length of the statement  "            Uri request = urlBuilder.BuildRegisterDevicePushRequest("GET"' ""' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam); " is 143.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,Execute,The length of the statement  "                GetChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 129.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,Execute,The length of the statement  "                GetChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 129.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,Retry,The length of the statement  "                GetChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 134.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,Retry,The length of the statement  "                GetChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 134.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,GetChannelsForDevice,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,AuditPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AuditPushChannelOperation.cs,GetChannelsForDevice,The length of the statement  "            Uri request = urlBuilder.BuildGetChannelsPushRequest("GET"' ""' pushType' pushToken' environment' deviceTopic' externalQueryParam); " is 131.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,Execute,The length of the statement  "                RemoveAllChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,Execute,The length of the statement  "                RemoveAllChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 135.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,Retry,The length of the statement  "                RemoveAllChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,Retry,The length of the statement  "                RemoveAllChannelsForDevice(this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 140.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,RemoveAllChannelsForDevice,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,RemoveAllPushChannelsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemoveAllPushChannelsOperation.cs,RemoveAllChannelsForDevice,The length of the statement  "            Uri request = urlBuilder.BuildUnregisterDevicePushRequest("GET"' ""' pushType' pushToken' environment' deviceTopic' externalQueryParam); " is 136.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,Execute,The length of the statement  "                RemoveChannelForDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 150.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,Execute,The length of the statement  "                RemoveChannelForDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' callback); " is 150.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,Retry,The length of the statement  "                RemoveChannelForDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 155.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,Retry,The length of the statement  "                RemoveChannelForDevice(this.channelNames' this.pubnubPushType' this.deviceTokenId' this.pushEnvironment' this.deviceTopic' this.queryParam' savedCallback); " is 155.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemoveChannelForDevice,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemoveChannelForDevice,The length of the statement  "            Uri request = urlBuilder.BuildRemoveChannelPushRequest("GET"' ""' channel' pushType' pushToken' environment' deviceTopic' externalQueryParam); " is 142.
Long Statement,PubnubApi.EndPoint,DeleteMessageOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\DeleteMessageOperation.cs,DeleteMessage,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,Execute,The length of the statement  "                History(this.channelNames' this.startTimetoken' this.endTimetoken' this.perChannelCount' this.reverseOption' this.withMetaOption' this.withMessageActionsOption' this.queryParam' callback); " is 188.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,Execute,The length of the statement  "                History(this.channelNames' this.startTimetoken' this.endTimetoken' this.perChannelCount' this.reverseOption' this.withMetaOption' this.withMessageActionsOption' this.queryParam' callback); " is 188.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,Retry,The length of the statement  "                History(this.channelNames' this.startTimetoken' this.endTimetoken' this.perChannelCount' this.reverseOption' this.withMetaOption' this.withMessageActionsOption' this.queryParam' savedCallback); " is 193.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,Retry,The length of the statement  "                History(this.channelNames' this.startTimetoken' this.endTimetoken' this.perChannelCount' this.reverseOption' this.withMetaOption' this.withMessageActionsOption' this.queryParam' savedCallback); " is 193.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,History,The length of the statement  "            if (channels == null || channels.Length == 0 || string.IsNullOrEmpty(channels[0]) || string.IsNullOrEmpty(channels[0].Trim())) " is 126.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,History,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,History,The length of the statement  "            Uri request = urlBuilder.BuildFetchRequest("GET"' ""' channels' start' end' count' reverse' includeMeta' includeMsgActions' externalQueryParam); " is 144.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,Execute,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' this.withMetaOption' this.queryParam' callback); " is 182.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,Execute,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' this.withMetaOption' this.queryParam' callback); " is 182.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,Retry,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' this.withMetaOption' this.queryParam' savedCallback); " is 187.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,Retry,The length of the statement  "                History(this.channelName' this.startTimetoken' this.endTimetoken' this.historyCount' this.reverseOption' this.includeTimetokenOption' this.withMetaOption' this.queryParam' savedCallback); " is 187.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,History,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,HistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\HistoryOperation.cs,History,The length of the statement  "            Uri request = urlBuilder.BuildHistoryRequest("GET"' ""' channel' start' end' count' reverse' includeToken' includeMeta' externalQueryParam); " is 140.
Long Statement,PubnubApi.EndPoint,MessageCountsOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\MessageCountsOperation.cs,MessageCounts,The length of the statement  "            IUrlRequestBuilder urlBuilder = new UrlRequestBuilder(config' jsonLibrary' unit' pubnubLog' pubnubTelemetryMgr' pubnubTokenMgr); " is 128.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The length of the statement  "                        if (dicEndpointLatency.ContainsKey(latencyEndPoint) && dicEndpointLatency[latencyEndPoint] != null && dicEndpointLatency[latencyEndPoint].Keys.Count > 0) " is 153.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency {1} latency = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' type' latencyMillisec)' pubnubConfig.LogVerbosity); " is 221.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The length of the statement  "                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 195.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The length of the statement  "                                        dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec " is 181.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 203.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                        double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds; " is 120.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000); " is 143.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                    Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value); " is 127.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity); " is 263.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                                                    LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity); " is 228.
Long Statement,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The length of the statement  "                        LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity); " is 211.
Long Statement,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,GetToken,The length of the statement  "                List<string> tokenKeyPatternList = dicToken[pubnubInstanceId].Keys.Where(k => patterFlag == k.PatternFlag && resourceType == k.ResourceType && Regex.IsMatch(resourceId' k.ResourceId)).Select(k => k.ResourceId).ToList(); " is 219.
Long Statement,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,GetToken,The length of the statement  "                PNTokenKey key = new PNTokenKey { ResourceType = resourceType' ResourceId = targetResourceId' PatternFlag = patterFlag }; " is 121.
Long Statement,PubnubApi.EndPoint,TokenManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TokenManager.cs,GetTokensByResource,The length of the statement  "                tokenList = dicToken[pubnubInstanceId].Where(tk=> tk.Key.ResourceType == resourceType).ToDictionary(kvp=> kvp.Key' kvp=> kvp.Value); " is 132.
Complex Conditional,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The conditional expression  "deserializeStatus != null && deserializeStatus.Count >= 1                           && deserializeStatus.ContainsKey("error") && string.Equals(deserializeStatus["error"].ToString()' "true"' StringComparison.CurrentCultureIgnoreCase)                          && deserializeStatus.ContainsKey("status") && Int32.TryParse(deserializeStatus["status"].ToString()' out serverErrorStatusCode)"  is complex.
Complex Conditional,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The conditional expression  "(ch == ''' && ignoreComma) || (ch == ':' && ignoreColon)"  is complex.
Complex Conditional,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The conditional expression  "type != PNOperationType.PNTimeOperation                          && type != PNOperationType.PNAccessManagerGrant && type != PNOperationType.PNAccessManagerGrantToken && type != PNOperationType.ChannelGroupGrantAccess                          && type != PNOperationType.PNAccessManagerAudit && type != PNOperationType.ChannelGroupAuditAccess"  is complex.
Complex Conditional,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,GenerateCommonQueryParams,The conditional expression  "type == PNOperationType.PNCreateUserOperation || type == PNOperationType.PNCreateSpaceOperation                          || type == PNOperationType.PNUpdateUserOperation || type == PNOperationType.PNUpdateSpaceOperation                          || type == PNOperationType.PNDeleteUserOperation || type == PNOperationType.PNDeleteSpaceOperation                          || type == PNOperationType.PNGetUserOperation || type == PNOperationType.PNGetSpaceOperation                          || type == PNOperationType.PNGetUsersOperation || type == PNOperationType.PNGetSpacesOperation                          || type == PNOperationType.PNGetMembersOperation || type == PNOperationType.PNGetMembershipsOperation                          || type == PNOperationType.PNManageMembersOperation || type == PNOperationType.PNManageMembershipsOperation"  is complex.
Complex Conditional,PubnubApi,PNFetchHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNFetchHistoryJsonDataParse.cs,GetObject,The conditional expression  "messagesContainer.ContainsKey("message") &&                                          (messagesContainer.ContainsKey("timetoken") || messagesContainer.ContainsKey("meta") || messagesContainer.ContainsKey("actions"))"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The conditional expression  "asyncRequestState != null && asyncRequestState.ResponseType == PNOperationType.PNSubscribeOperation && result != null && result.Count > 0"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,IsZeroTimeTokenRequest,The conditional expression  "(newChannels != null && newChannels.Count() > 0) || (newChannelGroups != null && newChannelGroups.Count() > 0)"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The conditional expression  "ChannelRequest.ContainsKey(PubnubInstance.InstanceId) && !channel.Equals("'"' StringComparison.CurrentCultureIgnoreCase) && !ChannelRequest[PubnubInstance.InstanceId].ContainsKey(channel) && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UrlProcessRequest,The conditional expression  "exceptionMessage.IndexOf("The request was aborted: The request was canceled"' StringComparison.CurrentCultureIgnoreCase) == -1                  && exceptionMessage.IndexOf("Machine suspend mode enabled. No request will be processed."' StringComparison.CurrentCultureIgnoreCase) == -1                  && (pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation && exceptionMessage.IndexOf("The operation has timed out"' StringComparison.CurrentCultureIgnoreCase) == -1)                  && exceptionMessage.IndexOf("A task was canceled"' StringComparison.CurrentCultureIgnoreCase) == -1"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The conditional expression  "deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("error") && deserializeStatus.ContainsKey("status") && Int32.TryParse(deserializeStatus["status"].ToString()' out statusCode) && statusCode > 0"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ProcessJsonResponse,The conditional expression  "deserializeStatus.Count >= 1 && deserializeStatus.ContainsKey("status") && string.Equals(deserializeStatus["status"].ToString()' "error"' StringComparison.CurrentCultureIgnoreCase) && deserializeStatus.ContainsKey("error")"  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The conditional expression  "result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == """  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The conditional expression  "result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == """  is complex.
Complex Conditional,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The conditional expression  "string.IsNullOrEmpty(PubnubInstance.InstanceId) || ChannelReconnectTimer == null || ChannelReconnectTimer.Count == 0 || !ChannelReconnectTimer.ContainsKey(PubnubInstance.InstanceId)"  is complex.
Complex Conditional,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The conditional expression  "currentState.ResponseType != PNOperationType.PNSubscribeOperation                       && currentState.ResponseType != PNOperationType.Presence                      && currentState.ResponseType != PNOperationType.PNHeartbeatOperation                      && currentState.ResponseType != PNOperationType.Leave"  is complex.
Complex Conditional,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The conditional expression  "dicResult != null && dicResult.Count > 0 && dicResult.ContainsKey("status") && dicResult["status"].ToString() == "200""  is complex.
Complex Conditional,PubnubApi.EndPoint,GetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\GetStateOperation.cs,GetUserState,The conditional expression  "(channels == null && channelGroups == null)                             || (channels != null && channelGroups != null && channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The conditional expression  "(channels == null && channelGroups == null)                              || (channels != null && channelGroups != null && channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SetStateOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Presence\SetStateOperation.cs,SetUserState,The conditional expression  "(channels == null && channelGroups == null)                              || (channels != null && channelGroups != null && channels.Length == 0 && channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The conditional expression  "channelGroups != null && channelGroups.Length > 0 && (channels == null || channels.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "MultiChannelSubscribe != null && MultiChannelSubscribe[PubnubInstance.InstanceId].Count <= 0 && MultiChannelGroupSubscribe != null && MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count <= 0"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "((ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannel) && ChannelInternetStatus[PubnubInstance.InstanceId].TryGetValue(multiChannel' out channelInternetFlag) && !channelInternetFlag)                  || (multiChannelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(multiChannelGroup) && ChannelGroupInternetStatus[PubnubInstance.InstanceId].TryGetValue(multiChannelGroup' out channelGroupInternetFlag) && !channelGroupInternetFlag))                  && PubnetSystemActive"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeRequest,The conditional expression  "(pubnubRequestState.ResponseType == PNOperationType.PNSubscribeOperation || pubnubRequestState.ResponseType == PNOperationType.Presence) && (result != null) && (result.Count > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The conditional expression  "(channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The conditional expression  "(channels != null && channels.Length > 0) || (chananelGroups != null && chananelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "netState != null && ((netState.Channels != null && netState.Channels.Length > 0) || (netState.ChannelGroups != null && netState.ChannelGroups.Length > 0))"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "channel == subscribedChannels && ChannelInternetStatus[PubnubInstance.InstanceId].ContainsKey(channel)                              && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The conditional expression  "subscribedChannelGroups == channelGroup && channelGroup != "" && ChannelGroupInternetStatus[PubnubInstance.InstanceId].ContainsKey(channelGroup)                              && (netState.ResponseType == PNOperationType.PNSubscribeOperation || netState.ResponseType == PNOperationType.Presence)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The conditional expression  "(channels != null && channels.Length > 0 && channels.Where(s => s != null && s.Contains("-pnpres") == false).Any())                  || (channelGroups != null && channelGroups.Length > 0 && channelGroups.Where(s => s != null && s.Contains("-pnpres") == false).Any())"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,OnPresenceHeartbeatIntervalTimeout,The conditional expression  "(subscriberChannels != null && subscriberChannels.Length > 0) || (subscriberChannelGroups != null && subscriberChannelGroups.Length > 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,SubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeOperation.cs,Subscribe,The conditional expression  "(channels == null || channels.Length == 0) && (channelGroups == null || channelGroups.Length  == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,UnsubscribeOperation<T>,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\UnsubscribeOperation.cs,Unsubscribe,The conditional expression  "(channels == null || channels.Length == 0) && (channelGroups == null || channelGroups.Length == 0)"  is complex.
Complex Conditional,PubnubApi.EndPoint,AddPushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\AddPushChannelOperation.cs,RegisterDevice,The conditional expression  "channels == null || channels.Length == 0 || channels[0] == null || channels[0].Trim().Length == 0"  is complex.
Complex Conditional,PubnubApi.EndPoint,RemovePushChannelOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Push\RemovePushChannelOperation.cs,RemoveChannelForDevice,The conditional expression  "channels == null || channels.Length == 0 || channels[0] == null || channels[0].Trim().Length == 0"  is complex.
Complex Conditional,PubnubApi.EndPoint,FetchHistoryOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\StoragePlayback\FetchHistoryOperation.cs,History,The conditional expression  "channels == null || channels.Length == 0 || string.IsNullOrEmpty(channels[0]) || string.IsNullOrEmpty(channels[0].Trim())"  is complex.
Empty Catch Block,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,OnPubnubWebRequestTimeout,The method has an empty catch block.
Empty Catch Block,PubnubApi,JsonDataParseInternalUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\JsonDataParseInternalUtil.cs,ConvertToDictionaryObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,JsonDataParseInternalUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\JsonDataParseInternalUtil.cs,ConvertToObjectArray,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsValidJson,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,BuildJsonObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,IsDictionaryCompatible,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,ConvertToDictionaryObject,The method has an empty catch block.
Empty Catch Block,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,ConvertToObjectArray,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminatePendingWebRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateReconnectTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,TerminateCurrentSubscriberRequest,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The method has an empty catch block.
Empty Catch Block,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,OnPubnubWebRequestTimeout,The method has an empty catch block.
Empty Catch Block,PubnubApi.CBOR.Tags,TagRegistry,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\TagRegistry.cs,RegisterTagTypes,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,ChangeUUID,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,StartSubscribeHeartbeatCheckCallback,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetworkCallback,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The method has an empty catch block.
Empty Catch Block,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StopTelemetryTimer,The method has an empty catch block.
Magic Number,PubnubApi,StatusBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\StatusBuilder.cs,CreateStatusResponse,The following statement contains a magic number: status.StatusCode == 403
Magic Number,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: o.Append(ToHex(ch / 16));
Magic Number,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,EncodeUriComponent,The following statement contains a magic number: o.Append(ToHex(ch % 16));
Magic Number,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubnubApi,UriUtil,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UriUtil.cs,ToHex,The following statement contains a magic number: return (char)(ch < 10 ? '0' + ch : 'A' + ch - 10);
Magic Number,PubnubApi,UrlRequestBuilder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Builder\UrlRequestBuilder.cs,TranslateUtcDateTimeToSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi,ClientNetworkStatus,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\ClientNetworkStatus.cs,GetTimeWithClassicHttp,The following statement contains a magic number: new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' pubnubConfig.NonSubscribeRequestTimeout * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PNGetSpaceJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetSpaceJsonDataParse.cs,GetObject,The following statement contains a magic number: Dictionary<string' object> getSpaceDicObj = (listObject.Count >= 2) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(listObject[1]) : null;
Magic Number,PubnubApi,PNGetUserJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNGetUserJsonDataParse.cs,GetObject,The following statement contains a magic number: Dictionary<string' object> getUserDicObj = (listObject.Count >= 2) ? JsonDataParseInternalUtil.ConvertToDictionaryObject(listObject[1]) : null;
Magic Number,PubnubApi,PNHistoryJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNHistoryJsonDataParse.cs,GetObject,The following statement contains a magic number: Int64.TryParse(listObject[2].ToString()' out historyEndTime)
Magic Number,PubnubApi,PNMessageActionEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNMessageActionEventJsonDataParse.cs,GetObject,The following statement contains a magic number: result.Uuid = listObject[3].ToString();
Magic Number,PubnubApi,PNMessageActionEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNMessageActionEventJsonDataParse.cs,GetObject,The following statement contains a magic number: result.Channel = listObject[4].ToString();
Magic Number,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The following statement contains a magic number: Int64.TryParse(listObject[2].ToString()' out objectApiEventTimeStamp)
Magic Number,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The following statement contains a magic number: listObject.Count > 2
Magic Number,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The following statement contains a magic number: result.Channel = (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString();
Magic Number,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The following statement contains a magic number: result.Channel = (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString();
Magic Number,PubnubApi,PNObjectApiEventJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNObjectApiEventJsonDataParse.cs,GetObject,The following statement contains a magic number: result.Channel = (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString();
Magic Number,PubnubApi,PNRemoveMessageActionJsonDataParse,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\JsonDataParse\PNRemoveMessageActionJsonDataParse.cs,GetObject,The following statement contains a magic number: status == 200
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCategoryHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCategoryHelper.cs,GetPNStatusCategory,The following statement contains a magic number: switch (statusCode)              {                  case 400:                      if (httpErrorCodeMessage.ToUpperInvariant().Contains("MESSAGE TOO LARGE"))                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNAL SIZE TOO LARGE")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID KEY" || httpErrorCodeMessage.ToUpperInvariant() == "INVALID SUBSCRIBE KEY")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "BADREQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "NO UUID SPECIFIED")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TIMESTAMP")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "INVALID TYPE ARGUMENT")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "CHANNEL GROUP OR GROUPS RESULT IN EMPTY SUBSCRIPTION SET")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "COULD NOT PARSE REQUEST")                      {                          ret = PNStatusCategory.PNBadRequestCategory;                      }                      break;                  case 401:                      ret = PNStatusCategory.PNAccessDeniedCategory;                      break;                  case 402:                      if (httpErrorCodeMessage.ToUpperInvariant() == "NOT ENABLED")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 403:                      if (httpErrorCodeMessage.ToUpperInvariant() == "FORBIDDEN")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      else if (httpErrorCodeMessage.ToUpperInvariant() == "SIGNATURE DOES NOT MATCH")                      {                          ret = PNStatusCategory.PNAccessDeniedCategory;                      }                      break;                  case 404:                  case 414:                  case 500:                      ret = PNStatusCategory.PNBadRequestCategory;                      break;                  case 502:                  case 503:                  case 504:                      ret = PNStatusCategory.PNNetworkIssuesCategory;                      break;                  default:                      ret = PNStatusCategory.PNUnknownCategory;                      break;              }
Magic Number,PubnubApi,PNStatusCodeHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCodeHelper.cs,GetHttpStatusCode,The following statement contains a magic number: switch (error.ToLowerInvariant())              {                  case "badrequest":                      ret = 400;                      break;                  case "notfound":                  case "not_found":                      ret = 404;                      break;                  case "conflict":                      ret = 409;                      break;                  case "internal":                      ret = 500;                      break;                  default:                      ret = 0;                      break;              }
Magic Number,PubnubApi,PNStatusCodeHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCodeHelper.cs,GetHttpStatusCode,The following statement contains a magic number: switch (error.ToLowerInvariant())              {                  case "badrequest":                      ret = 400;                      break;                  case "notfound":                  case "not_found":                      ret = 404;                      break;                  case "conflict":                      ret = 409;                      break;                  case "internal":                      ret = 500;                      break;                  default:                      ret = 0;                      break;              }
Magic Number,PubnubApi,PNStatusCodeHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCodeHelper.cs,GetHttpStatusCode,The following statement contains a magic number: switch (error.ToLowerInvariant())              {                  case "badrequest":                      ret = 400;                      break;                  case "notfound":                  case "not_found":                      ret = 404;                      break;                  case "conflict":                      ret = 409;                      break;                  case "internal":                      ret = 500;                      break;                  default:                      ret = 0;                      break;              }
Magic Number,PubnubApi,PNStatusCodeHelper,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Model\PNStatusCodeHelper.cs,GetHttpStatusCode,The following statement contains a magic number: switch (error.ToLowerInvariant())              {                  case "badrequest":                      ret = 400;                      break;                  case "notfound":                  case "not_found":                      ret = 404;                      break;                  case "conflict":                      ret = 409;                      break;                  case "internal":                      ret = 500;                      break;                  default:                      ret = 0;                      break;              }
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: Int64.TryParse(listObject[2].ToString()' out timetoken);
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: string publisherValue = (listObject[3] != null) ? listObject[3].ToString() : "";
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: string publisherValue = (listObject[3] != null) ? listObject[3].ToString() : "";
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: channelNameProp.SetValue(message' (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString()' null);
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: channelNameProp.SetValue(message' (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString()' null);
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: channelNameProp.SetValue(message' (listObject.Count == 6) ? listObject[5].ToString() : listObject[4].ToString()' null);
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: subsciptionProp.SetValue(message' listObject[4].ToString()' null);
Magic Number,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The following statement contains a magic number: listObject.Count == 6
Magic Number,PubnubApi,PNConfiguration,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.presenceHeartbeatTimeout = 300;
Magic Number,PubnubApi,PNConfiguration,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.NonSubscribeRequestTimeout = 10;
Magic Number,PubnubApi,PNConfiguration,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.SubscribeTimeout = 310;
Magic Number,PubnubApi,PNConfiguration,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PNConfiguration.cs,PNConfiguration,The following statement contains a magic number: this.MaximumMessagesCacheSize = 100;
Magic Number,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Pubnub,The following statement contains a magic number: config.PresenceTimeout = 20;
Magic Number,PubnubApi,Pubnub,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Pubnub.cs,Pubnub,The following statement contains a magic number: config != null && config.PresenceTimeout < 20
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,InternalConstructor,The following statement contains a magic number: pubnubConfiguation.PresenceInterval > 10
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)                  {                      case PNOperationType.PNSubscribeOperation:                      case PNOperationType.Presence:                          List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                          if (messageList != null && messageList.Count > 0)                          {                              if (messageList.Count >= currentConfig.RequestMessageCountThreshold)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  Announce(status);                              }                                if (currentConfig != null && currentLog != null)                              {                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity);                              }                              for (int messageIndex = 0; messageIndex < messageList.Count; messageIndex++)                              {                                  SubscribeMessage currentMessage = messageList[messageIndex];                                  if (currentMessage != null)                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity);                                      }                                      if (currentConfig.DedupOnSubscribe)                                      {                                          if (IsTargetForDedup(currentMessage))                                          {                                              if (currentConfig != null && currentLog != null)                                              {                                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                              }                                              continue;                                          }                                      }                                        string currentMessageChannel = currentMessage.Channel;                                      string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                        if (currentMessageChannel.Replace("-pnpres"' "") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                      {                                          currentMessageChannelGroup = "";                                      }                                        object payload = currentMessage.Payload;                                        List<object> payloadContainer = new List<object>(); //First item always message                                      if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2)                                      {                                          payloadContainer.Add(payload);                                      }                                      else                                      {                                          if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available                                          {                                              string decryptMessage = "";                                              PubnubCrypto aes = new PubnubCrypto(currentConfig.CipherKey' currentConfig' currentLog);                                              try                                              {                                                  decryptMessage = aes.Decrypt(payload.ToString());                                              }                                              catch (Exception ex)                                              {                                                  decryptMessage = "**DECRYPT ERROR**";                                                    PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                                  PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex));                                                  if (!string.IsNullOrEmpty(currentMessageChannel))                                                  {                                                      status.AffectedChannels.Add(currentMessageChannel);                                                      status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                                  }                                                  if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                                  {                                                      status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                      status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                                  }                                                    Announce(status);                                              }                                              object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                                payloadContainer.Add(decodeMessage);                                          }                                          else                                          {                                              string payloadJson = jsonLib.SerializeToJsonString(payload);                                              object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                              if (payloadJObject == null)                                              {                                                  payloadContainer.Add(payload);                                              }                                              else                                              {                                                  payloadContainer.Add(payloadJObject);                                              }                                          }                                      }                                        object userMetaData = currentMessage.UserMetadata;                                        payloadContainer.Add(userMetaData); //Second one always user meta data                                        payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                        payloadContainer.Add(currentMessage.IssuingClientId); //Fourth one always Publisher                                        if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                      {                                          payloadContainer.Add(currentMessageChannelGroup);                                      }                                        if (!string.IsNullOrEmpty(currentMessageChannel))                                      {                                          payloadContainer.Add(currentMessageChannel);                                      }                                        if (currentMessage.MessageType == 1)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> pnMessageResult = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (pnMessageResult != null)                                          {                                              PNSignalResult<T> signalMessage = new PNSignalResult<T>                                              {                                                  Channel = pnMessageResult.Channel'                                                  Message = pnMessageResult.Message'                                                  Subscription = pnMessageResult.Subscription'                                                  Timetoken = pnMessageResult.Timetoken'                                                  UserMetadata = pnMessageResult.UserMetadata'                                                  Publisher = pnMessageResult.Publisher                                              };                                              Announce(signalMessage);                                          }                                      }                                      else if (currentMessage.MessageType == 2)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNObjectApiEventResult objectApiEvent = responseBuilder.JsonToObject<PNObjectApiEventResult>(payloadContainer' true);                                          if (objectApiEvent != null)                                          {                                              Announce(objectApiEvent);                                          }                                      }                                      else if (currentMessage.MessageType == 3)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true);                                          if (msgActionEventEvent != null)                                          {                                              Announce(msgActionEventEvent);                                          }                                      }                                      else if (currentMessageChannel.Contains("-pnpres"))                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                          if (presenceEvent != null)                                          {                                              Announce(presenceEvent);                                          }                                      }                                      else                                      {                                          if (currentConfig != null && currentLog != null)                                          {                                              LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity);                                          }                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (userMessage != null)                                          {                                              Announce(userMessage);                                          }                                      }                                    }                                  else                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                      }                                  }                              }                            }                          break;                      case PNOperationType.PNTimeOperation:                      case PNOperationType.PNPublishOperation:                      case PNOperationType.PNFireOperation:                      case PNOperationType.PNSignalOperation:                      case PNOperationType.PNHistoryOperation:                      case PNOperationType.PNFetchHistoryOperation:                      case PNOperationType.PNDeleteMessageOperation:                      case PNOperationType.PNMessageCountsOperation:                      case PNOperationType.PNHereNowOperation:                      case PNOperationType.PNWhereNowOperation:                      case PNOperationType.PNAccessManagerGrantToken:                      case PNOperationType.PNAccessManagerGrant:                      case PNOperationType.PNAccessManagerAudit:                      case PNOperationType.RevokeAccess:                      case PNOperationType.ChannelGroupGrantAccess:                      case PNOperationType.ChannelGroupAuditAccess:                      case PNOperationType.ChannelGroupRevokeAccess:                      case PNOperationType.PNGetStateOperation:                      case PNOperationType.PNSetStateOperation:                      case PNOperationType.PushRegister:                      case PNOperationType.PushRemove:                      case PNOperationType.PushGet:                      case PNOperationType.PushUnregister:                      case PNOperationType.PNAddChannelsToGroupOperation:                      case PNOperationType.PNRemoveChannelsFromGroupOperation:                      case PNOperationType.PNRemoveGroupOperation:                      case PNOperationType.ChannelGroupGet:                      case PNOperationType.ChannelGroupAllGet:                      case PNOperationType.PNCreateUserOperation:                      case PNOperationType.PNUpdateUserOperation:                      case PNOperationType.PNDeleteUserOperation:                      case PNOperationType.PNGetUsersOperation:                      case PNOperationType.PNGetUserOperation:                      case PNOperationType.PNCreateSpaceOperation:                      case PNOperationType.PNUpdateSpaceOperation:                      case PNOperationType.PNDeleteSpaceOperation:                      case PNOperationType.PNGetSpacesOperation:                      case PNOperationType.PNGetSpaceOperation:                      case PNOperationType.PNManageMembershipsOperation:                      case PNOperationType.PNManageMembersOperation:                      case PNOperationType.PNGetMembershipsOperation:                      case PNOperationType.PNGetMembersOperation:                      case PNOperationType.PNAddMessageActionOperation:                      case PNOperationType.PNRemoveMessageActionOperation:                      case PNOperationType.PNGetMessageActionsOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              T userResult = responseBuilder.JsonToObject<T>(result' true);                                StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                if (userCallback != null)                              {                                  userCallback.OnResponse(userResult' status);                              }                          }                          break;                      case PNOperationType.PNHeartbeatOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                                if (userResult != null)                              {                                  if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = null;                                        PNException ex = null;                                      if (userResult != null && userResult.Status == 200)                                      {                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                      }                                      else                                      {                                          ex = new PNException(userResult.Message);                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                      }                                        Announce(status);                                  }                                  else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message));                                      Announce(status);                                  }                              }                            }                          break;                      default:                          break;                  }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)                  {                      case PNOperationType.PNSubscribeOperation:                      case PNOperationType.Presence:                          List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                          if (messageList != null && messageList.Count > 0)                          {                              if (messageList.Count >= currentConfig.RequestMessageCountThreshold)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  Announce(status);                              }                                if (currentConfig != null && currentLog != null)                              {                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity);                              }                              for (int messageIndex = 0; messageIndex < messageList.Count; messageIndex++)                              {                                  SubscribeMessage currentMessage = messageList[messageIndex];                                  if (currentMessage != null)                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity);                                      }                                      if (currentConfig.DedupOnSubscribe)                                      {                                          if (IsTargetForDedup(currentMessage))                                          {                                              if (currentConfig != null && currentLog != null)                                              {                                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                              }                                              continue;                                          }                                      }                                        string currentMessageChannel = currentMessage.Channel;                                      string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                        if (currentMessageChannel.Replace("-pnpres"' "") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                      {                                          currentMessageChannelGroup = "";                                      }                                        object payload = currentMessage.Payload;                                        List<object> payloadContainer = new List<object>(); //First item always message                                      if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2)                                      {                                          payloadContainer.Add(payload);                                      }                                      else                                      {                                          if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available                                          {                                              string decryptMessage = "";                                              PubnubCrypto aes = new PubnubCrypto(currentConfig.CipherKey' currentConfig' currentLog);                                              try                                              {                                                  decryptMessage = aes.Decrypt(payload.ToString());                                              }                                              catch (Exception ex)                                              {                                                  decryptMessage = "**DECRYPT ERROR**";                                                    PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                                  PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex));                                                  if (!string.IsNullOrEmpty(currentMessageChannel))                                                  {                                                      status.AffectedChannels.Add(currentMessageChannel);                                                      status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                                  }                                                  if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                                  {                                                      status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                      status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                                  }                                                    Announce(status);                                              }                                              object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                                payloadContainer.Add(decodeMessage);                                          }                                          else                                          {                                              string payloadJson = jsonLib.SerializeToJsonString(payload);                                              object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                              if (payloadJObject == null)                                              {                                                  payloadContainer.Add(payload);                                              }                                              else                                              {                                                  payloadContainer.Add(payloadJObject);                                              }                                          }                                      }                                        object userMetaData = currentMessage.UserMetadata;                                        payloadContainer.Add(userMetaData); //Second one always user meta data                                        payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                        payloadContainer.Add(currentMessage.IssuingClientId); //Fourth one always Publisher                                        if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                      {                                          payloadContainer.Add(currentMessageChannelGroup);                                      }                                        if (!string.IsNullOrEmpty(currentMessageChannel))                                      {                                          payloadContainer.Add(currentMessageChannel);                                      }                                        if (currentMessage.MessageType == 1)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> pnMessageResult = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (pnMessageResult != null)                                          {                                              PNSignalResult<T> signalMessage = new PNSignalResult<T>                                              {                                                  Channel = pnMessageResult.Channel'                                                  Message = pnMessageResult.Message'                                                  Subscription = pnMessageResult.Subscription'                                                  Timetoken = pnMessageResult.Timetoken'                                                  UserMetadata = pnMessageResult.UserMetadata'                                                  Publisher = pnMessageResult.Publisher                                              };                                              Announce(signalMessage);                                          }                                      }                                      else if (currentMessage.MessageType == 2)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNObjectApiEventResult objectApiEvent = responseBuilder.JsonToObject<PNObjectApiEventResult>(payloadContainer' true);                                          if (objectApiEvent != null)                                          {                                              Announce(objectApiEvent);                                          }                                      }                                      else if (currentMessage.MessageType == 3)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true);                                          if (msgActionEventEvent != null)                                          {                                              Announce(msgActionEventEvent);                                          }                                      }                                      else if (currentMessageChannel.Contains("-pnpres"))                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                          if (presenceEvent != null)                                          {                                              Announce(presenceEvent);                                          }                                      }                                      else                                      {                                          if (currentConfig != null && currentLog != null)                                          {                                              LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity);                                          }                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (userMessage != null)                                          {                                              Announce(userMessage);                                          }                                      }                                    }                                  else                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                      }                                  }                              }                            }                          break;                      case PNOperationType.PNTimeOperation:                      case PNOperationType.PNPublishOperation:                      case PNOperationType.PNFireOperation:                      case PNOperationType.PNSignalOperation:                      case PNOperationType.PNHistoryOperation:                      case PNOperationType.PNFetchHistoryOperation:                      case PNOperationType.PNDeleteMessageOperation:                      case PNOperationType.PNMessageCountsOperation:                      case PNOperationType.PNHereNowOperation:                      case PNOperationType.PNWhereNowOperation:                      case PNOperationType.PNAccessManagerGrantToken:                      case PNOperationType.PNAccessManagerGrant:                      case PNOperationType.PNAccessManagerAudit:                      case PNOperationType.RevokeAccess:                      case PNOperationType.ChannelGroupGrantAccess:                      case PNOperationType.ChannelGroupAuditAccess:                      case PNOperationType.ChannelGroupRevokeAccess:                      case PNOperationType.PNGetStateOperation:                      case PNOperationType.PNSetStateOperation:                      case PNOperationType.PushRegister:                      case PNOperationType.PushRemove:                      case PNOperationType.PushGet:                      case PNOperationType.PushUnregister:                      case PNOperationType.PNAddChannelsToGroupOperation:                      case PNOperationType.PNRemoveChannelsFromGroupOperation:                      case PNOperationType.PNRemoveGroupOperation:                      case PNOperationType.ChannelGroupGet:                      case PNOperationType.ChannelGroupAllGet:                      case PNOperationType.PNCreateUserOperation:                      case PNOperationType.PNUpdateUserOperation:                      case PNOperationType.PNDeleteUserOperation:                      case PNOperationType.PNGetUsersOperation:                      case PNOperationType.PNGetUserOperation:                      case PNOperationType.PNCreateSpaceOperation:                      case PNOperationType.PNUpdateSpaceOperation:                      case PNOperationType.PNDeleteSpaceOperation:                      case PNOperationType.PNGetSpacesOperation:                      case PNOperationType.PNGetSpaceOperation:                      case PNOperationType.PNManageMembershipsOperation:                      case PNOperationType.PNManageMembersOperation:                      case PNOperationType.PNGetMembershipsOperation:                      case PNOperationType.PNGetMembersOperation:                      case PNOperationType.PNAddMessageActionOperation:                      case PNOperationType.PNRemoveMessageActionOperation:                      case PNOperationType.PNGetMessageActionsOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              T userResult = responseBuilder.JsonToObject<T>(result' true);                                StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                if (userCallback != null)                              {                                  userCallback.OnResponse(userResult' status);                              }                          }                          break;                      case PNOperationType.PNHeartbeatOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                                if (userResult != null)                              {                                  if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = null;                                        PNException ex = null;                                      if (userResult != null && userResult.Status == 200)                                      {                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                      }                                      else                                      {                                          ex = new PNException(userResult.Message);                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                      }                                        Announce(status);                                  }                                  else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message));                                      Announce(status);                                  }                              }                            }                          break;                      default:                          break;                  }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)                  {                      case PNOperationType.PNSubscribeOperation:                      case PNOperationType.Presence:                          List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                          if (messageList != null && messageList.Count > 0)                          {                              if (messageList.Count >= currentConfig.RequestMessageCountThreshold)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  Announce(status);                              }                                if (currentConfig != null && currentLog != null)                              {                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity);                              }                              for (int messageIndex = 0; messageIndex < messageList.Count; messageIndex++)                              {                                  SubscribeMessage currentMessage = messageList[messageIndex];                                  if (currentMessage != null)                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity);                                      }                                      if (currentConfig.DedupOnSubscribe)                                      {                                          if (IsTargetForDedup(currentMessage))                                          {                                              if (currentConfig != null && currentLog != null)                                              {                                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                              }                                              continue;                                          }                                      }                                        string currentMessageChannel = currentMessage.Channel;                                      string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                        if (currentMessageChannel.Replace("-pnpres"' "") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                      {                                          currentMessageChannelGroup = "";                                      }                                        object payload = currentMessage.Payload;                                        List<object> payloadContainer = new List<object>(); //First item always message                                      if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2)                                      {                                          payloadContainer.Add(payload);                                      }                                      else                                      {                                          if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available                                          {                                              string decryptMessage = "";                                              PubnubCrypto aes = new PubnubCrypto(currentConfig.CipherKey' currentConfig' currentLog);                                              try                                              {                                                  decryptMessage = aes.Decrypt(payload.ToString());                                              }                                              catch (Exception ex)                                              {                                                  decryptMessage = "**DECRYPT ERROR**";                                                    PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                                  PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex));                                                  if (!string.IsNullOrEmpty(currentMessageChannel))                                                  {                                                      status.AffectedChannels.Add(currentMessageChannel);                                                      status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                                  }                                                  if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                                  {                                                      status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                      status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                                  }                                                    Announce(status);                                              }                                              object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                                payloadContainer.Add(decodeMessage);                                          }                                          else                                          {                                              string payloadJson = jsonLib.SerializeToJsonString(payload);                                              object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                              if (payloadJObject == null)                                              {                                                  payloadContainer.Add(payload);                                              }                                              else                                              {                                                  payloadContainer.Add(payloadJObject);                                              }                                          }                                      }                                        object userMetaData = currentMessage.UserMetadata;                                        payloadContainer.Add(userMetaData); //Second one always user meta data                                        payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                        payloadContainer.Add(currentMessage.IssuingClientId); //Fourth one always Publisher                                        if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                      {                                          payloadContainer.Add(currentMessageChannelGroup);                                      }                                        if (!string.IsNullOrEmpty(currentMessageChannel))                                      {                                          payloadContainer.Add(currentMessageChannel);                                      }                                        if (currentMessage.MessageType == 1)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> pnMessageResult = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (pnMessageResult != null)                                          {                                              PNSignalResult<T> signalMessage = new PNSignalResult<T>                                              {                                                  Channel = pnMessageResult.Channel'                                                  Message = pnMessageResult.Message'                                                  Subscription = pnMessageResult.Subscription'                                                  Timetoken = pnMessageResult.Timetoken'                                                  UserMetadata = pnMessageResult.UserMetadata'                                                  Publisher = pnMessageResult.Publisher                                              };                                              Announce(signalMessage);                                          }                                      }                                      else if (currentMessage.MessageType == 2)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNObjectApiEventResult objectApiEvent = responseBuilder.JsonToObject<PNObjectApiEventResult>(payloadContainer' true);                                          if (objectApiEvent != null)                                          {                                              Announce(objectApiEvent);                                          }                                      }                                      else if (currentMessage.MessageType == 3)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true);                                          if (msgActionEventEvent != null)                                          {                                              Announce(msgActionEventEvent);                                          }                                      }                                      else if (currentMessageChannel.Contains("-pnpres"))                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                          if (presenceEvent != null)                                          {                                              Announce(presenceEvent);                                          }                                      }                                      else                                      {                                          if (currentConfig != null && currentLog != null)                                          {                                              LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity);                                          }                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (userMessage != null)                                          {                                              Announce(userMessage);                                          }                                      }                                    }                                  else                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                      }                                  }                              }                            }                          break;                      case PNOperationType.PNTimeOperation:                      case PNOperationType.PNPublishOperation:                      case PNOperationType.PNFireOperation:                      case PNOperationType.PNSignalOperation:                      case PNOperationType.PNHistoryOperation:                      case PNOperationType.PNFetchHistoryOperation:                      case PNOperationType.PNDeleteMessageOperation:                      case PNOperationType.PNMessageCountsOperation:                      case PNOperationType.PNHereNowOperation:                      case PNOperationType.PNWhereNowOperation:                      case PNOperationType.PNAccessManagerGrantToken:                      case PNOperationType.PNAccessManagerGrant:                      case PNOperationType.PNAccessManagerAudit:                      case PNOperationType.RevokeAccess:                      case PNOperationType.ChannelGroupGrantAccess:                      case PNOperationType.ChannelGroupAuditAccess:                      case PNOperationType.ChannelGroupRevokeAccess:                      case PNOperationType.PNGetStateOperation:                      case PNOperationType.PNSetStateOperation:                      case PNOperationType.PushRegister:                      case PNOperationType.PushRemove:                      case PNOperationType.PushGet:                      case PNOperationType.PushUnregister:                      case PNOperationType.PNAddChannelsToGroupOperation:                      case PNOperationType.PNRemoveChannelsFromGroupOperation:                      case PNOperationType.PNRemoveGroupOperation:                      case PNOperationType.ChannelGroupGet:                      case PNOperationType.ChannelGroupAllGet:                      case PNOperationType.PNCreateUserOperation:                      case PNOperationType.PNUpdateUserOperation:                      case PNOperationType.PNDeleteUserOperation:                      case PNOperationType.PNGetUsersOperation:                      case PNOperationType.PNGetUserOperation:                      case PNOperationType.PNCreateSpaceOperation:                      case PNOperationType.PNUpdateSpaceOperation:                      case PNOperationType.PNDeleteSpaceOperation:                      case PNOperationType.PNGetSpacesOperation:                      case PNOperationType.PNGetSpaceOperation:                      case PNOperationType.PNManageMembershipsOperation:                      case PNOperationType.PNManageMembersOperation:                      case PNOperationType.PNGetMembershipsOperation:                      case PNOperationType.PNGetMembersOperation:                      case PNOperationType.PNAddMessageActionOperation:                      case PNOperationType.PNRemoveMessageActionOperation:                      case PNOperationType.PNGetMessageActionsOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              T userResult = responseBuilder.JsonToObject<T>(result' true);                                StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                if (userCallback != null)                              {                                  userCallback.OnResponse(userResult' status);                              }                          }                          break;                      case PNOperationType.PNHeartbeatOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                                if (userResult != null)                              {                                  if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = null;                                        PNException ex = null;                                      if (userResult != null && userResult.Status == 200)                                      {                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                      }                                      else                                      {                                          ex = new PNException(userResult.Message);                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                      }                                        Announce(status);                                  }                                  else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message));                                      Announce(status);                                  }                              }                            }                          break;                      default:                          break;                  }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)                  {                      case PNOperationType.PNSubscribeOperation:                      case PNOperationType.Presence:                          List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                          if (messageList != null && messageList.Count > 0)                          {                              if (messageList.Count >= currentConfig.RequestMessageCountThreshold)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  Announce(status);                              }                                if (currentConfig != null && currentLog != null)                              {                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity);                              }                              for (int messageIndex = 0; messageIndex < messageList.Count; messageIndex++)                              {                                  SubscribeMessage currentMessage = messageList[messageIndex];                                  if (currentMessage != null)                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity);                                      }                                      if (currentConfig.DedupOnSubscribe)                                      {                                          if (IsTargetForDedup(currentMessage))                                          {                                              if (currentConfig != null && currentLog != null)                                              {                                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                              }                                              continue;                                          }                                      }                                        string currentMessageChannel = currentMessage.Channel;                                      string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                        if (currentMessageChannel.Replace("-pnpres"' "") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                      {                                          currentMessageChannelGroup = "";                                      }                                        object payload = currentMessage.Payload;                                        List<object> payloadContainer = new List<object>(); //First item always message                                      if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2)                                      {                                          payloadContainer.Add(payload);                                      }                                      else                                      {                                          if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available                                          {                                              string decryptMessage = "";                                              PubnubCrypto aes = new PubnubCrypto(currentConfig.CipherKey' currentConfig' currentLog);                                              try                                              {                                                  decryptMessage = aes.Decrypt(payload.ToString());                                              }                                              catch (Exception ex)                                              {                                                  decryptMessage = "**DECRYPT ERROR**";                                                    PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                                  PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex));                                                  if (!string.IsNullOrEmpty(currentMessageChannel))                                                  {                                                      status.AffectedChannels.Add(currentMessageChannel);                                                      status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                                  }                                                  if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                                  {                                                      status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                      status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                                  }                                                    Announce(status);                                              }                                              object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                                payloadContainer.Add(decodeMessage);                                          }                                          else                                          {                                              string payloadJson = jsonLib.SerializeToJsonString(payload);                                              object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                              if (payloadJObject == null)                                              {                                                  payloadContainer.Add(payload);                                              }                                              else                                              {                                                  payloadContainer.Add(payloadJObject);                                              }                                          }                                      }                                        object userMetaData = currentMessage.UserMetadata;                                        payloadContainer.Add(userMetaData); //Second one always user meta data                                        payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                        payloadContainer.Add(currentMessage.IssuingClientId); //Fourth one always Publisher                                        if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                      {                                          payloadContainer.Add(currentMessageChannelGroup);                                      }                                        if (!string.IsNullOrEmpty(currentMessageChannel))                                      {                                          payloadContainer.Add(currentMessageChannel);                                      }                                        if (currentMessage.MessageType == 1)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> pnMessageResult = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (pnMessageResult != null)                                          {                                              PNSignalResult<T> signalMessage = new PNSignalResult<T>                                              {                                                  Channel = pnMessageResult.Channel'                                                  Message = pnMessageResult.Message'                                                  Subscription = pnMessageResult.Subscription'                                                  Timetoken = pnMessageResult.Timetoken'                                                  UserMetadata = pnMessageResult.UserMetadata'                                                  Publisher = pnMessageResult.Publisher                                              };                                              Announce(signalMessage);                                          }                                      }                                      else if (currentMessage.MessageType == 2)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNObjectApiEventResult objectApiEvent = responseBuilder.JsonToObject<PNObjectApiEventResult>(payloadContainer' true);                                          if (objectApiEvent != null)                                          {                                              Announce(objectApiEvent);                                          }                                      }                                      else if (currentMessage.MessageType == 3)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true);                                          if (msgActionEventEvent != null)                                          {                                              Announce(msgActionEventEvent);                                          }                                      }                                      else if (currentMessageChannel.Contains("-pnpres"))                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                          if (presenceEvent != null)                                          {                                              Announce(presenceEvent);                                          }                                      }                                      else                                      {                                          if (currentConfig != null && currentLog != null)                                          {                                              LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity);                                          }                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (userMessage != null)                                          {                                              Announce(userMessage);                                          }                                      }                                    }                                  else                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                      }                                  }                              }                            }                          break;                      case PNOperationType.PNTimeOperation:                      case PNOperationType.PNPublishOperation:                      case PNOperationType.PNFireOperation:                      case PNOperationType.PNSignalOperation:                      case PNOperationType.PNHistoryOperation:                      case PNOperationType.PNFetchHistoryOperation:                      case PNOperationType.PNDeleteMessageOperation:                      case PNOperationType.PNMessageCountsOperation:                      case PNOperationType.PNHereNowOperation:                      case PNOperationType.PNWhereNowOperation:                      case PNOperationType.PNAccessManagerGrantToken:                      case PNOperationType.PNAccessManagerGrant:                      case PNOperationType.PNAccessManagerAudit:                      case PNOperationType.RevokeAccess:                      case PNOperationType.ChannelGroupGrantAccess:                      case PNOperationType.ChannelGroupAuditAccess:                      case PNOperationType.ChannelGroupRevokeAccess:                      case PNOperationType.PNGetStateOperation:                      case PNOperationType.PNSetStateOperation:                      case PNOperationType.PushRegister:                      case PNOperationType.PushRemove:                      case PNOperationType.PushGet:                      case PNOperationType.PushUnregister:                      case PNOperationType.PNAddChannelsToGroupOperation:                      case PNOperationType.PNRemoveChannelsFromGroupOperation:                      case PNOperationType.PNRemoveGroupOperation:                      case PNOperationType.ChannelGroupGet:                      case PNOperationType.ChannelGroupAllGet:                      case PNOperationType.PNCreateUserOperation:                      case PNOperationType.PNUpdateUserOperation:                      case PNOperationType.PNDeleteUserOperation:                      case PNOperationType.PNGetUsersOperation:                      case PNOperationType.PNGetUserOperation:                      case PNOperationType.PNCreateSpaceOperation:                      case PNOperationType.PNUpdateSpaceOperation:                      case PNOperationType.PNDeleteSpaceOperation:                      case PNOperationType.PNGetSpacesOperation:                      case PNOperationType.PNGetSpaceOperation:                      case PNOperationType.PNManageMembershipsOperation:                      case PNOperationType.PNManageMembersOperation:                      case PNOperationType.PNGetMembershipsOperation:                      case PNOperationType.PNGetMembersOperation:                      case PNOperationType.PNAddMessageActionOperation:                      case PNOperationType.PNRemoveMessageActionOperation:                      case PNOperationType.PNGetMessageActionsOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              T userResult = responseBuilder.JsonToObject<T>(result' true);                                StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                if (userCallback != null)                              {                                  userCallback.OnResponse(userResult' status);                              }                          }                          break;                      case PNOperationType.PNHeartbeatOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                                if (userResult != null)                              {                                  if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = null;                                        PNException ex = null;                                      if (userResult != null && userResult.Status == 200)                                      {                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                      }                                      else                                      {                                          ex = new PNException(userResult.Message);                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                      }                                        Announce(status);                                  }                                  else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message));                                      Announce(status);                                  }                              }                            }                          break;                      default:                          break;                  }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,ResponseToUserCallback,The following statement contains a magic number: switch (type)                  {                      case PNOperationType.PNSubscribeOperation:                      case PNOperationType.Presence:                          List<SubscribeMessage> messageList = GetMessageFromMultiplexResult(result);                          if (messageList != null && messageList.Count > 0)                          {                              if (messageList.Count >= currentConfig.RequestMessageCountThreshold)                              {                                  StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                  PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNRequestMessageCountExceededCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                  Announce(status);                              }                                if (currentConfig != null && currentLog != null)                              {                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList.Count = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageList.Count)' currentConfig.LogVerbosity);                              }                              for (int messageIndex = 0; messageIndex < messageList.Count; messageIndex++)                              {                                  SubscribeMessage currentMessage = messageList[messageIndex];                                  if (currentMessage != null)                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageIndex={1}; currentMessage = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex' jsonLib.SerializeToJsonString(currentMessage))' currentConfig.LogVerbosity);                                      }                                      if (currentConfig.DedupOnSubscribe)                                      {                                          if (IsTargetForDedup(currentMessage))                                          {                                              if (currentConfig != null && currentLog != null)                                              {                                                  LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => IsTargetForDedup"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                              }                                              continue;                                          }                                      }                                        string currentMessageChannel = currentMessage.Channel;                                      string currentMessageChannelGroup = currentMessage.SubscriptionMatch;                                        if (currentMessageChannel.Replace("-pnpres"' "") == currentMessageChannelGroup.Replace("-pnpres"' ""))                                      {                                          currentMessageChannelGroup = "";                                      }                                        object payload = currentMessage.Payload;                                        List<object> payloadContainer = new List<object>(); //First item always message                                      if (currentMessageChannel.Contains("-pnpres") || currentMessageChannel.Contains(".*-pnpres") || currentMessage.MessageType == 2)                                      {                                          payloadContainer.Add(payload);                                      }                                      else                                      {                                          if (currentConfig.CipherKey.Length > 0 && currentMessage.MessageType != 1) //decrypt the subscriber message if cipherkey is available                                          {                                              string decryptMessage = "";                                              PubnubCrypto aes = new PubnubCrypto(currentConfig.CipherKey' currentConfig' currentLog);                                              try                                              {                                                  decryptMessage = aes.Decrypt(payload.ToString());                                              }                                              catch (Exception ex)                                              {                                                  decryptMessage = "**DECRYPT ERROR**";                                                    PNStatusCategory category = PNStatusCategoryHelper.GetPNStatusCategory(ex);                                                  PNStatus status = new StatusBuilder(currentConfig' jsonLib).CreateStatusResponse<T>(type' category' null' (int)HttpStatusCode.NotFound' new PNException(ex));                                                  if (!string.IsNullOrEmpty(currentMessageChannel))                                                  {                                                      status.AffectedChannels.Add(currentMessageChannel);                                                      status.AffectedChannels = status.AffectedChannels.Distinct().ToList();                                                  }                                                  if (!string.IsNullOrEmpty(currentMessageChannelGroup))                                                  {                                                      status.AffectedChannelGroups.Add(currentMessageChannelGroup);                                                      status.AffectedChannelGroups = status.AffectedChannelGroups.Distinct().ToList();                                                  }                                                    Announce(status);                                              }                                              object decodeMessage = (decryptMessage == "**DECRYPT ERROR**") ? decryptMessage : jsonLib.DeserializeToObject(decryptMessage);                                                payloadContainer.Add(decodeMessage);                                          }                                          else                                          {                                              string payloadJson = jsonLib.SerializeToJsonString(payload);                                              object payloadJObject = jsonLib.BuildJsonObject(payloadJson);                                              if (payloadJObject == null)                                              {                                                  payloadContainer.Add(payload);                                              }                                              else                                              {                                                  payloadContainer.Add(payloadJObject);                                              }                                          }                                      }                                        object userMetaData = currentMessage.UserMetadata;                                        payloadContainer.Add(userMetaData); //Second one always user meta data                                        payloadContainer.Add(currentMessage.PublishTimetokenMetadata.Timetoken); //Third one always Timetoken                                        payloadContainer.Add(currentMessage.IssuingClientId); //Fourth one always Publisher                                        if (!string.IsNullOrEmpty(currentMessageChannelGroup)) //Add cg first before channel                                      {                                          payloadContainer.Add(currentMessageChannelGroup);                                      }                                        if (!string.IsNullOrEmpty(currentMessageChannel))                                      {                                          payloadContainer.Add(currentMessageChannel);                                      }                                        if (currentMessage.MessageType == 1)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> pnMessageResult = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (pnMessageResult != null)                                          {                                              PNSignalResult<T> signalMessage = new PNSignalResult<T>                                              {                                                  Channel = pnMessageResult.Channel'                                                  Message = pnMessageResult.Message'                                                  Subscription = pnMessageResult.Subscription'                                                  Timetoken = pnMessageResult.Timetoken'                                                  UserMetadata = pnMessageResult.UserMetadata'                                                  Publisher = pnMessageResult.Publisher                                              };                                              Announce(signalMessage);                                          }                                      }                                      else if (currentMessage.MessageType == 2)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNObjectApiEventResult objectApiEvent = responseBuilder.JsonToObject<PNObjectApiEventResult>(payloadContainer' true);                                          if (objectApiEvent != null)                                          {                                              Announce(objectApiEvent);                                          }                                      }                                      else if (currentMessage.MessageType == 3)                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageActionEventResult msgActionEventEvent = responseBuilder.JsonToObject<PNMessageActionEventResult>(payloadContainer' true);                                          if (msgActionEventEvent != null)                                          {                                              Announce(msgActionEventEvent);                                          }                                      }                                      else if (currentMessageChannel.Contains("-pnpres"))                                      {                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNPresenceEventResult presenceEvent = responseBuilder.JsonToObject<PNPresenceEventResult>(payloadContainer' true);                                          if (presenceEvent != null)                                          {                                              Announce(presenceEvent);                                          }                                      }                                      else                                      {                                          if (currentConfig != null && currentLog != null)                                          {                                              LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - payload = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' jsonLib.SerializeToJsonString(payloadContainer))' currentConfig.LogVerbosity);                                          }                                          ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                                          PNMessageResult<T> userMessage = responseBuilder.JsonToObject<PNMessageResult<T>>(payloadContainer' true);                                          if (userMessage != null)                                          {                                              Announce(userMessage);                                          }                                      }                                    }                                  else                                  {                                      if (currentConfig != null && currentLog != null)                                      {                                          LoggingMethod.WriteToLog(currentLog' string.Format("DateTime: {0}' ResponseToUserCallback - messageList for loop - messageIndex = {1} => null message"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' messageIndex)' currentConfig.LogVerbosity);                                      }                                  }                              }                            }                          break;                      case PNOperationType.PNTimeOperation:                      case PNOperationType.PNPublishOperation:                      case PNOperationType.PNFireOperation:                      case PNOperationType.PNSignalOperation:                      case PNOperationType.PNHistoryOperation:                      case PNOperationType.PNFetchHistoryOperation:                      case PNOperationType.PNDeleteMessageOperation:                      case PNOperationType.PNMessageCountsOperation:                      case PNOperationType.PNHereNowOperation:                      case PNOperationType.PNWhereNowOperation:                      case PNOperationType.PNAccessManagerGrantToken:                      case PNOperationType.PNAccessManagerGrant:                      case PNOperationType.PNAccessManagerAudit:                      case PNOperationType.RevokeAccess:                      case PNOperationType.ChannelGroupGrantAccess:                      case PNOperationType.ChannelGroupAuditAccess:                      case PNOperationType.ChannelGroupRevokeAccess:                      case PNOperationType.PNGetStateOperation:                      case PNOperationType.PNSetStateOperation:                      case PNOperationType.PushRegister:                      case PNOperationType.PushRemove:                      case PNOperationType.PushGet:                      case PNOperationType.PushUnregister:                      case PNOperationType.PNAddChannelsToGroupOperation:                      case PNOperationType.PNRemoveChannelsFromGroupOperation:                      case PNOperationType.PNRemoveGroupOperation:                      case PNOperationType.ChannelGroupGet:                      case PNOperationType.ChannelGroupAllGet:                      case PNOperationType.PNCreateUserOperation:                      case PNOperationType.PNUpdateUserOperation:                      case PNOperationType.PNDeleteUserOperation:                      case PNOperationType.PNGetUsersOperation:                      case PNOperationType.PNGetUserOperation:                      case PNOperationType.PNCreateSpaceOperation:                      case PNOperationType.PNUpdateSpaceOperation:                      case PNOperationType.PNDeleteSpaceOperation:                      case PNOperationType.PNGetSpacesOperation:                      case PNOperationType.PNGetSpaceOperation:                      case PNOperationType.PNManageMembershipsOperation:                      case PNOperationType.PNManageMembersOperation:                      case PNOperationType.PNGetMembershipsOperation:                      case PNOperationType.PNGetMembersOperation:                      case PNOperationType.PNAddMessageActionOperation:                      case PNOperationType.PNRemoveMessageActionOperation:                      case PNOperationType.PNGetMessageActionsOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              T userResult = responseBuilder.JsonToObject<T>(result' true);                                StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                              PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                if (userCallback != null)                              {                                  userCallback.OnResponse(userResult' status);                              }                          }                          break;                      case PNOperationType.PNHeartbeatOperation:                          if (result != null && result.Count > 0)                          {                              ResponseBuilder responseBuilder = new ResponseBuilder(currentConfig' jsonLib' currentLog);                              PNHeartbeatResult userResult = responseBuilder.JsonToObject<PNHeartbeatResult>(result' true);                                if (userResult != null)                              {                                  if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.All)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = null;                                        PNException ex = null;                                      if (userResult != null && userResult.Status == 200)                                      {                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' (int)HttpStatusCode.OK' null);                                      }                                      else                                      {                                          ex = new PNException(userResult.Message);                                          status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' null);                                      }                                        Announce(status);                                  }                                  else if (currentConfig.HeartbeatNotificationOption == PNHeartbeatNotificationOption.Failures && userResult.Status != 200)                                  {                                      StatusBuilder statusBuilder = new StatusBuilder(currentConfig' jsonLib);                                      PNStatus status = statusBuilder.CreateStatusResponse(type' PNStatusCategory.PNAcknowledgmentCategory' asyncRequestState' userResult.Status' new PNException(userResult.Message));                                      Announce(status);                                  }                              }                            }                          break;                      default:                          break;                  }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,WrapResultBasedOnResponseType,The following statement contains a magic number: switch (type)                          {                              case PNOperationType.PNSubscribeOperation:                              case PNOperationType.Presence:                                  if (result.Count == 3 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "")                                  {                                      result.RemoveAt(2);                                  }                                  if (result.Count == 4 && result[0] is object[] && (result[0] as object[]).Length == 0 && result[2].ToString() == "" && result[3].ToString() == "")                                  {                                      result.RemoveRange(2' 2);                                  }                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                    long receivedTimetoken = GetTimetokenFromMultiplexResult(result);                                    long minimumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Min(token => token.Value) : 0;                                  long minimumTimetoken = Math.Max(minimumTimetoken1' minimumTimetoken2);                                    long maximumTimetoken1 = (MultiChannelSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken2 = (MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Count > 0) ? MultiChannelGroupSubscribe[PubnubInstance.InstanceId].Max(token => token.Value) : 0;                                  long maximumTimetoken = Math.Max(maximumTimetoken1' maximumTimetoken2);                                    if (minimumTimetoken == 0 || lastTimetoken == 0)                                  {                                      if (maximumTimetoken == 0)                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                      else                                      {                                          if (!enableResumeOnReconnect)                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                          else                                          {                                              //do nothing. keep last subscribe token                                          }                                      }                                  }                                  else                                  {                                      if (reconnect)                                      {                                          if (enableResumeOnReconnect)                                          {                                              //do nothing. keep last subscribe token                                          }                                          else                                          {                                              LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                          }                                      }                                      else                                      {                                          LastSubscribeTimetoken[PubnubInstance.InstanceId] = receivedTimetoken;                                      }                                  }                                  break;                              case PNOperationType.PNHeartbeatOperation:                                  Dictionary<string' object> heartbeatadictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(heartbeatadictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNTimeOperation:                                  break;                              case PNOperationType.PNHistoryOperation:                              case PNOperationType.PNFetchHistoryOperation:                                  if (pubnubConfig.TryGetValue(PubnubInstance.InstanceId' out currentConfig) && pubnubLog.TryGetValue(PubnubInstance.InstanceId' out currentLog))                                  {                                      if (type == PNOperationType.PNFetchHistoryOperation)                                      {                                          for (int index=0; index < result.Count; index++)                                          {                                              Dictionary<string' object> messageContainer = jsonLib.ConvertToDictionaryObject(result[index]);                                              if (messageContainer != null && messageContainer.Count > 0)                                              {                                                  if (messageContainer.ContainsKey("channels"))                                                  {                                                      object channelMessageContainer = messageContainer["channels"];                                                      Dictionary<string' object> channelDic = jsonLib.ConvertToDictionaryObject(channelMessageContainer);                                                      if (channelDic != null && channelDic.Count > 0)                                                      {                                                          result[index] = SecureMessage.Instance(currentConfig' jsonLib' currentLog).FetchHistoryDecodeDecryptLoop(type' channelDic' channels' channelGroups' callback);                                                      }                                                  }                                                  else                                                  {                                                      result[index] = messageContainer;                                                  }                                              }                                          }                                      }                                      else                                      {                                          result = SecureMessage.Instance(currentConfig' jsonLib' currentLog).HistoryDecodeDecryptLoop(type' result' channels' channelGroups' callback);                                      }                                  }                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNMessageCountsOperation:                                  Dictionary<string' object> msgCountDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(msgCountDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNHereNowOperation:                                  Dictionary<string' object> dictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(dictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNWhereNowOperation:                                  Dictionary<string' object> whereNowDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(whereNowDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAccessManagerGrantToken:                              case PNOperationType.PNAccessManagerGrant:                              case PNOperationType.PNAccessManagerAudit:                              case PNOperationType.RevokeAccess:                                  Dictionary<string' object> grantDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(grantDictionary);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.ChannelGroupGrantAccess:                              case PNOperationType.ChannelGroupAuditAccess:                              case PNOperationType.ChannelGroupRevokeAccess:                                  Dictionary<string' object> channelGroupPAMDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupPAMDictionary);                                  result.Add(multiChannelGroup);                                  break;                              case PNOperationType.PNGetStateOperation:                              case PNOperationType.PNSetStateOperation:                                  Dictionary<string' object> userStateDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(userStateDictionary);                                  result.Add(multiChannelGroup);                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNPublishOperation:                              case PNOperationType.PNFireOperation:                              case PNOperationType.PNSignalOperation:                              case PNOperationType.PushRegister:                              case PNOperationType.PushRemove:                              case PNOperationType.PushGet:                              case PNOperationType.PushUnregister:                              case PNOperationType.Leave:                              case PNOperationType.PNCreateUserOperation:                              case PNOperationType.PNUpdateUserOperation:                              case PNOperationType.PNCreateSpaceOperation:                              case PNOperationType.PNUpdateSpaceOperation:                              case PNOperationType.PNAddMessageActionOperation:                              case PNOperationType.PNRemoveMessageActionOperation:                              case PNOperationType.PNGetMessageActionsOperation:                                  result.Add(multiChannel);                                  break;                              case PNOperationType.PNAddChannelsToGroupOperation:                              case PNOperationType.PNRemoveChannelsFromGroupOperation:                              case PNOperationType.PNRemoveGroupOperation:                              case PNOperationType.ChannelGroupGet:                              case PNOperationType.ChannelGroupAllGet:                                  Dictionary<string' object> channelGroupDictionary = jsonLib.DeserializeToDictionaryOfObject(jsonString);                                  result = new List<object>();                                  result.Add(channelGroupDictionary);                                  if (multiChannelGroup != "")                                  {                                      result.Add(multiChannelGroup);                                  }                                  if (multiChannel != "")                                  {                                      result.Add(multiChannel);                                  }                                  break;                              default:                                  break;                          }
Magic Number,PubnubApi,PubnubCoreBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubCoreBase.cs,UpdatePubnubNetworkTcpCheckIntervalInSeconds,The following statement contains a magic number: timerInterval = (int)(Math.Pow(2' ConnectionErrors) - 1);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SetTimeout,The following statement contains a magic number: request.Timeout = GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000;
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactory,The following statement contains a magic number: new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPOST,The following statement contains a magic number: Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseTaskFactoryWithPATCH,The following statement contains a magic number: Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttp,The following statement contains a magic number: Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPOST,The following statement contains a magic number: Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,PubnubHttp,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\PubnubHttp.cs,SendRequestAndGetJsonResponseClassicHttpWithPATCH,The following statement contains a magic number: Timer webRequestTimer = new Timer(OnPubnubWebRequestTimeout<T>' pubnubRequestState' GetTimeoutInSecondsForResponseType(pubnubRequestState.ResponseType) * 1000' Timeout.Infinite);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ROTATE_LEFT,The following statement contains a magic number: return (x << n) | (x >> (32 - n));
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: index = (int)((this.count[0] >> 3) & 0x3F);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: (this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3)
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: (this.count[0] += (uint)((uint)count << 3)) < ((uint)count << 3)
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: this.count[1] += (uint)count >> 29;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: partLen = 64 - index;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashCore,The following statement contains a magic number: i + 63 < count
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: byte[] digest = new byte[16];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte[8];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: Encode(bits' 0' this.count' 0' 8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: index = (int)((uint)(this.count[0] >> 3) & 0x3f);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: padLen = (index < 56) ? (56 - index) : (120 - index);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: HashCore(bits' 0' 8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: Encode(digest' 0' state' 0' 16);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: state[2] = 0;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,HashFinal,The following statement contains a magic number: state[3] = 0;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint a = state[0]' b = state[1]' c = state[2]' d = state[3];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: uint[] x = new uint[16];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: Decode(x' 0' block' offset' 64);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[2]' S13' 0x242070db);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[3]' S14' 0xc1bdceee);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[4]' S11' 0xf57c0faf);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[5]' S12' 0x4787c62a);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[6]' S13' 0xa8304613);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[7]' S14' 0xfd469501);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[8]' S11' 0x698098d8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[9]' S12' 0x8b44f7af);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[10]' S13' 0xffff5bb1);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[11]' S14' 0x895cd7be);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[12]' S11' 0x6b901122);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[13]' S12' 0xfd987193);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[14]' S13' 0xa679438e);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[15]' S14' 0x49b40821);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[6]' S22' 0xc040b340);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[11]' S23' 0x265e5a51);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[5]' S21' 0xd62f105d);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[10]' S22' 0x2441453);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[15]' S23' 0xd8a1e681);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[4]' S24' 0xe7d3fbc8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[9]' S21' 0x21e1cde6);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[14]' S22' 0xc33707d6);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[3]' S23' 0xf4d50d87);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[8]' S24' 0x455a14ed);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[13]' S21' 0xa9e3e905);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[2]' S22' 0xfcefa3f8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[7]' S23' 0x676f02d9);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[12]' S24' 0x8d2a4c8a);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[5]' S31' 0xfffa3942);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[8]' S32' 0x8771f681);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[11]' S33' 0x6d9d6122);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[14]' S34' 0xfde5380c);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[4]' S32' 0x4bdecfa9);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[7]' S33' 0xf6bb4b60);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[10]' S34' 0xbebfbc70);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[13]' S31' 0x289b7ec6);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[3]' S33' 0xd4ef3085);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[6]' S34' 0x4881d05);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[9]' S31' 0xd9d4d039);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[12]' S32' 0xe6db99e5);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[15]' S33' 0x1fa27cf8);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[2]' S34' 0xc4ac5665);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[7]' S42' 0x432aff97);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[14]' S43' 0xab9423a7);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[5]' S44' 0xfc93a039);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[12]' S41' 0x655b59c3);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[3]' S42' 0x8f0ccc92);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[10]' S43' 0xffeff47d);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[8]' S41' 0x6fa87e4f);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[15]' S42' 0xfe2ce6e0);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[6]' S43' 0xa3014314);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[13]' S44' 0x4e0811a1);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref a' b' c' d' x[4]' S41' 0xf7537e82);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref d' a' b' c' x[11]' S42' 0xbd3af235);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref c' d' a' b' x[2]' S43' 0x2ad7d2bb);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: II(ref b' c' d' a' x[9]' S44' 0xeb86d391);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: state[2] += c;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Transform,The following statement contains a magic number: state[3] += d;
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: output[j + 1] = (byte)((input[i] >> 8) & 0xff);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: output[j + 2] = (byte)((input[i] >> 16) & 0xff);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: output[j + 2] = (byte)((input[i] >> 16) & 0xff);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: output[j + 3] = (byte)((input[i] >> 24) & 0xff);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Encode,The following statement contains a magic number: output[j + 3] = (byte)((input[i] >> 24) & 0xff);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,Decode,The following statement contains a magic number: output[i] = ((uint)input[j]) | (((uint)input[j + 1]) << 8) | (((uint)input[j + 2]) << 16) | (((uint)input[j + 3]) <<  				                                                                                             24);
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ComputeHash,The following statement contains a magic number: byte[] buffer = new byte[4096];
Magic Number,PubnubApi,MD5,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\MD5.cs,ComputeHash,The following statement contains a magic number: 0 < (count = inputStream.Read(buffer' 0' 4096))
Magic Number,PubnubApi,PubnubCrypto,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCrypto.cs,EncryptOrDecrypt,The following statement contains a magic number: aesAlg.KeySize = 256;
Magic Number,PubnubApi,PubnubCrypto,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCrypto.cs,EncryptOrDecrypt,The following statement contains a magic number: aesAlg.BlockSize = 128;
Magic Number,PubnubApi,PubnubCryptoBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCryptoBase.cs,GetEncryptionKey,The following statement contains a magic number: string strKeySHA256Hash = strKeySHA256HashRaw.Replace("-"' "").Substring(0' 32);
Magic Number,PubnubApi,PubnubCryptoBase,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\Security\PubnubCryptoBase.cs,EncodeNonAsciiCharacters,The following statement contains a magic number: c > 127
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: length = (uint)inData.Length >> 2;
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data[j] = (uint)(                      (inData[i - 3] << (3 * 8)) |                      (inData[i - 2] << (2 * 8)) |                      (inData[i - 1] << (1 * 8)) |                      (inData[i])                      );
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: i >= 3
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint[2] { (uint)ul' (uint)(ul >> 32) };
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: data = new uint[2] { (uint)ul' (uint)(ul >> 32) };
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following statement contains a magic number: length = 2;
Magic Number,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,ToString,The following statement contains a magic number: return ToString(10);
Magic Number,System.Numerics,Kernel,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,SingleByteDivideInPlace,The following statement contains a magic number: r <<= 32;
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadItem,The following statement contains a magic number: switch (header.majorType)              {                  case MajorType.UNSIGNED_INT:                      if (header.value == 0)                      {                          dataItem = header.additionalInfo;                      }                      else                      {                            dataItem = (ulong)header.value;                      }                      break;                  case MajorType.NEGATIVE_INT:                      if (header.value == 0)                      {                          dataItem = ((long)(header.additionalInfo + 1) * -1);                      }                      else                      {                            dataItem = ((long)(header.value + 1) * -1);                      }                      break;                  case MajorType.BYTE_STRING:                      ulong byteLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] bytes = new byte[byteLength];                      for (ulong x = 0; x < byteLength; x++)                      {                          bytes[x] = (byte)buffer.ReadByte();                      }                        dataItem = bytes;                      break;                  case MajorType.TEXT_STRING:                      ulong stringLength = header.value == 0 ? header.additionalInfo : header.value;                        byte[] data = new byte[stringLength];                      for (ulong x = 0; x < stringLength; x++)                      {                          data[x] = (byte)buffer.ReadByte();                      }                        dataItem = Encoding.UTF8.GetString(data' 0' data.Length);                      break;                  case MajorType.ARRAY:                      List<object> array = new List<object>();                      if (header.indefinite == false)                      {                          ulong elementCount = header.additionalInfo;                          if (header.value != 0) { elementCount = header.value; }                            for (ulong x = 0; x < elementCount; x++)                          {                              array.Add(ReadItem());                          }                      }                      else                      {                          while (PeekBreak() == false)                          {                              array.Add(ReadItem());                          }                          buffer.ReadByte();                      }                        dataItem = array.ToArray();                      break;                  case MajorType.MAP:                      Dictionary<string' object> dict = new Dictionary<string' object>();                        ulong pairCount = header.value == 0 ? header.additionalInfo : header.value;                      for (ulong x = 0; x < pairCount; x++)                      {                          string itemKey = "";                          object itemKeyObj = ReadItem();                          if (itemKeyObj.GetType() == typeof(byte[]))                          {                              byte[] itemDataByte = (byte[])itemKeyObj;                              itemKey = Encoding.UTF8.GetString(itemDataByte' 0' itemDataByte.Length);                          }                          else                          {                              itemKey = itemKeyObj.ToString();                          }                          object itemVal = ReadItem();                          if (dict.ContainsKey(itemKey))                          {                              dict[itemKey] = itemVal;                          }                          else                          {                              dict.Add(itemKey' itemVal);                          }                      }                        dataItem = dict;                      break;                  case MajorType.FLOATING_POINT_OR_SIMPLE:                      if (header.additionalInfo < 24)                      {                          switch (header.additionalInfo)                          {                              case 20:                                  return false;                              case 21:                                  return true;                              case 22:                                  return null;                              case 23:                                  return new UndefinedValue();                              default:                                  return new UndefinedValue();                          }                      }                        if (header.additionalInfo == 24)                      {                          // no simple value in range 32-255 has been defined                          throw new NotSupportedException("header.additionalInfo value 24 not supported");                      }                        if (header.additionalInfo == 25)                      {                          throw new NotImplementedException("header.additionalInfo=25; Half implementation not done. Contact support.");                      }                      else if (header.additionalInfo == 26)                      {                          // single (32 bit) precision float value                          dataItem = BitConverter.ToSingle(BitConverter.GetBytes(header.value)' 0);                      }                      else if (header.additionalInfo == 27)                      {                          // double (64 bit) precision float value                          dataItem = BitConverter.ToDouble(BitConverter.GetBytes(header.value)' 0);                      }                      else                      {                          throw new NotSupportedException("header.additionalInfo value not supported");                      }                      // unknown simple value type                      break;                  default:                      dataItem = null;                      break;              }
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadTags,The following statement contains a magic number: tagNum = readUnsigned(1 << (b - 24));
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadTags,The following statement contains a magic number: extraInfo >= 24 && extraInfo <= 27
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadTags,The following statement contains a magic number: extraInfo >= 24 && extraInfo <= 27
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadTags,The following statement contains a magic number: b >> 5 == 6
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadTags,The following statement contains a magic number: b >> 5 == 6
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadHeader,The following statement contains a magic number: header.majorType = (MajorType)(b >> 5);
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadHeader,The following statement contains a magic number: b = (byte)(1 << (b - 24));
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadHeader,The following statement contains a magic number: b >= 24 && b <= 27
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,ReadHeader,The following statement contains a magic number: b >= 24 && b <= 27
Magic Number,PubnubApi.CBOR,CBORDecoder,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\CBORDecoder.cs,readUnsigned,The following statement contains a magic number: byte[] buff = new byte[8];
Magic Number,PubnubApi.CBOR,ItemHeader,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\ItemHeader.cs,GetIndefiniteHeader,The following statement contains a magic number: return new [] { (byte)(((byte)type) << 5 | 31) };
Magic Number,PubnubApi.CBOR,ItemHeader,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\ItemHeader.cs,GetIndefiniteHeader,The following statement contains a magic number: return new [] { (byte)(((byte)type) << 5 | 31) };
Magic Number,PubnubApi.CBOR,ItemHeader,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\ItemHeader.cs,ToByteArray,The following statement contains a magic number: ms.WriteByte((byte)(((byte)majorType) << 5 | (byte)value));
Magic Number,PubnubApi.CBOR,ItemHeader,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\ItemHeader.cs,ToByteArray,The following statement contains a magic number: value < 24
Magic Number,PubnubApi.CBOR.Tags,Base64Tag,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\Base64Tag.cs,processData,The following statement contains a magic number: s = s.PadRight(s.Length + (4 - s.Length % 4) % 4' '=');
Magic Number,PubnubApi.CBOR.Tags,Base64Tag,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\Base64Tag.cs,processData,The following statement contains a magic number: s = s.PadRight(s.Length + (4 - s.Length % 4) % 4' '=');
Magic Number,PubnubApi.CBOR.Tags,Base64Tag,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\Base64Tag.cs,processData,The following statement contains a magic number: s = s.PadRight(s.Length + (4 - s.Length % 4) % 4' '=');
Magic Number,PubnubApi.CBOR.Tags,Base64Tag,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\Base64Tag.cs,processData,The following statement contains a magic number: this.tagNumber == 33
Magic Number,PubnubApi.CBOR.Tags,BigIntegerTag,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\Tags\BigIntegerTag.cs,processData,The following statement contains a magic number: this.tagNumber == 2
Magic Number,PubnubApi.EndPoint,GrantTokenOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\Access\GrantTokenOperation.cs,GrantAccess,The following statement contains a magic number: tcs.Task.Wait(config.NonSubscribeRequestTimeout * 1000);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: TimeSpan timeSpan = dotNetUTCDateTime - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslateDateTimeToPubnubUnixNanoSeconds,The following statement contains a magic number: long timeStamp = Convert.ToInt64(timeSpan.TotalSeconds) * 10000000;
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: double timeStamp = (double)unixNanoSecondTime / 10000000;
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: double timeStamp = (double)numericTime / 10000000;
Magic Number,PubnubApi.EndPoint,OtherOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\OtherOperation.cs,TranslatePubnubUnixNanoSecondsToDateTime,The following statement contains a magic number: DateTime dateTime = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(timeStamp);
Magic Number,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Sync,The following statement contains a magic number: Task<PNPublishResult> task = Task<PNPublishResult>.Factory.StartNew(() =>              {                  syncRequest = true;                  syncEvent = new System.Threading.ManualResetEvent(false);                  Fire(this.channelName' this.msg' false' this.ttl' this.userMetadata' this.queryParam' new PNPublishResultExt((r's)=> { SyncResult = r; syncEvent.Set(); }));                  syncEvent.WaitOne(config.NonSubscribeRequestTimeout * 1000);                    return SyncResult;              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default);
Magic Number,PubnubApi.EndPoint,FireOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\FireOperation.cs,Fire,The following statement contains a magic number: result != null && result.Count >= 3
Magic Number,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Sync,The following statement contains a magic number: Task<PNPublishResult> task = Task<PNPublishResult>.Factory.StartNew(() =>              {                  syncRequest = true;                  syncEvent = new System.Threading.ManualResetEvent(false);                  Publish(this.channelName' this.msg' this.storeInHistory' this.ttl' this.userMetadata' this.queryParam' new PNPublishResultExt((r' s) => { SyncResult = r; syncEvent.Set(); }));                  syncEvent.WaitOne(config.NonSubscribeRequestTimeout * 1000);                    return SyncResult;              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default);
Magic Number,PubnubApi.EndPoint,PublishOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\PublishOperation.cs,Publish,The following statement contains a magic number: result != null && result.Count >= 3
Magic Number,PubnubApi.EndPoint,SignalOperation,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SignalOperation.cs,Signal,The following statement contains a magic number: result != null && result.Count >= 3
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The following statement contains a magic number: SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 500' config.SubscribeTimeout * 500);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiChannelSubscribeInit,The following statement contains a magic number: SubscribeHeartbeatCheckTimer = new Timer(StartSubscribeHeartbeatCheckCallback<T>' null' config.SubscribeTimeout * 500' config.SubscribeTimeout * 500);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: channelGroups = message[message.Count - 2] as string[];
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: message[message.Count - 2] is string[]
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: message.Count >= 4
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,MultiplexInternalCallback,The following statement contains a magic number: message != null && message.Count >= 3
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,ReconnectNetwork,The following statement contains a magic number: timer = new Timer(new TimerCallback(ReconnectNetworkCallback<T>)' netState' 0'                                                                (-1 == PubnubNetworkTcpCheckIntervalInSeconds) ? Timeout.Infinite : PubnubNetworkTcpCheckIntervalInSeconds * 1000);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,Reconnect,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The following statement contains a magic number: PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000);
Magic Number,PubnubApi.EndPoint,SubscribeManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\PubSub\SubscribeManager.cs,RegisterPresenceHeartbeatTimer,The following statement contains a magic number: PresenceHeartbeatTimer = new Timer(OnPresenceHeartbeatIntervalTimeout<T>' presenceHeartbeatState' config.PresenceInterval * 1000' config.PresenceInterval * 1000);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StartTelemetryTimer,The following statement contains a magic number: telemetryTimer = new Timer(OnTelemetryIntervalTimeout' null' 0' TELEMETRY_TIMER_IN_SEC * 1000);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The following statement contains a magic number: await Task.Factory.StartNew(() =>               {                  try                  {                      string latencyEndPoint = EndpointNameForOperation(type);                      if (latencyMillisec > 0 && !string.IsNullOrEmpty(latencyEndPoint))                      {                          if (dicEndpointLatency == null)                          {                              dicEndpointLatency = new ConcurrentDictionary<string' ConcurrentDictionary<double' long>>();                          }                            double epochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                          if (dicEndpointLatency.ContainsKey(latencyEndPoint) && dicEndpointLatency[latencyEndPoint] != null && dicEndpointLatency[latencyEndPoint].Keys.Count > 0)                          {                              if (epochMillisec - dicEndpointLatency[latencyEndPoint].Keys.Max() > 500)                              {                                  lock (operationLatencyDataLock)                                  {                                      dicEndpointLatency[latencyEndPoint].AddOrUpdate(epochMillisec' latencyMillisec' (key' oldValue) => latencyMillisec);                                  }                              }                          }                          else                          {                              lock (operationLatencyDataLock)                              {                                  ConcurrentDictionary<double' long> elapsedInfo = new ConcurrentDictionary<double' long>();                                  elapsedInfo.AddOrUpdate(epochMillisec' latencyMillisec' (o' n) => latencyMillisec);                                  dicEndpointLatency.AddOrUpdate(latencyEndPoint' elapsedInfo' (o' n) => elapsedInfo);                              }                          }                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency {1} latency = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' type' latencyMillisec)' pubnubConfig.LogVerbosity);                      }                  }                  catch (Exception ex)                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                  }              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default).ConfigureAwait(false);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,StoreLatency,The following statement contains a magic number: await Task.Factory.StartNew(() =>               {                  try                  {                      string latencyEndPoint = EndpointNameForOperation(type);                      if (latencyMillisec > 0 && !string.IsNullOrEmpty(latencyEndPoint))                      {                          if (dicEndpointLatency == null)                          {                              dicEndpointLatency = new ConcurrentDictionary<string' ConcurrentDictionary<double' long>>();                          }                            double epochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                          if (dicEndpointLatency.ContainsKey(latencyEndPoint) && dicEndpointLatency[latencyEndPoint] != null && dicEndpointLatency[latencyEndPoint].Keys.Count > 0)                          {                              if (epochMillisec - dicEndpointLatency[latencyEndPoint].Keys.Max() > 500)                              {                                  lock (operationLatencyDataLock)                                  {                                      dicEndpointLatency[latencyEndPoint].AddOrUpdate(epochMillisec' latencyMillisec' (key' oldValue) => latencyMillisec);                                  }                              }                          }                          else                          {                              lock (operationLatencyDataLock)                              {                                  ConcurrentDictionary<double' long> elapsedInfo = new ConcurrentDictionary<double' long>();                                  elapsedInfo.AddOrUpdate(epochMillisec' latencyMillisec' (o' n) => latencyMillisec);                                  dicEndpointLatency.AddOrUpdate(latencyEndPoint' elapsedInfo' (o' n) => elapsedInfo);                              }                          }                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency {1} latency = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' type' latencyMillisec)' pubnubConfig.LogVerbosity);                      }                  }                  catch (Exception ex)                  {                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - StoreLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                  }              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default).ConfigureAwait(false);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The following statement contains a magic number: return await Task<Dictionary<string'string>>.Factory.StartNew(() =>                   {                      Dictionary<string' string> dictionaryOpsLatency = new Dictionary<string' string>();                      try                      {                          lock (operationLatencyDataLock)                          {                              if (dicEndpointLatency != null)                              {                                  foreach (string key in dicEndpointLatency.Keys)                                  {                                      if (dicEndpointLatency[key] != null && dicEndpointLatency[key].Count > 0)                                      {                                            dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec                                      }                                  }                              }                          }                      }                      catch (Exception ex)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                      }                      return dictionaryOpsLatency;                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default).ConfigureAwait(false);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,GetOperationsLatency,The following statement contains a magic number: return await Task<Dictionary<string'string>>.Factory.StartNew(() =>                   {                      Dictionary<string' string> dictionaryOpsLatency = new Dictionary<string' string>();                      try                      {                          lock (operationLatencyDataLock)                          {                              if (dicEndpointLatency != null)                              {                                  foreach (string key in dicEndpointLatency.Keys)                                  {                                      if (dicEndpointLatency[key] != null && dicEndpointLatency[key].Count > 0)                                      {                                            dictionaryOpsLatency.Add(key' Math.Round(((double)dicEndpointLatency[key].Average(kvp => kvp.Value) / 1000.0)' 10).ToString(CultureInfo.InvariantCulture)); //Convert millisec to sec                                      }                                  }                              }                          }                      }                      catch (Exception ex)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - GetOperationsLatency error: {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                      }                      return dictionaryOpsLatency;                  }' CancellationToken.None' TaskCreationOptions.None' TaskScheduler.Default).ConfigureAwait(false);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The following statement contains a magic number: Task.Factory.StartNew(() =>               {                  lock (operationLatencyDataLock)                  {                      try                      {                          double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                          string[] latencyOpKeys = (dicEndpointLatency != null) ? dicEndpointLatency.Keys.ToArray<string>() : new string[]{ };                          for (int keyIndex = 0; keyIndex < latencyOpKeys.Length; keyIndex++)                          {                              string opKey = latencyOpKeys[keyIndex];                              ConcurrentDictionary<double' long> outdatedLatencyValue = null;                              dicEndpointLatency.TryGetValue(opKey' out outdatedLatencyValue);                              if (outdatedLatencyValue != null)                              {                                  IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000);                                  if (enumerableOutdatedLatencies != null)                                  {                                      Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value);                                      if (dicOutdatedLatencies != null && dicOutdatedLatencies.Count > 0)                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity);                                          double[] outLatencyKeys = dicOutdatedLatencies.Keys.ToArray<double>();                                          for (int outdateIndex = 0; outdateIndex < outLatencyKeys.Length; outdateIndex++)                                          {                                              double outKey = outLatencyKeys[outdateIndex];                                              ConcurrentDictionary<double' long> currentEndPointLatency = null;                                              dicEndpointLatency.TryGetValue(opKey' out currentEndPointLatency);                                              if (currentEndPointLatency != null && currentEndPointLatency.ContainsKey(outKey))                                              {                                                  long removeOutdatedLatency;                                                  if (!currentEndPointLatency.TryRemove(outKey' out removeOutdatedLatency))                                                  {                                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity);                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                      catch (Exception ex)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                      }                  }              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default).ConfigureAwait(false);
Magic Number,PubnubApi.EndPoint,TelemetryManager,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\EndPoint\TelemetryManager.cs,CleanupTelemetryData,The following statement contains a magic number: Task.Factory.StartNew(() =>               {                  lock (operationLatencyDataLock)                  {                      try                      {                          double currentEpochMillisec = (DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds;                          string[] latencyOpKeys = (dicEndpointLatency != null) ? dicEndpointLatency.Keys.ToArray<string>() : new string[]{ };                          for (int keyIndex = 0; keyIndex < latencyOpKeys.Length; keyIndex++)                          {                              string opKey = latencyOpKeys[keyIndex];                              ConcurrentDictionary<double' long> outdatedLatencyValue = null;                              dicEndpointLatency.TryGetValue(opKey' out outdatedLatencyValue);                              if (outdatedLatencyValue != null)                              {                                  IEnumerable<KeyValuePair<double' long>> enumerableOutdatedLatencies = outdatedLatencyValue.Where(dt => currentEpochMillisec - dt.Key >= 60000);                                  if (enumerableOutdatedLatencies != null)                                  {                                      Dictionary<double' long> dicOutdatedLatencies = enumerableOutdatedLatencies.ToDictionary(item => item.Key' item => item.Value);                                      if (dicOutdatedLatencies != null && dicOutdatedLatencies.Count > 0)                                      {                                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => {1} dicOutdatedLatencies count = {2}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' opKey' dicOutdatedLatencies.Count)' pubnubConfig.LogVerbosity);                                          double[] outLatencyKeys = dicOutdatedLatencies.Keys.ToArray<double>();                                          for (int outdateIndex = 0; outdateIndex < outLatencyKeys.Length; outdateIndex++)                                          {                                              double outKey = outLatencyKeys[outdateIndex];                                              ConcurrentDictionary<double' long> currentEndPointLatency = null;                                              dicEndpointLatency.TryGetValue(opKey' out currentEndPointLatency);                                              if (currentEndPointLatency != null && currentEndPointLatency.ContainsKey(outKey))                                              {                                                  long removeOutdatedLatency;                                                  if (!currentEndPointLatency.TryRemove(outKey' out removeOutdatedLatency))                                                  {                                                      LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => removed failed for key = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' outKey)' pubnubConfig.LogVerbosity);                                                  }                                              }                                          }                                      }                                  }                              }                          }                      }                      catch (Exception ex)                      {                          LoggingMethod.WriteToLog(pubnubLog' string.Format("DateTime {0}' TelemetryManager - CleanupTelemetryData => Exception = {1}"' DateTime.Now.ToString(CultureInfo.InvariantCulture)' ex)' pubnubConfig.LogVerbosity);                      }                  }              }' CancellationToken.None' TaskCreationOptions.PreferFairness' TaskScheduler.Default).ConfigureAwait(false);
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeMessageToObjectBasedOnPlatform,The method contains a code clone-set at the following line numbers (starting from the method definition): ((16' 46)' (89' 119))
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 127)' (177' 200)' (212' 235))
Duplicate Code,PubnubApi,NewtonsoftJsonDotNet,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\NewtonsoftJsonDotNet.cs,DeserializeToObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((177' 203)' (212' 238))
Missing Default,System.Numerics,BigInteger,C:\research\architectureSmells\repos\pubnub_c-sharp\src\Api\PubnubApi\CBOR\BigInteger.cs,BigInteger,The following switch statement is missing a default case: switch (leftOver)              {                  case 1: data[length - 1] = (uint)inData[0]; break;                  case 2: data[length - 1] = (uint)((inData[0] << 8) | inData[1]); break;                  case 3: data[length - 1] = (uint)((inData[0] << 16) | (inData[1] << 8) | inData[2]); break;              }
