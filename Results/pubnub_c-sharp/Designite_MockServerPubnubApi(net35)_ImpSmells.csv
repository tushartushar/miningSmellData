Implementation smell,Namespace,Class,File,Method,Description
Long Method,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The method has 174 lines of code.
Long Statement,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The length of the statement  "                    LoggingMethod.WriteToLog(String.Format("Client accepted: {0}"' ((IPEndPoint)clientSocket.LocalEndPoint).ToString())' LoggingMethod.LevelInfo); " is 142.
Empty Catch Block,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,Stop,The method has an empty catch block.
Empty Catch Block,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,Stop,The method has an empty catch block.
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The following statement contains a magic number: Thread trfS = new Thread(new ParameterizedThreadStart((object obj) =>                      {                          string strData;                            var sock = new Socket((SocketInformation)obj);                          SslStream sslStream = null;                          Stream stream = new NetworkStream(sock);                            try                          {                              if (secure)                              {                                  sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null);                                  sslStream.AuthenticateAsServer(certificate' true' System.Security.Authentication.SslProtocols.Default' false);                                  strData = ReadMessage(sslStream);                                  stream = sslStream;                              }                              else                              {                                  strData = ReadMessage(stream);                              }                                LoggingMethod.WriteToLog(String.Format("Request: {0}"' strData)' LoggingMethod.LevelVerbose);                          }                          catch (Exception error)                          {                              LoggingMethod.WriteToLog(String.Format("Error: {0}"' error)' LoggingMethod.LevelError);                              throw;                          }                            string[] lines = strData.Split(new [] { "\r"' "\n" }' StringSplitOptions.RemoveEmptyEntries);                          string path = lines[0].Substring(0' lines[0].LastIndexOf(" "' StringComparison.InvariantCultureIgnoreCase));                          responses.Add(path);                          System.Diagnostics.Debug.WriteLine(DateTime.Now.ToString("        ###  MM/dd/yyyy HH:mm:ss:fff") + " - " + path);                            try                          {                              Request item = null;                              try                              {                                  item = requests[path];                              }                              catch                              {                                  try                                  {                                      item = requests[path.Substring(0' path.IndexOf("?"))];                                  }                                  catch                                  {                                      item = new MockServer.Request();                                      item.Method = "GET";                                        if (path.Contains("GET /v2/presence/") && !path.Contains("/leave?"))                                      {                                          item.Response = "{\"t\":{\"t\":\"14844074079055214\"'\"r\":7}'\"m\":[]}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /v2/subscribe/"))                                      {                                          item.Response = "{}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /time/0"))                                      {                                          item.Response = "[14827611897607991]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("/leave?"))                                      {                                          item.Response = "{\"status\": 200' \"action\": \"leave\"' \"message\": \"OK\"' \"service\": \"Presence\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /publish/"))                                      {                                          item.Response = "[1'\"Sent\"'\"14715322883933786\"]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if(path.Contains("DELETE /v3/history/sub-key"))                                      {                                          item.Response = "{\"status\": 200' \"error\": false' \"error_message\": \"\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else                                      {                                          item.Response = "";                                          item.StatusCode = HttpStatusCode.OK;    //// HttpStatusCode.NotFound;                                      }                                  }                              }                                LoggingMethod.WriteToLog(String.Format("Response: {0}"' item.Response)' LoggingMethod.LevelVerbose);                                switch (item.StatusCode)                              {                                  case HttpStatusCode.OK:                                      {                                          string statusOK = "HTTP/1.1 200 OK\r\n";                                          statusOK += "Content-type: text/html\r\n";                                          statusOK += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusOK += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusOK)' 0' statusOK.Length);                                          Thread.Sleep(10);                                            break;                                      }                                    case HttpStatusCode.BadRequest:                                  default:                                      {                                          string statusBadRequest = "HTTP/1.1 400 Bad Request\r\n";                                          statusBadRequest += "Content-type: text/html\r\n";                                          statusBadRequest += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusBadRequest += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusBadRequest)' 0' statusBadRequest.Length);                                          Thread.Sleep(10);                                          break;                                      }                                    case HttpStatusCode.Unauthorized:                                      break;                                  case HttpStatusCode.Forbidden:                                      break;                                  case HttpStatusCode.NotFound:                                      {                                          string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound += "Content-type: text/html\r\n";                                          statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusNotFound += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                                          Thread.Sleep(10);                                          break;                                      }                              }                          }                          catch (Exception eHttp)                          {                              System.Diagnostics.Debug.WriteLine(eHttp.ToString());                              LoggingMethod.WriteToLog(String.Format("Path not found: {0}"' strData)' LoggingMethod.LevelError);                              string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound += "Content-type: text/html\r\n";                              statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' notFoundContent.Length.ToString());                              statusNotFound += notFoundContent;                              stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                              Thread.Sleep(10);                          }                            if (sslStream != null)                          {                              sslStream.Flush();                              sslStream.Close();                          }                            stream.Flush();                          stream.Close();                          clientSocket.Close();                      }));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The following statement contains a magic number: Thread trfS = new Thread(new ParameterizedThreadStart((object obj) =>                      {                          string strData;                            var sock = new Socket((SocketInformation)obj);                          SslStream sslStream = null;                          Stream stream = new NetworkStream(sock);                            try                          {                              if (secure)                              {                                  sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null);                                  sslStream.AuthenticateAsServer(certificate' true' System.Security.Authentication.SslProtocols.Default' false);                                  strData = ReadMessage(sslStream);                                  stream = sslStream;                              }                              else                              {                                  strData = ReadMessage(stream);                              }                                LoggingMethod.WriteToLog(String.Format("Request: {0}"' strData)' LoggingMethod.LevelVerbose);                          }                          catch (Exception error)                          {                              LoggingMethod.WriteToLog(String.Format("Error: {0}"' error)' LoggingMethod.LevelError);                              throw;                          }                            string[] lines = strData.Split(new [] { "\r"' "\n" }' StringSplitOptions.RemoveEmptyEntries);                          string path = lines[0].Substring(0' lines[0].LastIndexOf(" "' StringComparison.InvariantCultureIgnoreCase));                          responses.Add(path);                          System.Diagnostics.Debug.WriteLine(DateTime.Now.ToString("        ###  MM/dd/yyyy HH:mm:ss:fff") + " - " + path);                            try                          {                              Request item = null;                              try                              {                                  item = requests[path];                              }                              catch                              {                                  try                                  {                                      item = requests[path.Substring(0' path.IndexOf("?"))];                                  }                                  catch                                  {                                      item = new MockServer.Request();                                      item.Method = "GET";                                        if (path.Contains("GET /v2/presence/") && !path.Contains("/leave?"))                                      {                                          item.Response = "{\"t\":{\"t\":\"14844074079055214\"'\"r\":7}'\"m\":[]}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /v2/subscribe/"))                                      {                                          item.Response = "{}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /time/0"))                                      {                                          item.Response = "[14827611897607991]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("/leave?"))                                      {                                          item.Response = "{\"status\": 200' \"action\": \"leave\"' \"message\": \"OK\"' \"service\": \"Presence\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /publish/"))                                      {                                          item.Response = "[1'\"Sent\"'\"14715322883933786\"]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if(path.Contains("DELETE /v3/history/sub-key"))                                      {                                          item.Response = "{\"status\": 200' \"error\": false' \"error_message\": \"\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else                                      {                                          item.Response = "";                                          item.StatusCode = HttpStatusCode.OK;    //// HttpStatusCode.NotFound;                                      }                                  }                              }                                LoggingMethod.WriteToLog(String.Format("Response: {0}"' item.Response)' LoggingMethod.LevelVerbose);                                switch (item.StatusCode)                              {                                  case HttpStatusCode.OK:                                      {                                          string statusOK = "HTTP/1.1 200 OK\r\n";                                          statusOK += "Content-type: text/html\r\n";                                          statusOK += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusOK += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusOK)' 0' statusOK.Length);                                          Thread.Sleep(10);                                            break;                                      }                                    case HttpStatusCode.BadRequest:                                  default:                                      {                                          string statusBadRequest = "HTTP/1.1 400 Bad Request\r\n";                                          statusBadRequest += "Content-type: text/html\r\n";                                          statusBadRequest += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusBadRequest += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusBadRequest)' 0' statusBadRequest.Length);                                          Thread.Sleep(10);                                          break;                                      }                                    case HttpStatusCode.Unauthorized:                                      break;                                  case HttpStatusCode.Forbidden:                                      break;                                  case HttpStatusCode.NotFound:                                      {                                          string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound += "Content-type: text/html\r\n";                                          statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusNotFound += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                                          Thread.Sleep(10);                                          break;                                      }                              }                          }                          catch (Exception eHttp)                          {                              System.Diagnostics.Debug.WriteLine(eHttp.ToString());                              LoggingMethod.WriteToLog(String.Format("Path not found: {0}"' strData)' LoggingMethod.LevelError);                              string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound += "Content-type: text/html\r\n";                              statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' notFoundContent.Length.ToString());                              statusNotFound += notFoundContent;                              stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                              Thread.Sleep(10);                          }                            if (sslStream != null)                          {                              sslStream.Flush();                              sslStream.Close();                          }                            stream.Flush();                          stream.Close();                          clientSocket.Close();                      }));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The following statement contains a magic number: Thread trfS = new Thread(new ParameterizedThreadStart((object obj) =>                      {                          string strData;                            var sock = new Socket((SocketInformation)obj);                          SslStream sslStream = null;                          Stream stream = new NetworkStream(sock);                            try                          {                              if (secure)                              {                                  sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null);                                  sslStream.AuthenticateAsServer(certificate' true' System.Security.Authentication.SslProtocols.Default' false);                                  strData = ReadMessage(sslStream);                                  stream = sslStream;                              }                              else                              {                                  strData = ReadMessage(stream);                              }                                LoggingMethod.WriteToLog(String.Format("Request: {0}"' strData)' LoggingMethod.LevelVerbose);                          }                          catch (Exception error)                          {                              LoggingMethod.WriteToLog(String.Format("Error: {0}"' error)' LoggingMethod.LevelError);                              throw;                          }                            string[] lines = strData.Split(new [] { "\r"' "\n" }' StringSplitOptions.RemoveEmptyEntries);                          string path = lines[0].Substring(0' lines[0].LastIndexOf(" "' StringComparison.InvariantCultureIgnoreCase));                          responses.Add(path);                          System.Diagnostics.Debug.WriteLine(DateTime.Now.ToString("        ###  MM/dd/yyyy HH:mm:ss:fff") + " - " + path);                            try                          {                              Request item = null;                              try                              {                                  item = requests[path];                              }                              catch                              {                                  try                                  {                                      item = requests[path.Substring(0' path.IndexOf("?"))];                                  }                                  catch                                  {                                      item = new MockServer.Request();                                      item.Method = "GET";                                        if (path.Contains("GET /v2/presence/") && !path.Contains("/leave?"))                                      {                                          item.Response = "{\"t\":{\"t\":\"14844074079055214\"'\"r\":7}'\"m\":[]}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /v2/subscribe/"))                                      {                                          item.Response = "{}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /time/0"))                                      {                                          item.Response = "[14827611897607991]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("/leave?"))                                      {                                          item.Response = "{\"status\": 200' \"action\": \"leave\"' \"message\": \"OK\"' \"service\": \"Presence\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /publish/"))                                      {                                          item.Response = "[1'\"Sent\"'\"14715322883933786\"]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if(path.Contains("DELETE /v3/history/sub-key"))                                      {                                          item.Response = "{\"status\": 200' \"error\": false' \"error_message\": \"\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else                                      {                                          item.Response = "";                                          item.StatusCode = HttpStatusCode.OK;    //// HttpStatusCode.NotFound;                                      }                                  }                              }                                LoggingMethod.WriteToLog(String.Format("Response: {0}"' item.Response)' LoggingMethod.LevelVerbose);                                switch (item.StatusCode)                              {                                  case HttpStatusCode.OK:                                      {                                          string statusOK = "HTTP/1.1 200 OK\r\n";                                          statusOK += "Content-type: text/html\r\n";                                          statusOK += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusOK += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusOK)' 0' statusOK.Length);                                          Thread.Sleep(10);                                            break;                                      }                                    case HttpStatusCode.BadRequest:                                  default:                                      {                                          string statusBadRequest = "HTTP/1.1 400 Bad Request\r\n";                                          statusBadRequest += "Content-type: text/html\r\n";                                          statusBadRequest += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusBadRequest += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusBadRequest)' 0' statusBadRequest.Length);                                          Thread.Sleep(10);                                          break;                                      }                                    case HttpStatusCode.Unauthorized:                                      break;                                  case HttpStatusCode.Forbidden:                                      break;                                  case HttpStatusCode.NotFound:                                      {                                          string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound += "Content-type: text/html\r\n";                                          statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusNotFound += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                                          Thread.Sleep(10);                                          break;                                      }                              }                          }                          catch (Exception eHttp)                          {                              System.Diagnostics.Debug.WriteLine(eHttp.ToString());                              LoggingMethod.WriteToLog(String.Format("Path not found: {0}"' strData)' LoggingMethod.LevelError);                              string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound += "Content-type: text/html\r\n";                              statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' notFoundContent.Length.ToString());                              statusNotFound += notFoundContent;                              stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                              Thread.Sleep(10);                          }                            if (sslStream != null)                          {                              sslStream.Flush();                              sslStream.Close();                          }                            stream.Flush();                          stream.Close();                          clientSocket.Close();                      }));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ServerFunction,The following statement contains a magic number: Thread trfS = new Thread(new ParameterizedThreadStart((object obj) =>                      {                          string strData;                            var sock = new Socket((SocketInformation)obj);                          SslStream sslStream = null;                          Stream stream = new NetworkStream(sock);                            try                          {                              if (secure)                              {                                  sslStream = new SslStream(stream' false' new RemoteCertificateValidationCallback(ValidateServerCertificate)' null);                                  sslStream.AuthenticateAsServer(certificate' true' System.Security.Authentication.SslProtocols.Default' false);                                  strData = ReadMessage(sslStream);                                  stream = sslStream;                              }                              else                              {                                  strData = ReadMessage(stream);                              }                                LoggingMethod.WriteToLog(String.Format("Request: {0}"' strData)' LoggingMethod.LevelVerbose);                          }                          catch (Exception error)                          {                              LoggingMethod.WriteToLog(String.Format("Error: {0}"' error)' LoggingMethod.LevelError);                              throw;                          }                            string[] lines = strData.Split(new [] { "\r"' "\n" }' StringSplitOptions.RemoveEmptyEntries);                          string path = lines[0].Substring(0' lines[0].LastIndexOf(" "' StringComparison.InvariantCultureIgnoreCase));                          responses.Add(path);                          System.Diagnostics.Debug.WriteLine(DateTime.Now.ToString("        ###  MM/dd/yyyy HH:mm:ss:fff") + " - " + path);                            try                          {                              Request item = null;                              try                              {                                  item = requests[path];                              }                              catch                              {                                  try                                  {                                      item = requests[path.Substring(0' path.IndexOf("?"))];                                  }                                  catch                                  {                                      item = new MockServer.Request();                                      item.Method = "GET";                                        if (path.Contains("GET /v2/presence/") && !path.Contains("/leave?"))                                      {                                          item.Response = "{\"t\":{\"t\":\"14844074079055214\"'\"r\":7}'\"m\":[]}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /v2/subscribe/"))                                      {                                          item.Response = "{}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /time/0"))                                      {                                          item.Response = "[14827611897607991]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("/leave?"))                                      {                                          item.Response = "{\"status\": 200' \"action\": \"leave\"' \"message\": \"OK\"' \"service\": \"Presence\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if (path.Contains("GET /publish/"))                                      {                                          item.Response = "[1'\"Sent\"'\"14715322883933786\"]";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else if(path.Contains("DELETE /v3/history/sub-key"))                                      {                                          item.Response = "{\"status\": 200' \"error\": false' \"error_message\": \"\"}";                                          item.StatusCode = HttpStatusCode.OK;                                      }                                      else                                      {                                          item.Response = "";                                          item.StatusCode = HttpStatusCode.OK;    //// HttpStatusCode.NotFound;                                      }                                  }                              }                                LoggingMethod.WriteToLog(String.Format("Response: {0}"' item.Response)' LoggingMethod.LevelVerbose);                                switch (item.StatusCode)                              {                                  case HttpStatusCode.OK:                                      {                                          string statusOK = "HTTP/1.1 200 OK\r\n";                                          statusOK += "Content-type: text/html\r\n";                                          statusOK += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusOK += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusOK)' 0' statusOK.Length);                                          Thread.Sleep(10);                                            break;                                      }                                    case HttpStatusCode.BadRequest:                                  default:                                      {                                          string statusBadRequest = "HTTP/1.1 400 Bad Request\r\n";                                          statusBadRequest += "Content-type: text/html\r\n";                                          statusBadRequest += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusBadRequest += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusBadRequest)' 0' statusBadRequest.Length);                                          Thread.Sleep(10);                                          break;                                      }                                    case HttpStatusCode.Unauthorized:                                      break;                                  case HttpStatusCode.Forbidden:                                      break;                                  case HttpStatusCode.NotFound:                                      {                                          string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound = "HTTP/1.1 404 Not Found\r\n";                                          statusNotFound += "Content-type: text/html\r\n";                                          statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' item.Response.Length.ToString());                                          statusNotFound += item.Response;                                          stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                                          Thread.Sleep(10);                                          break;                                      }                              }                          }                          catch (Exception eHttp)                          {                              System.Diagnostics.Debug.WriteLine(eHttp.ToString());                              LoggingMethod.WriteToLog(String.Format("Path not found: {0}"' strData)' LoggingMethod.LevelError);                              string statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound = "HTTP/1.1 404 Not Found\r\n";                              statusNotFound += "Content-type: text/html\r\n";                              statusNotFound += String.Format("Content-length: {0}\r\n\r\n"' notFoundContent.Length.ToString());                              statusNotFound += notFoundContent;                              stream.Write(System.Text.Encoding.UTF8.GetBytes(statusNotFound)' 0' statusNotFound.Length);                              Thread.Sleep(10);                          }                            if (sslStream != null)                          {                              sslStream.Flush();                              sslStream.Close();                          }                            stream.Flush();                          stream.Close();                          clientSocket.Close();                      }));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ReadMessage,The following statement contains a magic number: byte[] buffer = new byte[2048];
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ReadMessage,The following statement contains a magic number: int value = Convert.ToInt32(msg.Substring(index + 16' msg.IndexOf("\r\n"' index) - index - 16));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ReadMessage,The following statement contains a magic number: int value = Convert.ToInt32(msg.Substring(index + 16' msg.IndexOf("\r\n"' index) - index - 16));
Magic Number,MockServer,Server,C:\research\architectureSmells\repos\pubnub_c-sharp\src\UnitTests\MockServerPubnubApi\Server.cs,ReadMessage,The following statement contains a magic number: msg.Length == indexlast + 4 + value
