Implementation smell,Namespace,Class,File,Method,Description
Long Method,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The method has 122 lines of code.
Long Method,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The method has 206 lines of code.
Long Method,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,CompleteResponse,The method has 114 lines of code.
Long Method,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,Show,The method has 128 lines of code.
Long Method,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The method has 112 lines of code.
Complex Method,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,GoogleCallback,Cyclomatic complexity of the method is 9
Complex Method,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,Cyclomatic complexity of the method is 14
Complex Method,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,BalanceTags,Cyclomatic complexity of the method is 12
Complex Method,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,StackExchange.DataExplorer.Helpers,StackRouteAttribute,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\RouteAttribute.cs,MapDecoratedRoutes,Cyclomatic complexity of the method is 9
Complex Method,StackExchange.DataExplorer.Helpers,StackRouteAttribute,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\RouteAttribute.cs,ParseUrlForConstraints,Cyclomatic complexity of the method is 9
Complex Method,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,MergePivot,Cyclomatic complexity of the method is 9
Complex Method,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ProcessMagicColumns,Cyclomatic complexity of the method is 8
Complex Method,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,Cyclomatic complexity of the method is 13
Long Parameter List,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The method has 5 parameters. Parameters: sitename' order_by' q' page' pagesize
Long Parameter List,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Save,The method has 9 parameters. Parameters: sql' title' description' siteId' querySetId' textResults' withExecutionPlan' bypassCache' targetSites
Long Parameter List,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Execute,The method has 7 parameters. Parameters: querySetId' revisionId' siteId' textResults' withExecutionPlan' bypassCache' targetSites
Long Parameter List,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,Query,The method has 7 parameters. Parameters: sql' map' param' transaction' buffered' splitOn' commandTimeout
Long Parameter List,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,Query,The method has 7 parameters. Parameters: sql' map' param' transaction' buffered' splitOn' commandTimeout
Long Parameter List,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,Query,The method has 7 parameters. Parameters: sql' map' param' transaction' buffered' splitOn' commandTimeout
Long Parameter List,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,Query,The method has 7 parameters. Parameters: sql' map' param' transaction' buffered' splitOn' commandTimeout
Long Parameter List,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,QueryMultiple,The method has 5 parameters. Parameters: sql' param' transaction' commandTimeout' commandType
Long Parameter List,StackExchange.DataExplorer.Helpers,UIHelper,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\UIHelper.cs,PageNumber,The method has 5 parameters. Parameters: href' pageCount' pageIndex' cssClass' urlAnchor
Long Parameter List,StackExchange.DataExplorer.Helpers,UIHelper,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\UIHelper.cs,PageSizer,The method has 5 parameters. Parameters: href' pageIndex' currentPageSize' pageCount' cssClass
Long Parameter List,StackExchange.DataExplorer.Helpers,PagedList<T>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PagedList.cs,PagedList,The method has 5 parameters. Parameters: source' index' pageSize' forceIndexInBounds' prePagedTotalCount
Long Parameter List,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,PageNumber,The method has 5 parameters. Parameters: href' pageCount' pageCurrent' cssClass' divId
Long Parameter List,StackExchange.DataExplorer.Helpers,PageSizer,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageSizer.cs,PageSizer,The method has 5 parameters. Parameters: href' pageIndex' currentPageSize' pageCount' cssClass
Long Parameter List,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,PopulateResults,The method has 5 parameters. Parameters: results' command' result' messages' IncludeExecutionPlan
Long Identifier,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,Get,The length of the parameter throwExceptionWhenValueIsEmpty is 30.
Long Statement,StackExchange.DataExplorer,ErrorLoggingProfiler,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Current.cs,OnError,The length of the statement  "                exception.Data["SQL"] = formatter.FormatSql(profiledDbCommand.CommandText' SqlTiming.GetCommandParameters(profiledDbCommand)); " is 126.
Long Statement,StackExchange.DataExplorer,GlobalApplication,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Global.asax.cs,Application_Error,The length of the statement  "            var ex = new HttpUnhandledException("An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code."' lastError); " is 235.
Long Statement,StackExchange.DataExplorer,OData,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\OData.svc.cs,CreateDataSource,The length of the statement  "            //throw new NotImplementedException("OData has been disabled while diagnosing a resource leak should be up by the 15th of August!"); " is 132.
Long Statement,StackExchange.DataExplorer,OData,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\OData.svc.cs,CreateDataSource,The length of the statement  "            SqlConnection sqlConnection = Current.DB.Query<Site>("SELECT * FROM Sites WHERE LOWER(Name) = @siteName OR LOWER(TinyName) = @siteName"' new {siteName}).First().GetConnection(ConnectionPoolSize); " is 195.
Long Statement,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The length of the statement  "                        var openId = Current.DB.Query<UserOpenId>("SELECT * FROM UserOpenIds WHERE OpenIdClaim = @normalizedClaim"' new { normalizedClaim }).FirstOrDefault(); " is 150.
Long Statement,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The length of the statement  "                            var currentOpenIds = Current.DB.Query<UserOpenId>("select * from UserOpenIds  where UserId = @Id"' new {CurrentUser.Id}); " is 121.
Long Statement,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,CheckWhitelist,The length of the statement  "            var whiteListEntry = Current.DB.Query<OpenIdWhiteList>("SELECT * FROM OpenIdWhiteList WHERE lower(OpenId) = @lookupClaim"' new { lookupClaim }).FirstOrDefault(); " is 161.
Long Statement,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,CheckWhitelist,The length of the statement  "                whiteListEntry = Current.DB.Query<OpenIdWhiteList>("SELECT * FROM OpenIdWhiteList WHERE LOWER(OpenId) = @normalizedClaim"' new { normalizedClaim }).FirstOrDefault(); " is 165.
Long Statement,StackExchange.DataExplorer.Controllers,AdminController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AdminController.cs,FindDuplicateUsers,The length of the statement  "                var userMap = Current.DB.Query<User>("select * from Users where Id in @Ids"' new { Ids = dupeUserIds.Select(u => u.Item2).SelectMany(u => u) }) " is 143.
Long Statement,StackExchange.DataExplorer.Controllers,CaptchaController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\CaptchaController.cs,Captcha,The length of the statement  "                // recaptcha is down - if the challenge had some length (it's usually a massive hash)' allow the action - spam will be destroyed by the community " is 145.
Long Statement,StackExchange.DataExplorer.Controllers,CaptchaController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\CaptchaController.cs,Captcha,The length of the statement  "                response = challenge.Length >= 30 ? Recaptcha.RecaptchaResponse.Valid : Recaptcha.RecaptchaResponse.RecaptchaNotReachable; " is 122.
Long Statement,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,ShowLatest,The length of the statement  "                    RedirectPermanent($"/{site.TinyName.ToLower()}/query/{querySetId}{(slug.HasValue() ? "/" + slug : "")}{Request.Url.Query}"); " is 124.
Long Statement,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Show,The length of the statement  "                    : RedirectPermanent($"/{site.TinyName.ToLower()}/revision/{querySetId}/{revisionId}{(slug.HasValue() ? "/" + slug : "")}{Request.Url.Query}"); " is 142.
Long Statement,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The length of the statement  "                    builder.Where("qs.Title LIKE @search OR qs.[Description] LIKE @search"' new { search = '%' + searchCriteria.SearchTerm + '%' }); " is 128.
Long Statement,StackExchange.DataExplorer.Controllers,StackOverflowController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\StackOverflowController.cs,Initialize,The length of the statement  "            if (!CurrentUser.IsAnonymous && (CurrentUser.LastSeenDate == null || (DateTime.UtcNow - CurrentUser.LastSeenDate.Value).TotalSeconds > 120)) " is 140.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Save,The length of the statement  "                if (asyncResults.State == AsyncQueryRunner.AsyncState.Success || asyncResults.State == AsyncQueryRunner.AsyncState.Cancelled) " is 125.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,CompleteResponse,The length of the statement  "            if (context.Revision == null && (context.QuerySet == null || query == null || context.QuerySet.CurrentRevision == null || context.QuerySet.CurrentRevision.QueryId != query.Id)) " is 176.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,CompleteResponse,The length of the statement  "                    (CurrentUser.IsAnonymous && context.QuerySet.OwnerIp == CurrentUser.IPAddress) || context.QuerySet.OwnerId != CurrentUser.Id) " is 125.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,CompleteResponse,The length of the statement  "                    Current.DB.QuerySets.Update(context.QuerySet.Id' new { context.Title' context.Description' CurrentRevisionId = revisionId' LastActivity = DateTime.UtcNow}); " is 156.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,ShowSingleSiteCsv,The length of the statement  "                    : RedirectPermanent($"/{site.TinyName.ToLower()}/csv/{revisionId}{(slug.HasValue() ? "/" + slug : "")}{Request.Url.Query}"); " is 124.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,MapQuery,The length of the statement  "            var querySetId = Current.DB.Query<int>(@"select top 1 QuerySetId from QuerySetRevisions where RevisionId = @Id order by Id asc"' new {revision.Id}).First(); " is 156.
Long Statement,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,ShowPlan,The length of the statement  "                    : RedirectPermanent($"/{site.TinyName.ToLower()}/plan/{revisionId}{(slug.HasValue() ? "/" + slug : "")}{Request.Url.Query}"); " is 125.
Long Statement,Dapper,Snapshot<T>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Dapper\Snapshotter.cs,GenerateDiffer,The length of the statement  "                    il.EmitCall(OpCodes.Call' typeof(Snapshot<T>).GetMethod(nameof(AreEqual)' BindingFlags.NonPublic | BindingFlags.Static).MakeGenericMethod(new Type[] { prop.PropertyType })' null); " is 179.
Long Statement,Dapper,Database<TDatabase>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,TableExists,The length of the statement  "            return _connection.Query("select 1 from INFORMATION_SCHEMA.TABLES where TABLE_NAME = @name"' new { name }' transaction: _transaction).Count() == 1; " is 147.
Long Statement,Dapper,Table<T>,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\_Database.cs,Insert,The length of the statement  "                var sql = "set nocount on insert " + TableName + " (" + cols + ") values (" + cols_params + ") select cast(scope_identity() as int)"; " is 133.
Long Statement,StackExchange.DataExplorer.Helpers,AsyncQueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\AsyncQueryRunner.cs,Execute,The length of the statement  "                        throw new ApplicationException("Too many queries are running' you may only run " + AppSettings.ConcurrentQueries + " queries at a time"); " is 137.
Long Statement,StackExchange.DataExplorer.Helpers,AsyncQueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\AsyncQueryRunner.cs,FlushOldJobs,The length of the statement  "                    foreach (var job in _jobs.Values.Where(j => !j.Task.IsCompleted && j.LastPoll < DateTime.UtcNow.AddSeconds(-ExpireNonPolledSeconds))) " is 133.
Long Statement,StackExchange.DataExplorer.Helpers,ParsedQuery,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\ParsedQuery.cs,ParseToken,The length of the statement  "                    if (nextState.HasValue && nextState.Value.HasFlag(StateFlags.Comment) && !nextState.Value.HasFlag(StateFlags.Multiline)) " is 120.
Long Statement,StackExchange.DataExplorer.Helpers,QueryUtil,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryUtil.cs,GetFullQuerySet,The length of the statement  "            var queries = Current.DB.Query<Query>(@"select * from Queries where Id in @Ids"' new { Ids = querySet.Revisions.Select(r => r.QueryId).Distinct() }).ToDictionary(q => q.Id); " is 173.
Long Statement,StackExchange.DataExplorer.Helpers,QueryUtil,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryUtil.cs,GetFullQuerySet,The length of the statement  "            var usersToLoad = querySet.Revisions.Select(r => r.OwnerId).Concat(new[] {querySet.OwnerId}).Where(id => id != null).ToArray(); " is 127.
Long Statement,StackExchange.DataExplorer.Helpers,QueryUtil,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryUtil.cs,GetFullQuerySet,The length of the statement  "            var users = Current.DB.Query<User>("select Id' Login' Email' IPAddress from Users where Id in @Ids"' new { Ids = usersToLoad }).ToDictionary(u => u.Id); " is 152.
Long Statement,StackExchange.DataExplorer.Helpers,StackRouteAttribute,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\RouteAttribute.cs,MapDecoratedRoutes,The length of the statement  "                // fully-qualify route to its controller method by adding the namespace; allows multiple assemblies to share controller names/routes " is 132.
Long Statement,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,GetSuggestedEditLinks,The length of the statement  "                             @"select Id' case when RejectionDate is not null then 'rejected' when ApprovalDate is not null then 'accepted' else 'pending' end  " is 129.
Long Statement,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,GetUserLinks,The length of the statement  "                             @"select Id' case when DisplayName is null or LEN(DisplayName) = 0 then 'unknown' else DisplayName end from Users where Id in "); " is 129.
Long Statement,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,GetConnection,The length of the statement  "            var cs = ConnectionString + (UseConnectionStringOverride ? "" : ((ConnectionString.EndsWith(";") ? "" : ";") + string.Format("Max Pool Size={0};"'maxPoolSize))); " is 161.
Long Statement,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,FindUserId,The length of the statement  "                        return cnn.Query<int?>("select top 1 Id from Users where EmailHash = @hash order by Reputation desc"' new {hash}).FirstOrDefault(); " is 131.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,GetByADLogin,The length of the statement  "            return Current.DB.Query<User>("Select * From Users Where ADLogin = @accountLogin"' new {accountLogin}).SingleOrDefault(); " is 121.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,Gravatar,The length of the statement  "                "<img src=\"//www.gravatar.com/avatar/{0}?s={2}&amp;d=identicon&amp;r=PG\" height=\"{1}\" width=\"{1}\" class=\"logo\">"' " is 121.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The length of the statement  "                var rempped = db.Execute("update UserOpenIds set UserId = @masterId where UserId = @mergeId"' new { mergeId' masterId }); " is 121.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The length of the statement  "                var rempped = db.Execute("update QuerySets set OwnerId = @masterId where OwnerId = @mergeId"' new { mergeId' masterId }); " is 121.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The length of the statement  "                var rempped = db.Execute("update Revisions set OwnerId = @masterId where OwnerId = @mergeId"' new { mergeId' masterId }); " is 121.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The length of the statement  "                var count = db.Execute("update SavedQueries set UserId = @masterId where UserId = @mergeId"' new { mergeId' masterId }); " is 120.
Long Statement,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,MergeUsers,The length of the statement  "            if (masterUser.CreationDate.GetValueOrDefault() > mergeUser.CreationDate.GetValueOrDefault()) masterUser.CreationDate = mergeUser.CreationDate; " is 143.
Complex Conditional,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The conditional expression  "AppSettings.EnableEnforceSecureOpenId && user.EnforceSecureOpenId && !isSecure && openId.IsSecure"  is complex.
Complex Conditional,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,CompleteResponse,The conditional expression  "context.Revision == null && (context.QuerySet == null || query == null || context.QuerySet.CurrentRevision == null || context.QuerySet.CurrentRevision.QueryId != query.Id)"  is complex.
Complex Conditional,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,URLFriendly,The conditional expression  "(c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')"  is complex.
Complex Conditional,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,URLFriendly,The conditional expression  "c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_'"  is complex.
Empty Catch Block,StackExchange.DataExplorer,Current,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Current.cs,DisposeRegisteredConnections,The method has an empty catch block.
Empty Catch Block,StackExchange.DataExplorer,Current,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Current.cs,LogException,The method has an empty catch block.
Empty Catch Block,StackExchange.DataExplorer,GlobalApplication,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Global.asax.cs,Application_Error,The method has an empty catch block.
Empty Catch Block,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,GetMultiSiteResults,The method has an empty catch block.
Empty Catch Block,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,GetMultiSiteResults,The method has an empty catch block.
Empty Catch Block,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,FindUserId,The method has an empty catch block.
Magic Number,StackExchange.DataExplorer,MiniProfilerPackage,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\App_Start\MiniProfiler.cs,Start,The following statement contains a magic number: MiniProfiler.Settings.Storage = new HttpRuntimeCacheStorage(TimeSpan.FromMinutes(20));
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,GetHashedTime,The following statement contains a magic number: return ("ticks=" + DateTime.UtcNow.Ticks.ToString().Substring(0' 8)).ToCrc16();
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TruncateWithEllipsis,The following statement contains a magic number: return Truncate(s' maxLength - 3) + "...";
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,Temperature,The following statement contains a magic number: if (delta < 10)              {                  return "supernova";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,Temperature,The following statement contains a magic number: if (delta < 120)              {                  return "warm";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToJavascriptTime,The following statement contains a magic number: return (long) (dt - new DateTime(1970' 1' 1' 0' 0' 0)).TotalMilliseconds;
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 60)              {                  return ts.Seconds == 1 ? "1 sec ago" : ts.Seconds + " secs ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec              {                  return ts.Minutes == 1 ? "1 min ago" : ts.Minutes + " mins ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimePast,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec              {                  return ts.Hours == 1 ? "1 hour ago" : ts.Hours + " hours ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimePast,The following statement contains a magic number: if (days <= 2)              {                  return days + " days ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 60)              {                  return ts.Seconds == 1 ? "in 1 second" : "in " + ts.Seconds + " seconds";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec              {                  return ts.Minutes == 1 ? "in 1 minute" : "in " + ts.Minutes + " minutes";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec              {                  return ts.Hours == 1 ? "in 1 hour" : "in " + ts.Hours + " hours";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeFuture,The following statement contains a magic number: if (days <= 10)              {                  return "in " + days + " day" + (days > 1 ? "s" : "");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMini,The following statement contains a magic number: if (delta < 60)              {                  return ts.Seconds + "s ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMini,The following statement contains a magic number: if (delta < 3600) // 60 mins * 60 sec              {                  return ts.Minutes + "m ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMini,The following statement contains a magic number: if (delta < 86400) // 24 hrs * 60 mins * 60 sec              {                  return ts.Hours + "h ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMini,The following statement contains a magic number: if (days <= 2)              {                  return days + "d ago";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMini,The following statement contains a magic number: if (days <= 330)              {                  return dt.ToString("MMM %d 'at' %H:mmm").ToLowerInvariant();              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToRelativeTimeMicro,The following statement contains a magic number: if (ts.Days <= 330)              {                  return dt.ToString("MMM %d").ToLower();              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 365)              {                  return (days/365) + " year" + ((days/365) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 365)              {                  return (days/365) + " year" + ((days/365) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 365)              {                  return (days/365) + " year" + ((days/365) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 30)              {                  return (days/30) + " month" + ((days/30) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 30)              {                  return (days/30) + " month" + ((days/30) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,TimeTakenLong,The following statement contains a magic number: if (days > 30)              {                  return (days/30) + " month" + ((days/30) > 1 ? "s ago" : " ago");              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,ToHash,The following statement contains a magic number: var result = new StringBuilder(hash.Length*2);
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000)              {                  rval = num.ToString();              }              else              {                  double divisor = num < 1000000 ? 1000.0 : 1000000.0;                    if (((int) Math.Round(num/divisor)).ToString().Length > 1)                  {                      rval = (Math.Round(num/divisor)).ToString();                  }                  else                  {                      rval = (Math.Round(num/(divisor/10.0))/10.0).ToString();                  }              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (rval.Length > 3)              {                  rval = rval.Substring(0' 3);              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (rval.Length > 3)              {                  rval = rval.Substring(0' 3);              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000) {                  suffix = "";              }              else if (num > 999 && num < 1000000)              {                  suffix = "k";              }              else if (num >= 1000000)               {                  suffix = "m";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000) {                  suffix = "";              }              else if (num > 999 && num < 1000000)              {                  suffix = "k";              }              else if (num >= 1000000)               {                  suffix = "m";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000) {                  suffix = "";              }              else if (num > 999 && num < 1000000)              {                  suffix = "k";              }              else if (num >= 1000000)               {                  suffix = "m";              }
Magic Number,StackExchange.DataExplorer,ExtensionMethods,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\ExtensionMethods.cs,PrettyShort,The following statement contains a magic number: if (num < 1000) {                  suffix = "";              }              else if (num > 999 && num < 1000000)              {                  suffix = "k";              }              else if (num >= 1000000)               {                  suffix = "m";              }
Magic Number,StackExchange.DataExplorer,GlobalApplication,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Global.asax.cs,Application_Error,The following statement contains a magic number: HttpContext.Current.Response.StatusCode = 500;
Magic Number,StackExchange.DataExplorer,OData,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\OData.svc.cs,InitializeService,The following statement contains a magic number: config.SetEntitySetPageSize("*"' 50);
Magic Number,StackExchange.DataExplorer,OData,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\OData.svc.cs,CreateDataSource,The following statement contains a magic number: if (lastRequest != null && (DateTime.Now - lastRequest.Value).TotalMilliseconds < 1000) {                  throw new InvalidOperationException("Sorry only one request per 1 second");              }
Magic Number,StackExchange.DataExplorer,OData,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\OData.svc.cs,OnStartProcessingRequest,The following statement contains a magic number: c.SetExpires(HttpContext.Current.Timestamp.AddSeconds(600));
Magic Number,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The following statement contains a magic number: if (response == null)              {                  if (Request.Params[Keys.OAuth2Url].HasValue())                  {                      // Push the form and mark it valid (nothing to confirm' anything that comes down via OAuth is clean right now                      return OAuthLogin();                  }                    // Stage 2: user submitting Identifier                  Identifier id;                    if (Identifier.TryParse(Request.Form[Keys.OpenId]' out id))                  {                      try                      {                          var request = OpenIdRelay.CreateRequest(id);                            request.AddExtension(                              new ClaimsRequest                              {                                  Email = DemandLevel.Require'                                  Nickname = DemandLevel.Request'                                  FullName = DemandLevel.Request'                                  BirthDate = DemandLevel.Request                              }                          );                            return request.RedirectingResponse.AsActionResultMvc5();                      }                      catch (ProtocolException ex)                      {                          return LoginError(ex.Message);                      }                  }                    return LoginError("Invalid identifier");              }              else              {                  // Stage 3: OpenID Provider sending assertion response                  switch (response.Status)                  {                      case AuthenticationStatus.Authenticated:                          var originalClaim = Models.User.NormalizeOpenId(response.ClaimedIdentifier.ToString()' false);                          var normalizedClaim = Models.User.NormalizeOpenId(response.ClaimedIdentifier.ToString());                          var sreg = response.GetExtension<ClaimsResponse>();                          var isSecure = originalClaim.StartsWith("https://");                            var whitelistEmail = sreg != null && sreg.Email != null && sreg.Email.Length > 2 ? sreg.Email : null;                          var whiteListResponse = CheckWhitelist(normalizedClaim' whitelistEmail);                          if (whiteListResponse != null)                               return whiteListResponse;                            User user = null;                          var openId = Current.DB.Query<UserOpenId>("SELECT * FROM UserOpenIds WHERE OpenIdClaim = @normalizedClaim"' new { normalizedClaim }).FirstOrDefault();                            if (!CurrentUser.IsAnonymous)                          {                              if (openId != null && openId.UserId != CurrentUser.Id) //Does another user have this OpenID                              {                                  //TODO: Need to perform a user merge                                  SetHeader("Log in below to change your OpenID");                                  return LoginError("Another user with this OpenID already exists' merging is not possible at this time.");                              }                                var currentOpenIds = Current.DB.Query<UserOpenId>("select * from UserOpenIds  where UserId = @Id"' new {CurrentUser.Id});                                // If a user is merged and then tries to add one of the OpenIDs used for the two original users'                              // this update will fail...so don't attempt it if we detect that's the case. Really we should                              // work on allowing multiple OpenID logins' but for now I'll settle for not throwing an exception...                              if (!currentOpenIds.Any(s => s.OpenIdClaim == normalizedClaim))                              {                                  Current.DB.UserOpenIds.Update(currentOpenIds.First().Id' new { OpenIdClaim = normalizedClaim });                              }                                                          user = CurrentUser;                              returnUrl = "/users/" + user.Id;                          }                          else if (openId == null)                          {                              if (sreg != null && IsVerifiedEmailProvider(normalizedClaim))                              {                                  // Eh...We can trust the verified email provider' but we can't really trust Users.Email.                                  // I can't think of a particularly malicious way this could be exploited' but it's likely                                  // worth reviewing at some point.                                  user = Current.DB.Query<User>("select * from Users where Email = @Email"' new { sreg.Email }).FirstOrDefault();                                    if (user != null)                                  {                                      Current.DB.UserOpenIds.Insert(new { UserId = user.Id' OpenIdClaim = normalizedClaim' isSecure });                                  }                              }                                if (user == null)                              {                                  // create new user                                  string email = "";                                  string login = "";                                  if (sreg != null)                                  {                                      email = sreg.Email;                                      login = sreg.Nickname ?? sreg.FullName;                                  }                                  user = Models.User.CreateUser(login' email' normalizedClaim);                              }                          }                          else                          {                              user = Current.DB.Users.Get(openId.UserId);                                if (AppSettings.EnableEnforceSecureOpenId && user.EnforceSecureOpenId && !isSecure && openId.IsSecure)                              {                                  return LoginError("User preferences prohibit insecure (non-https) variants of the provided OpenID identifier");                              }                              if (isSecure && !openId.IsSecure)                              {                                  Current.DB.UserOpenIds.Update(openId.Id' new { IsSecure = true });                              }                          }                            IssueFormsTicket(user);                            if (!string.IsNullOrEmpty(returnUrl))                          {                              return Redirect(returnUrl);                          }                          return RedirectToAction("Index"' "Home");                      case AuthenticationStatus.Canceled:                          return LoginError("Canceled at provider");                      case AuthenticationStatus.Failed:                          return LoginError(response.Exception.Message);                  }              }
Magic Number,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,IssueFormsTicket,The following statement contains a magic number: var ticket = new FormsAuthenticationTicket(                  1'                  user.Id.ToString()'                  DateTime.Now'                  DateTime.Now.AddYears(2)'                  true'                  "");
Magic Number,StackExchange.DataExplorer.Controllers,CaptchaController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\CaptchaController.cs,Captcha,The following statement contains a magic number: try              {                  response = validator.Validate();              }              catch (WebException)              {                  // recaptcha is down - if the challenge had some length (it's usually a massive hash)' allow the action - spam will be destroyed by the community                  response = challenge.Length >= 30 ? Recaptcha.RecaptchaResponse.Valid : Recaptcha.RecaptchaResponse.RecaptchaNotReachable;              }
Magic Number,StackExchange.DataExplorer.Controllers,CaptchaController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\CaptchaController.cs,Captcha,The following statement contains a magic number: if (response == Recaptcha.RecaptchaResponse.Valid)              {                  Current.SetCachedObjectSliding(CaptchaKey(Current.RemoteIP)' true' 60 * 15);                  return Json(new { success = true });              }
Magic Number,StackExchange.DataExplorer.Controllers,CaptchaController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\CaptchaController.cs,Captcha,The following statement contains a magic number: if (response == Recaptcha.RecaptchaResponse.Valid)              {                  Current.SetCachedObjectSliding(CaptchaKey(Current.RemoteIP)' true' 60 * 15);                  return Json(new { success = true });              }
Magic Number,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The following statement contains a magic number: pagesize = Math.Max(Math.Min(pagesize ?? 50' 100)' 10);
Magic Number,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The following statement contains a magic number: pagesize = Math.Max(Math.Min(pagesize ?? 50' 100)' 10);
Magic Number,StackExchange.DataExplorer.Controllers,QuerySetController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QuerySetController.cs,Index,The following statement contains a magic number: pagesize = Math.Max(Math.Min(pagesize ?? 50' 100)' 10);
Magic Number,StackExchange.DataExplorer.Controllers,StackOverflowController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\StackOverflowController.cs,Initialize,The following statement contains a magic number: if (!CurrentUser.IsAnonymous && (CurrentUser.LastSeenDate == null || (DateTime.UtcNow - CurrentUser.LastSeenDate.Value).TotalSeconds > 120))              {                  CurrentUser.LastSeenDate = DateTime.UtcNow;                  CurrentUser.IPAddress = Current.RemoteIP;                  Current.DB.Users.Update(CurrentUser.Id' new { CurrentUser.LastSeenDate' CurrentUser.IPAddress });              }
Magic Number,StackExchange.DataExplorer.Controllers,HomeController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\HomeController.cs,Help,The following statement contains a magic number: if (version != null)              {                  version = string.Join(" "' version.Split(new char[] { ' ' }).Skip(1).Take(3));              }
Magic Number,StackExchange.DataExplorer.Controllers,HomeController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\HomeController.cs,Help,The following statement contains a magic number: ViewData["AspVersion"] = typeof(Controller).Assembly.GetName().Version.ToString(2);
Magic Number,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Save,The following statement contains a magic number: try              {                  if (!ValidateTargetSites(targetSites))                  {                      throw new ApplicationException("Invalid target sites selection");                  }                    QuerySet querySet = null;                  if (querySetId.HasValue)                  {                      querySet = Current.DB.QuerySets.Get(querySetId.Value);                        if (querySet == null)                      {                          throw new ApplicationException("Invalid query set ID");                      }                  }                    var parsedQuery = new ParsedQuery(                      sql'                      Request.Params'                      withExecutionPlan == true'                      targetSites ?? TargetSites.Current                  );                    if (AppSettings.EnableBypassCache && bypassCache.HasValue && bypassCache.Value)                  {                      QueryUtil.ClearCachedResults(parsedQuery' siteId);                  }                    QueryResults results;                  var site = GetSite(siteId);                  ValidateQuery(parsedQuery' site);                    if (title.HasValue() && title.Length > 100)                  {                      throw new ApplicationException("Title must be no more than 100 characters");                  }                    if (description.HasValue() && description.Length > 1000)                  {                      throw new ApplicationException("Description must be no more than 1000 characters");                  }                    var contextData = new QueryContextData                   {                       Title = title'                      Description = description'                      IsText = textResults == true'                      QuerySet = querySet                  };                    var asyncResults = AsyncQueryRunner.Execute(parsedQuery' CurrentUser' site' contextData);                  if (asyncResults.State == AsyncQueryRunner.AsyncState.Failure)                  {                      throw asyncResults.Exception;                   }                  if (asyncResults.State == AsyncQueryRunner.AsyncState.Success || asyncResults.State == AsyncQueryRunner.AsyncState.Cancelled)                  {                      results = asyncResults.QueryResults;                  }                  else                  {                      return Json(new {running = true' job_id = asyncResults.JobId});                  }                    response = CompleteResponse(results' parsedQuery' contextData' siteId);              }              catch (Exception ex)              {                  response = TransformExecutionException(ex);              }
Magic Number,StackExchange.DataExplorer.Controllers,QueryController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\QueryController.cs,Save,The following statement contains a magic number: try              {                  if (!ValidateTargetSites(targetSites))                  {                      throw new ApplicationException("Invalid target sites selection");                  }                    QuerySet querySet = null;                  if (querySetId.HasValue)                  {                      querySet = Current.DB.QuerySets.Get(querySetId.Value);                        if (querySet == null)                      {                          throw new ApplicationException("Invalid query set ID");                      }                  }                    var parsedQuery = new ParsedQuery(                      sql'                      Request.Params'                      withExecutionPlan == true'                      targetSites ?? TargetSites.Current                  );                    if (AppSettings.EnableBypassCache && bypassCache.HasValue && bypassCache.Value)                  {                      QueryUtil.ClearCachedResults(parsedQuery' siteId);                  }                    QueryResults results;                  var site = GetSite(siteId);                  ValidateQuery(parsedQuery' site);                    if (title.HasValue() && title.Length > 100)                  {                      throw new ApplicationException("Title must be no more than 100 characters");                  }                    if (description.HasValue() && description.Length > 1000)                  {                      throw new ApplicationException("Description must be no more than 1000 characters");                  }                    var contextData = new QueryContextData                   {                       Title = title'                      Description = description'                      IsText = textResults == true'                      QuerySet = querySet                  };                    var asyncResults = AsyncQueryRunner.Execute(parsedQuery' CurrentUser' site' contextData);                  if (asyncResults.State == AsyncQueryRunner.AsyncState.Failure)                  {                      throw asyncResults.Exception;                   }                  if (asyncResults.State == AsyncQueryRunner.AsyncState.Success || asyncResults.State == AsyncQueryRunner.AsyncState.Cancelled)                  {                      results = asyncResults.QueryResults;                  }                  else                  {                      return Json(new {running = true' job_id = asyncResults.JobId});                  }                    response = CompleteResponse(results' parsedQuery' contextData' siteId);              }              catch (Exception ex)              {                  response = TransformExecutionException(ex);              }
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,GetUserList,The following statement contains a magic number: int perPage = 36;
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,GetUserList,The following statement contains a magic number: if (selected == "all")              {                  builder.OrderBy("Login ASC");              }              else              {                  var activePeriod = 30; // Last 30 days                    // We should probably just be...actually recording the user's LastActivityDate'                  // instead of performing this join all the time                  builder.Select("' LastRun AS LastActivityDate");                  builder.Join(@"(                      SELECT UserId' MAX(LastRun) AS LastRun FROM RevisionExecutions GROUP BY UserId                  ) AS LastExecutions ON LastExecutions.UserId = Users.Id");                  builder.OrderBy("LastRun DESC");                  builder.Where("LastRun >= @since"' new { since = DateTime.UtcNow.AddDays(-activePeriod).Date });              }
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,GetUserList,The following statement contains a magic number: if (search.HasValue() && search.Length > 2)              {                  url += "&search=" + HtmlUtilities.UrlEncode(search);                  ViewData["UserSearch"] = search;                    builder.Where("Login LIKE @search"' new { search = '%' + search + '%' });              }
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,Edit,The following statement contains a magic number: if (updatedUser.DOB < DateTime.UtcNow.AddYears(-100) || updatedUser.DOB > DateTime.UtcNow.AddYears(-6))              {                  updatedUser.DOB = null;              }
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,Edit,The following statement contains a magic number: if (updatedUser.DOB < DateTime.UtcNow.AddYears(-100) || updatedUser.DOB > DateTime.UtcNow.AddYears(-6))              {                  updatedUser.DOB = null;              }
Magic Number,StackExchange.DataExplorer.Controllers,UserController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\UserController.cs,Show,The following statement contains a magic number: int? pagesize = 15;
Magic Number,StackExchange.DataExplorer.Helpers,AsyncQueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\AsyncQueryRunner.cs,Execute,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,StackExchange.DataExplorer.Helpers,AsyncQueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\AsyncQueryRunner.cs,FlushOldJobs,The following statement contains a magic number: while (true)              {                  try                  {                      Thread.Sleep(1000 * 10);                        var expires = DateTime.UtcNow.AddSeconds(-AutoExpireSeconds);                      foreach (var job in _jobs.Values.Where(j => j.CompletionDate != null && j.CompletionDate < expires).ToList())                      {                          AsyncResult ignore;                          _jobs.TryRemove(job.JobId' out ignore);                      }                        foreach (var job in _jobs.Values.Where(j => !j.Task.IsCompleted && j.LastPoll < DateTime.UtcNow.AddSeconds(-ExpireNonPolledSeconds)))                      {                          AsyncResult result;                          _jobs.TryGetValue(job.JobId' out result);                          if (result != null)                          {                              result.Cancelled = true;                              var cmd = result.Command;                              cmd?.Cancel();                          }                      }                  }                  catch (Exception e)                  {                       // nothing we can do really                      Current.LogException(e);                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,AsyncQueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\AsyncQueryRunner.cs,FlushOldJobs,The following statement contains a magic number: while (true)              {                  try                  {                      Thread.Sleep(1000 * 10);                        var expires = DateTime.UtcNow.AddSeconds(-AutoExpireSeconds);                      foreach (var job in _jobs.Values.Where(j => j.CompletionDate != null && j.CompletionDate < expires).ToList())                      {                          AsyncResult ignore;                          _jobs.TryRemove(job.JobId' out ignore);                      }                        foreach (var job in _jobs.Values.Where(j => !j.Task.IsCompleted && j.LastPoll < DateTime.UtcNow.AddSeconds(-ExpireNonPolledSeconds)))                      {                          AsyncResult result;                          _jobs.TryGetValue(job.JobId' out result);                          if (result != null)                          {                              result.Cancelled = true;                              var cmd = result.Command;                              cmd?.Cancel();                          }                      }                  }                  catch (Exception e)                  {                       // nothing we can do really                      Current.LogException(e);                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,Crc16,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\Crc16.cs,Crc16,The following statement contains a magic number: for (ushort i = 0; i < table.Length; ++i)              {                  ushort value = 0;                  var temp = i;                  for (byte j = 0; j < 8; ++j)                  {                      if (((value ^ temp) & 0x0001) != 0)                      {                          value = (ushort) ((value >> 1) ^ polynomial);                      }                      else                      {                          value >>= 1;                      }                      temp >>= 1;                  }                  table[i] = value;              }
Magic Number,StackExchange.DataExplorer.Helpers,Crc16,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\Crc16.cs,ComputeChecksum,The following statement contains a magic number: for (int i = 0; i < bytes.Length; ++i)              {                  var index = (byte) (crc ^ bytes[i]);                  crc = (ushort) ((crc >> 8) ^ table[index]);              }
Magic Number,StackExchange.DataExplorer.Helpers,Crc16,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\Crc16.cs,ComputeChecksumBytes,The following statement contains a magic number: return new[] {(byte) (crc >> 8)' (byte) (crc & 0x00ff)};
Magic Number,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,URLFriendly,The following statement contains a magic number: const int maxlen = 80;
Magic Number,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,URLFriendly,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  c = title[i];                  if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))                  {                      sb.Append(c);                      prevdash = false;                  }                  else if (c >= 'A' && c <= 'Z')                  {                      // tricky way to convert to lowercase                      sb.Append((char) (c | 32));                      prevdash = false;                  }                  else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_')                  {                      if (!prevdash && sb.Length > 0)                      {                          sb.Append('-');                          prevdash = true;                      }                  }                  else if (c >= 128)                  {                      s = c.ToString().ToLowerInvariant();                      if ("àåáâäãåą".Contains(s))                      {                          sb.Append("a");                      }                      else if ("èéêëę".Contains(s))                      {                          sb.Append("e");                      }                      else if ("ìíîïı".Contains(s))                      {                          sb.Append("i");                      }                      else if ("òóôõöø".Contains(s))                      {                          sb.Append("o");                      }                      else if ("ùúûü".Contains(s))                      {                          sb.Append("u");                      }                      else if ("çćč".Contains(s))                      {                          sb.Append("c");                      }                      else if ("żźž".Contains(s))                      {                          sb.Append("z");                      }                      else if ("śşš".Contains(s))                      {                          sb.Append("s");                      }                      else if ("ñń".Contains(s))                      {                          sb.Append("n");                      }                      else if ("ýŸ".Contains(s))                      {                          sb.Append("y");                      }                      else if (c == 'ł')                      {                          sb.Append("l");                      }                      else if (c == 'đ')                      {                          sb.Append("d");                      }                      else if (c == 'ß')                      {                          sb.Append("ss");                      }                      else if (c == 'ğ')                      {                          sb.Append("g");                      }                      prevdash = false;                  }                  if (i == maxlen) break;              }
Magic Number,StackExchange.DataExplorer.Helpers,HtmlUtilities,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\HtmlUtilities.cs,URLFriendly,The following statement contains a magic number: for (int i = 0; i < len; i++)              {                  c = title[i];                  if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9'))                  {                      sb.Append(c);                      prevdash = false;                  }                  else if (c >= 'A' && c <= 'Z')                  {                      // tricky way to convert to lowercase                      sb.Append((char) (c | 32));                      prevdash = false;                  }                  else if (c == ' ' || c == ''' || c == '.' || c == '/' || c == '\\' || c == '-' || c == '_')                  {                      if (!prevdash && sb.Length > 0)                      {                          sb.Append('-');                          prevdash = true;                      }                  }                  else if (c >= 128)                  {                      s = c.ToString().ToLowerInvariant();                      if ("àåáâäãåą".Contains(s))                      {                          sb.Append("a");                      }                      else if ("èéêëę".Contains(s))                      {                          sb.Append("e");                      }                      else if ("ìíîïı".Contains(s))                      {                          sb.Append("i");                      }                      else if ("òóôõöø".Contains(s))                      {                          sb.Append("o");                      }                      else if ("ùúûü".Contains(s))                      {                          sb.Append("u");                      }                      else if ("çćč".Contains(s))                      {                          sb.Append("c");                      }                      else if ("żźž".Contains(s))                      {                          sb.Append("z");                      }                      else if ("śşš".Contains(s))                      {                          sb.Append("s");                      }                      else if ("ñń".Contains(s))                      {                          sb.Append("n");                      }                      else if ("ýŸ".Contains(s))                      {                          sb.Append("y");                      }                      else if (c == 'ł')                      {                          sb.Append("l");                      }                      else if (c == 'đ')                      {                          sb.Append("d");                      }                      else if (c == 'ß')                      {                          sb.Append("ss");                      }                      else if (c == 'ğ')                      {                          sb.Append("g");                      }                      prevdash = false;                  }                  if (i == maxlen) break;              }
Magic Number,StackExchange.DataExplorer.Helpers,JsonpResult,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\JsonpResult.cs,SanitizeCallback,The following statement contains a magic number: return Regex.Replace(callback' @"[^_A-Za-z0-9]"' "").Truncate(80);
Magic Number,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,ToString,The following statement contains a magic number: if (PageCount <= _cellcount)              {                  for (int i = 1; i <= PageCount; i++)                      pages.Add(i.ToString());              }              else              {                  if (curPage < _cellcount - 1)                  {                      // we're near the start                      for (int i = 1; i < _cellcount; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }                  else if (curPage > PageCount - _cellcount + 2)                  {                      // we're near the end                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      for (int i = PageCount - _cellcount + 2; i <= PageCount; i++)                          pages.Add(i.ToString());                  }                  else                  {                      // we're in the middle' somewhere                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      int range = _cellcount - 4;                      for (int i = curPage - range; i <= curPage + range; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,ToString,The following statement contains a magic number: if (PageCount <= _cellcount)              {                  for (int i = 1; i <= PageCount; i++)                      pages.Add(i.ToString());              }              else              {                  if (curPage < _cellcount - 1)                  {                      // we're near the start                      for (int i = 1; i < _cellcount; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }                  else if (curPage > PageCount - _cellcount + 2)                  {                      // we're near the end                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      for (int i = PageCount - _cellcount + 2; i <= PageCount; i++)                          pages.Add(i.ToString());                  }                  else                  {                      // we're in the middle' somewhere                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      int range = _cellcount - 4;                      for (int i = curPage - range; i <= curPage + range; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,ToString,The following statement contains a magic number: if (PageCount <= _cellcount)              {                  for (int i = 1; i <= PageCount; i++)                      pages.Add(i.ToString());              }              else              {                  if (curPage < _cellcount - 1)                  {                      // we're near the start                      for (int i = 1; i < _cellcount; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }                  else if (curPage > PageCount - _cellcount + 2)                  {                      // we're near the end                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      for (int i = PageCount - _cellcount + 2; i <= PageCount; i++)                          pages.Add(i.ToString());                  }                  else                  {                      // we're in the middle' somewhere                      pages.Add("1");                      pages.Add(PAGER_DOTS);                      int range = _cellcount - 4;                      for (int i = curPage - range; i <= curPage + range; i++)                          pages.Add(i.ToString());                      pages.Add(PAGER_DOTS);                      pages.Add(PageCount.ToString());                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(1024);
Magic Number,StackExchange.DataExplorer.Helpers,PageNumber,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageNumber.cs,WriteCell,The following statement contains a magic number: if (pageText == PAGER_DOTS)              {                  cssClass += " dots";                  createLink = false;              }              else if (pageText == _prev)              {                  cssClass += " prev";                  rel = "prev";                  pageText = PageCurrent.ToString();              }              else if (pageText == _next)              {                  cssClass += " next";                  rel = "next";                  pageText = (PageCurrent + 2).ToString();              }              else if (pageText == (PageCurrent + 1).ToString())              {                  cssClass += " current";                  createLink = false;              }
Magic Number,StackExchange.DataExplorer.Helpers,PageSizer,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageSizer.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(512);
Magic Number,StackExchange.DataExplorer.Helpers,PageSizer,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\PageSizer.cs,ValidatePageSize,The following statement contains a magic number: if (pageSize > 0 && pageSize.Value <= 50) return pageSize;
Magic Number,StackExchange.DataExplorer.Helpers,QueryResults,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryResults.cs,GetMaxLengths,The following statement contains a magic number: foreach (var row in resultSet.Rows)              {                  for (int i = 0; i < resultSet.Columns.Count; i++)                  {                      var col = row[i];                        int curLength;                      if (_nativeTypes.Contains(resultSet.Columns[i].Type))                      {                          // Date is formatted later for textresults!                          if (col != null && resultSet.Columns[i].Type == ResultColumnType.Date)                          {                              // col contains a long                               // for textresults it is formatted later                              // instead of taking its length                              // use the length that will come out after                              // the String.Format is applied                              curLength = DATE_COLUMN_WIDTH;                           }                          else                          {                              curLength = col?.ToString().Length ?? 4;                          }                      }                      else                      {                          var data = col as JContainer;                          if (data == null)                          {                              curLength = 4;                          }                          else                          {                              curLength = (data.Value<string>("title") ?? "").Length;                          }                      }                      maxLengths[i] = Math.Max(curLength' maxLengths[i]);                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,QueryResults,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryResults.cs,GetMaxLengths,The following statement contains a magic number: foreach (var row in resultSet.Rows)              {                  for (int i = 0; i < resultSet.Columns.Count; i++)                  {                      var col = row[i];                        int curLength;                      if (_nativeTypes.Contains(resultSet.Columns[i].Type))                      {                          // Date is formatted later for textresults!                          if (col != null && resultSet.Columns[i].Type == ResultColumnType.Date)                          {                              // col contains a long                               // for textresults it is formatted later                              // instead of taking its length                              // use the length that will come out after                              // the String.Format is applied                              curLength = DATE_COLUMN_WIDTH;                           }                          else                          {                              curLength = col?.ToString().Length ?? 4;                          }                      }                      else                      {                          var data = col as JContainer;                          if (data == null)                          {                              curLength = 4;                          }                          else                          {                              curLength = (data.Value<string>("title") ?? "").Length;                          }                      }                      maxLengths[i] = Math.Max(curLength' maxLengths[i]);                  }              }
Magic Number,StackExchange.DataExplorer.Helpers,Util,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\Util.cs,GetMD5String,The following statement contains a magic number: using (var md5 = new MD5CryptoServiceProvider())              {                  var e = new UTF8Encoding();                  var sb = new StringBuilder(32);                  var b = md5.ComputeHash(e.GetBytes(value));                  for (int i = 0; i < b.Length; i++)                      sb.Append(b[i].ToString("x2"));                  return sb.ToString();              }
Magic Number,StackExchange.DataExplorer.Helpers,UserPreferenceDictionary,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.Preferences.cs,Serialize,The following statement contains a magic number: var sb = new StringBuilder(_prefs.Count * 7);
Magic Number,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ExecuteNonCached,The following statement contains a magic number: Current.SetCachedObjectSliding(key' currentCount' 60 * 60);
Magic Number,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ExecuteNonCached,The following statement contains a magic number: Current.SetCachedObjectSliding(key' currentCount' 60 * 60);
Magic Number,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ExecuteNonCached,The following statement contains a magic number: if (currentCount > 130)              {                  // clearly a robot' auto black list                   Current.DB.BlackList.Insert(new { CreationDate = DateTime.UtcNow' IPAddress = remoteIP });              }
Magic Number,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ExecuteNonCached,The following statement contains a magic number: if (currentCount > 100)              {                  throw new Exception("You can not run any new queries for another hour' you have exceeded your limit!");              }
Magic Number,StackExchange.DataExplorer.Helpers,QueryRunner,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\QueryRunner.cs,ExecuteNonCached,The following statement contains a magic number: if (Current.DB.Query<int>("select count(*) from BlackList where IPAddress = @remoteIP"' new { remoteIP }).First() > 0)              {                  System.Threading.Thread.Sleep(2000);                  throw new Exception("You have been blacklisted due to abuse!");              }
Magic Number,StackExchange.DataExplorer.Helpers.Security,ActiveDirectory,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Helpers\Security\ActiveDirectory.cs,RunCommand,The following statement contains a magic number: try              {                  using (var pc = new PrincipalContext(ContextType.Domain))                      return command(pc);              }              catch (Exception ex)              {                  if (retries > 0)                  {                      Thread.Sleep(500);                      RunCommand(command' retries - 1);                  }                  else                  {                      Current.LogException("Could not contact current AD"' ex);                  }              }
Magic Number,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,UpdateStats,The following statement contains a magic number: using (var cnn = GetOpenConnection())              using (var cmd = new SqlCommand())              {                  cmd.Connection = cnn;                  cmd.CommandTimeout = 300;                    cmd.CommandText = "select count(*) from Posts where ParentId is null";                  TotalQuestions = (int) cmd.ExecuteScalar();                    cmd.CommandText = "select count(*) from Posts where ParentId is not null";                  TotalAnswers = (int) cmd.ExecuteScalar();                    cmd.CommandText = "select count(*) from Comments";                  TotalComments = (int) cmd.ExecuteScalar();                    cmd.CommandText = "select max(CreationDate) from Posts";                  LastPost = cmd.ExecuteScalar() as DateTime?;                    cmd.CommandText = "select count(*) from Users";                  TotalUsers = (int) cmd.ExecuteScalar();                    cmd.CommandText = "select count(*) from Tags";                  TotalTags = (int) cmd.ExecuteScalar();              }
Magic Number,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,GetTableInfos,The following statement contains a magic number: using (var cnn = GetOpenConnection())              {                  const string sql = @"  select TABLE_NAME' COLUMN_NAME' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS  order by TABLE_NAME' ORDINAL_POSITION  ";                  using (var cmd = new SqlCommand(sql))                  {                      cmd.Connection = cnn;                      using (var reader = cmd.ExecuteReader())                      {                          columns = new List<ColumnInfo>();                          while (reader.Read())                          {                              var info = new ColumnInfo                              {                                  TableName = reader.GetString(0)'                                  ColumnName = reader.GetString(1)                              };                              info.SetDataType(reader.GetString(2)' reader.IsDBNull(3) ? null : (int?) reader.GetInt32(3));                              columns.Add(info);                          }                      }                  }              }
Magic Number,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,GetTableInfos,The following statement contains a magic number: using (var cnn = GetOpenConnection())              {                  const string sql = @"  select TABLE_NAME' COLUMN_NAME' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS  order by TABLE_NAME' ORDINAL_POSITION  ";                  using (var cmd = new SqlCommand(sql))                  {                      cmd.Connection = cnn;                      using (var reader = cmd.ExecuteReader())                      {                          columns = new List<ColumnInfo>();                          while (reader.Read())                          {                              var info = new ColumnInfo                              {                                  TableName = reader.GetString(0)'                                  ColumnName = reader.GetString(1)                              };                              info.SetDataType(reader.GetString(2)' reader.IsDBNull(3) ? null : (int?) reader.GetInt32(3));                              columns.Add(info);                          }                      }                  }              }
Magic Number,StackExchange.DataExplorer.Models,Site,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\Site.cs,GetTableInfos,The following statement contains a magic number: using (var cnn = GetOpenConnection())              {                  const string sql = @"  select TABLE_NAME' COLUMN_NAME' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS  order by TABLE_NAME' ORDINAL_POSITION  ";                  using (var cmd = new SqlCommand(sql))                  {                      cmd.Connection = cnn;                      using (var reader = cmd.ExecuteReader())                      {                          columns = new List<ColumnInfo>();                          while (reader.Read())                          {                              var info = new ColumnInfo                              {                                  TableName = reader.GetString(0)'                                  ColumnName = reader.GetString(1)                              };                              info.SetDataType(reader.GetString(2)' reader.IsDBNull(3) ? null : (int?) reader.GetInt32(3));                              columns.Add(info);                          }                      }                  }              }
Magic Number,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,NormalizeOpenId,The following statement contains a magic number: if (normalizeScheme && openId.StartsWith("https://"))                  openId = "http://" + openId.Substring(8);
Magic Number,StackExchange.DataExplorer.Models,User,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.cs,Gravatar,The following statement contains a magic number: return string.Format(                  "<img src=\"//www.gravatar.com/avatar/{0}?s={2}&amp;d=identicon&amp;r=PG\" height=\"{1}\" width=\"{1}\" class=\"logo\">"'                  Util.GravatarHash(Email ?? Id.ToString())' width + "px"' width * 2);
Magic Number,StackExchange.DataExplorer.Models,UserPreferenceDictionary,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Models\User.Preferences.cs,Serialize,The following statement contains a magic number: var sb = new StringBuilder(_prefs.Count * 7);
Missing Default,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,Authenticate,The following switch statement is missing a default case: switch (response.Status)                  {                      case AuthenticationStatus.Authenticated:                          var originalClaim = Models.User.NormalizeOpenId(response.ClaimedIdentifier.ToString()' false);                          var normalizedClaim = Models.User.NormalizeOpenId(response.ClaimedIdentifier.ToString());                          var sreg = response.GetExtension<ClaimsResponse>();                          var isSecure = originalClaim.StartsWith("https://");                            var whitelistEmail = sreg != null && sreg.Email != null && sreg.Email.Length > 2 ? sreg.Email : null;                          var whiteListResponse = CheckWhitelist(normalizedClaim' whitelistEmail);                          if (whiteListResponse != null)                               return whiteListResponse;                            User user = null;                          var openId = Current.DB.Query<UserOpenId>("SELECT * FROM UserOpenIds WHERE OpenIdClaim = @normalizedClaim"' new { normalizedClaim }).FirstOrDefault();                            if (!CurrentUser.IsAnonymous)                          {                              if (openId != null && openId.UserId != CurrentUser.Id) //Does another user have this OpenID                              {                                  //TODO: Need to perform a user merge                                  SetHeader("Log in below to change your OpenID");                                  return LoginError("Another user with this OpenID already exists' merging is not possible at this time.");                              }                                var currentOpenIds = Current.DB.Query<UserOpenId>("select * from UserOpenIds  where UserId = @Id"' new {CurrentUser.Id});                                // If a user is merged and then tries to add one of the OpenIDs used for the two original users'                              // this update will fail...so don't attempt it if we detect that's the case. Really we should                              // work on allowing multiple OpenID logins' but for now I'll settle for not throwing an exception...                              if (!currentOpenIds.Any(s => s.OpenIdClaim == normalizedClaim))                              {                                  Current.DB.UserOpenIds.Update(currentOpenIds.First().Id' new { OpenIdClaim = normalizedClaim });                              }                                                          user = CurrentUser;                              returnUrl = "/users/" + user.Id;                          }                          else if (openId == null)                          {                              if (sreg != null && IsVerifiedEmailProvider(normalizedClaim))                              {                                  // Eh...We can trust the verified email provider' but we can't really trust Users.Email.                                  // I can't think of a particularly malicious way this could be exploited' but it's likely                                  // worth reviewing at some point.                                  user = Current.DB.Query<User>("select * from Users where Email = @Email"' new { sreg.Email }).FirstOrDefault();                                    if (user != null)                                  {                                      Current.DB.UserOpenIds.Insert(new { UserId = user.Id' OpenIdClaim = normalizedClaim' isSecure });                                  }                              }                                if (user == null)                              {                                  // create new user                                  string email = "";                                  string login = "";                                  if (sreg != null)                                  {                                      email = sreg.Email;                                      login = sreg.Nickname ?? sreg.FullName;                                  }                                  user = Models.User.CreateUser(login' email' normalizedClaim);                              }                          }                          else                          {                              user = Current.DB.Users.Get(openId.UserId);                                if (AppSettings.EnableEnforceSecureOpenId && user.EnforceSecureOpenId && !isSecure && openId.IsSecure)                              {                                  return LoginError("User preferences prohibit insecure (non-https) variants of the provided OpenID identifier");                              }                              if (isSecure && !openId.IsSecure)                              {                                  Current.DB.UserOpenIds.Update(openId.Id' new { IsSecure = true });                              }                          }                            IssueFormsTicket(user);                            if (!string.IsNullOrEmpty(returnUrl))                          {                              return Redirect(returnUrl);                          }                          return RedirectToAction("Index"' "Home");                      case AuthenticationStatus.Canceled:                          return LoginError("Canceled at provider");                      case AuthenticationStatus.Failed:                          return LoginError(response.Exception.Message);                  }
Missing Default,StackExchange.DataExplorer.Controllers,AccountController,C:\repos\StackExchange_StackExchange.DataExplorer\App\StackExchange.DataExplorer\Controllers\AccountController.cs,OAuthLogin,The following switch statement is missing a default case: switch (server)              {                  //case "https://graph.facebook.com/oauth/authorize": // Facebook                  //    GetFacebookConfig(out secret' out clientId);                  //    var redirect = string.Format(                  //        "{0}?client_id={1}&scope=email&redirect_uri={2}/{3}&state={4}"'                  //        server'                  //        clientId'                  //        host'                  //        session'                  //        state);                  //    return Redirect(redirect);                  case "https://accounts.google.com/o/oauth2/auth": // Google                      GetGoogleConfig(out secret' out clientId' out path);                      return Redirect(string.Format(                              "{0}?client_id={1}&scope=openid+email&redirect_uri={2}&state={3}&response_type=code"'                              server'                              clientId'                              (BaseUrl + path).UrlEncode()'                              stateJson.UrlEncode()                              ));              }
