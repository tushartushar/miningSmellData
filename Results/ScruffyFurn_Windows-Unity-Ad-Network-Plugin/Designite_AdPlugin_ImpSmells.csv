Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,OnNavigatedTo,The length of the statement  "		MessageBoxResult result = MessageBox.Show ("Can this application use your location?"' "Location Services"' MessageBoxButton.OKCancel); " is 134.
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,DrawingSurfaceBackground_Loaded,The following statement contains a magic number: if (!_unityStartedLoading) {  	_unityStartedLoading = true;  	UnityApp.SetLoadedCallback (() => {  		Dispatcher.BeginInvoke (Unity_Loaded);  	});  	var content = Application.Current.Host.Content;  	var width = (int)Math.Floor (content.ActualWidth * content.ScaleFactor / 100.0 + 0.5);  	var height = (int)Math.Floor (content.ActualHeight * content.ScaleFactor / 100.0 + 0.5);  	UnityApp.SetNativeResolution (width' height);  	UnityApp.SetRenderResolution (width' height);  	UnityPlayer.UnityApp.SetOrientation ((int)Orientation);  	DrawingSurfaceBackground.SetBackgroundContentProvider (UnityApp.GetBackgroundContentProvider ());  	DrawingSurfaceBackground.SetBackgroundManipulationHandler (UnityApp.GetManipulationHandler ());  }  
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,DrawingSurfaceBackground_Loaded,The following statement contains a magic number: if (!_unityStartedLoading) {  	_unityStartedLoading = true;  	UnityApp.SetLoadedCallback (() => {  		Dispatcher.BeginInvoke (Unity_Loaded);  	});  	var content = Application.Current.Host.Content;  	var width = (int)Math.Floor (content.ActualWidth * content.ScaleFactor / 100.0 + 0.5);  	var height = (int)Math.Floor (content.ActualHeight * content.ScaleFactor / 100.0 + 0.5);  	UnityApp.SetNativeResolution (width' height);  	UnityApp.SetRenderResolution (width' height);  	UnityPlayer.UnityApp.SetOrientation ((int)Orientation);  	DrawingSurfaceBackground.SetBackgroundContentProvider (UnityApp.GetBackgroundContentProvider ());  	DrawingSurfaceBackground.SetBackgroundManipulationHandler (UnityApp.GetManipulationHandler ());  }  
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,DrawingSurfaceBackground_Loaded,The following statement contains a magic number: if (!_unityStartedLoading) {  	_unityStartedLoading = true;  	UnityApp.SetLoadedCallback (() => {  		Dispatcher.BeginInvoke (Unity_Loaded);  	});  	var content = Application.Current.Host.Content;  	var width = (int)Math.Floor (content.ActualWidth * content.ScaleFactor / 100.0 + 0.5);  	var height = (int)Math.Floor (content.ActualHeight * content.ScaleFactor / 100.0 + 0.5);  	UnityApp.SetNativeResolution (width' height);  	UnityApp.SetRenderResolution (width' height);  	UnityPlayer.UnityApp.SetOrientation ((int)Orientation);  	DrawingSurfaceBackground.SetBackgroundContentProvider (UnityApp.GetBackgroundContentProvider ());  	DrawingSurfaceBackground.SetBackgroundManipulationHandler (UnityApp.GetManipulationHandler ());  }  
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,DrawingSurfaceBackground_Loaded,The following statement contains a magic number: if (!_unityStartedLoading) {  	_unityStartedLoading = true;  	UnityApp.SetLoadedCallback (() => {  		Dispatcher.BeginInvoke (Unity_Loaded);  	});  	var content = Application.Current.Host.Content;  	var width = (int)Math.Floor (content.ActualWidth * content.ScaleFactor / 100.0 + 0.5);  	var height = (int)Math.Floor (content.ActualHeight * content.ScaleFactor / 100.0 + 0.5);  	UnityApp.SetNativeResolution (width' height);  	UnityApp.SetRenderResolution (width' height);  	UnityPlayer.UnityApp.SetOrientation ((int)Orientation);  	DrawingSurfaceBackground.SetBackgroundContentProvider (UnityApp.GetBackgroundContentProvider ());  	DrawingSurfaceBackground.SetBackgroundManipulationHandler (UnityApp.GetManipulationHandler ());  }  
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,SetupGeolocator,The following statement contains a magic number: try {  	UnityApp.EnableLocationService (true);  	Geolocator geolocator = new Geolocator ();  	geolocator.ReportInterval = 5000;  	IAsyncOperation<Geoposition> op = geolocator.GetGeopositionAsync ();  	op.Completed += (asyncInfo' asyncStatus) => {  		if (asyncStatus == AsyncStatus.Completed) {  			Geoposition geoposition = asyncInfo.GetResults ();  			UnityApp.SetupGeolocator (geolocator' geoposition);  		} else  			UnityApp.SetupGeolocator (null' null);  	};  } catch (Exception) {  	UnityApp.SetupGeolocator (null' null);  }  
Magic Number,AdPlugin,MainPage,D:\newReposJune17\ScruffyFurn_Windows-Unity-Ad-Network-Plugin\Older Versions\Version 1.0\Windows Phone Build\AdPlugin\MainPage.xaml.cs,SetupGeolocator,The following statement contains a magic number: geolocator.ReportInterval = 5000;  
