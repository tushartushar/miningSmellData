Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Ubiety.Common,JID,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\JID.cs,Escape,Cyclomatic complexity of the method is 13
Complex Method,Ubiety.Infrastructure,ProtocolParser,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\ProtocolParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Ubiety.Infrastructure,ProtocolParser,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\ProtocolParser.cs,StartTag,Cyclomatic complexity of the method is 9
Complex Method,Ubiety.Net,Address,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Net\Address.cs,NextIpAddress,Cyclomatic complexity of the method is 8
Complex Method,Ubiety.States,ServerFeaturesState,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\States\ServerFeaturesState.cs,Execute,Cyclomatic complexity of the method is 10
Long Parameter List,Ubiety.Infrastructure,XmppEvents,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\XmppEvents.cs,Error,The method has 5 parameters. Parameters: sender' type' severity' message' parameters
Long Statement,Ubiety.Common.Sasl,Md5Processor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\MD5Processor.cs,Step,The length of the statement  "                    ProtocolState.Events.Error(this' ErrorType.AuthorizationFailed' ErrorSeverity.Fatal' "Unable to authorize current user credentials."); " is 134.
Long Statement,Ubiety.Infrastructure,ProtocolParser,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\ProtocolParser.cs,StartTag,The length of the statement  "                    ProtocolState.Events.Error(null' ErrorType.WrongProtocolVersion' ErrorSeverity.Fatal' "Missing proper stream:stream header from server."); " is 138.
Long Statement,Ubiety.Registries,CompressionRegistry,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Registries\CompressionRegistry.cs,GetCompression,The length of the statement  "                    ProtocolState.Events.Error(null' ErrorType.UnregisteredItem' ErrorSeverity.Information' "Unable to find requested compression algorithm."); " is 139.
Long Statement,Ubiety.Registries,CompressionRegistry,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Registries\CompressionRegistry.cs,GetCompression,The length of the statement  "                ProtocolState.Events.Error(null' ErrorType.UnregisteredItem' ErrorSeverity.Information' "Unable to find requested compression algorithm."); " is 139.
Long Statement,Ubiety.Registries,TagRegistry,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Registries\TagRegistry.cs,AddAssembly,The length of the statement  "                Log.Debug("Loading tag {TagName} as class {ClassName} in the {Namespace} namespace."' tag.Name' tag.ClassType.FullName' tag.Namespace); " is 135.
Long Statement,Ubiety.Registries,TagRegistry,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Registries\TagRegistry.cs,GetTag,The length of the statement  "                ProtocolState.Events.Error(null' ErrorType.UnregisteredItem' ErrorSeverity.Information' "Tag {0} not found in registry. Please load appropriate library."' qname); " is 162.
Long Statement,Ubiety.States,SaslState,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\States\SASLState.cs,Execute,The length of the statement  "                    ProtocolState.Events.Error(this' ErrorType.AuthorizationFailed' ErrorSeverity.Reconnect' "Failed to authenticate user with current credentials."); " is 146.
Complex Conditional,Ubiety.States,ServerFeaturesState,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\States\ServerFeaturesState.cs,Execute,The conditional expression  "(ProtocolState.Features.HasFlag(ProtocolFeatures.StartTls) && ProtocolState.Settings.StartTls) ||                      (ProtocolState.Features.HasFlag(ProtocolFeatures.StartTls) &&                       ProtocolState.Features.HasFlag(ProtocolFeatures.SslRequired)) && !ProtocolState.Encrypted"  is complex.
Complex Conditional,Ubiety.States,ServerFeaturesState,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\States\ServerFeaturesState.cs,Execute,The conditional expression  "!ProtocolState.Compressed && CompressionRegistry.AlgorithmsAvailable &&                      !ProtocolState.Settings.Ssl &&                      features.Compression != null"  is complex.
Magic Number,Ubiety.Common,JID,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\JID.cs,GetHashCode,The following statement contains a magic number: var hash = 17;
Magic Number,Ubiety.Common,JID,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\JID.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + User.GetHashCode();
Magic Number,Ubiety.Common,JID,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\JID.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + Resource.GetHashCode();
Magic Number,Ubiety.Common,JID,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\JID.cs,GetHashCode,The following statement contains a magic number: hash = hash*23 + Server.GetHashCode();
Magic Number,Ubiety.Common.Sasl,Md5Processor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\MD5Processor.cs,GenerateResponseHash,The following statement contains a magic number: _ncString = _nc.ToString(CultureInfo.InvariantCulture).PadLeft(8' '0');
Magic Number,Ubiety.Common.Sasl,Md5Processor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\MD5Processor.cs,GenerateResponseHash,The following statement contains a magic number: ms.Write(h1' 0' 16);
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Initialize,The following statement contains a magic number: _clientFirst = msg.ToString().Substring(3);
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following statement contains a magic number: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following statement contains a magic number: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following statement contains a magic number: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following statement contains a magic number: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following statement contains a magic number: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,CalculateProofs,The following statement contains a magic number: var proof = new byte[20];
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Hi,The following statement contains a magic number: var prev = new byte[20];
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Hi,The following statement contains a magic number: var key = new byte[_salt.Length + 4];
Magic Number,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Hi,The following statement contains a magic number: Array.Copy(g' 0' key' _salt.Length' 4);
Magic Number,Ubiety.Common.Compression,Zlib,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\Compression\Zlib.cs,Deflate,The following statement contains a magic number: var buf = new byte[4096];
Magic Number,Ubiety.Common.Compression,Zlib,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\Compression\Zlib.cs,Inflate,The following statement contains a magic number: var buffer = new byte[4096];
Magic Number,Ubiety.Infrastructure,ProtocolParser,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\ProtocolParser.cs,Parse,The following statement contains a magic number: message.Length == 16
Magic Number,Ubiety.Net,Address,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Net\Address.cs,Address,The following statement contains a magic number: _resolver = new Resolver("8.8.8.8") {UseCache = true' TimeOut = 5' TransportType = TransportType.Tcp};
Missing Default,Ubiety.Common.Sasl,Md5Processor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\MD5Processor.cs,Step,The following switch statement is missing a default case: switch (tag.Name)              {                  case "success":                      var succ = tag;                      PopulateDirectives(succ);                        return succ;                  case "failure":                      ProtocolState.Events.Error(this' ErrorType.AuthorizationFailed' ErrorSeverity.Fatal' "Unable to authorize current user credentials.");                      return tag;              }
Missing Default,Ubiety.Common.Sasl,ScramProcessor,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Common\SASL\SCRAMProcessor.cs,Step,The following switch statement is missing a default case: switch (tag.Name)              {                  case "challenge":                  {                      _serverFirst = tag.Bytes;                      var response = _utf.GetString(tag.Bytes);                        // Split challenge into pieces                      var tokens = response.Split(''');                        _snonce = tokens[0].Substring(2);                      // Ensure that the first length of nonce is the same nonce we sent.                      var r = _snonce.Substring(0' _nonce.Length);                      if (0 != string.CompareOrdinal(r' _nonce))                      {                          throw new Exception("Error in authenticating server nonce.");                      }                        var a = tokens[1].Substring(2);                      _salt = Convert.FromBase64String(a);                        var i = tokens[2].Substring(2);                      _i = int.Parse(i);                        var final = new StringBuilder();                      final.Append("c=biws'r=");                      final.Append(_snonce);                        _clientFinal = final.ToString();                        CalculateProofs();                        final.Append("'p=");                      final.Append(_clientProof);                        var resp = TagRegistry.GetTag<GenericTag>("response"' Namespaces.Sasl);                      resp.Bytes = _utf.GetBytes(final.ToString());                        return resp;                  }                    case "success":                  {                      var response = _utf.GetString(tag.Bytes);                      var signature = Convert.FromBase64String(response.Substring(2));                      return _utf.GetString(signature) == _utf.GetString(_serverSignature) ? tag : null;                  }                  case "failure":                      return tag;              }
Missing Default,Ubiety.Infrastructure,ProtocolParser,D:\research\architectureSmells\repos\ubiety_xmpp\ubiety\Infrastructure\ProtocolParser.cs,Parse,The following switch statement is missing a default case: switch (_reader.NodeType)                      {                          case XmlNodeType.Element:                              StartTag();                              if (_reader.IsEmptyElement)                              {                                  EndTag();                              }                              break;                          case XmlNodeType.EndElement:                              EndTag();                              break;                          case XmlNodeType.Text:                              AddText();                              break;                      }
