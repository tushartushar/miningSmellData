Implementation smell,Namespace,Class,File,Method,Description
Long Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessSystemColor,The method has 162 lines of code.
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ConvertFile,Cyclomatic complexity of the method is 18
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessNode,Cyclomatic complexity of the method is 46
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,Cyclomatic complexity of the method is 14
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,Cyclomatic complexity of the method is 16
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,Cyclomatic complexity of the method is 15
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessSystemColor,Cyclomatic complexity of the method is 158
Complex Method,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,Cyclomatic complexity of the method is 12
Long Statement,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The length of the statement  "		writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight)); " is 132.
Long Statement,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The length of the statement  "				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X"))); " is 137.
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.BGColorW = col;  		ui.BGColorB = ui.BGColorG = ui.BGColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.BGColorW = col;  		ui.BGColorB = ui.BGColorG = ui.BGColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (colText)) {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.BGColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.BGColorW = col;  		ui.BGColorB = ui.BGColorG = ui.BGColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.BGColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.BGColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.BGColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.BGColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.BGColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessTextView,The following statement contains a magic number: ui.BGColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: foreach (var r in ret) {  	if (!string.IsNullOrEmpty (r)) {  		var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  		? element.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries) // Split the item  		: new string[] {  			element  		})// Keep the entire item  		.SelectMany (element => element).ToList ();  		for (var t = 1; t < s.Count; ++t) {  			if (s [t].Contains ("="))  				s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  			if (s [t].Contains ("<"))  				s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  			if (!string.IsNullOrEmpty (s [t])) {  				if (!s [t].Contains ("<")) {  					if (s [t] == s.Last ()) {  						if (s [t].Contains ("/>"))  							spc.Add (s [t].Remove (s [t].Length - 2' 2));  						else  							spc.Add (s [t].Remove (s [t].Length - 1' 1));  					}  					else  						spc.Add (s [t]);  				}  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: foreach (var r in ret) {  	if (!string.IsNullOrEmpty (r)) {  		var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  		? element.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries) // Split the item  		: new string[] {  			element  		})// Keep the entire item  		.SelectMany (element => element).ToList ();  		for (var t = 1; t < s.Count; ++t) {  			if (s [t].Contains ("="))  				s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  			if (s [t].Contains ("<"))  				s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  			if (!string.IsNullOrEmpty (s [t])) {  				if (!s [t].Contains ("<")) {  					if (s [t] == s.Last ()) {  						if (s [t].Contains ("/>"))  							spc.Add (s [t].Remove (s [t].Length - 2' 2));  						else  							spc.Add (s [t].Remove (s [t].Length - 1' 1));  					}  					else  						spc.Add (s [t]);  				}  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: foreach (var r in ret) {  	if (!string.IsNullOrEmpty (r)) {  		var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  		? element.Split (new[] {  			' '  		}' StringSplitOptions.RemoveEmptyEntries) // Split the item  		: new string[] {  			element  		})// Keep the entire item  		.SelectMany (element => element).ToList ();  		for (var t = 1; t < s.Count; ++t) {  			if (s [t].Contains ("="))  				s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  			if (s [t].Contains ("<"))  				s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  			if (!string.IsNullOrEmpty (s [t])) {  				if (!s [t].Contains ("<")) {  					if (s [t] == s.Last ()) {  						if (s [t].Contains ("/>"))  							spc.Add (s [t].Remove (s [t].Length - 2' 2));  						else  							spc.Add (s [t].Remove (s [t].Length - 1' 1));  					}  					else  						spc.Add (s [t]);  				}  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!string.IsNullOrEmpty (r)) {  	var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  	? element.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries) // Split the item  	: new string[] {  		element  	})// Keep the entire item  	.SelectMany (element => element).ToList ();  	for (var t = 1; t < s.Count; ++t) {  		if (s [t].Contains ("="))  			s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  		if (s [t].Contains ("<"))  			s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  		if (!string.IsNullOrEmpty (s [t])) {  			if (!s [t].Contains ("<")) {  				if (s [t] == s.Last ()) {  					if (s [t].Contains ("/>"))  						spc.Add (s [t].Remove (s [t].Length - 2' 2));  					else  						spc.Add (s [t].Remove (s [t].Length - 1' 1));  				}  				else  					spc.Add (s [t]);  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!string.IsNullOrEmpty (r)) {  	var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  	? element.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries) // Split the item  	: new string[] {  		element  	})// Keep the entire item  	.SelectMany (element => element).ToList ();  	for (var t = 1; t < s.Count; ++t) {  		if (s [t].Contains ("="))  			s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  		if (s [t].Contains ("<"))  			s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  		if (!string.IsNullOrEmpty (s [t])) {  			if (!s [t].Contains ("<")) {  				if (s [t] == s.Last ()) {  					if (s [t].Contains ("/>"))  						spc.Add (s [t].Remove (s [t].Length - 2' 2));  					else  						spc.Add (s [t].Remove (s [t].Length - 1' 1));  				}  				else  					spc.Add (s [t]);  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!string.IsNullOrEmpty (r)) {  	var s = r.Split ('"').Select ((element' index) => index % 2 == 0 // If even index  	? element.Split (new[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries) // Split the item  	: new string[] {  		element  	})// Keep the entire item  	.SelectMany (element => element).ToList ();  	for (var t = 1; t < s.Count; ++t) {  		if (s [t].Contains ("="))  			s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  		if (s [t].Contains ("<"))  			s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  		if (!string.IsNullOrEmpty (s [t])) {  			if (!s [t].Contains ("<")) {  				if (s [t] == s.Last ()) {  					if (s [t].Contains ("/>"))  						spc.Add (s [t].Remove (s [t].Length - 2' 2));  					else  						spc.Add (s [t].Remove (s [t].Length - 1' 1));  				}  				else  					spc.Add (s [t]);  			}  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: for (var t = 1; t < s.Count; ++t) {  	if (s [t].Contains ("="))  		s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  	if (s [t].Contains ("<"))  		s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  	if (!string.IsNullOrEmpty (s [t])) {  		if (!s [t].Contains ("<")) {  			if (s [t] == s.Last ()) {  				if (s [t].Contains ("/>"))  					spc.Add (s [t].Remove (s [t].Length - 2' 2));  				else  					spc.Add (s [t].Remove (s [t].Length - 1' 1));  			}  			else  				spc.Add (s [t]);  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: for (var t = 1; t < s.Count; ++t) {  	if (s [t].Contains ("="))  		s [t] = s [t].Remove (s [t].IndexOf ("=")' 1);  	if (s [t].Contains ("<"))  		s [t] = s [t].Remove (s [t].IndexOf ("<")' 1);  	if (!string.IsNullOrEmpty (s [t])) {  		if (!s [t].Contains ("<")) {  			if (s [t] == s.Last ()) {  				if (s [t].Contains ("/>"))  					spc.Add (s [t].Remove (s [t].Length - 2' 2));  				else  					spc.Add (s [t].Remove (s [t].Length - 1' 1));  			}  			else  				spc.Add (s [t]);  		}  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!string.IsNullOrEmpty (s [t])) {  	if (!s [t].Contains ("<")) {  		if (s [t] == s.Last ()) {  			if (s [t].Contains ("/>"))  				spc.Add (s [t].Remove (s [t].Length - 2' 2));  			else  				spc.Add (s [t].Remove (s [t].Length - 1' 1));  		}  		else  			spc.Add (s [t]);  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!string.IsNullOrEmpty (s [t])) {  	if (!s [t].Contains ("<")) {  		if (s [t] == s.Last ()) {  			if (s [t].Contains ("/>"))  				spc.Add (s [t].Remove (s [t].Length - 2' 2));  			else  				spc.Add (s [t].Remove (s [t].Length - 1' 1));  		}  		else  			spc.Add (s [t]);  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!s [t].Contains ("<")) {  	if (s [t] == s.Last ()) {  		if (s [t].Contains ("/>"))  			spc.Add (s [t].Remove (s [t].Length - 2' 2));  		else  			spc.Add (s [t].Remove (s [t].Length - 1' 1));  	}  	else  		spc.Add (s [t]);  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (!s [t].Contains ("<")) {  	if (s [t] == s.Last ()) {  		if (s [t].Contains ("/>"))  			spc.Add (s [t].Remove (s [t].Length - 2' 2));  		else  			spc.Add (s [t].Remove (s [t].Length - 1' 1));  	}  	else  		spc.Add (s [t]);  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (s [t] == s.Last ()) {  	if (s [t].Contains ("/>"))  		spc.Add (s [t].Remove (s [t].Length - 2' 2));  	else  		spc.Add (s [t].Remove (s [t].Length - 1' 1));  }  else  	spc.Add (s [t]);  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (s [t] == s.Last ()) {  	if (s [t].Contains ("/>"))  		spc.Add (s [t].Remove (s [t].Length - 2' 2));  	else  		spc.Add (s [t].Remove (s [t].Length - 1' 1));  }  else  	spc.Add (s [t]);  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (s [t].Contains ("/>"))  	spc.Add (s [t].Remove (s [t].Length - 2' 2));  else  	spc.Add (s [t].Remove (s [t].Length - 1' 1));  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: if (s [t].Contains ("/>"))  	spc.Add (s [t].Remove (s [t].Length - 2' 2));  else  	spc.Add (s [t].Remove (s [t].Length - 1' 1));  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: spc.Add (s [t].Remove (s [t].Length - 2' 2));  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: spc.Add (s [t].Remove (s [t].Length - 2' 2));  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: for (var n = 0; n < end; n += 2) {  	var first = split [n].Replace ("/"' "").Replace (">"' "");  	var last = split [n + 1].Replace ("\""' "");  	if (!string.IsNullOrEmpty (first)) {  		Console.WriteLine ("key = {0}' value = {1}"' first' last);  		dict.Add (first' last);  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessMakeDict,The following statement contains a magic number: n += 2
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: switch (type) {  case UITypes.Label:  	if (!string.IsNullOrEmpty (val)) {  		if (val == "textColor") {  			var colType = dict.GetKeyValue ("cocoaTouchSystemColor");  			if (!string.IsNullOrEmpty (colType)) {  				ProcessSystemColor (colType);  			}  		}  	}  	break;  case UITypes.Button:  	if (val == "titleColor") {  		var col = dict.GetKeyValue ("red"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("green"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("blue"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("alpha"' "1");  		if (!string.IsNullOrEmpty (col))  			ui.ColorA = col;  		col = dict.GetKeyValue ("white"' "0");  		if (!string.IsNullOrEmpty (col)) {  			ui.ColorW = col;  			ui.ColorB = ui.ColorG = ui.ColorR = "255";  		}  	}  	break;  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: switch (type) {  case UITypes.Label:  	if (!string.IsNullOrEmpty (val)) {  		if (val == "textColor") {  			var colType = dict.GetKeyValue ("cocoaTouchSystemColor");  			if (!string.IsNullOrEmpty (colType)) {  				ProcessSystemColor (colType);  			}  		}  	}  	break;  case UITypes.Button:  	if (val == "titleColor") {  		var col = dict.GetKeyValue ("red"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("green"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("blue"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("alpha"' "1");  		if (!string.IsNullOrEmpty (col))  			ui.ColorA = col;  		col = dict.GetKeyValue ("white"' "0");  		if (!string.IsNullOrEmpty (col)) {  			ui.ColorW = col;  			ui.ColorB = ui.ColorG = ui.ColorR = "255";  		}  	}  	break;  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: switch (type) {  case UITypes.Label:  	if (!string.IsNullOrEmpty (val)) {  		if (val == "textColor") {  			var colType = dict.GetKeyValue ("cocoaTouchSystemColor");  			if (!string.IsNullOrEmpty (colType)) {  				ProcessSystemColor (colType);  			}  		}  	}  	break;  case UITypes.Button:  	if (val == "titleColor") {  		var col = dict.GetKeyValue ("red"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("green"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("blue"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("alpha"' "1");  		if (!string.IsNullOrEmpty (col))  			ui.ColorA = col;  		col = dict.GetKeyValue ("white"' "0");  		if (!string.IsNullOrEmpty (col)) {  			ui.ColorW = col;  			ui.ColorB = ui.ColorG = ui.ColorR = "255";  		}  	}  	break;  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (val == "titleColor") {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (val == "titleColor") {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (val == "titleColor") {  	var col = dict.GetKeyValue ("red"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("green"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("blue"' "0");  	if (!string.IsNullOrEmpty (col))  		ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  	col = dict.GetKeyValue ("alpha"' "1");  	if (!string.IsNullOrEmpty (col))  		ui.ColorA = col;  	col = dict.GetKeyValue ("white"' "0");  	if (!string.IsNullOrEmpty (col)) {  		ui.ColorW = col;  		ui.ColorB = ui.ColorG = ui.ColorR = "255";  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: if (!string.IsNullOrEmpty (col))  	ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following statement contains a magic number: ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessRGBAColor,The following statement contains a magic number: if (col.Count > 1) {  	ui.ColorA = col [3];  	ui.ColorR = col [0];  	ui.ColorG = col [1];  	ui.ColorB = col [2];  }  else  	ui.ColorW = col [0];  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessRGBAColor,The following statement contains a magic number: if (col.Count > 1) {  	ui.ColorA = col [3];  	ui.ColorR = col [0];  	ui.ColorG = col [1];  	ui.ColorB = col [2];  }  else  	ui.ColorW = col [0];  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessRGBAColor,The following statement contains a magic number: ui.ColorA = col [3];  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessRGBAColor,The following statement contains a magic number: ui.ColorB = col [2];  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: using (var writer = File.AppendText (outfile)) {  	writer.WriteLine (string.Format ("<{0}"' ui.UIElement));  	if (!string.IsNullOrEmpty (ui.UIName))  		writer.WriteLine (string.Format ("x:Name=\"{0}\""' ui.UIName));  	if (ui.UIElement != "imageview") {  		if (!string.IsNullOrEmpty (ui.Text))  			writer.WriteLine (string.Format ("Text=\"{0}\""' ui.Text));  		if (!string.IsNullOrEmpty (ui.FontSize))  			writer.WriteLine (string.Format ("TextSize=\"{0}\""' ui.FontSize));  		if (!string.IsNullOrEmpty (ui.FontStyle))  			writer.WriteLine (string.Format ("FontFamily=\"{0}\""' ui.FontStyle));  	}  	else {  		writer.WriteLine (string.Format ("Source=\"{0}\"")' ui.ImageName);  	}  	writer.WriteLine (string.Format ("AbsoluteLayout.LayoutBounds=\"{0}'{1}'{2}'{3}\""' ui.UIXPos' ui.UIYPos' ui.UIWidth' ui.UIHeight));  	//if (ui.UIElement != "scrollView")  	//{  	if (!string.IsNullOrEmpty (ui.BackgroundColor))  		writer.WriteLine (string.Format ("BackgroundColor=\"{0}\""' ui.BackgroundColor));  	if (!string.IsNullOrEmpty (ui.TextColor))  		writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  	else {  		if (string.IsNullOrEmpty (ui.ColorA)) {  			if (!string.IsNullOrEmpty (ui.ColorB)) {  				int r = (int)(255 * double.Parse (ui.ColorR));  				int g = (int)(255 * double.Parse (ui.ColorG));  				int b = (int)(255 * double.Parse (ui.ColorB));  				writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  			}  		}  		else {  			int a = (int)(255 * double.Parse (ui.ColorA));  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	//}  	writer.WriteLine ("/>");  	writer.WriteLine ();  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.TextColor))  	writer.WriteLine (string.Format ("TextColor=\"{0}\""' ui.TextColor));  else {  	if (string.IsNullOrEmpty (ui.ColorA)) {  		if (!string.IsNullOrEmpty (ui.ColorB)) {  			int r = (int)(255 * double.Parse (ui.ColorR));  			int g = (int)(255 * double.Parse (ui.ColorG));  			int b = (int)(255 * double.Parse (ui.ColorB));  			writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  		}  	}  	else {  		int a = (int)(255 * double.Parse (ui.ColorA));  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (string.IsNullOrEmpty (ui.ColorA)) {  	if (!string.IsNullOrEmpty (ui.ColorB)) {  		int r = (int)(255 * double.Parse (ui.ColorR));  		int g = (int)(255 * double.Parse (ui.ColorG));  		int b = (int)(255 * double.Parse (ui.ColorB));  		writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  	}  }  else {  	int a = (int)(255 * double.Parse (ui.ColorA));  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}{3}\""' a.ToString ("X")' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.ColorB)) {  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.ColorB)) {  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Magic Number,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,OutputUIElement,The following statement contains a magic number: if (!string.IsNullOrEmpty (ui.ColorB)) {  	int r = (int)(255 * double.Parse (ui.ColorR));  	int g = (int)(255 * double.Parse (ui.ColorG));  	int b = (int)(255 * double.Parse (ui.ColorB));  	writer.WriteLine (string.Format ("TextColor=\"#{0}{1}{2}\""' r.ToString ("X")' g.ToString ("X")' b.ToString ("X")));  }  
Missing Default,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessNode,The following switch statement is missing a default case: switch (ui.UIElement) {  case "Button":  	ProcessButton (doc);  	OutputUIElement (ui);  	ui = null;  	break;  case "Label":  	ProcessLabel (doc);  	OutputUIElement (ui);  	ui = null;  	break;  case "Image":  	ProcessImage (doc);  	OutputUIElement (ui);  	ui = null;  	break;  case "Entry":  	ProcessEntry (doc);  	OutputUIElement (ui);  	ui = null;  	break;  case "TextView":  	ProcessTextView (doc);  	OutputUIElement (ui);  	ui = null;  	break;  }  
Missing Default,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessColor,The following switch statement is missing a default case: switch (type) {  case UITypes.Label:  	if (!string.IsNullOrEmpty (val)) {  		if (val == "textColor") {  			var colType = dict.GetKeyValue ("cocoaTouchSystemColor");  			if (!string.IsNullOrEmpty (colType)) {  				ProcessSystemColor (colType);  			}  		}  	}  	break;  case UITypes.Button:  	if (val == "titleColor") {  		var col = dict.GetKeyValue ("red"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorR = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("green"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorG = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("blue"' "0");  		if (!string.IsNullOrEmpty (col))  			ui.ColorB = ((int)(Convert.ToDouble (col) * 255)).ToString ();  		col = dict.GetKeyValue ("alpha"' "1");  		if (!string.IsNullOrEmpty (col))  			ui.ColorA = col;  		col = dict.GetKeyValue ("white"' "0");  		if (!string.IsNullOrEmpty (col)) {  			ui.ColorW = col;  			ui.ColorB = ui.ColorG = ui.ColorR = "255";  		}  	}  	break;  }  
Missing Default,xib2xaml,Converter,C:\repos\nodoid_xaml-utils\xib2xaml\xib2xaml\Program.cs,ProcessSystemColor,The following switch statement is missing a default case: switch (colType) {  case "darkTextColor":  case "blackColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "0";  	break;  case "lightTextColor":  case "clearColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "0";  	ui.ColorA = colType == "clearColor" ? "0" : "0.6";  	break;  case "darkGrayColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "84";  	break;  case "lightGrayColor":  case "tableSeparatorDarkColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "170";  	break;  case "grayColor":  case "tableCellGrayTextColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "127";  	break;  case "redColor":  	ui.ColorR = "255";  	ui.ColorB = ui.ColorG = "0";  	break;  case "greenColor":  	ui.ColorG = "255";  	ui.ColorB = ui.ColorR = "0";  	break;  case "blueColor":  	ui.ColorB = "255";  	ui.ColorR = ui.ColorG = "0";  	break;  case "cyanColor":  	ui.ColorG = ui.ColorB = "255";  	ui.ColorR = "0";  	break;  case "yellowColor":  	ui.ColorR = ui.ColorG = "255";  	ui.ColorB = "0";  	break;  case "magentaColor":  	ui.ColorR = ui.ColorB = "255";  	ui.ColorG = "0";  	break;  case "orangeColor":  	ui.ColorR = "255";  	ui.ColorG = "127";  	ui.ColorB = "0";  	break;  case "purpleColor":  	ui.ColorR = ui.ColorB = "127";  	ui.ColorG = "0";  	break;  case "brownColor":  	ui.ColorR = "153";  	ui.ColorG = "102";  	ui.ColorB = "51";  	break;  case "tableSeparatorLightColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "224";  	break;  case "tableBackgroundColor":  case "tableCellPlainBackgroundColor":  case "tableCellGroupedBackgroundColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "255";  	break;  case "tableSelectionColor":  	ui.ColorR = "40";  	ui.ColorG = "110";  	ui.ColorB = "212";  	break;  case "selectionListBorderColor":  	ui.ColorR = "133";  	ui.ColorG = "143";  	ui.ColorB = "148";  	ui.ColorA = "0.6";  	break;  case "selectionHeaderBackgroundColor":  	ui.ColorR = "230";  	ui.ColorG = "237";  	ui.ColorB = "252";  	break;  case "selectionHeaderBorderColor":  	ui.ColorR = "217";  	ui.ColorG = "222";  	ui.ColorB = "232";  	break;  case "tableCellBlueTextColor":  	ui.ColorR = "56";  	ui.ColorG = "84";  	ui.ColorB = "135";  	break;  case "textFieldAtomBlueColor":  	ui.ColorR = "41";  	ui.ColorG = "87";  	ui.ColorB = "255";  	break;  case "textFieldAtomPurpleColor":  	ui.ColorR = "105";  	ui.ColorG = "0";  	ui.ColorB = "189";  	break;  case "infoTextOverPinStripeTextColor":  	ui.ColorR = "77";  	ui.ColorG = "87";  	ui.ColorB = "107";  	break;  case "tableCellValue1BlueColor":  	ui.ColorR = "56";  	ui.ColorG = "84";  	ui.ColorB = "135";  	break;  case "tableCellValue2BlueColor":  	ui.ColorR = "82";  	ui.ColorG = "102";  	ui.ColorB = "145";  	break;  case "tableGroupedSeparatorLightColor":  case "tableGroupedTopShadowColor":  	ui.ColorR = ui.ColorB = ui.ColorG = "0";  	ui.ColorA = colType == "tableGroupedSeparatorLightColor" ? ".18" : ".8";  	break;  case "tableShadowColor":  	ui.ColorR = ui.ColorG = "255";  	ui.ColorB = "232";  	break;  case "selectionTintColor":  	ui.ColorR = "0";  	ui.ColorG = "84";  	ui.ColorB = "166";  	ui.ColorA = ".2";  	break;  case "textCaretColor":  	ui.ColorR = "105";  	ui.ColorG = "79";  	ui.ColorB = "69";  	break;  case "selectionCaretColor":  	ui.ColorR = "66";  	ui.ColorG = "107";  	ui.ColorB = "242";  	break;  case "selectionHighlightColor":  	ui.ColorR = "112";  	ui.ColorG = "149";  	ui.ColorB = "252";  	ui.ColorA = ".18";  	break;  case "tableSelectionGradientStartColor":  	ui.ColorR = "5";  	ui.ColorG = "140";  	ui.ColorB = "245";  	break;  case "tableSelectionGradientEndColor":  	ui.ColorR = "10";  	ui.ColorG = "94";  	ui.ColorB = "232";  	break;  }  
