Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RazorGenerator.Core,DirectivesBasedTransformers,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\DirectivesBasedTransformers.cs,Initialize,Cyclomatic complexity of the method is 10
Long Parameter List,RazorGenerator.Core,MvcCSharpCodeGenerator,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,MvcCSharpCodeGenerator,The method has 5 parameters. Parameters: className' baseClass' rootNamespaceName' sourceFileName' host
Long Parameter List,RazorGenerator.Core,MvcVBDotNetCodeGenerator,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,MvcVBDotNetCodeGenerator,The method has 5 parameters. Parameters: className' baseClass' rootNamespaceName' sourceFileName' host
Long Parameter List,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,RazorHost,The method has 5 parameters. Parameters: baseRelativePath' fullPath' codeTransformer' codeDomProvider' directives
Long Parameter List,RazorGenerator.Core.Mvc3,RazorHostProvider,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHostProvider.cs,GetRazorHost,The method has 5 parameters. Parameters: projectRelativePath' fullPath' codeTransformer' codeDomProvider' directives
Long Identifier,RazorGenerator.Core,DirectivesBasedTransformers,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\DirectivesBasedTransformers.cs,,The length of the parameter GenerateAbsolutePathLinePragmas is 31.
Long Identifier,RazorGenerator.Core,TemplateCodeTransformer,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\TemplateTransformer.cs,,The length of the parameter GenerationEnvironmentPropertyName is 33.
Long Statement,RazorGenerator.Core,AddPageVirtualPathAttribute,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\AddPageVirtualPathAttribute.cs,ProcessGeneratedCode,The length of the statement  "                virtualPath = _overriddenVirtualPath ?? VirtualPathUtility.ToAppRelative("~/" + _projectRelativePath.TrimStart(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar)); " is 173.
Long Statement,RazorGenerator.Core,MvcWebConfigTransformer,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\MvcWebConfigTransformer.cs,Initialize,The length of the statement  "            string projectPath = GetProjectRoot(razorHost.ProjectRelativePath' razorHost.FullPath).TrimEnd(Path.DirectorySeparatorChar); " is 124.
Long Statement,RazorGenerator.Core,SetTypeVisibility,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\SetTypeVisibility.cs,ProcessGeneratedCode,The length of the statement  "                generatedClass.TypeAttributes = generatedClass.TypeAttributes & ~TypeAttributes.VisibilityMask | TypeAttributes.NestedFamANDAssem; " is 130.
Long Statement,RazorGenerator.Core,MvcViewTransformer,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,Initialize,The length of the statement  "                    razorHost.CodeGenerator = new MvcCSharpCodeGenerator(razorHost.DefaultClassName' razorHost.DefaultBaseClass' razorHost.DefaultNamespace' razorHost.FullPath'razorHost); " is 167.
Long Statement,RazorGenerator.Core,MvcViewTransformer,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,Initialize,The length of the statement  "                    razorHost.CodeGenerator = new MvcVBDotNetCodeGenerator(razorHost.DefaultClassName' razorHost.DefaultBaseClass' razorHost.DefaultNamespace' razorHost.FullPath' razorHost); " is 170.
Long Statement,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The length of the statement  "                    results = engine.GenerateCode(reader' className: DefaultClassName' rootNamespace: DefaultNamespace' sourceFileName: _fullPath); " is 127.
Virtual Method Call from Constructor,RazorGenerator.Core,MvcCSharpCodeGenerator,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,MvcCSharpCodeGenerator,The constructor "MvcCSharpCodeGenerator" calls a virtual method "BuildGenericTypeReference".
Virtual Method Call from Constructor,RazorGenerator.Core,MvcVBDotNetCodeGenerator,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\ExportedTransformers\MvcViewTransformer.cs,MvcVBDotNetCodeGenerator,The constructor "MvcVBDotNetCodeGenerator" calls a virtual method "BuildGenericTypeReference".
Empty Catch Block,RazorGenerator.Core,MvcWebConfigTransformer,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\CodeTransformers\MvcWebConfigTransformer.cs,Initialize,The method has an empty catch block.
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  Stream stream = File.OpenRead(_fullPath);                  using (var reader = new StreamReader(stream' Encoding.Default' detectEncodingFromByteOrderMarks: true))                  {                      results = engine.GenerateCode(reader' className: DefaultClassName' rootNamespace: DefaultNamespace' sourceFileName: _fullPath);                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: foreach (RazorError error in results.ParserErrors)              {                  OnGenerateError(4' error.Message' (uint)error.Location.LineIndex + 1' (uint)error.Location.CharacterIndex + 1);              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  OnCodeCompletion(50' 100);                    using (StringWriter writer = new StringWriter())                  {                      CodeGeneratorOptions options = new CodeGeneratorOptions();                      options.BlankLinesBetweenMembers = false;                      options.BracingStyle = "C";                        //Generate the code                      writer.WriteLine(CodeLanguageUtil.GetPreGeneratedCodeBlock());                      _codeDomProvider.GenerateCodeFromCompileUnit(results.GeneratedCode' writer' options);                      writer.WriteLine(CodeLanguageUtil.GetPostGeneratedCodeBlock());                        OnCodeCompletion(100' 100);                      writer.Flush();                        // Perform output transformations and return                      string codeContent = writer.ToString();                      codeContent = _codeTransformer.ProcessOutput(codeContent);                      return codeContent;                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  OnCodeCompletion(50' 100);                    using (StringWriter writer = new StringWriter())                  {                      CodeGeneratorOptions options = new CodeGeneratorOptions();                      options.BlankLinesBetweenMembers = false;                      options.BracingStyle = "C";                        //Generate the code                      writer.WriteLine(CodeLanguageUtil.GetPreGeneratedCodeBlock());                      _codeDomProvider.GenerateCodeFromCompileUnit(results.GeneratedCode' writer' options);                      writer.WriteLine(CodeLanguageUtil.GetPostGeneratedCodeBlock());                        OnCodeCompletion(100' 100);                      writer.Flush();                        // Perform output transformations and return                      string codeContent = writer.ToString();                      codeContent = _codeTransformer.ProcessOutput(codeContent);                      return codeContent;                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  OnCodeCompletion(50' 100);                    using (StringWriter writer = new StringWriter())                  {                      CodeGeneratorOptions options = new CodeGeneratorOptions();                      options.BlankLinesBetweenMembers = false;                      options.BracingStyle = "C";                        //Generate the code                      writer.WriteLine(CodeLanguageUtil.GetPreGeneratedCodeBlock());                      _codeDomProvider.GenerateCodeFromCompileUnit(results.GeneratedCode' writer' options);                      writer.WriteLine(CodeLanguageUtil.GetPostGeneratedCodeBlock());                        OnCodeCompletion(100' 100);                      writer.Flush();                        // Perform output transformations and return                      string codeContent = writer.ToString();                      codeContent = _codeTransformer.ProcessOutput(codeContent);                      return codeContent;                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  OnCodeCompletion(50' 100);                    using (StringWriter writer = new StringWriter())                  {                      CodeGeneratorOptions options = new CodeGeneratorOptions();                      options.BlankLinesBetweenMembers = false;                      options.BracingStyle = "C";                        //Generate the code                      writer.WriteLine(CodeLanguageUtil.GetPreGeneratedCodeBlock());                      _codeDomProvider.GenerateCodeFromCompileUnit(results.GeneratedCode' writer' options);                      writer.WriteLine(CodeLanguageUtil.GetPostGeneratedCodeBlock());                        OnCodeCompletion(100' 100);                      writer.Flush();                        // Perform output transformations and return                      string codeContent = writer.ToString();                      codeContent = _codeTransformer.ProcessOutput(codeContent);                      return codeContent;                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
Magic Number,RazorGenerator.Core,RazorHost,C:\repos\RazorGenerator_RazorGenerator\RazorGenerator.Core.v1\RazorHost.cs,GenerateCode,The following statement contains a magic number: try              {                  OnCodeCompletion(50' 100);                    using (StringWriter writer = new StringWriter())                  {                      CodeGeneratorOptions options = new CodeGeneratorOptions();                      options.BlankLinesBetweenMembers = false;                      options.BracingStyle = "C";                        //Generate the code                      writer.WriteLine(CodeLanguageUtil.GetPreGeneratedCodeBlock());                      _codeDomProvider.GenerateCodeFromCompileUnit(results.GeneratedCode' writer' options);                      writer.WriteLine(CodeLanguageUtil.GetPostGeneratedCodeBlock());                        OnCodeCompletion(100' 100);                      writer.Flush();                        // Perform output transformations and return                      string codeContent = writer.ToString();                      codeContent = _codeTransformer.ProcessOutput(codeContent);                      return codeContent;                  }              }              catch (Exception e)              {                  OnGenerateError(4' e.ToString()' 1' 1);                  //Returning null signifies that generation has failed                  return null;              }
