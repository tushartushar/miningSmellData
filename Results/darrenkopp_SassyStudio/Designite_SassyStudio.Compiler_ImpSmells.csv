Implementation smell,Namespace,Class,File,Method,Description
Long Method,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,TryCreateToken,The method has 163 lines of code.
Complex Method,SassyStudio.Compiler,ReverseSearch,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\ReverseSearch.cs,Find,Cyclomatic complexity of the method is 14
Complex Method,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,Cyclomatic complexity of the method is 10
Complex Method,SassyStudio.Compiler.Parsing,ForLoopDirective,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ForLoopDirective.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,TryCreate,Cyclomatic complexity of the method is 13
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,Cyclomatic complexity of the method is 14
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateAtRule,Cyclomatic complexity of the method is 17
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsRuleSet,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,MediaQueryExpression,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MediaQueryExpression.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,MixinDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinDefinition.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing,MixinReference,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinReference.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,SassyStudio.Compiler.Parsing,PropertyDeclaration,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\PropertyDeclaration.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,SassyStudio.Compiler.Parsing,RuleSet,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\RuleSet.cs,IsValidRuleSet,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing,UserFunctionDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\UserFunctionDefinition.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing,VariableDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\VariableDefinition.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,TryCreateToken,Cyclomatic complexity of the method is 37
Complex Method,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeString,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing.Rules,KeyframeSelector,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\KeyframeSelector.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing.Selectors,AttributeSelector,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Selectors\AttributeSelector.cs,ParseSelectorToken,Cyclomatic complexity of the method is 8
Long Parameter List,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateItem,The method has 5 parameters. Parameters: itemFactory' text' stream' parent' type
Long Parameter List,SassyStudio.Compiler.Parsing,ISassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ISassItemFactory.cs,CreateItem,The method has 5 parameters. Parameters: itemFactory' text' stream' parent' type
Long Statement,SassyStudio.Compiler.Parsing,Function,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Function.cs,IsFunctionCall,The length of the statement  "            return stream.Current.Type == TokenType.Function || (stream.Current.Type == TokenType.Identifier && stream.Peek(1).Type == TokenType.OpenFunctionBrace); " is 152.
Long Statement,SassyStudio.Compiler.Parsing,MediaQuery,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MediaQuery.cs,Parse,The length of the statement  "            if (stream.Current.Type == TokenType.Identifier && IsModifier(text.GetText(stream.Current.Start' stream.Current.Length))) " is 121.
Long Statement,SassyStudio.Compiler.Parsing.Rules,KeyframeSelector,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\KeyframeSelector.cs,Parse,The length of the statement  "            if (stream.Current.Type == TokenType.Identifier && IsValidNamedRange(text.GetText(stream.Current.Start' stream.Current.Length))) " is 128.
Complex Conditional,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The conditional expression  "value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex(text' value)"  is complex.
Complex Conditional,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsHex,The conditional expression  "!(char.IsDigit(c) || ((c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')))"  is complex.
Complex Conditional,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsHexDigit,The conditional expression  "(c < '0' || c > '9') && (c < 'a' || c > 'f')"  is complex.
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateImport,The following statement contains a magic number: var filename = stream.Peek(2);
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateImport,The following statement contains a magic number: var preamble = text.GetText(filename.Start' 9).Trim('"'' '\'');
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateImport,The following statement contains a magic number: var next = stream.Peek(3);
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateVariableDefinitionOrReference,The following statement contains a magic number: var assignment = stream.Peek(2);
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The following statement contains a magic number: value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex(text' value)
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The following statement contains a magic number: value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex(text' value)
Magic Number,SassyStudio.Compiler.Parsing,NamedFunctionArgument,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\NamedFunctionArgument.cs,IsNamedArgument,The following statement contains a magic number: return VariableName.IsVariable(text' stream) && stream.Peek(2).Type == TokenType.Colon;
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: stream.Advance(3);
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: tokens.Add(Token.Create(TokenType.XmlDocumentationComment' start' 3));
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: next == '/' && stream.Peek(2) == '/'
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: tokens.Add(Token.Create(TokenType.OpenInterpolation' stream.Position' 2));
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: stream.Advance(2);
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (stream.Peek(1) == '+' && (IsHexDigit(stream.Peek(2)) || stream.Peek(2) == '?'))                  {                      stream.Advance(3);                      int hexPosition = 1;                      while (hexPosition < 6)                      {                          if (!IsHexDigit(stream.Current))                              break;                            hexPosition++;                          stream.Advance();                      }                        if (stream.Current == '-' && IsHexDigit(stream.Peek(1)))                      {                          stream.Advance(2);                          hexPosition = 1;                          while (hexPosition < 6)                          {                              if (!IsHexDigit(stream.Current))                                  break;                          }                            hexPosition++;                          stream.Advance();                      }                        return start != stream.Position;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeLessThanSign,The following statement contains a magic number: stream.Advance(3);
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeLessThanSign,The following statement contains a magic number: stream.Current == '!' && stream.Peek(1) == '-' && stream.Peek(2) == '-'
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,HandleHyphen,The following statement contains a magic number: stream.Advance(2);
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,HandleHyphen,The following statement contains a magic number: stream.Peek(1) == '-' && stream.Peek(2) == '>'
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (IsNameStart(stream.Current))                  {                      stream.Advance();                      ConsumeNameCharacters(stream);                        return true;                  }                    if (stream.Current == '-')                  {                      if (IsNameStart(stream.Peek(1)))                      {                          stream.Advance();                          ConsumeNameCharacters(stream);                          return true;                      }                        if (IsValidEscape(stream.Peek(1)' stream.Peek(2)))                      {                          stream.Advance(2);                          ConsumeNameCharacters(stream);                          return true;                      }                  }                    if (IsValidEscape(stream.Current' stream.Peek(1)))                  {                      stream.Advance(2);                      ConsumeNameCharacters(stream);                      return true;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (IsNameStart(stream.Current))                  {                      stream.Advance();                      ConsumeNameCharacters(stream);                        return true;                  }                    if (stream.Current == '-')                  {                      if (IsNameStart(stream.Peek(1)))                      {                          stream.Advance();                          ConsumeNameCharacters(stream);                          return true;                      }                        if (IsValidEscape(stream.Peek(1)' stream.Peek(2)))                      {                          stream.Advance(2);                          ConsumeNameCharacters(stream);                          return true;                      }                  }                    if (IsValidEscape(stream.Current' stream.Peek(1)))                  {                      stream.Advance(2);                      ConsumeNameCharacters(stream);                      return true;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext(start =>              {                  if (IsNameStart(stream.Current))                  {                      stream.Advance();                      ConsumeNameCharacters(stream);                        return true;                  }                    if (stream.Current == '-')                  {                      if (IsNameStart(stream.Peek(1)))                      {                          stream.Advance();                          ConsumeNameCharacters(stream);                          return true;                      }                        if (IsValidEscape(stream.Peek(1)' stream.Peek(2)))                      {                          stream.Advance(2);                          ConsumeNameCharacters(stream);                          return true;                      }                  }                    if (IsValidEscape(stream.Current' stream.Peek(1)))                  {                      stream.Advance(2);                      ConsumeNameCharacters(stream);                      return true;                  }                    return false;              });
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsNonAscii,The following statement contains a magic number: return (int)c >= 80;
Magic Number,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,DetermineIdentifierType,The following statement contains a magic number: stream.Advance(3);
Missing Default,SassyStudio.Compiler.Parsing,BlockItem,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\BlockItem.cs,IsTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.CloseCurlyBrace:                  case TokenType.OpenCurlyBrace:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.Ampersand: return new ParentReferenceSelector();                  case TokenType.Asterisk: return new UniversalSelector();                  case TokenType.Period: return new ClassSelector();                  case TokenType.Hash: return new IdSelector();                  case TokenType.Identifier: return new TypeSelector();                  case TokenType.OpenBrace: return new AttributeSelector();                  case TokenType.DoubleColon: return new PseudoElementSelector();                  case TokenType.PercentSign: return new ExtendOnlySelector();              }
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,The following switch statement is missing a default case: switch (next.Type)                  {                      case TokenType.Identifier: return new PseudoClassSelector();                      case TokenType.Function: return new PseudoFunctionSelector();                  }
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateDocumentationTag,The following switch statement is missing a default case: switch (text.GetText(next.Start' next.Length))                  {                      case "reference": return new FileReferenceTag();                  }
Missing Default,SassyStudio.Compiler.Parsing,Function,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Function.cs,IsTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.CloseFunctionBrace:                  case TokenType.Comma:                  case TokenType.OpenCurlyBrace:                  case TokenType.Semicolon:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,FunctionArgument,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\FunctionArgument.cs,IsTerminator,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.EndOfFile:                  case TokenType.Comma:                  case TokenType.CloseFunctionBrace:                  case TokenType.Semicolon:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,TryCreate,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.EndOfFile:                      item = null;                      return false;                  case TokenType.StartOfFile:                      item = Create<Stylesheet>(parent' text' stream);                      break;                  case TokenType.NewLine:                      item = new TokenItem();                      break;                  case TokenType.String:                  case TokenType.BadString:                      item = new StringValue();                      break;                  case TokenType.OpenCssComment:                      item = new CssComment();                      break;                  case TokenType.CppComment:                      item = new CppComment();                      break;                  case TokenType.OpenHtmlComment:                      item = new HtmlComment();                      break;                  case TokenType.At:                      item = CreateAtRule(parent' text' stream);                      break;                  case TokenType.Dollar:                      item = CreateVariableDefinitionOrReference(parent' text' stream);                      break;                  case TokenType.Bang:                      item = CreateBang(parent' text' stream);                      break;                  case TokenType.Function:                      item = CreateFunction(parent' text' stream);                      break;                  case TokenType.XmlDocumentationComment:                      item = new XmlDocumentationComment();                      break;                  case TokenType.Asterisk:                  case TokenType.GreaterThan:                  case TokenType.Tilde:                  case TokenType.Colon:                  case TokenType.DoubleColon:                  case TokenType.Ampersand:                  case TokenType.OpenBrace:                  case TokenType.Hash:                  case TokenType.Period:                  case TokenType.Identifier:                  case TokenType.OpenInterpolation:                      item = CreateBestFittingItem(parent' text' stream);                      break;              }
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateValueItem,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.OpenInterpolation:                      return new StringInterpolation();                  case TokenType.Hash:                      return CreateHash(parent' text' stream);              }
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.Asterisk: return new UniversalSelector();                  case TokenType.Period: return new ClassSelector();                  case TokenType.Hash: return new IdSelector();                  case TokenType.Identifier: return new TypeSelector();                  case TokenType.OpenBrace: return new AttributeSelector();                  case TokenType.DoubleColon: return new PseudoElementSelector();                  case TokenType.GreaterThan: return new ChildCombinator();                  case TokenType.Plus: return new AdjacentSiblingCombinator();                  case TokenType.Tilde: return new GeneralSiblingCombinator();                  case TokenType.Ampersand: return new ParentReferenceSelector();                  case TokenType.OpenInterpolation: return new StringInterpolationSelector();                  case TokenType.PercentSign: return new ExtendOnlySelector();              }
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,The following switch statement is missing a default case: switch (next.Type)                  {                      case TokenType.Identifier: return new PseudoClassSelector();                      case TokenType.Function: return new PseudoFunctionSelector();                  }
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsRuleSet,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.OpenInterpolation:                      return true;                  case TokenType.Asterisk:                  case TokenType.Identifier:                  case TokenType.OpenBrace:                      validStart = true;                      break;                  case TokenType.Period:                  case TokenType.Hash:                      var next = stream.Peek(1);                      validStart = next.Type == TokenType.Identifier && next.Start == stream.Current.End;                      break;                  // nested combinators and pseudo selectors                  case TokenType.Ampersand:                  case TokenType.GreaterThan:                  case TokenType.Plus:                  case TokenType.Tilde:                  case TokenType.Colon:                  case TokenType.DoubleColon:                      validStart = IsNestedRuleBlock(parent);                      break;              }
Missing Default,SassyStudio.Compiler.Parsing,MixinDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinDefinition.cs,IsArgumentTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.CloseFunctionBrace:                  case TokenType.Comma:                  case TokenType.OpenCurlyBrace:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,CharsetDirective,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\CharsetDirective.cs,ParseDirective,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.String:                      CharacterSet = itemFactory.CreateSpecificParsed<StringValue>(this' text' stream);                      if (CharacterSet != null)                          Children.Add(CharacterSet);                      break;                  case TokenType.Identifier:                      CharacterSet = Children.AddCurrentAndAdvance(stream);                      break;              }
Missing Default,SassyStudio.Compiler.Parsing,SassImportDirective,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\SassImportDirective.cs,IsTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.Semicolon:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,SimpleSelector,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\SimpleSelector.cs,ParseCombinator,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.GreaterThan:                      combinator = new ChildCombinator();                      break;                  case TokenType.Plus:                      combinator = new AdjacentSiblingCombinator();                      break;                  case TokenType.Tilde:                      combinator = new GeneralSiblingCombinator();                      break;              }
Missing Default,SassyStudio.Compiler.Parsing,StringInterpolation,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\StringInterpolation.cs,IsTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.CloseInterpolation:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,UserFunctionDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\UserFunctionDefinition.cs,IsArgumentTerminator,The following switch statement is missing a default case: switch (type)              {                  case TokenType.EndOfFile:                  case TokenType.CloseFunctionBrace:                  case TokenType.Comma:                  case TokenType.OpenCurlyBrace:                      return true;              }
Missing Default,SassyStudio.Compiler.Parsing,VariableDefinition,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\VariableDefinition.cs,IsValueTerminator,The following switch statement is missing a default case: switch (stream.Current.Type)              {                  case TokenType.EndOfFile:                  case TokenType.Bang:                  case TokenType.Semicolon:                  case TokenType.CloseCurlyBrace:                  case TokenType.OpenCurlyBrace:                      return true;              }
Missing Default,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsNonAscii,The following switch statement is missing a default case: switch (c)              {                  case '{':                  case '}':                  case '[':                  case ']':                      return false;              }
Missing Default,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeString,The following switch statement is missing a default case: switch (stream.Current)              {                  case '\'':                  case '"':                  {                      var open = stream.Current;                      while (stream.Advance())                      {                          var current = stream.Current;                          // check for valid escapes                          if (current == '\\')                          {                              // check to see if we are escaping the new line (and thus' continuing the string)                              stream.Advance();                              if (IsNewLine(stream.Current))                              {                                  stream.Advance();                                  continue;                              }                                // if escaping open quote' consume and advance                              if (current == open)                              {                                  stream.Advance();                                  continue;                              }                                if (IsValidEscape('\\'' current))                              {                                  stream.Advance();                                  continue;                              }                          }                            // unescaped new line is bad news bears                          if (IsNewLine(current))                          {                              // go back to right before the new line                              //stream.Reverse(1);                              type = TokenType.BadString;                              return true;                          }                            // happy days' we have properly quoted string                          if (stream.Current == open)                              break;                      }                        // consume closing quote                      if (stream.Current == open)                          stream.Advance();                        type = TokenType.String;                      break;                  }              }
Missing Default,SassyStudio.Compiler.Lexing,Lexer,D:\research\architectureSmells\repos\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeWhitespace,The following switch statement is missing a default case: switch (stream.Current)              {                  case ' ':                  case '\t':                  //case '\f':                  //case '\n':                  //case '\r':                      while (IsWhitespace(stream.Current))                          stream.Advance();                        return true;              }
