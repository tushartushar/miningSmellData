Implementation smell,Namespace,Class,File,Method,Description
Long Method,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,TryCreateToken,The method has 155 lines of code.
Complex Method,SassyStudio.Compiler,ReverseSearch,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\ReverseSearch.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,Cyclomatic complexity of the method is 10
Complex Method,SassyStudio.Compiler.Parsing,ForLoopDirective,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ForLoopDirective.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,TryCreate,Cyclomatic complexity of the method is 49
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,Cyclomatic complexity of the method is 14
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateAtRule,Cyclomatic complexity of the method is 19
Complex Method,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsRuleSet,Cyclomatic complexity of the method is 34
Complex Method,SassyStudio.Compiler.Parsing,MediaQueryExpression,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MediaQueryExpression.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,MixinDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinDefinition.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing,MixinReference,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinReference.cs,Parse,Cyclomatic complexity of the method is 11
Complex Method,SassyStudio.Compiler.Parsing,Parser,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Parser.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,PropertyDeclaration,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\PropertyDeclaration.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,SassyStudio.Compiler.Parsing,PropertyDeclaration,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\PropertyDeclaration.cs,IsDeclaration,Cyclomatic complexity of the method is 13
Complex Method,SassyStudio.Compiler.Parsing,CharsetDirective,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\CharsetDirective.cs,ParseDirective,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing,SimpleSelector,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\SimpleSelector.cs,ParseCombinator,Cyclomatic complexity of the method is 13
Complex Method,SassyStudio.Compiler.Parsing,UserFunctionDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\UserFunctionDefinition.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,SassyStudio.Compiler.Parsing,VariableDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\VariableDefinition.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,Tokenize,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,TryCreateToken,Cyclomatic complexity of the method is 129
Complex Method,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeString,Cyclomatic complexity of the method is 11
Complex Method,SassyStudio.Compiler.Parsing.Rules,KeyframeSelector,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\KeyframeSelector.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,SassyStudio.Compiler.Parsing.Selectors,AttributeSelector,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Selectors\AttributeSelector.cs,ParseSelectorToken,Cyclomatic complexity of the method is 8
Long Parameter List,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateItem,The method has 5 parameters.
Long Parameter List,SassyStudio.Compiler.Parsing,ISassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ISassItemFactory.cs,CreateItem,The method has 5 parameters.
Long Statement,SassyStudio.Compiler,ImportResolver,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\ImportResolver.cs,ResolvePath,The length of the statement  "	return files.Where (x => comparer.Equals (x.Name' filename) || comparer.Equals (x.Name' "_" + filename)).Select (x => x.FullName).FirstOrDefault (); " is 148.
Long Statement,SassyStudio.Compiler,ReverseSearch,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\ReverseSearch.cs,FindInDocument,The length of the statement  "	var candidates = import.Files.Reverse ().Where (x => x.Document != null && x.Document.Stylesheet != null).SelectMany (x => x.Document.Stylesheet.Children.Reverse ()); " is 166.
Long Statement,SassyStudio.Compiler.Parsing,Function,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Function.cs,IsFunctionCall,The length of the statement  "	return stream.Current.Type == TokenType.Function || (stream.Current.Type == TokenType.Identifier && stream.Peek (1).Type == TokenType.OpenFunctionBrace); " is 153.
Long Statement,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,Create,The length of the statement  "	ParseItem item = (ExternalItemFactory != null) ? ExternalItemFactory.CreateItem (this' text' stream' parent' type) : null; " is 122.
Long Statement,SassyStudio.Compiler.Parsing,MediaQuery,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MediaQuery.cs,Parse,The length of the statement  "	if (stream.Current.Type == TokenType.Identifier && IsModifier (text.GetText (stream.Current.Start' stream.Current.Length))) " is 123.
Long Statement,SassyStudio.Compiler.Parsing.Rules,KeyframeSelector,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\KeyframeSelector.cs,Parse,The length of the statement  "	if (stream.Current.Type == TokenType.Identifier && IsValidNamedRange (text.GetText (stream.Current.Start' stream.Current.Length))) { " is 132.
Complex Conditional,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The conditional expression  "value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex (text' value)"  is complex.
Complex Conditional,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsHex,The conditional expression  "!(char.IsDigit (c) || ((c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')))"  is complex.
Complex Conditional,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsHexDigit,The conditional expression  "(c < '0' || c > '9') && (c < 'a' || c > 'f')"  is complex.
Magic Number,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateFunctionArgument,The following statement contains a magic number: if (parent is MixinReference || parent is SystemFunctionReference || parent is UserFunctionReference)  	if (VariableName.IsVariable (text' stream) && stream.Peek (2).Type == TokenType.Colon)  		return new NamedFunctionArgument ();  
Magic Number,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateFunctionArgument,The following statement contains a magic number: if (VariableName.IsVariable (text' stream) && stream.Peek (2).Type == TokenType.Colon)  	return new NamedFunctionArgument ();  
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateImport,The following statement contains a magic number: if ((filename.Type == TokenType.String || filename.Type == TokenType.BadString)) {  	// check to see if import starts with http(s)://  	var preamble = text.GetText (filename.Start' 9).Trim ('"'' '\'');  	if (preamble.StartsWith ("//") || preamble.StartsWith ("http://") || preamble.StartsWith ("https://"))  		return new CssImportDirective ();  	// check for media query  	var next = stream.Peek (3);  	if (next.Type == TokenType.Identifier)  		return new CssImportDirective ();  	// check if we are importing actual css file  	if (text.GetText (filename.Start' filename.Length).Trim ('"'' '\'').EndsWith (".css"))  		return new CssImportDirective ();  }  
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateImport,The following statement contains a magic number: if ((filename.Type == TokenType.String || filename.Type == TokenType.BadString)) {  	// check to see if import starts with http(s)://  	var preamble = text.GetText (filename.Start' 9).Trim ('"'' '\'');  	if (preamble.StartsWith ("//") || preamble.StartsWith ("http://") || preamble.StartsWith ("https://"))  		return new CssImportDirective ();  	// check for media query  	var next = stream.Peek (3);  	if (next.Type == TokenType.Identifier)  		return new CssImportDirective ();  	// check if we are importing actual css file  	if (text.GetText (filename.Start' filename.Length).Trim ('"'' '\'').EndsWith (".css"))  		return new CssImportDirective ();  }  
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateVariableDefinitionOrReference,The following statement contains a magic number: if (name.Type == TokenType.Identifier && stream.Current.End == name.Start) {  	var assignment = stream.Peek (2);  	if (assignment.Type == TokenType.Colon || assignment.Type == TokenType.Equal)  		return new VariableDefinition ();  	return new VariableReference ();  }  
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The following statement contains a magic number: if (value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex (text' value))  	return new HexColorValue ();  
Magic Number,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateHash,The following statement contains a magic number: if (value.Type == TokenType.Identifier && (value.Length == 3 || value.Length == 6) && IsHex (text' value))  	return new HexColorValue ();  
Magic Number,SassyStudio.Compiler.Parsing,NamedFunctionArgument,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\NamedFunctionArgument.cs,IsNamedArgument,The following statement contains a magic number: return VariableName.IsVariable (text' stream) && stream.Peek (2).Type == TokenType.Colon;  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '/') {  	int start = stream.Position;  	var next = stream.Peek (1);  	if (next == '/' && stream.Peek (2) == '/') {  		stream.Advance (3);  		tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  		return true;  	} else if (next == '/') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CppComment' start' 2));  		if (!IsNewLine (stream.Current))  			ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  		return true;  	} else if (next == '*') {  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  		start = stream.Position;  		ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  		if (stream.Current == '*' && stream.Peek (1) == '/') {  			start = stream.Position;  			stream.Advance (2);  			tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  		}  		return true;  	}  	return false;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/' && stream.Peek (2) == '/') {  	stream.Advance (3);  	tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  	return true;  } else if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: stream.Advance (3);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: tokens.Add (Token.Create (TokenType.XmlDocumentationComment' start' 3));  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '/') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CppComment' start' 2));  	if (!IsNewLine (stream.Current))  		ConsumeCommentText (stream' tokens' s => IsNewLine (s.Current));  	return true;  } else if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: tokens.Add (Token.Create (TokenType.CppComment' start' 2));  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (next == '*') {  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  	start = stream.Position;  	ConsumeCommentText (stream' tokens' s => s.Current == '*' && s.Peek (1) == '/');  	if (stream.Current == '*' && stream.Peek (1) == '/') {  		start = stream.Position;  		stream.Advance (2);  		tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: tokens.Add (Token.Create (TokenType.OpenCssComment' start' 2));  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '*' && stream.Peek (1) == '/') {  	start = stream.Position;  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: if (stream.Current == '*' && stream.Peek (1) == '/') {  	start = stream.Position;  	stream.Advance (2);  	tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeComment,The following statement contains a magic number: tokens.Add (Token.Create (TokenType.CloseCssComment' start' 2));  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: if (stream.Current == '#' && stream.Peek (1) == '{') {  	tokens.Add (Token.Create (TokenType.OpenInterpolation' stream.Position' 2));  	stream.Advance (2);  	while (stream.Current != '}' && !IsNewLine (stream.Current)) {  		Token token;  		if (TryCreateToken (stream' out token))  			tokens.Add (token);  	}  	if (stream.Current == '}') {  		tokens.Add (Token.Create (TokenType.CloseInterpolation' stream.Position' 1));  		stream.Advance ();  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: if (stream.Current == '#' && stream.Peek (1) == '{') {  	tokens.Add (Token.Create (TokenType.OpenInterpolation' stream.Position' 2));  	stream.Advance (2);  	while (stream.Current != '}' && !IsNewLine (stream.Current)) {  		Token token;  		if (TryCreateToken (stream' out token))  			tokens.Add (token);  	}  	if (stream.Current == '}') {  		tokens.Add (Token.Create (TokenType.CloseInterpolation' stream.Position' 1));  		stream.Advance ();  	}  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: tokens.Add (Token.Create (TokenType.OpenInterpolation' stream.Position' 2));  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeInterpolation,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  		stream.Advance (3);  		int hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  			hexPosition++;  			stream.Advance ();  		}  		if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  			stream.Advance (2);  			hexPosition = 1;  			while (hexPosition < 6) {  				if (!IsHexDigit (stream.Current))  					break;  			}  			hexPosition++;  			stream.Advance ();  		}  		return start != stream.Position;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Peek (1) == '+' && (IsHexDigit (stream.Peek (2)) || stream.Peek (2) == '?')) {  	stream.Advance (3);  	int hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  		hexPosition++;  		stream.Advance ();  	}  	if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  		stream.Advance (2);  		hexPosition = 1;  		while (hexPosition < 6) {  			if (!IsHexDigit (stream.Current))  				break;  		}  		hexPosition++;  		stream.Advance ();  	}  	return start != stream.Position;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: stream.Advance (3);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: while (hexPosition < 6) {  	if (!IsHexDigit (stream.Current))  		break;  	hexPosition++;  	stream.Advance ();  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  	stream.Advance (2);  	hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  	}  	hexPosition++;  	stream.Advance ();  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: if (stream.Current == '-' && IsHexDigit (stream.Peek (1))) {  	stream.Advance (2);  	hexPosition = 1;  	while (hexPosition < 6) {  		if (!IsHexDigit (stream.Current))  			break;  	}  	hexPosition++;  	stream.Advance ();  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeUnicodeRange,The following statement contains a magic number: while (hexPosition < 6) {  	if (!IsHexDigit (stream.Current))  		break;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeLessThanSign,The following statement contains a magic number: if (stream.Current == '!' && stream.Peek (1) == '-' && stream.Peek (2) == '-') {  	stream.Advance (3);  	return TokenType.OpenHtmlComment;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeLessThanSign,The following statement contains a magic number: if (stream.Current == '!' && stream.Peek (1) == '-' && stream.Peek (2) == '-') {  	stream.Advance (3);  	return TokenType.OpenHtmlComment;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeLessThanSign,The following statement contains a magic number: stream.Advance (3);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,HandleHyphen,The following statement contains a magic number: if (stream.Peek (1) == '-' && stream.Peek (2) == '>') {  	stream.Advance (2);  	return TokenType.CloseHtmlComment;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,HandleHyphen,The following statement contains a magic number: if (stream.Peek (1) == '-' && stream.Peek (2) == '>') {  	stream.Advance (2);  	return TokenType.CloseHtmlComment;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,HandleHyphen,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (IsNameStart (stream.Current)) {  		stream.Advance ();  		ConsumeNameCharacters (stream);  		return true;  	}  	if (stream.Current == '-') {  		if (IsNameStart (stream.Peek (1))) {  			stream.Advance ();  			ConsumeNameCharacters (stream);  			return true;  		}  		if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  			stream.Advance (2);  			ConsumeNameCharacters (stream);  			return true;  		}  	}  	if (IsValidEscape (stream.Current' stream.Peek (1))) {  		stream.Advance (2);  		ConsumeNameCharacters (stream);  		return true;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (IsNameStart (stream.Current)) {  		stream.Advance ();  		ConsumeNameCharacters (stream);  		return true;  	}  	if (stream.Current == '-') {  		if (IsNameStart (stream.Peek (1))) {  			stream.Advance ();  			ConsumeNameCharacters (stream);  			return true;  		}  		if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  			stream.Advance (2);  			ConsumeNameCharacters (stream);  			return true;  		}  	}  	if (IsValidEscape (stream.Current' stream.Peek (1))) {  		stream.Advance (2);  		ConsumeNameCharacters (stream);  		return true;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: return stream.InUndoContext (start => {  	if (IsNameStart (stream.Current)) {  		stream.Advance ();  		ConsumeNameCharacters (stream);  		return true;  	}  	if (stream.Current == '-') {  		if (IsNameStart (stream.Peek (1))) {  			stream.Advance ();  			ConsumeNameCharacters (stream);  			return true;  		}  		if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  			stream.Advance (2);  			ConsumeNameCharacters (stream);  			return true;  		}  	}  	if (IsValidEscape (stream.Current' stream.Peek (1))) {  		stream.Advance (2);  		ConsumeNameCharacters (stream);  		return true;  	}  	return false;  });  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: if (stream.Current == '-') {  	if (IsNameStart (stream.Peek (1))) {  		stream.Advance ();  		ConsumeNameCharacters (stream);  		return true;  	}  	if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  		stream.Advance (2);  		ConsumeNameCharacters (stream);  		return true;  	}  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: if (stream.Current == '-') {  	if (IsNameStart (stream.Peek (1))) {  		stream.Advance ();  		ConsumeNameCharacters (stream);  		return true;  	}  	if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  		stream.Advance (2);  		ConsumeNameCharacters (stream);  		return true;  	}  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  	stream.Advance (2);  	ConsumeNameCharacters (stream);  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: if (IsValidEscape (stream.Peek (1)' stream.Peek (2))) {  	stream.Advance (2);  	ConsumeNameCharacters (stream);  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: if (IsValidEscape (stream.Current' stream.Peek (1))) {  	stream.Advance (2);  	ConsumeNameCharacters (stream);  	return true;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeIdentifier,The following statement contains a magic number: stream.Advance (2);  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsNonAscii,The following statement contains a magic number: return (int)c >= 80;  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,DetermineIdentifierType,The following statement contains a magic number: if (stream.Current == ' ' && stream.CompareOrdinal (" if")) {  	stream.Advance (3);  	return TokenType.Identifier;  }  
Magic Number,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,DetermineIdentifierType,The following statement contains a magic number: stream.Advance (3);  
Missing Default,SassyStudio.Compiler.Parsing,BlockItem,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\BlockItem.cs,IsTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.CloseCurlyBrace:  case TokenType.OpenCurlyBrace:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.Ampersand:  	return new ParentReferenceSelector ();  case TokenType.Asterisk:  	return new UniversalSelector ();  case TokenType.Period:  	return new ClassSelector ();  case TokenType.Hash:  	return new IdSelector ();  case TokenType.Identifier:  	return new TypeSelector ();  case TokenType.OpenBrace:  	return new AttributeSelector ();  case TokenType.DoubleColon:  	return new PseudoElementSelector ();  case TokenType.PercentSign:  	return new ExtendOnlySelector ();  }  
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateSimpleSelector,The following switch statement is missing a default case: switch (next.Type) {  case TokenType.Identifier:  	return new PseudoClassSelector ();  case TokenType.Function:  	return new PseudoFunctionSelector ();  }  
Missing Default,SassyStudio.Compiler.Parsing,DefaultSassItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\DefaultSassItemFactory.cs,CreateDocumentationTag,The following switch statement is missing a default case: switch (text.GetText (next.Start' next.Length)) {  case "reference":  	return new FileReferenceTag ();  }  
Missing Default,SassyStudio.Compiler.Parsing,Function,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Function.cs,IsTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.CloseFunctionBrace:  case TokenType.Comma:  case TokenType.OpenCurlyBrace:  case TokenType.Semicolon:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,FunctionArgument,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\FunctionArgument.cs,IsTerminator,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.EndOfFile:  case TokenType.Comma:  case TokenType.CloseFunctionBrace:  case TokenType.Semicolon:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,TryCreate,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.EndOfFile:  	item = null;  	return false;  case TokenType.StartOfFile:  	item = Create<Stylesheet> (parent' text' stream);  	break;  case TokenType.NewLine:  	item = new TokenItem ();  	break;  case TokenType.String:  case TokenType.BadString:  	item = new StringValue ();  	break;  case TokenType.OpenCssComment:  	item = new CssComment ();  	break;  case TokenType.CppComment:  	item = new CppComment ();  	break;  case TokenType.OpenHtmlComment:  	item = new HtmlComment ();  	break;  case TokenType.At:  	item = CreateAtRule (parent' text' stream);  	break;  case TokenType.Dollar:  	item = CreateVariableDefinitionOrReference (parent' text' stream);  	break;  case TokenType.Bang:  	item = CreateBang (parent' text' stream);  	break;  case TokenType.Function:  	item = CreateFunction (parent' text' stream);  	break;  case TokenType.XmlDocumentationComment:  	item = new XmlDocumentationComment ();  	break;  case TokenType.Asterisk:  case TokenType.GreaterThan:  case TokenType.Tilde:  case TokenType.Colon:  case TokenType.DoubleColon:  case TokenType.Ampersand:  case TokenType.OpenBrace:  case TokenType.Hash:  case TokenType.Period:  case TokenType.Identifier:  case TokenType.OpenInterpolation:  	item = CreateBestFittingItem (parent' text' stream);  	break;  }  
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateValueItem,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.OpenInterpolation:  	return new StringInterpolation ();  case TokenType.Hash:  	return CreateHash (parent' text' stream);  }  
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.Asterisk:  	return new UniversalSelector ();  case TokenType.Period:  	return new ClassSelector ();  case TokenType.Hash:  	return new IdSelector ();  case TokenType.Identifier:  	return new TypeSelector ();  case TokenType.OpenBrace:  	return new AttributeSelector ();  case TokenType.DoubleColon:  	return new PseudoElementSelector ();  case TokenType.GreaterThan:  	return new ChildCombinator ();  case TokenType.Plus:  	return new AdjacentSiblingCombinator ();  case TokenType.Tilde:  	return new GeneralSiblingCombinator ();  case TokenType.Ampersand:  	return new ParentReferenceSelector ();  case TokenType.OpenInterpolation:  	return new StringInterpolationSelector ();  case TokenType.PercentSign:  	return new ExtendOnlySelector ();  }  
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,CreateSelectorComponent,The following switch statement is missing a default case: switch (next.Type) {  case TokenType.Identifier:  	return new PseudoClassSelector ();  case TokenType.Function:  	return new PseudoFunctionSelector ();  }  
Missing Default,SassyStudio.Compiler.Parsing,ItemFactory,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\ItemFactory.cs,IsRuleSet,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.OpenInterpolation:  	return true;  case TokenType.Asterisk:  case TokenType.Identifier:  case TokenType.OpenBrace:  	validStart = true;  	break;  case TokenType.Period:  case TokenType.Hash:  	var next = stream.Peek (1);  	validStart = next.Type == TokenType.Identifier && next.Start == stream.Current.End;  	break;  // nested combinators and pseudo selectors  case TokenType.Ampersand:  case TokenType.GreaterThan:  case TokenType.Plus:  case TokenType.Tilde:  case TokenType.Colon:  case TokenType.DoubleColon:  	validStart = IsNestedRuleBlock (parent);  	break;  }  
Missing Default,SassyStudio.Compiler.Parsing,MixinDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\MixinDefinition.cs,IsArgumentTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.CloseFunctionBrace:  case TokenType.Comma:  case TokenType.OpenCurlyBrace:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,CharsetDirective,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\Rules\CharsetDirective.cs,ParseDirective,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.String:  	CharacterSet = itemFactory.CreateSpecificParsed<StringValue> (this' text' stream);  	if (CharacterSet != null)  		Children.Add (CharacterSet);  	break;  case TokenType.Identifier:  	CharacterSet = Children.AddCurrentAndAdvance (stream);  	break;  }  
Missing Default,SassyStudio.Compiler.Parsing,SassImportDirective,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\SassImportDirective.cs,IsTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.Semicolon:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,SimpleSelector,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\SimpleSelector.cs,ParseCombinator,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.GreaterThan:  	combinator = new ChildCombinator ();  	break;  case TokenType.Plus:  	combinator = new AdjacentSiblingCombinator ();  	break;  case TokenType.Tilde:  	combinator = new GeneralSiblingCombinator ();  	break;  }  
Missing Default,SassyStudio.Compiler.Parsing,StringInterpolation,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\StringInterpolation.cs,IsTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.CloseInterpolation:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,UserFunctionDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\UserFunctionDefinition.cs,IsArgumentTerminator,The following switch statement is missing a default case: switch (type) {  case TokenType.EndOfFile:  case TokenType.CloseFunctionBrace:  case TokenType.Comma:  case TokenType.OpenCurlyBrace:  	return true;  }  
Missing Default,SassyStudio.Compiler.Parsing,VariableDefinition,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Parsing\VariableDefinition.cs,IsValueTerminator,The following switch statement is missing a default case: switch (stream.Current.Type) {  case TokenType.EndOfFile:  case TokenType.Bang:  case TokenType.Semicolon:  case TokenType.CloseCurlyBrace:  case TokenType.OpenCurlyBrace:  	return true;  }  
Missing Default,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,IsNonAscii,The following switch statement is missing a default case: switch (c) {  case '{':  case '}':  case '[':  case ']':  	return false;  }  
Missing Default,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeString,The following switch statement is missing a default case: switch (stream.Current) {  case '\'':  case '"': {  	var open = stream.Current;  	while (stream.Advance ()) {  		var current = stream.Current;  		// check for valid escapes  		if (current == '\\') {  			// check to see if we are escaping the new line (and thus' continuing the string)  			stream.Advance ();  			if (IsNewLine (stream.Current)) {  				stream.Advance ();  				continue;  			}  			// if escaping open quote' consume and advance  			if (current == open) {  				stream.Advance ();  				continue;  			}  			if (IsValidEscape ('\\'' current)) {  				stream.Advance ();  				continue;  			}  		}  		// unescaped new line is bad news bears  		if (IsNewLine (current)) {  			// go back to right before the new line  			//stream.Reverse(1);  			type = TokenType.BadString;  			return true;  		}  		// happy days' we have properly quoted string  		if (stream.Current == open)  			break;  	}  	// consume closing quote  	if (stream.Current == open)  		stream.Advance ();  	type = TokenType.String;  	break;  }  }  
Missing Default,SassyStudio.Compiler.Lexing,Lexer,F:\newReposMay17\darrenkopp_SassyStudio\SassyStudio.Compiler\Lexing\Lexer.cs,ConsumeWhitespace,The following switch statement is missing a default case: switch (stream.Current) {  case ' ':  case '\t':  	//case '\f':  	//case '\n':  	//case '\r':  	while (IsWhitespace (stream.Current))  		stream.Advance ();  	return true;  }  
