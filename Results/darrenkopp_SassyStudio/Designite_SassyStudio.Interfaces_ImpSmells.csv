Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SassyStudio,SassDocument,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\SassDocument.cs,DumpTree,The length of the statement  "                //        Logger.Log(string.Format("{0} of {1} on line {2}"' block.GetType().Name' block.Parent.GetType().Name' Tree.SourceText.GetLineFromPosition(block.OpenCurlyBrace.Start).LineNumber)); " is 189.
Long Statement,SassyStudio,SassDocument,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\SassDocument.cs,DumpTree,The length of the statement  "                //if (item is TokenItem && ((item as TokenItem).SourceType == TokenType.String || (item as TokenItem).SourceType == TokenType.BadString)) " is 137.
Empty Catch Block,SassyStudio,OutputLogger,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\OutputLogger.cs,Log,The method has an empty catch block.
Empty Catch Block,SassyStudio,OutputLogger,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\OutputLogger.cs,Log,The method has an empty catch block.
Magic Number,SassyStudio.Compiler.Parsing,ParseItemList,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\Compiler\Parsing\ParseItemList.cs,FindItemPrecedingPosition,The following statement contains a magic number: while (start <= end)              {                  int midpoint = (start + end) / 2;                  var current = this[midpoint];                    if (current.End <= position)                  {                      match = current;                      start = midpoint + 1;                  }                  else if (current.End > position)                  {                      end = midpoint - 1;                  }              }
Magic Number,SassyStudio.Compiler.Parsing,ParseItemList,C:\repos\darrenkopp_SassyStudio\SassyStudio.Interfaces\Compiler\Parsing\ParseItemList.cs,FindItemContainingPosition,The following statement contains a magic number: while (start <= end)              {                  int midpoint = (start + end) / 2;                  var current = this[midpoint];                    // if child contains position' we can stop                  if (current.Start <= position && current.End >= position)                  {                      match = current;                      break;                  }                    if (position > current.End)                      start = midpoint + 1;                    if (position < current.Start)                      end = midpoint - 1;              }
