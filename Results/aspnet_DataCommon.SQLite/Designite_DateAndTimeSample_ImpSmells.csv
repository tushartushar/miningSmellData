Implementation smell,Namespace,Class,File,Method,Description
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime1 = new DateTime(2017' 10' 20);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime1 = new DateTime(2017' 10' 20);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime1 = new DateTime(2017' 10' 20);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime2 = new DateTime(2017' 10' 16);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime2 = new DateTime(2017' 10' 16);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var dateTime2 = new DateTime(2017' 10' 16);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: var timeSpan2 = new TimeSpan(0' 30' 0);
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: using (var reader = command.ExecuteReader())              {                  reader.Read();                    var dateTimeComparison = reader.GetBoolean(0);                  Console.WriteLine($"{dateTime1} > {dateTime2} = {dateTimeComparison}");                    var timeSpanComparison = reader.GetBoolean(1);                  Console.WriteLine($"{timeSpan1} > {timeSpan2} = {timeSpanComparison}");                    var dateTimeDifference = reader.GetTimeSpan(2);                  Console.WriteLine($"{dateTime1} - {dateTime2} = {dateTimeDifference}");                    var timeSpanDifference = reader.GetTimeSpan(3);                  Console.WriteLine($"{timeSpan1} - {timeSpan2} = {timeSpanDifference}");                    var dateTimeSubtractTimeSpan = reader.GetDateTime(4);                  Console.WriteLine($"{dateTime1} - {timeSpan1} = {dateTimeSubtractTimeSpan}");                    var timeSpanDividedByTimeSpan = reader.GetDouble(5);                  Console.WriteLine($"{timeSpan1} / {timeSpan2} = {timeSpanDividedByTimeSpan}");                    var timeSpanDividedByDivisor = reader.GetTimeSpan(6);                  Console.WriteLine($"{timeSpan1} / 2.0 = {timeSpanDividedByDivisor}");              }
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: using (var reader = command.ExecuteReader())              {                  reader.Read();                    var dateTimeComparison = reader.GetBoolean(0);                  Console.WriteLine($"{dateTime1} > {dateTime2} = {dateTimeComparison}");                    var timeSpanComparison = reader.GetBoolean(1);                  Console.WriteLine($"{timeSpan1} > {timeSpan2} = {timeSpanComparison}");                    var dateTimeDifference = reader.GetTimeSpan(2);                  Console.WriteLine($"{dateTime1} - {dateTime2} = {dateTimeDifference}");                    var timeSpanDifference = reader.GetTimeSpan(3);                  Console.WriteLine($"{timeSpan1} - {timeSpan2} = {timeSpanDifference}");                    var dateTimeSubtractTimeSpan = reader.GetDateTime(4);                  Console.WriteLine($"{dateTime1} - {timeSpan1} = {dateTimeSubtractTimeSpan}");                    var timeSpanDividedByTimeSpan = reader.GetDouble(5);                  Console.WriteLine($"{timeSpan1} / {timeSpan2} = {timeSpanDividedByTimeSpan}");                    var timeSpanDividedByDivisor = reader.GetTimeSpan(6);                  Console.WriteLine($"{timeSpan1} / 2.0 = {timeSpanDividedByDivisor}");              }
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: using (var reader = command.ExecuteReader())              {                  reader.Read();                    var dateTimeComparison = reader.GetBoolean(0);                  Console.WriteLine($"{dateTime1} > {dateTime2} = {dateTimeComparison}");                    var timeSpanComparison = reader.GetBoolean(1);                  Console.WriteLine($"{timeSpan1} > {timeSpan2} = {timeSpanComparison}");                    var dateTimeDifference = reader.GetTimeSpan(2);                  Console.WriteLine($"{dateTime1} - {dateTime2} = {dateTimeDifference}");                    var timeSpanDifference = reader.GetTimeSpan(3);                  Console.WriteLine($"{timeSpan1} - {timeSpan2} = {timeSpanDifference}");                    var dateTimeSubtractTimeSpan = reader.GetDateTime(4);                  Console.WriteLine($"{dateTime1} - {timeSpan1} = {dateTimeSubtractTimeSpan}");                    var timeSpanDividedByTimeSpan = reader.GetDouble(5);                  Console.WriteLine($"{timeSpan1} / {timeSpan2} = {timeSpanDividedByTimeSpan}");                    var timeSpanDividedByDivisor = reader.GetTimeSpan(6);                  Console.WriteLine($"{timeSpan1} / 2.0 = {timeSpanDividedByDivisor}");              }
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: using (var reader = command.ExecuteReader())              {                  reader.Read();                    var dateTimeComparison = reader.GetBoolean(0);                  Console.WriteLine($"{dateTime1} > {dateTime2} = {dateTimeComparison}");                    var timeSpanComparison = reader.GetBoolean(1);                  Console.WriteLine($"{timeSpan1} > {timeSpan2} = {timeSpanComparison}");                    var dateTimeDifference = reader.GetTimeSpan(2);                  Console.WriteLine($"{dateTime1} - {dateTime2} = {dateTimeDifference}");                    var timeSpanDifference = reader.GetTimeSpan(3);                  Console.WriteLine($"{timeSpan1} - {timeSpan2} = {timeSpanDifference}");                    var dateTimeSubtractTimeSpan = reader.GetDateTime(4);                  Console.WriteLine($"{dateTime1} - {timeSpan1} = {dateTimeSubtractTimeSpan}");                    var timeSpanDividedByTimeSpan = reader.GetDouble(5);                  Console.WriteLine($"{timeSpan1} / {timeSpan2} = {timeSpanDividedByTimeSpan}");                    var timeSpanDividedByDivisor = reader.GetTimeSpan(6);                  Console.WriteLine($"{timeSpan1} / 2.0 = {timeSpanDividedByDivisor}");              }
Magic Number,DateAndTimeSample,Program,C:\repos\aspnet_DataCommon.SQLite\samples\DateAndTimeSample\Program.cs,Main,The following statement contains a magic number: using (var reader = command.ExecuteReader())              {                  reader.Read();                    var dateTimeComparison = reader.GetBoolean(0);                  Console.WriteLine($"{dateTime1} > {dateTime2} = {dateTimeComparison}");                    var timeSpanComparison = reader.GetBoolean(1);                  Console.WriteLine($"{timeSpan1} > {timeSpan2} = {timeSpanComparison}");                    var dateTimeDifference = reader.GetTimeSpan(2);                  Console.WriteLine($"{dateTime1} - {dateTime2} = {dateTimeDifference}");                    var timeSpanDifference = reader.GetTimeSpan(3);                  Console.WriteLine($"{timeSpan1} - {timeSpan2} = {timeSpanDifference}");                    var dateTimeSubtractTimeSpan = reader.GetDateTime(4);                  Console.WriteLine($"{dateTime1} - {timeSpan1} = {dateTimeSubtractTimeSpan}");                    var timeSpanDividedByTimeSpan = reader.GetDouble(5);                  Console.WriteLine($"{timeSpan1} / {timeSpan2} = {timeSpanDividedByTimeSpan}");                    var timeSpanDividedByDivisor = reader.GetTimeSpan(6);                  Console.WriteLine($"{timeSpan1} / 2.0 = {timeSpanDividedByDivisor}");              }
