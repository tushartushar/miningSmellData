Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Data.Sqlite,SqliteDataReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataReader.cs,GetSchemaTable,The method has 101 lines of code.
Long Method,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,Bind,The method has 156 lines of code.
Complex Method,Microsoft.Data.Sqlite,SqliteCommand,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteCommand.cs,ExecuteReader,Cyclomatic complexity of the method is 14
Complex Method,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,GetFieldValue,Cyclomatic complexity of the method is 22
Long Parameter List,Microsoft.Data.Sqlite,SqliteConnection,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteConnection.CreateAggregate.cs,CreateAggregateCore,The method has 5 parameters. Parameters: name' arity' seed' func' resultSelector
Long Parameter List,Microsoft.Data.Sqlite,SqliteDataReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataReader.cs,GetBytes,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,Microsoft.Data.Sqlite,SqliteDataReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataReader.cs,GetChars,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,Microsoft.Data.Sqlite,SqliteDataRecord,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataRecord.cs,GetBytes,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,Microsoft.Data.Sqlite,SqliteDataRecord,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataRecord.cs,GetChars,The method has 5 parameters. Parameters: ordinal' dataOffset' buffer' bufferOffset' length
Long Parameter List,Microsoft.Data.Sqlite,SqliteParameterBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteParameterBinder.cs,SqliteParameterBinder,The method has 5 parameters. Parameters: stmt' index' value' size' sqliteType
Long Statement,Microsoft.Data.Sqlite,SqliteDataReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteDataReader.cs,GetSchemaTable,The length of the statement  "                        var rc = raw.sqlite3_table_column_metadata(_command.Connection.Handle' databaseName' tableName' columnName' out var dataType' out var collSeq' out var notNull' out var primaryKey' out var autoInc); " is 197.
Long Statement,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The length of the statement  "            iJD += dateTime.Hour * 3600000 + dateTime.Minute * 60000 + (long)((dateTime.Second + dateTime.Millisecond / 1000.0) * 1000); " is 124.
Complex Conditional,Microsoft.Data.Sqlite,SqliteConnection,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteConnection.CreateAggregate.cs,Open,The conditional expression  "!string.IsNullOrEmpty(dataDirectory)                  && (flags & raw.SQLITE_OPEN_URI) == 0                  && !filename.Equals(":memory:"' StringComparison.OrdinalIgnoreCase)                  && !Path.IsPathRooted(filename)"  is complex.
Complex Conditional,Microsoft.Data.Sqlite,SqliteTransaction,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteTransaction.cs,SqliteTransaction,The conditional expression  "(isolationLevel == IsolationLevel.ReadUncommitted                   && connection.ConnectionStringBuilder.Cache != SqliteCacheMode.Shared)                  || isolationLevel == IsolationLevel.ReadCommitted                  || isolationLevel == IsolationLevel.RepeatableRead"  is complex.
Magic Number,Microsoft.Data.Sqlite,SqliteCommand,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: raw.sqlite3_busy_timeout(_connection.Handle' CommandTimeout * 1000);
Magic Number,Microsoft.Data.Sqlite,SqliteCommand,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try              {                  foreach (var stmt in unprepared                      ? PrepareAndEnumerateStatements()                      : _preparedStatements)                  {                      var boundParams = 0;                        if (_parameters.IsValueCreated)                      {                          boundParams = _parameters.Value.Bind(stmt);                      }                        var expectedParams = raw.sqlite3_bind_parameter_count(stmt);                      if (expectedParams != boundParams)                      {                          var unboundParams = new List<string>();                          for (var i = 1; i <= expectedParams; i++)                          {                              var name = raw.sqlite3_bind_parameter_name(stmt' i);                                if (_parameters.IsValueCreated                                  || !_parameters.Value.Cast<SqliteParameter>().Any(p => p.ParameterName == name))                              {                                  unboundParams.Add(name);                              }                          }                            throw new InvalidOperationException(Resources.MissingParameters(string.Join("' "' unboundParams)));                      }                        var timer = Stopwatch.StartNew();                      while (raw.SQLITE_LOCKED == (rc = raw.sqlite3_step(stmt))                             || rc == raw.SQLITE_BUSY                             || rc == raw.SQLITE_LOCKED_SHAREDCACHE)                      {                          if (timer.ElapsedMilliseconds >= CommandTimeout * 1000)                          {                              break;                          }                            raw.sqlite3_reset(stmt);                            // TODO: Consider having an async path that uses Task.Delay()                          Thread.Sleep(150);                      }                        SqliteException.ThrowExceptionForRC(rc' _connection.Handle);                        if (rc == raw.SQLITE_ROW                          // NB: This is only a heuristic to separate SELECT statements from INSERT/UPDATE/DELETE statements.                          //     It will result in false positives' but it's the best we can do without re-parsing SQL                          || raw.sqlite3_stmt_readonly(stmt) != 0)                      {                          stmts.Enqueue((stmt' rc != raw.SQLITE_DONE));                      }                      else                      {                          raw.sqlite3_reset(stmt);                          hasChanges = true;                          changes += raw.sqlite3_changes(_connection.Handle);                      }                  }              }              catch when (unprepared)              {                  DisposePreparedStatements();                    throw;              }
Magic Number,Microsoft.Data.Sqlite,SqliteCommand,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try              {                  foreach (var stmt in unprepared                      ? PrepareAndEnumerateStatements()                      : _preparedStatements)                  {                      var boundParams = 0;                        if (_parameters.IsValueCreated)                      {                          boundParams = _parameters.Value.Bind(stmt);                      }                        var expectedParams = raw.sqlite3_bind_parameter_count(stmt);                      if (expectedParams != boundParams)                      {                          var unboundParams = new List<string>();                          for (var i = 1; i <= expectedParams; i++)                          {                              var name = raw.sqlite3_bind_parameter_name(stmt' i);                                if (_parameters.IsValueCreated                                  || !_parameters.Value.Cast<SqliteParameter>().Any(p => p.ParameterName == name))                              {                                  unboundParams.Add(name);                              }                          }                            throw new InvalidOperationException(Resources.MissingParameters(string.Join("' "' unboundParams)));                      }                        var timer = Stopwatch.StartNew();                      while (raw.SQLITE_LOCKED == (rc = raw.sqlite3_step(stmt))                             || rc == raw.SQLITE_BUSY                             || rc == raw.SQLITE_LOCKED_SHAREDCACHE)                      {                          if (timer.ElapsedMilliseconds >= CommandTimeout * 1000)                          {                              break;                          }                            raw.sqlite3_reset(stmt);                            // TODO: Consider having an async path that uses Task.Delay()                          Thread.Sleep(150);                      }                        SqliteException.ThrowExceptionForRC(rc' _connection.Handle);                        if (rc == raw.SQLITE_ROW                          // NB: This is only a heuristic to separate SELECT statements from INSERT/UPDATE/DELETE statements.                          //     It will result in false positives' but it's the best we can do without re-parsing SQL                          || raw.sqlite3_stmt_readonly(stmt) != 0)                      {                          stmts.Enqueue((stmt' rc != raw.SQLITE_DONE));                      }                      else                      {                          raw.sqlite3_reset(stmt);                          hasChanges = true;                          changes += raw.sqlite3_changes(_connection.Handle);                      }                  }              }              catch when (unprepared)              {                  DisposePreparedStatements();                    throw;              }
Magic Number,Microsoft.Data.Sqlite,SqliteConnectionStringBuilder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteConnectionStringBuilder.cs,SqliteConnectionStringBuilder,The following statement contains a magic number: var validKeywords = new string[3];
Magic Number,Microsoft.Data.Sqlite,SqliteConnectionStringBuilder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteConnectionStringBuilder.cs,SqliteConnectionStringBuilder,The following statement contains a magic number: _keywords = new Dictionary<string' Keywords>(3' StringComparer.OrdinalIgnoreCase)              {                  [DataSourceKeyword] = Keywords.DataSource'                  [ModeKeyword] = Keywords.Mode'                  [CacheKeyword] = Keywords.Cache'                    // aliases                  [FilenameKeyword] = Keywords.DataSource'                  [DataSourceNoSpaceKeyword] = Keywords.DataSource              };
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: if (M <= 2)              {                  Y--;                  M += 12;              }
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: if (M <= 2)              {                  Y--;                  M += 12;              }
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var A = Y / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var B = 2 - A + (A / 4);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var B = 2 - A + (A / 4);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var X1 = 36525 * (Y + 4716) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var X1 = 36525 * (Y + 4716) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var X1 = 36525 * (Y + 4716) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var X2 = 306001 * (M + 1) / 10000;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var X2 = 306001 * (M + 1) / 10000;
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var iJD = (long)((X1 + X2 + D + B - 1524.5) * 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: var iJD = (long)((X1 + X2 + D + B - 1524.5) * 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: iJD += dateTime.Hour * 3600000 + dateTime.Minute * 60000 + (long)((dateTime.Second + dateTime.Millisecond / 1000.0) * 1000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: iJD += dateTime.Hour * 3600000 + dateTime.Minute * 60000 + (long)((dateTime.Second + dateTime.Millisecond / 1000.0) * 1000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: iJD += dateTime.Hour * 3600000 + dateTime.Minute * 60000 + (long)((dateTime.Second + dateTime.Millisecond / 1000.0) * 1000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: iJD += dateTime.Hour * 3600000 + dateTime.Minute * 60000 + (long)((dateTime.Second + dateTime.Millisecond / 1000.0) * 1000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueBinder,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueBinder.cs,ToJulianDate,The following statement contains a magic number: return iJD / 86400000.0;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,GetGuid,The following statement contains a magic number: switch (sqliteType)              {                  case raw.SQLITE_BLOB:                      var bytes = GetBlob(ordinal);                      return bytes.Length == 16                          ? new Guid(bytes)                          : new Guid(Encoding.UTF8.GetString(bytes' 0' bytes.Length));                    default:                      return new Guid(GetString(ordinal));              }
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var iJD = (long)(julianDate * 86400000.0 + 0.5);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var iJD = (long)(julianDate * 86400000.0 + 0.5);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var Z = (int)((iJD + 43200000) / 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var Z = (int)((iJD + 43200000) / 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var A = (int)((Z - 1867216.25) / 36524.25);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var A = (int)((Z - 1867216.25) / 36524.25);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: A = Z + 1 + A - (A / 4);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var B = A + 1524;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var C = (int)((B - 122.1) / 365.25);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var C = (int)((B - 122.1) / 365.25);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var D = (36525 * (C & 32767)) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var D = (36525 * (C & 32767)) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var D = (36525 * (C & 32767)) / 100;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var E = (int)((B - D) / 30.6001);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var X1 = (int)(30.6001 * E);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var month = E < 14 ? E - 1 : E - 13;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var month = E < 14 ? E - 1 : E - 13;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var year = month > 2 ? C - 4716 : C - 4715;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var year = month > 2 ? C - 4716 : C - 4715;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var year = month > 2 ? C - 4716 : C - 4715;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var s = (int)((iJD + 43200000) % 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var s = (int)((iJD + 43200000) % 86400000);
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var fracSecond = s / 1000.0;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var hour = s / 3600;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: s -= hour * 3600;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var minute = s / 60;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: fracSecond += s - minute * 60;
Magic Number,Microsoft.Data.Sqlite,SqliteValueReader,C:\repos\aspnet_DataCommon.SQLite\src\Microsoft.Data.Sqlite.Core\SqliteValueReader.cs,FromJulianDate,The following statement contains a magic number: var millisecond = (int)Math.Round((fracSecond - second) * 1000.0);
