Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,LocateBridgesAsync,The length of the statement  "        socket.SetSocketOption(SocketOptionLevel.IP' SocketOptionName.AddMembership' new MulticastOption(multicastAddress' IPAddress.Any)); " is 131.
Long Statement,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,LocateBridgesAsync,The length of the statement  "        socket.SendTo(broadcastMessage' 0' broadcastMessage.Length' SocketFlags.None' new IPEndPoint(multicastAddress' multicastPort)); " is 127.
Empty Catch Block,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,GetSocketResponse,The method has an empty catch block.
Empty Catch Block,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,GetSocketResponse,The method has an empty catch block.
Empty Catch Block,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,IsHue,The method has an empty catch block.
Magic Number,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,GetSocketResponse,The following statement contains a magic number: try        {          while (true)          {            var response = new byte[8000];            EndPoint ep = new IPEndPoint(IPAddress.Any' multicastPort);            socket.ReceiveFrom(response' ref ep);              try            {              var receivedString = Encoding.UTF8.GetString(response);                var location = receivedString.Substring(receivedString.IndexOf("LOCATION:"' System.StringComparison.Ordinal) + 9);              receivedString = location.Substring(0' location.IndexOf("\r"' System.StringComparison.Ordinal)).Trim();                _discoveredDevices.Add(receivedString);            }            catch            {              //Not a UTF8 string' ignore this response.            }          }        }        catch        {          //TODO handle exception for when connection closes        }
Magic Number,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,GetSocketResponse,The following statement contains a magic number: try        {          while (true)          {            var response = new byte[8000];            EndPoint ep = new IPEndPoint(IPAddress.Any' multicastPort);            socket.ReceiveFrom(response' ref ep);              try            {              var receivedString = Encoding.UTF8.GetString(response);                var location = receivedString.Substring(receivedString.IndexOf("LOCATION:"' System.StringComparison.Ordinal) + 9);              receivedString = location.Substring(0' location.IndexOf("\r"' System.StringComparison.Ordinal)).Trim();                _discoveredDevices.Add(receivedString);            }            catch            {              //Not a UTF8 string' ignore this response.            }          }        }        catch        {          //TODO handle exception for when connection closes        }
Magic Number,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,IsHue,The following statement contains a magic number: var http = new HttpClient { Timeout = TimeSpan.FromMilliseconds(2000) };
Magic Number,Q42.HueApi.NET,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.NET\SSDPBridgeLocator.cs,IsHue,The following statement contains a magic number: try        {          var res = await http.GetStringAsync(discoveryUrl).ConfigureAwait(false);          if (!string.IsNullOrWhiteSpace(res))          {  			res = res.ToLower();    			if (res.Contains("philips hue bridge"))  			{  				int startSerial = res.IndexOf("<serialnumber>");  				if (startSerial > 0)  				{  					int endSerial = res.IndexOf("</"' startSerial);    					int startPoint = startSerial + 14;  					return res.Substring(startPoint' endSerial - startPoint);  				}  			}  		}        }        catch        {          //Not a UTF8 string' ignore this response.        }
