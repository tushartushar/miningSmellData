Implementation smell,Namespace,Class,File,Method,Description
Long Method,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,ColorFromXY,The method has 119 lines of code.
Complex Method,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,CalculateXY,Cyclomatic complexity of the method is 9
Complex Method,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,ColorFromXY,Cyclomatic complexity of the method is 10
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: hue = hue / 182.04;
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: brightness = brightness / 255.0;
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: saturation = saturation / 255.0;
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: if (saturation == 0)  			{  				r = g = b = brightness;  			}  			else  			{  				// the color wheel consists of 6 sectors.  				double sectorPos = hue / 60.0;  				int sectorNumber = (int)(Math.Floor(sectorPos));  				// get the fractional part of the sector  				double fractionalSector = sectorPos - sectorNumber;    				// calculate values for the three axes of the color.   				double p = brightness * (1.0 - saturation);  				double q = brightness * (1.0 - (saturation * fractionalSector));  				double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));    				// assign the fractional colors to r' g' and b based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: if (saturation == 0)  			{  				r = g = b = brightness;  			}  			else  			{  				// the color wheel consists of 6 sectors.  				double sectorPos = hue / 60.0;  				int sectorNumber = (int)(Math.Floor(sectorPos));  				// get the fractional part of the sector  				double fractionalSector = sectorPos - sectorNumber;    				// calculate values for the three axes of the color.   				double p = brightness * (1.0 - saturation);  				double q = brightness * (1.0 - (saturation * fractionalSector));  				double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));    				// assign the fractional colors to r' g' and b based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: if (saturation == 0)  			{  				r = g = b = brightness;  			}  			else  			{  				// the color wheel consists of 6 sectors.  				double sectorPos = hue / 60.0;  				int sectorNumber = (int)(Math.Floor(sectorPos));  				// get the fractional part of the sector  				double fractionalSector = sectorPos - sectorNumber;    				// calculate values for the three axes of the color.   				double p = brightness * (1.0 - saturation);  				double q = brightness * (1.0 - (saturation * fractionalSector));  				double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));    				// assign the fractional colors to r' g' and b based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: if (saturation == 0)  			{  				r = g = b = brightness;  			}  			else  			{  				// the color wheel consists of 6 sectors.  				double sectorPos = hue / 60.0;  				int sectorNumber = (int)(Math.Floor(sectorPos));  				// get the fractional part of the sector  				double fractionalSector = sectorPos - sectorNumber;    				// calculate values for the three axes of the color.   				double p = brightness * (1.0 - saturation);  				double q = brightness * (1.0 - (saturation * fractionalSector));  				double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));    				// assign the fractional colors to r' g' and b based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following statement contains a magic number: if (saturation == 0)  			{  				r = g = b = brightness;  			}  			else  			{  				// the color wheel consists of 6 sectors.  				double sectorPos = hue / 60.0;  				int sectorNumber = (int)(Math.Floor(sectorPos));  				// get the fractional part of the sector  				double fractionalSector = sectorPos - sectorNumber;    				// calculate values for the three axes of the color.   				double p = brightness * (1.0 - saturation);  				double q = brightness * (1.0 - (saturation * fractionalSector));  				double t = brightness * (1.0 - (saturation * (1 - fractionalSector)));    				// assign the fractional colors to r' g' and b based on the sector the angle is in.  				switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}  			}
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetHue,The following statement contains a magic number: if (R.AlmostEquals(max))  				hue = (G - B) / delta; // between yellow & magenta  			else if (G.AlmostEquals(max))  				hue = 2 + (B - R) / delta; // between cyan & yellow  			else  				hue = 4 + (R - G) / delta;
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetHue,The following statement contains a magic number: if (R.AlmostEquals(max))  				hue = (G - B) / delta; // between yellow & magenta  			else if (G.AlmostEquals(max))  				hue = 2 + (B - R) / delta; // between cyan & yellow  			else  				hue = 4 + (R - G) / delta;
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetHue,The following statement contains a magic number: hue *= 60;
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetHue,The following statement contains a magic number: if (hue < 0)  				hue += 360;
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetSaturation,The following statement contains a magic number: return ((max.AlmostEquals(0f)) ? 0f : 1f - (1f * min / max)) * 255;
Magic Number,Q42.HueApi.ColorConverters.HSB,RGBExtensions,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\RGBExtensions.cs,GetBrightness,The following statement contains a magic number: return Numbers.Max(R' G' B) * 255;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,CIE1931Gamut,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\CIE1931Gamut.cs,ForModel,The following statement contains a magic number: if (gamutA.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.704' 0.296)'  					green: new CIE1931Point(0.2151' 0.7106)'  					blue: new CIE1931Point(0.138' 0.08)  				);  			}  			else if (gamutB.Contains(modelId))  			{  				return new CIE1931Gamut(  					red: new CIE1931Point(0.675' 0.322)'  					green: new CIE1931Point(0.409' 0.518)'  					blue: new CIE1931Point(0.167' 0.04)  				);  			}  			else if (gamutC.Contains(modelId))  			{  				return new CIE1931Gamut(  					  red: new CIE1931Point(0.692' 0.308)'  					  green: new CIE1931Point(0.17' 0.7)'  					  blue: new CIE1931Point(0.153' 0.048)  				  );  			}  			else  			{  				// A gamut containing all colors (and then some!)  				return new CIE1931Gamut(  					red: new CIE1931Point(1.0F' 0.0F)'  					green: new CIE1931Point(0.0F' 1.0F)'  					blue: new CIE1931Point(0.0F' 0.0F)  				);  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,RgbFromState,The following statement contains a magic number: if (state.On == false || state.Brightness <= 5) //Off or low brightness  				return new RGBColor(0'0'0);
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,RgbFromState,The following statement contains a magic number: if (state.ColorCoordinates != null && state.ColorCoordinates.Length == 2) //Based on XY value  			{  				var color = XYToRgb(new CIE1931Point(state.ColorCoordinates[0]' state.ColorCoordinates[1])' model);  				return color;  			}
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double r = X * 1.656492 - Y * 0.354851 - Z * 0.255038;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double r = X * 1.656492 - Y * 0.354851 - Z * 0.255038;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double r = X * 1.656492 - Y * 0.354851 - Z * 0.255038;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double g = -X * 0.707196 + Y * 1.655397 + Z * 0.036152;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double b = X * 0.051713 - Y * 0.121364 + Z * 1.011530;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double b = X * 0.051713 - Y * 0.121364 + Z * 1.011530;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,XYToRgb,The following statement contains a magic number: double b = X * 0.051713 - Y * 0.121364 + Z * 1.011530;
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,InverseGamma,The following statement contains a magic number: if (value > 0.04045)              {                  result = Math.Pow((value + 0.055) / (1.0 + 0.055)' 2.4);              }              else              {                  result = value / 12.92;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,InverseGamma,The following statement contains a magic number: if (value > 0.04045)              {                  result = Math.Pow((value + 0.055) / (1.0 + 0.055)' 2.4);              }              else              {                  result = value / 12.92;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,InverseGamma,The following statement contains a magic number: if (value > 0.04045)              {                  result = Math.Pow((value + 0.055) / (1.0 + 0.055)' 2.4);              }              else              {                  result = value / 12.92;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,InverseGamma,The following statement contains a magic number: if (value > 0.04045)              {                  result = Math.Pow((value + 0.055) / (1.0 + 0.055)' 2.4);              }              else              {                  result = value / 12.92;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,InverseGamma,The following statement contains a magic number: if (value > 0.04045)              {                  result = Math.Pow((value + 0.055) / (1.0 + 0.055)' 2.4);              }              else              {                  result = value / 12.92;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,Gamma,The following statement contains a magic number: if (value <= 0.0031308)              {                  result = 12.92 * value;              }              else              {                  result = (1.0 + 0.055) * Math.Pow(value' (1.0 / 2.4)) - 0.055;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,Gamma,The following statement contains a magic number: if (value <= 0.0031308)              {                  result = 12.92 * value;              }              else              {                  result = (1.0 + 0.055) * Math.Pow(value' (1.0 / 2.4)) - 0.055;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,Gamma,The following statement contains a magic number: if (value <= 0.0031308)              {                  result = 12.92 * value;              }              else              {                  result = (1.0 + 0.055) * Math.Pow(value' (1.0 / 2.4)) - 0.055;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,Gamma,The following statement contains a magic number: if (value <= 0.0031308)              {                  result = 12.92 * value;              }              else              {                  result = (1.0 + 0.055) * Math.Pow(value' (1.0 / 2.4)) - 0.055;              }
Magic Number,Q42.HueApi.ColorConverters.OriginalWithModel,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\OriginalWithModel\HueColorConverter.cs,Gamma,The following statement contains a magic number: if (value <= 0.0031308)              {                  result = 12.92 * value;              }              else              {                  result = (1.0 + 0.055) * Math.Pow(value' (1.0 / 2.4)) - 0.055;              }
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexFromState,The following statement contains a magic number: if (state.On == false || state.Brightness <= 5) //Off or low brightness          return "000000";
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexFromState,The following statement contains a magic number: if(state.ColorCoordinates != null && state.ColorCoordinates.Length == 2) //Based on XY value          return HexFromXy(state.ColorCoordinates[0]' state.ColorCoordinates[1]);
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexFromXy,The following statement contains a magic number: int red = (color >> 16) & 0xFF;
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexFromXy,The following statement contains a magic number: int green = (color >> 8) & 0xFF;
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,CalculateXY,The following statement contains a magic number: if (!inReachOfLamps)  			{  				//It seems the colour is out of reach  				//let's find the closest colour we can produce with our lamp and send this XY value out.    				//Find the closest point on each line in the triangle.  				CGPoint pAB = GetClosestPointToPoints(colorPoints[0]' colorPoints[1]' xyPoint);  				CGPoint pAC = GetClosestPointToPoints(colorPoints[2]' colorPoints[0]' xyPoint);  				CGPoint pBC = GetClosestPointToPoints(colorPoints[1]' colorPoints[2]' xyPoint);    				//Get the distances per point and see which point is closer to our Point.  				float dAB = GetDistanceBetweenTwoPoints(xyPoint' pAB);  				float dAC = GetDistanceBetweenTwoPoints(xyPoint' pAC);  				float dBC = GetDistanceBetweenTwoPoints(xyPoint' pBC);    				float lowest = dAB;  				CGPoint closestPoint = pAB;    				if (dAC < lowest)  				{  					lowest = dAC;  					closestPoint = pAC;  				}  				if (dBC < lowest)  				{  					lowest = dBC;  					closestPoint = pBC;  				}    				//Change the xy value to a value which is within the reach of the lamp.  				cx = (float)closestPoint.x;  				cy = (float)closestPoint.y;  			}
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,CalculateXY,The following statement contains a magic number: if (!inReachOfLamps)  			{  				//It seems the colour is out of reach  				//let's find the closest colour we can produce with our lamp and send this XY value out.    				//Find the closest point on each line in the triangle.  				CGPoint pAB = GetClosestPointToPoints(colorPoints[0]' colorPoints[1]' xyPoint);  				CGPoint pAC = GetClosestPointToPoints(colorPoints[2]' colorPoints[0]' xyPoint);  				CGPoint pBC = GetClosestPointToPoints(colorPoints[1]' colorPoints[2]' xyPoint);    				//Get the distances per point and see which point is closer to our Point.  				float dAB = GetDistanceBetweenTwoPoints(xyPoint' pAB);  				float dAC = GetDistanceBetweenTwoPoints(xyPoint' pAC);  				float dBC = GetDistanceBetweenTwoPoints(xyPoint' pBC);    				float lowest = dAB;  				CGPoint closestPoint = pAB;    				if (dAC < lowest)  				{  					lowest = dAC;  					closestPoint = pAC;  				}  				if (dBC < lowest)  				{  					lowest = dBC;  					closestPoint = pBC;  				}    				//Change the xy value to a value which is within the reach of the lamp.  				cx = (float)closestPoint.x;  				cy = (float)closestPoint.y;  			}
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,CheckPointInLampsReach,The following statement contains a magic number: CGPoint blue = colorPoints[2];
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexColorFromState,The following statement contains a magic number: if (state.ColorCoordinates != null && state.ColorCoordinates.Length == 2) //Based on XY value  			{          RGBColor color = ColorFromXY(new CGPoint(state.ColorCoordinates[0]' state.ColorCoordinates[1])' model);            //Brightness of state (0.0-1.0)          double b = Convert.ToDouble(state.Brightness) / 255;          //color with brightness          RGBColor colorWithB = new RGBColor(color.R * b' color.G * b' color.B * b);          return colorWithB.ToHex();        }
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,HexColorFromState,The following statement contains a magic number: if (state.ColorCoordinates != null && state.ColorCoordinates.Length == 2) //Based on XY value  			{          RGBColor color = ColorFromXY(new CGPoint(state.ColorCoordinates[0]' state.ColorCoordinates[1])' model);            //Brightness of state (0.0-1.0)          double b = Convert.ToDouble(state.Brightness) / 255;          //color with brightness          RGBColor colorWithB = new RGBColor(color.R * b' color.G * b' color.B * b);          return colorWithB.ToHex();        }
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,RGBColorFromState,The following statement contains a magic number: if (state.ColorCoordinates != null && state.ColorCoordinates.Length == 2) //Based on XY value        {          return ColorFromXY(new CGPoint(state.ColorCoordinates[0]' state.ColorCoordinates[1])' model);        }
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,ColorFromXY,The following statement contains a magic number: if (!inReachOfLamps)  			{  				//It seems the colour is out of reach  				//let's find the closest colour we can produce with our lamp and send this XY value out.    				//Find the closest point on each line in the triangle.  				CGPoint pAB = GetClosestPointToPoints(colorPoints[0]' colorPoints[1]' xy);  				CGPoint pAC = GetClosestPointToPoints(colorPoints[2]' colorPoints[0]' xy);  				CGPoint pBC = GetClosestPointToPoints(colorPoints[1]' colorPoints[2]' xy);    				//Get the distances per point and see which point is closer to our Point.  				float dAB = GetDistanceBetweenTwoPoints(xy' pAB);  				float dAC = GetDistanceBetweenTwoPoints(xy' pAC);  				float dBC = GetDistanceBetweenTwoPoints(xy' pBC);    				float lowest = dAB;  				CGPoint closestPoint = pAB;    				if (dAC < lowest)  				{  					lowest = dAC;  					closestPoint = pAC;  				}  				if (dBC < lowest)  				{  					lowest = dBC;  					closestPoint = pBC;  				}    				//Change the xy value to a value which is within the reach of the lamp.  				xy.x = closestPoint.x;  				xy.y = closestPoint.y;  			}
Magic Number,Q42.HueApi.ColorConverters.Original,HueColorConverter,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\Original\HueColorConverter-Arrays.cs,ColorFromXY,The following statement contains a magic number: if (!inReachOfLamps)  			{  				//It seems the colour is out of reach  				//let's find the closest colour we can produce with our lamp and send this XY value out.    				//Find the closest point on each line in the triangle.  				CGPoint pAB = GetClosestPointToPoints(colorPoints[0]' colorPoints[1]' xy);  				CGPoint pAC = GetClosestPointToPoints(colorPoints[2]' colorPoints[0]' xy);  				CGPoint pBC = GetClosestPointToPoints(colorPoints[1]' colorPoints[2]' xy);    				//Get the distances per point and see which point is closer to our Point.  				float dAB = GetDistanceBetweenTwoPoints(xy' pAB);  				float dAC = GetDistanceBetweenTwoPoints(xy' pAC);  				float dBC = GetDistanceBetweenTwoPoints(xy' pBC);    				float lowest = dAB;  				CGPoint closestPoint = pAB;    				if (dAC < lowest)  				{  					lowest = dAC;  					closestPoint = pAC;  				}  				if (dBC < lowest)  				{  					lowest = dBC;  					closestPoint = pBC;  				}    				//Change the xy value to a value which is within the reach of the lamp.  				xy.x = closestPoint.x;  				xy.y = closestPoint.y;  			}
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: R = red / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: G = green / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: B = blue / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: if (hexColor.Length != 6)  				throw new ArgumentException("hexColor should contains 6 characters"' nameof(hexColor));
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: int red = int.Parse(hexColor.Substring(0' 2)' NumberStyles.AllowHexSpecifier);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: int green = int.Parse(hexColor.Substring(2' 2)' NumberStyles.AllowHexSpecifier);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: int green = int.Parse(hexColor.Substring(2' 2)' NumberStyles.AllowHexSpecifier);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: int blue = int.Parse(hexColor.Substring(4' 2)' NumberStyles.AllowHexSpecifier);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: int blue = int.Parse(hexColor.Substring(4' 2)' NumberStyles.AllowHexSpecifier);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: R = red / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: G = green / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,RGBColor,The following statement contains a magic number: B = blue / 255.0;
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,ToHex,The following statement contains a magic number: int red = (int)(R * 255.99);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,ToHex,The following statement contains a magic number: int green = (int)(G * 255.99);
Magic Number,Q42.HueApi.ColorConverters,RGBColor,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\RGBColor.cs,ToHex,The following statement contains a magic number: int blue = (int)(B * 255.99);
Missing Default,Q42.HueApi.ColorConverters.HSB,HSB,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.ColorConverters\HSB\HSB.cs,GetRGB,The following switch statement is missing a default case: switch (sectorNumber)  				{  					case 0:  						r = brightness;  						g = t;  						b = p;  						break;  					case 1:  						r = q;  						g = brightness;  						b = p;  						break;  					case 2:  						r = p;  						g = brightness;  						b = t;  						break;  					case 3:  						r = p;  						g = q;  						b = brightness;  						break;  					case 4:  						r = t;  						g = p;  						b = brightness;  						break;  					case 5:  						r = brightness;  						g = p;  						b = q;  						break;  				}
