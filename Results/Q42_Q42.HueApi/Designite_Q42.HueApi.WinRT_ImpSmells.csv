Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Q42.HueApi.WinRT,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.WinRT\SSDPBridgeLocator.cs,LocateBridgesAsync,The following statement contains a magic number: using (var socket = new DatagramSocket())        {            //Handle MessageReceived          socket.MessageReceived += (sender' e) =>          {            var reader = e.GetDataReader();            var bytesRemaining = reader.UnconsumedBufferLength;            var receivedString = reader.ReadString(bytesRemaining);              var location = receivedString.Substring(receivedString.IndexOf("LOCATION:"' System.StringComparison.Ordinal) + 9);            receivedString = location.Substring(0' location.IndexOf("\r"' System.StringComparison.Ordinal)).Trim();              discoveredDevices.Add(receivedString);          };            await socket.BindEndpointAsync(null' string.Empty);          socket.JoinMulticastGroup(multicastIP);            var start = DateTime.Now;            do          {            using (var stream = await socket.GetOutputStreamAsync(multicastIP' "1900"))            using (var writer = new DataWriter(stream))            {              string request = "M-SEARCH * HTTP/1.1\r\n" +                           "HOST:239.255.255.250:1900\r\n" +                           //"ST:urn:schemas-upnp-org:device:Basic:1\r\n" + //Alternative                           // "ST:upnp:rootdevice\r\n" +                    //Alternative                           "ST:SsdpSearch:all\r\n" +                           "MAN:\"ssdp:discover\"\r\n" +                           "MX:3\r\n\r\n\r\n";                writer.WriteString(request.ToString());              await writer.StoreAsync();              }            }          while (DateTime.Now.Subtract(start) < timeout); // try for thee seconds        }
Magic Number,Q42.HueApi.WinRT,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.WinRT\SSDPBridgeLocator.cs,IsHue,The following statement contains a magic number: var http = new HttpClient { Timeout = TimeSpan.FromMilliseconds(2000) };
Magic Number,Q42.HueApi.WinRT,SSDPBridgeLocator,C:\repos\Q42_Q42.HueApi\src\Q42.HueApi.WinRT\SSDPBridgeLocator.cs,IsHue,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(res))        {  		res = res.ToLower();            if (res.Contains("philips hue bridge"))  		{  			int startSerial = res.IndexOf("<serialnumber>");  			if(startSerial > 0)  			{  				int endSerial = res.IndexOf("</"' startSerial);    				int startPoint = startSerial + 14;  				return res.Substring(startPoint' endSerial - startPoint);  			}  		}        }
