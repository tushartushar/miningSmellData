Implementation smell,Namespace,Class,File,Method,Description
Long Method,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The method has 148 lines of code.
Long Method,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,The method has 235 lines of code.
Long Method,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The method has 126 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,The method has 147 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,HandleAttestationDeattestation,The method has 147 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The method has 285 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetTrackingDetails,The method has 123 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The method has 152 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The method has 210 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The method has 107 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The method has 168 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The method has 116 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The method has 318 lines of code.
Long Method,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The method has 147 lines of code.
Long Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The method has 162 lines of code.
Long Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The method has 168 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The method has 138 lines of code.
Long Method,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The method has 191 lines of code.
Long Method,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The method has 186 lines of code.
Long Method,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The method has 150 lines of code.
Long Method,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The method has 137 lines of code.
Long Method,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,WriteMenuItem,The method has 121 lines of code.
Long Method,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The method has 104 lines of code.
Complex Method,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,GetAmountsOwed,Cyclomatic complexity of the method is 11
Complex Method,Swarmops.Frontend.Automation,Json_BudgetsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-BudgetsTree.aspx.cs,Page_Load,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Automation,Json_FinancialAccountsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-FinancialAccountsTree.aspx.cs,Page_Load,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,Page_Load,Cyclomatic complexity of the method is 13
Complex Method,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,Cyclomatic complexity of the method is 17
Complex Method,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,SetPersonEditorData,Cyclomatic complexity of the method is 15
Complex Method,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,Cyclomatic complexity of the method is 30
Complex Method,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,StoreCallback,Cyclomatic complexity of the method is 16
Complex Method,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,Cyclomatic complexity of the method is 16
Complex Method,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,HandleAttestationDeattestation,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,Cyclomatic complexity of the method is 26
Complex Method,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.Financial,PayOutMoney,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\PayOutMoney.aspx.cs,GetPaymentTransferInfo,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayout,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MarkDirectPurchase,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetTrackingDetails,Cyclomatic complexity of the method is 15
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 27
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 25
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 11
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingExpenseClaims,Cyclomatic complexity of the method is 13
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,Cyclomatic complexity of the method is 20
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,Cyclomatic complexity of the method is 37
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,ViewVatReports,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewVatReports.aspx.cs,Page_Load,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,Cyclomatic complexity of the method is 13
Complex Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,Cyclomatic complexity of the method is 28
Complex Method,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,Cyclomatic complexity of the method is 22
Complex Method,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,Cyclomatic complexity of the method is 17
Complex Method,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,WriteMenuItem,Cyclomatic complexity of the method is 21
Complex Method,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,CulturePreInit,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,Cyclomatic complexity of the method is 13
Long Parameter List,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The method has 7 parameters. Parameters: recipientTypeId' geographyId' mode' subject' body' dummyMail' live
Long Parameter List,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ExpensifyRecordProceed,The method has 6 parameters. Parameters: masterGuid' recordGuid' amountString' amountVatString' budgetId' description
Long Parameter List,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MarkDirectPurchase,The method has 5 parameters. Parameters: transactionId' budgetId' vatAmountString' newDescription' guid
Long Parameter List,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The method has 6 parameters. Parameters: accountId' treeValue' singleValue' expanded' sigma' format
Long Parameter List,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The method has 5 parameters. Parameters: mysqlHostName' rootPassword' serverName' ipAddress' random
Long Parameter List,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,FirstCredentialsTest,The method has 14 parameters. Parameters: readDatabase' readServer' readUser' readPassword' writeDatabase' writeServer' writeUser' writePassword' adminDatabase' adminServer' adminUser' adminPassword' serverName' ipAddress
Long Parameter List,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The method has 15 parameters. Parameters: name' organizationId' mail' password' phone' street1' street2' postalCode' city' countryCode' dateOfBirth' geographyId' activist' gender' positionIdsVolunteer
Long Identifier,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the parameter overEngineeredAssignmentPrompts is 31.
Long Identifier,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,,The length of the parameter LabelImpersonationWarningHeader is 31.
Long Identifier,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,,The length of the parameter LiteralImpersonationWarningText is 31.
Long Identifier,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,,The length of the parameter LabelHeaderCorrespondenceTransmission is 37.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,,The length of the parameter LabelListOutboundInvoicesHeader is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,,The length of the parameter LabelListInboundInvoicesHeader is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,,The length of the parameter LabelExpensifyProcessingComplete is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,,The length of the parameter LabelExpensifyHeaderDescription is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,,The length of the parameter LabelExpensifyUploadAnotherHeader is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,,The length of the parameter CurrencyModalExpensifyAmountVat is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralExpensesBudgetsAreNegative is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralDebtBalancesAreNegative is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralLabelAdministrativeShort is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralLabelHeaderDailyOperations is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralLabelHeaderConfiguration is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,,The length of the parameter LiteralLabelAdministrativeLong is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,,The length of the parameter LabelHeaderUnbalancedTransactions is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,,The length of the parameter LabelDescribePurchaseDescriptionUpdate is 38.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,,The length of the parameter LabelDescribePurchaseVatAmount is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,,The length of the parameter LabelDescribePurchaseUploadReceipt is 34.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LiteralErrorAddRowSelectAccount is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelTreeHeaderDescriptionAccount is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelHotwalletHeaderDescription is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelHotwalletHeaderPresentationCurrency is 40.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelGridHeaderDateTimeEntered is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelTransactionHasDocumentation is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewVatReports,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewVatReports.aspx.cs,,The length of the parameter LabelHeaderNoVatReportsToDisplay is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,,The length of the parameter LabelViewOutstandingAccountsHeader is 34.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,,The length of the parameter LabelGridHeaderExpectedCloseDate is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,,The length of the parameter LabelDashboardTemporaryContent is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,,The length of the parameter LabelSidebarTodoConnectDatabase is 31.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LabelVolunteerHeaderPositionTitle is 33.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LabelVolunteerHeaderHighestGeography is 36.
Long Identifier,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,,The length of the parameter _supportedPartialCulturesLookup is 31.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelDashboardProfitLoss is 30.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderAccount is 34.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderSecurity is 35.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonCurrentPassword is 31.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonCurrentPassword is 36.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonNewPassword1 is 33.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonNewPassword2 is 33.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderSecurityProvisioning is 47.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPerson2FAProvisioning is 31.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonResetPassword is 34.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPerson2FAProvisioning is 36.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderPaymentHistory is 41.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemName is 37.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemDescription is 44.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemOpenedDate is 43.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderAmountOwed is 39.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderAmountPaid is 39.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemClosedDate is 43.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemNotes is 38.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonPostalCodeCity is 30.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankClearing is 34.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankAccount is 33.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankHolder is 32.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBitcoinAddress is 36.
Long Identifier,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelBitIdRegisterHeader is 30.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,Page_Load,The length of the statement  "            int personId = Int32.Parse(Request.QueryString["PersonId"]); // may throw and that's okay' returning a 500 instead of Json the caller shouldn't see " is 147.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,GetAmountsOwed,The length of the statement  "                    newItem.Description = String.Format(Resources.Global.Financial_SalaryDualSpecification' salary.Identity' salary.PayoutDate); " is 124.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteItems,The length of the statement  "                    "\"id\":\"{0}\"'\"name\":\"{1}\"'\"description\":\"{2}\"'\"opened\":\"{3}\"'\"owedToPerson\":\"<span class='weight-more-emphasis'>{4}</span>\"'\"paidToPerson\":\"<span class='weight-more-emphasis'>{5}</span>\"'\"closed\":\"{6}\""' " is 230.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteItems,The length of the statement  "                    item.OpenedDate > Constants.DateTimeLowThreshold && item.PaidToPerson == 0? item.OpenedDate.ToString("yyyy-MMM-dd") : string.Empty' " is 131.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteFooter,The length of the statement  "                    "\"id\":\"Footer\"'\"name\":\"<span class='weight-most-emphasis uppercase'>{0}</span>\"'\"description\":\"<span class='weight-more-emphasis uppercase'>{1}</span>\"'\"owedToPerson\":\"<span class='weight-most-emphasis uppercase'>{2}</span>\"'\"paidToPerson\":\"<span class='weight-most-emphasis uppercase'>{3}</span>\""' " is 319.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteFooter,The length of the statement  "                    currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance > 0 ? (currentBalance / 100.0).ToString("N2") : string.Empty' " is 132.
Long Statement,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteFooter,The length of the statement  "                    currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance < 0 ? (currentBalance / -100.0).ToString("N2") : string.Empty " is 132.
Long Statement,Swarmops.Frontend.Automation,Json_ByGuid,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-ByGuid.aspx.cs,GetNonsocketProgress,The length of the statement  "                return new AjaxCallResult {Success = true' DisplayMessage = ((int) progressObject).ToString(CultureInfo.InvariantCulture) }; " is 124.
Long Statement,Swarmops.Frontend.Automation,Json_GeographiesTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-GeographiesTree.aspx.cs,RecurseTreeMap,The length of the statement  "                    // Special case for country nodes: "[NativeName] ([LocalizedName])"' e.g. "Deutschland (Tyskland)" for Germany when in Swedish " is 126.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,Page_Load,The length of the statement  "            PositionLevel level = (PositionLevel) Enum.Parse (typeof (PositionLevel)' Request["Level"]); // may throw on invalid param but so what' that's what should happen anyway " is 168.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"minMax\":\"{4} / {5}\"'\"iconType\":\"{6}\"'\"actions\":\"{7}\""' " is 160.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"\"'\"expires\":\"\"'\"minMax\":\"\"'\"iconType\":\"{6}\"'\"actions\":\"\""' " is 142.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-{1}\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"actions\":\"{4}\""' " is 139.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                if (positionNode.Children.Count > 0)  // This should only trigger when position.MaxCount is also 1' or a very weird UI will result " is 130.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,The length of the statement  "            if ((position.OrganizationId > 0 && authData.CurrentOrganization.Identity != position.OrganizationId) || person.Identity < 0) " is 125.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,The length of the statement  "            if (position.PositionLevel == PositionLevel.SystemWide && !authData.Authority.HasAccess (new Access (AccessAspect.Administration))) " is 131.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,TerminatePositionAssignment,The length of the statement  "                assignment.Terminate(authData.CurrentUser' authData.CurrentUser.GetPrimaryPosition(authData.CurrentOrganization)' string.Empty); " is 128.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,TerminateImpersonation,The length of the statement  "            HttpContext.Current.Response.AppendCookie(new HttpCookie("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Admin.CommenceImpersonation_Ended' utcNow)))); " is 179.
Long Statement,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,Localize,The length of the statement  "            this.LiteralImpersonationWarningText.Text = String.Format(Resources.Pages.Admin.CommenceImpersonation_Active_Text' CurrentUser.Canonical); " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The length of the statement  "            this.InfoBoxLiteral = String.Format(Resources.Pages.Admin.BitcoinEchoTest_Info' BitcoinUtility.EchoFeeSatoshis / 100.0); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address " is 127.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash); " is 216.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.LabelApplicantLabel.Text = Resources.Pages.Admin.CreateOrganization_ApplicantTitle; // this seems to not take effect? " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add (new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Nonprofit' "Nonprofit")); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add(new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Commercial' "Commercial")); " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add(new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Government' "Government")); " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            ParticipantTitle applicantLabel = (ParticipantTitle)(Enum.Parse(typeof(ParticipantTitle)' this.DropApplicantLabel.SelectedValue)); " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            ParticipantTitle activistLabel = (ParticipantTitle)(Enum.Parse(typeof(ParticipantTitle)' this.DropActivistLabel.SelectedValue)); " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            if (activistLabel == ParticipantTitle.Unknown || peopleLabel == ParticipantTitle.Unknown || asRoot == "0" || currencyCode == "0") " is 129.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CommenceImpersonation,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CommenceImpersonation.aspx.cs,Commence,The length of the statement  "            HttpContext.Current.Response.AppendCookie(new HttpCookie("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Admin.CommenceImpersonation_Success' utcNow)))); " is 181.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,Json_CultureInfo,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Json-CultureInfo.aspx.cs,AllCulturesAsJson,The length of the statement  "                        "\"cultureId\":\"{0}\"'\"name\":\"{1}\"'\"nameInternational\":\"{2}\"'\"country\":\"{3}\"'\"flag\":\"{4}\"'\"supported\":\"{5}\""' " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,Json_CultureInfo,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Json-CultureInfo.aspx.cs,AllCulturesAsJson,The length of the statement  "                        cultureFullLookup.ContainsKey(culture.Name)? yesImage: culturePartialLookup.ContainsKey(culture.Name.Substring(0' culture.Name.IndexOf('-')))? halfImage: noImage " is 161.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,Localize,The length of the statement  "            this.LabelHeaderStrategic.Text = String.Format(Resources.Pages.Admin.OrgStaffing_Header_StrategicPositions' CurrentOrganization.Name); " is 134.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,Localize,The length of the statement  "            this.LabelHeaderExecutive.Text = String.Format(Resources.Pages.Admin.OrgStaffing_Header_ExecutivePositions' CurrentOrganization.Name); " is 134.
Long Statement,Swarmops.Frontend.Pages.Admin,Diagnostics,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Diagnostics.aspx.cs,Localize,The length of the statement  "            InfoBoxLiteral = @"This runs a series of self-tests to check that the installation is working correctly. If one or more tests fail' or just don't pass' this helps you diagnose precisely what is needed to correct the problem."; " is 226.
Long Statement,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,Localize,The length of the statement  "            /*this.DropParticipationEntry.Items.Add (new ListItem ("Application submitted + paid"' "ApplicationPayment"));    --- ALL THESE ARE TODO " is 136.
Long Statement,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,StoreCallback,The length of the statement  "            if (!authenticationData.Authority.HasAccess (new Access (authenticationData.CurrentOrganization' AccessAspect.Administration' AccessType.Write))) " is 145.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,CheckSysadminsPopulated,The length of the statement  "                    rootChildren.Where (position => position.PositionType == PositionType.System_SysadminReadWrite).ToList() [0]; // should exist " is 125.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The length of the statement  "                    Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase); " is 151.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The length of the statement  "                        OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest); " is 127.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]]; " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female; " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None); " is 142.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]' " is 189.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                    lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender); " is 198.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,Temp_SetOrganizationAdminAccess,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\Temp-SetOrganizationAdminAccess.aspx.cs,Page_Load,The length of the statement  "                "This is a <strong>temporary</strong> access mechanism to get Swarmops usage off the ground. Real' fine-grained' responsibility-based access control per organizational role is scheduled to be implemented by the <em>Swarmops Orange</em> release (Jun 30' 2015)."; " is 261.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,Temp_SetOrganizationAdminAccess,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\Temp-SetOrganizationAdminAccess.aspx.cs,ButtonSave_Click,The length of the statement  "            // Rough stuff. This will throw up on the user if the input is bad. That's kind of intentional as it's before the save and this is a very temporary page. " is 153.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,Localize,The length of the statement  "            this.DropRecipientClasses.Items.Add(new ListItem(Participant.Localized(CurrentOrganization.ApplicantLabel' TitleVariant.Plural)' "1")); " is 135.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,Localize,The length of the statement  "            this.DropRecipientClasses.Items.Add(new ListItem(Participant.Localized(CurrentOrganization.RegularLabel' TitleVariant.Plural)' "2")); " is 133.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,Localize,The length of the statement  "            this.DropRecipientClasses.Items.Add (new ListItem (Participant.Localized(CurrentOrganization.ActivistLabel' TitleVariant.Plural)' "3")); " is 136.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The length of the statement  "            if (PilotInstallationIds.IsPilot(PilotInstallationIds.DevelopmentSandbox) && authData.CurrentUser.Identity == 1 && !live) " is 121.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The length of the statement  "                OutboundComm.CreateParticipantMail(subject' body' authData.CurrentUser' authData.CurrentUser' authData.CurrentOrganization' Geography.FromIdentity(geographyId)); " is 161.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Localize,The length of the statement  "                        this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Page_Load,The length of the statement  "                CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.Administration)).ToString(CultureInfo.InvariantCulture).ToLowerInvariant(); " is 149.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Localize,The length of the statement  "                        this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,Localize,The length of the statement  "            this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            OutboundInvoice newInvoice = OutboundInvoice.Create (CurrentOrganization' dueDate' budget' this.TextClient.Text' string.Empty' string.Empty' CurrentOrganization.Currency' false' this.TextReference.Text' CurrentUser); " is 216.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            // TODO: VAT -- needs to be PER ITEM' and dbfields must update for this' quite a large work item' do not short circuit hack this " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            // Create financial transaction in the ledger (this logic should not be in the presentation layer at all' move it to a better OutboundInvoice.Create that takes OutboundInvoiceItems as parameter) " is 194.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash); " is 215.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The length of the statement  "            SupportFunctions.DisableSslCertificateChecks(); // MONO BUG/MISFEATURE: Mono has no root certificates' so can't verify cert " is 123.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The length of the statement  "                    "<a href='/Pages/v5/Support/StreamUpload.aspx?DocId={0}&hq=1' data-caption=\"{1}\" class='FancyBox_Gallery' data-fancybox='{2}'>"; " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyOutputRecords,The length of the statement  "                "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" data-docid='{0}' class='LocalViewDox' style='cursor:pointer' height='20' width='20' />"; " is 282.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyOutputRecords,The length of the statement  "                "<img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='18' width='24' class='LocalEditExpenseClaim' data-guid='{0}' />"; " is 138.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,Page_Load,The length of the statement  "            Payouts previousPayouts = Payouts.ForOrganization (CurrentOrganization); // gets all currently open payouts - enabled for undoing " is 129.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3 " is 203.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img id='IconApproval{7}' class='IconApproval{7} LocalIconApproval LocalPrototype action-icon' baseid='{7}' protoid='{0}' data-ocr='{10}' data-fieldcount='{9}' data-reference='{5}' />" + " is 187.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The length of the statement  "                    "<img id='IconApproval{7}' class='IconApproval{7} LocalIconApproval LocalPaid action-icon' baseid='{7}' protoid='{0}' databaseid='{8}' data-ocr='{10}' data-fieldcount='{9}' data-reference='{5}' />" + " is 199.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,Page_Load,The length of the statement  "            Payouts previousPayouts = Payouts.ForOrganization (CurrentOrganization); // gets all currently open payouts - enabled for undoing " is 129.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3 " is 203.
Long Statement,Swarmops.Frontend.Pages.Financial,PayOutMoney,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\PayOutMoney.aspx.cs,ConfirmPayout,The length of the statement  "            Payout payout = Payout.CreateFromProtoIdentity (authData.CurrentUser' protoIdentity); // TODO: Catch ConcurrencyException " is 121.
Long Statement,Swarmops.Frontend.Pages.Financial,PayOutMoney,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\PayOutMoney.aspx.cs,UndoPayout,The length of the statement  "                // this payout has already been settled' or picked up for settling. This is a concurrency error' detected before actually trying to change it. " is 142.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.LabelOptionsShowInactive.Text = String.Format(Resources.Pages.Ledgers.AccountPlan_Options_ShowInactive' inactiveCount); " is 124.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.DropAccountAutomationProfile.Items.Add(new ListItem("[BTC] Bitcoin Core - Armory"' ((int)(FinancialAccountAutomationProfileHardIds.BitcoinCoreArmory)).ToString())); " is 169.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.DropAccountAutomationProfile.Items.Add(new ListItem("[BCH] Bitcoin Cash - Armory"' ((int)(FinancialAccountAutomationProfileHardIds.BitcoinCoreArmory)).ToString())); " is 169.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.DropAccountAutomationProfile.Items.Add(new ListItem("[CZ CZK] Fio CSV"' ((int)(FinancialAccountAutomationProfileHardIds.BankCzechFio)).ToString())); " is 153.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.DropAccountAutomationProfile.Items.Add(new ListItem("[DE EUR] Postbank CSV"' ((int)(FinancialAccountAutomationProfileHardIds.BankGermanyPostbank)).ToString())); " is 165.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The length of the statement  "                this.DropAccountAutomationProfile.Items.Add(new ListItem("[SE SEK] SEB CSV"' ((int)(FinancialAccountAutomationProfileHardIds.BankSwedenSeb)).ToString())); " is 154.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,SetAccountInitialBalance,The length of the statement  "                account.InitialBalance = new Money(desiredInitialBalanceCents' account.Organization.Currency); // only avaialable for presentation currencies " is 141.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,SetAccountBudget,The length of the statement  "                    Int64 newProfitLossProjection = allProfitLossAccounts.Where(queryAccount => queryAccount.Identity != authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.Identity).Sum(queryAccount => queryAccount.GetBudgetCents(thisYear)); " is 235.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetInactiveAccountCount,The length of the statement  "            int inactiveAccountCount = FinancialAccounts.ForOrganization(authData.CurrentOrganization).Count(account => !account.Active); " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The length of the statement  "                    string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.OrganizationSequenceId' " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The length of the statement  "                    bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description); " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenVatReportData,The length of the statement  "                Int64 vatDiffCents = report.VatInboundCents - report.VatOutboundCents; // produces positive value for surplus; same as tx on match " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,BalanceTransactionManually,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || account.OrganizationId != authData.CurrentOrganization.Identity) " is 139.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayout,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || payout.OrganizationId != authData.CurrentOrganization.Identity) " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenOutboundInvoice,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || outboundInvoice.OrganizationId != authData.CurrentOrganization.Identity) " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayoutForeign,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || payout.OrganizationId != authData.CurrentOrganization.Identity) " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayoutForeign,The length of the statement  "            transaction.AddRow (forexSpillAccount' -(payout.AmountCents + transaction.Rows.AmountCentsTotal)' // plus because AmountCentsTotal is negative " is 142.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderDerivationPath.Text = Resources.Global.Financial_BitcoinChain + @"' " + Resources.Pages.Ledgers.BitcoinHotwallet_DerivationPath; " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderAddress.Text = Resources.Pages.Ledgers.BitcoinHotwallet_Address + @" / " + Resources.Pages.Ledgers.BitcoinHotWallet_TransactionHash; " is 150.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderFiatValue.Text = String.Format(Resources.Pages.Ledgers.BitcoinHotwallet_ValueFiat' CurrentOrganization.Currency.DisplayCode); " is 143.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetProfitLossNode,The length of the statement  "                "Row" + resource' string.Format (Resources.Pages.Ledgers.ResourceManager.GetString("AccountPlan_" + resource)' _year)' "Row" + resource' amount / 100.0) + '}'; " is 159.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The length of the statement  "            IOrderedEnumerable<FinancialAccount> childAccountsSorted = this._hashedAccounts[rootNodeId].OrderBy(account => account.Name);; " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The length of the statement  "                            "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" + " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The length of the statement  "                            "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('/Images/Icons/iconshock-warning-16x12px.png')\\\">" + " is 196.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The length of the statement  "                        "<img class='IconEdit' accountId='{0}{1}' height='16' width='24' src='/Images/Icons/iconshock-wrench-128x96px-centered.png' />"' " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The length of the statement  "                                      "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""' " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,JsonDualString,The length of the statement  "                    "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,JsonDualString,The length of the statement  "                "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The length of the statement  "            if (!CurrentAuthority.HasAccess(new Access(CurrentOrganization' AccessAspect.Bookkeeping' AccessType.Read)) && CurrentOrganization.HasOpenLedgers) " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The length of the statement  "            bool displayDescription = CurrentAuthority.HasAccess(new Access(CurrentOrganization' AccessAspect.BookkeepingDetails' AccessType.Read)); " is 136.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The length of the statement  "                    "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" data-txid='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />"; " is 285.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "            bool displayDescription = CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.BookkeepingDetails' AccessType.Read)); " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "                        "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" data-txid='{0}' class='LocalViewDox' style='cursor:pointer' height='20' width='20' />" + " is 282.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "                        "<img src='/Images/Icons/iconshock-download-240px.png' onmouseover=\"this.src='/Images/Icons/iconshock-download-hot-240px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-download-240px.png';\" data-docid='{1}' data-docname=\"{2}\" class='LocalDownloadDox' style='cursor:pointer' height='18' width='18' />"; " is 313.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "                            actionHtml += String.Format("<a href='/Pages/v5/Support/StreamUpload.aspx?DocId={0}&hq=1' data-caption=\"{1}\" class='FancyBox_Gallery' data-fancybox='{2}'></a>"' " is 162.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "                        actionHtml = String.Format(hasDoxString' row.FinancialTransactionId.ToString(CultureInfo.InvariantCulture)' documents[0].Identity' CurrentOrganization.Name + " - " + Resources.Global.Financial_GeneralLedger + " " + transaction.DateTime.ToShortDateString() + " - " + Resources.Global.Financial_TransactionIdShort + transaction.OrganizationSequenceId.ToString("N0")) + "<span class='hiddenDocLinks'>" + actionHtml + "</span>"; " is 424.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The length of the statement  "                        "\"id\":\"{0:N0}\"'\"idDisplay\":\"<span class='weight-more-emphasis'>{0:N0}</span>\"'\"datetime\":\"<span class='weight-more-emphasis'>{1:MMM-dd HH:mm}</span>\"'\"txDescription\":\"<span class='weight-more-emphasis tx-description'>{2}</span>\"'\"action\":\"{3}\"'" + " is 267.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "                    element += String.Format("'\"dox\":\"" + hasDoxString + "\""' transaction.Identity' documents[0].Identity' CurrentOrganization.Name + " - " + report.Description + " - " + Resources.Global.Financial_TransactionIdShort + transaction.OrganizationSequenceId.ToString("N0")); " is 270.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "            Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""' " is 139.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "                JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0)); " is 170.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The length of the statement  "                string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_ProfitToDate' _year)); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The length of the statement  "                string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_LossToDate' _year)); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The length of the statement  "                                   (line.AccountValues.ThisYear-line.AccountValues.PreviousYear) * signReverser' line.DefaultExpand' string.Empty' "(+#'#.);(-#'#.);---"); " is 135.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The length of the statement  "                    element += "'\"state\":\"" + (line.DefaultExpand? "open":"closed") + "\"'\"children\":" + RecurseReport (line.Children); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class='annualreportdata-collapsed-{0}' " + (expanded? "style='display:none'": "") + ">" + sigma + " " + FormatSingleString(treeValue' format) + "</span>" +  " is 164.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class='annualreportdata-collapsed-{0}'>" + sigma + " " + FormatSingleString(treeValue' format) + " " + "</span>" + " is 123.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                "<span class='annualreportdata-expanded-{0}' style='display:none'>" + FormatSingleString(singleValue' format) + "</span>\""' " is 124.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The length of the statement  "                    element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""' " is 186.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""' " is 186.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            long fiatCentsPerCoreCoin = new Money (BitcoinUtility.SatoshisPerBitcoin' Currency.BitcoinCore).ToCurrency(_authenticationData.CurrentOrganization.Currency).Cents; " is 163.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            long fiatCentsPerCashCoin = new Money(BitcoinUtility.SatoshisPerBitcoin' Currency.BitcoinCash).ToCurrency(_authenticationData.CurrentOrganization.Currency).Cents; " is 162.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            conversionRateLookup[BitcoinChain.Cash] = fiatCentsPerCashCoin/1.0/BitcoinUtility.SatoshisPerBitcoin;   // the "/1.0" converts to double implicitly " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "                        (address.Chain == BitcoinChain.Cash? address.HumanAddress.Substring("bitcoincash:".Length): address.ProtocolLevelAddress)' " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "                        (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2")); " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,JsonExpandingString,The length of the statement  "                "<span class=\\\"bitcoinhotwalletdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N2}</span><span class=\\\"bitcoinhotwalletdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 190.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The length of the statement  "            if (!CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.Bookkeeping' AccessType.Read)) && CurrentOrganization.HasOpenLedgers) " is 148.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The length of the statement  "            bool displayDescription = CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.BookkeepingDetails' AccessType.Read)); " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The length of the statement  "                    "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" data-txid='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />"; " is 285.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The length of the statement  "                result.Append ("{\"accountName\":\"<img src='/Images/Icons/iconshock-warning-24px.png' height='16px' width='16px' class='float-far' />" + " is 137.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The length of the statement  "                result.Append ("}'");  // the comma isn't really necessary here but will be stripped later and is kept for cut&paste consistency of this code block " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The length of the statement  "                ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1)); // replaces DateTime.Min...MaxValue " is 137.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // This is a very expensive op. We need to load ALL the cash advances' and determine the opening date from its associated " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // payout. Then' we need to determine when it was paid pack through another associated payout (or invoice payment) which  " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // I don't know how to find at the time of writing this comment' and if the target date is in between those two' then the " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "                    // TODO: Find OutboundInvoiceItem that depends on this CashAdvance. Look at the invoice date. That's our PaidBack datetime. " is 123.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The length of the statement  "                    "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The length of the statement  "                "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                        // one transaction row (we know there's not zero rows' because the transaction is unbalanced' which requires at least one nonzero row) " is 134.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                        "\"id\":\"{0:N0}\"'\"description\":\"{1}\"'\"accountName\":\"{2}\"'\"delta\":\"{3:+#'#.00;−#'#.00}\"'\"dateTime\":\"{4:yyyy-MMM-dd HH:mm}\""' " is 141.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                            transaction.OrganizationSequenceId' JsonSanitize (transaction.Description)' JsonSanitize (accountName)' txRows.AmountCentsTotal / 100.0' transaction.DateTime); " is 159.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                            "'\"action\":\"<img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='16' width='24' class='LocalIconFix' txId='{0}' />\""' " is 140.
Long Statement,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,UploadBankStatement,The length of the statement  "            FinancialAccountDocument accountDoc = FinancialAccountDocument.Create(account' FinancialAccountDocumentType.BankStatement' authData.CurrentUser' " is 144.
Long Statement,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,ResyncSatoshisInLedger,The length of the statement  "            adjustmentTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' 0' authData.CurrentUser).AmountForeignCents = new Money(adjustment' Currency.BitcoinCash); " is 175.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The length of the statement  "                    yearElements.Add (WriteElement (yearLoop' String.Format (Resources.Global.Global_YearX' yearLoop)' yearData' monthElements)); " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The length of the statement  "            element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""' " is 173.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The length of the statement  "                data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0' " is 149.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""' " is 182.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""' " is 182.
Long Statement,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetAutomationProfileName,The length of the statement  "            if (profile.CurrencyId == 0 || profile.CurrencyId == authData.CurrentOrganization.Currency.Identity) // uses presentation currency " is 130.
Long Statement,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessUploadThread,The length of the statement  "                    using (StreamReader reader = CreateReader(uploadedDoc' externalData.Profile.Encoding))  // Guarantees disposal of reader " is 120.
Long Statement,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessUploadThread,The length of the statement  "                    using (StreamReader reader = CreateReader(uploadedDoc' externalData.Profile.Encoding))  // Guarantees disposal of reader " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,Localize,The length of the statement  "            this.LabelSidebarInfoContent.Text = @"Welcome to the Swarmops installation pages. This will guide you to an operational Swarmops."; " is 131.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Check the host names and addresses again as a security measure - after all' we can be called from outside our intended script " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Protect against race condition on a really really slow server: wait until there is a first person or 15 seconds have expired " is 127.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Page_Load,The length of the statement  "                Response.Redirect(Request.RawUrl.Substring (0' Request.RawUrl.IndexOf ("Culture=")-1)' true); // "-1" removes the preceding & or ? " is 130.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.LabelActivationLevelIntro.Text = String.Format(Resources.Pages.Public.Signup_ActivationLevelText' this.Organization.Name); " is 127.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.RadioActivationActive.Text = String.Format(Resources.Pages.Public.Signup_ActivationActiveHeader' Participant.Localized (this.Organization.ActivistLabel)); " is 159.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                        Participant.Localized(this.Organization.RegularLabel' TitleVariant.Ship)' DateTime.Today.AddYears(1).ToShortDateString()' this.Organization.Name); " is 146.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.RadioActivationPassive.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassiveHeader' Participant.Localized(this.Organization.RegularLabel)); " is 159.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.LabelActivationPassiveText.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassive' Participant.Localized(this.Organization.RegularLabel)); " is 157.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.LabelHeader.Text = String.Format(Resources.Pages.Public.Signup_ApplyingFor' Participant.Localized(this.Organization.RegularLabel' TitleVariant.Ship)' Organization.Name).ToUpperInvariant(); " is 193.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.RadioActivationPassive.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassiveHeader' Participant.Localized(this.Organization.ApplicantLabel)); " is 161.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.LabelActivationPassiveText.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassiveApplication' Participant.Localized(this.Organization.ApplicantLabel)' Participant.Localized(this.Organization.RegularLabel' TitleVariant.Ship)); " is 244.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.RadioActivationPassive.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassiveHeader' Participant.Localized(this.Organization.RegularLabel)); " is 159.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                    this.LabelActivationPassiveText.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassive' Participant.Localized(this.Organization.RegularLabel)); " is 157.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The length of the statement  "                Participation participation = newPerson.AddParticipation(organization' DateTime.UtcNow.AddYears(1));  // TODO: set duration from organization settings of Participantship " is 169.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The length of the statement  "            HttpContext.Current.Response.AppendCookie (new HttpCookie ("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Public.Signup_DashboardMessage' organization.Name)))); " is 189.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,GuessCountry,The length of the statement  "            // IMPORTANT: If you're implementing a sensitive organization' this should use YOUR OWN geoip server and not freegeoip.com' which " is 129.
Long Statement,Swarmops.Frontend.Pages.Security,ChangeOrganizationsAdvanced,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizationsAdvanced.aspx.cs,Page_Load,The length of the statement  "            // this.PageAccessRequired = new Access(AccessAspect.Bookkeeping' AccessType.Write);  // bogus' but will prevent bad ppl from entering until real security done " is 159.
Long Statement,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 137.
Long Statement,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 135.
Long Statement,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 141.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 137.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 135.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 141.
Long Statement,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The length of the statement  "                "\"actions\":\"<a href='javascript:masterBeginEditPerson({0})'><img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='16' width='24' /></a>\""; " is 160.
Long Statement,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The length of the statement  "                                       "\"id\":\"{0}\"'\"name\":\"<span class='spanUser{0}Name'>{1}</span>\"'\"avatar16Url\":\"{2}\"'\"geographyName\":\"{3}\"'\"mail\":\"<span class='spanUser{0}Mail'>{4}</span>\"'\"notes\":\"{6}\"'\"phone\":\"<span class='spanUser{0}Phone'>{5}</span>\""' " is 249.
Long Statement,Swarmops.Frontend.Pages.v5.User,SelectLanguage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,Localize,The length of the statement  "                "Select language&nbsp;/ Seleccione su idioma&nbsp;/ Sélectionner votre langue&nbsp;/ Wählen Sie Ihre Sprache&nbsp;/ Välj språk&nbsp;/ Selecione seu idioma&nbsp;/ " + " is 165.
Long Statement,Swarmops.Frontend.Pages.v5.User,SelectLanguage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,Localize,The length of the statement  "                "Velg ditt språk&nbsp;/ Selecteer uw taal&nbsp;/ Vælg dit sprog&nbsp;/ Valitse kieli&nbsp;/ επιλέξτε τη γλώσσα σας&nbsp;/ выберите язык"; " is 137.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "            Image form = Image.FromFile (MapPath (".") + "/MonthlyTaxForm-SE-" + formVersion + ".png");  // the "." says "in same folder as this file" " is 138.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics); " is 140.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics); " is 145.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics); " is 157.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics); " is 145.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics); " is 150.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics); " is 154.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics); " is 159.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics); " is 145.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                DashboardMessage.Set ("<p>You have been logged on as <strong>Sandbox Administrator</strong> to the Swarmops Development Sandbox.</p><br/><p>This machine runs the latest development build' so you may run into diagnostic code and half-finished features. All data here is bogus test data and is reset every night.</p><br/><p><strong>In other words' welcome' and play away!</strong></p>"); " is 385.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                FormsAuthentication.SetAuthCookie (Authority.FromLogin (Person.FromIdentity (1)' Organization.Sandbox).ToEncryptedXml()' true); " is 127.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "            Organization organizationOpenLedgers = Organization.FromOpenLedgersDomain(requestHost); // returns null if doesn't exist " is 120.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                FormsAuthentication.SetAuthCookie(Authority.FromLogin (Person.FromIdentity (Person.OpenLedgersIdentity)' organizationOpenLedgers).ToEncryptedXml()' true); " is 154.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "            // Special case for CloudFlare deployments - there is a case where somebody will get their connections de-SSLed at the server " is 125.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                    !(Request.Url.ToString().StartsWith ("http://localhost:") && Debugger.IsAttached))  // Debugger.IsAttached is necessary' as link can be faked " is 141.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,TestCredentials,The length of the statement  "                    if (!authenticatedPerson.ParticipatesInOrganizationOrParent (lastOrganization) && !authenticatedPerson.ApplicantInOrganization (lastOrganization) && !testAuthority.HasSystemAccess (AccessType.Read)) " is 198.
Long Statement,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Check the host names and addresses again as a security measure - after all' we can be called from outside our intended script " is 128.
Long Statement,Swarmops.Pages.Security,RequestPasswordReset,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The length of the statement  "            resetTicket = resetTicket.Substring (0' 21); // We're using a 21-character (84-bit) key mostly for UI consistency with the ticket sent in mail' and it's secure enough " is 166.
Long Statement,Swarmops.Pages.Security,RequestPasswordReset,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The length of the statement  "            concernedPerson.ResetPasswordTicket = DateTime.UtcNow.AddHours (1).ToString(CultureInfo.InvariantCulture) + "'" + resetTicket; // Adds expiry - one hour " is 152.
Long Statement,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write(("<li class='Submenu' id='LiSwarmopsLogo'><a href='/'><div id='DivSwarmopsLogo'></div></a><ul>")); // Swarmops logo " is 128.
Long Statement,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='BuildNumber' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/swarmops-builder-40px.png' height='20' width='20' />" + Formatting.SwarmopsVersion + "</a></li>"); " is 195.
Long Statement,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "                "<li class='Disabled' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/transparency-16px.png' height='20' width='20' />" + " is 132.
Long Statement,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='Disabled' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/transparency-16px.png' height='20' width='20' />" + String.Format(Resources.Menu5.Menu5_Beta_LinesOfCode' @"<!--KaylockCount-->169'031<!--EndKaylock-->") + "</a></li>"); " is 263.
Long Statement,Swarmops.Controls.Base,MainMenu,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='Link'><a target='_blank' href='https://github.com/Swarmops/Swarmops/issues/new'><img src='/Images/Icons/iconshock-warning-24px.png' height='20' width='20' />" + Resources.Menu5.Menu5_Beta_ReportBug + "</a></li>"); " is 238.
Long Statement,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,CulturePreInit,The length of the statement  "            // Set the calendar to GregorianCalendar.USEnglish. This sometimes fails on Windows but works on Mono. If it fails on Windows' no biggie b/c " is 140.
Long Statement,Swarmops.Frontend,Default,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Default.aspx.cs,Page_Load,The length of the statement  "                "This is a Dashboard placeholder. It will contain a snapshot of the state of things as soon as the basic functions are re-implemented in the new interface."; " is 157.
Long Statement,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The length of the statement  "            // Special case for CloudFlare deployments - there is a case where somebody will get their connections de-SSLed at the server " is 125.
Long Statement,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The length of the statement  "            // this.LiteralCurrentlyLoggedIntoSwitch.Text = string.Format(Resources.Global.Master_SwitchOrganizationDialog' _currentOrganization.Name); " is 139.
Long Statement,Swarmops.Frontend.Controls.Meta,IncludedScripts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Meta\IncludedScripts.ascx.cs,Page_Load,The length of the statement  "                            "<script src=\"/Scripts/jquery.fileupload/jquery.iframe-transport.js\" type=\"text/javascript\" language=\"javascript\"></script>\r\n" + " is 136.
Long Statement,Swarmops.Frontend.Controls.Meta,IncludedScripts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Meta\IncludedScripts.ascx.cs,Page_Load,The length of the statement  "                            "<script src=\"/Scripts/jquery.fileupload/jquery.fileupload.js\" type=\"text/javascript\" language=\"javascript\"></script>\r\n"); " is 130.
Complex Conditional,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The conditional expression  "_assignable && (assignmentCount < position.MaxCount || (position.MaxCount == 0 && position.Assignments.Count > 0))"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The conditional expression  "activistLabel == ParticipantTitle.Unknown || peopleLabel == ParticipantTitle.Unknown || asRoot == "0" || currencyCode == "0""  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Admin,OrgSettings,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,The conditional expression  "!bitcoinNative && newValue == false &&                              ((authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinCold != null &&                                authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinCold.Active) ||                               (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot != null &&                                authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.Active))"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The conditional expression  "bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The conditional expression  "bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The conditional expression  "string.IsNullOrEmpty (accountIdString) || string.IsNullOrEmpty (yearString) ||                  string.IsNullOrEmpty (monthString) || accountIdString == "undefined""  is complex.
Complex Conditional,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The conditional expression  "(requestHost == "sandbox.swarmops.com" || requestHost == "dev.swarmops.com") &&                  PilotInstallationIds.IsPilot (PilotInstallationIds.DevelopmentSandbox) &&                  Request.QueryString["SuppressAutologin"] != "true""  is complex.
Empty Catch Block,Swarmops.Frontend.Automation,FieldValidation,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\FieldValidation.aspx.cs,IsAmountValid,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,PrepareAccountChange,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabase,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,GuessCountry,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,CulturePreInit,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend,DataV5Base,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,OnInitComplete,The method has an empty catch block.
Magic Number,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteItems,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteItems,The following statement contains a magic number: result.AppendFormat(                      "\"id\":\"{0}\"'\"name\":\"{1}\"'\"description\":\"{2}\"'\"opened\":\"{3}\"'\"owedToPerson\":\"<span class='weight-more-emphasis'>{4}</span>\"'\"paidToPerson\":\"<span class='weight-more-emphasis'>{5}</span>\"'\"closed\":\"{6}\""'                      JsonSanitize(item.Id)'                      JsonSanitize(item.Name)'                      JsonSanitize(item.Description)'                      item.OpenedDate > Constants.DateTimeLowThreshold && item.PaidToPerson == 0? item.OpenedDate.ToString("yyyy-MMM-dd") : string.Empty'                      item.OwedToPerson != 0 ? (item.OwedToPerson/100.0).ToString("N2") : string.Empty'                      item.PaidToPerson != 0 ? (item.PaidToPerson / 100.0).ToString("N2") : string.Empty'                      item.ClosedDate < Constants.DateTimeHighThreshold? item.ClosedDate.ToString("yyyy-MMM-dd"): string.Empty                    );
Magic Number,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteItems,The following statement contains a magic number: result.AppendFormat(                      "\"id\":\"{0}\"'\"name\":\"{1}\"'\"description\":\"{2}\"'\"opened\":\"{3}\"'\"owedToPerson\":\"<span class='weight-more-emphasis'>{4}</span>\"'\"paidToPerson\":\"<span class='weight-more-emphasis'>{5}</span>\"'\"closed\":\"{6}\""'                      JsonSanitize(item.Id)'                      JsonSanitize(item.Name)'                      JsonSanitize(item.Description)'                      item.OpenedDate > Constants.DateTimeLowThreshold && item.PaidToPerson == 0? item.OpenedDate.ToString("yyyy-MMM-dd") : string.Empty'                      item.OwedToPerson != 0 ? (item.OwedToPerson/100.0).ToString("N2") : string.Empty'                      item.PaidToPerson != 0 ? (item.PaidToPerson / 100.0).ToString("N2") : string.Empty'                      item.ClosedDate < Constants.DateTimeHighThreshold? item.ClosedDate.ToString("yyyy-MMM-dd"): string.Empty                    );
Magic Number,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteFooter,The following statement contains a magic number: return String.Format(                      "\"id\":\"Footer\"'\"name\":\"<span class='weight-most-emphasis uppercase'>{0}</span>\"'\"description\":\"<span class='weight-more-emphasis uppercase'>{1}</span>\"'\"owedToPerson\":\"<span class='weight-most-emphasis uppercase'>{2}</span>\"'\"paidToPerson\":\"<span class='weight-most-emphasis uppercase'>{3}</span>\""'                      JsonSanitize(Resources.Global.Financial_CurrentBalance)'                      JsonSanitize(summary)'                      currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance > 0 ? (currentBalance / 100.0).ToString("N2") : string.Empty'                      currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance < 0 ? (currentBalance / -100.0).ToString("N2") : string.Empty                  );
Magic Number,Swarmops.Frontend.Automation,Json_MasterPersonEditPaymentHistory,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-MasterPersonEditPaymentHistory.aspx.cs,JsonWriteFooter,The following statement contains a magic number: return String.Format(                      "\"id\":\"Footer\"'\"name\":\"<span class='weight-most-emphasis uppercase'>{0}</span>\"'\"description\":\"<span class='weight-more-emphasis uppercase'>{1}</span>\"'\"owedToPerson\":\"<span class='weight-most-emphasis uppercase'>{2}</span>\"'\"paidToPerson\":\"<span class='weight-most-emphasis uppercase'>{3}</span>\""'                      JsonSanitize(Resources.Global.Financial_CurrentBalance)'                      JsonSanitize(summary)'                      currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance > 0 ? (currentBalance / 100.0).ToString("N2") : string.Empty'                      currentBalance == 0 ? Resources.Global.Financial_Zero : currentBalance < 0 ? (currentBalance / -100.0).ToString("N2") : string.Empty                  );
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: currencyStrings.Length != 2
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: return new InterpretedCurrencyResult                  {                      Success = true'                      EnteredAmount = (parsedCents / 100.0).ToString("N2")'                      CurrencyCode = money.Currency.Code'                      DisplayAmount = (money.ToCurrency(authData.CurrentOrganization.Currency).Cents / 100.0).ToString("N2")                  };
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: return new InterpretedCurrencyResult                  {                      Success = true'                      EnteredAmount = (parsedCents / 100.0).ToString("N2")'                      CurrencyCode = money.Currency.Code'                      DisplayAmount = (money.ToCurrency(authData.CurrentOrganization.Currency).Cents / 100.0).ToString("N2")                  };
Magic Number,Swarmops.Frontend.Automation,Formatting,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Formatting.aspx.cs,FormatCurrencyString,The following statement contains a magic number: return new AjaxInputCallResult {Success = true' NewValue = (cents / 100.0).ToString("N2")};
Magic Number,Swarmops.Frontend.Automation,Json_AvailableCurrencies,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-AvailableCurrencies.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' currenciesJson' null' DateTime.Now.AddMinutes (60)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_BudgetsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-BudgetsTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' accountsJson' null' DateTime.Now.AddMinutes (5)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_GeographiesTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-GeographiesTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' accountsJson' null' DateTime.Now.AddMinutes (15)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The following statement contains a magic number: count = 6;
Magic Number,Swarmops.Frontend.Automation,Json_PositionsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The following statement contains a magic number: count > 6
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: matches.RemoveRange (10' matches.Count - 10);
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: matches.RemoveRange (10' matches.Count - 10);
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: matches.Count > 10
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: string onePerson = '{' +                                     String.Format ("\"id\":\"{0}\"'\"name\":\"{1}\"'\"avatar16Url\":\"{2}\""'                                         person.Identity' JsonSanitize (person.Canonical)' person.GetSecureAvatarLink (16)) +                                     '}';
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,GetPersonAvatar,The following statement contains a magic number: return new AvatarData              {                  PersonId = personId'                  Success = true'                  Canonical = person.Canonical'                  Avatar16Url = person.GetSecureAvatarLink (16)'                  Avatar24Url = person.GetSecureAvatarLink (24)              };
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,GetPersonAvatar,The following statement contains a magic number: return new AvatarData              {                  PersonId = personId'                  Success = true'                  Canonical = person.Canonical'                  Avatar16Url = person.GetSecureAvatarLink (16)'                  Avatar24Url = person.GetSecureAvatarLink (24)              };
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,ChangePassword,The following statement contains a magic number: newPassword.Length < 6
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,ChangePassword,The following statement contains a magic number: authData.CurrentUser.Quarantines.Withdrawal.QuarantineFor(new TimeSpan(2' 0' 0' 0));
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The following statement contains a magic number: this.InfoBoxLiteral = String.Format(Resources.Pages.Admin.BitcoinEchoTest_Info' BitcoinUtility.EchoFeeSatoshis / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The following statement contains a magic number: this.LabelExplainBitcoinEchoTest.Text = String.Format (Resources.Pages.Admin.BitcoinEchoTest_Explain'                  CurrentOrganization.Name' address.HumanAddress' BitcoinUtility.EchoFeeSatoshis / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: satoshisReceived % 100 == 0
Magic Number,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Page_Load,The following statement contains a magic number: DbVersionRequired = 2;
Magic Number,Swarmops.Frontend.Pages.v5.Admin,Json_CultureInfo,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Json-CultureInfo.aspx.cs,AllCulturesAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Admin,Json_CultureInfo,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Json-CultureInfo.aspx.cs,AllCulturesAsJson,The following statement contains a magic number: result.AppendFormat(                          "\"cultureId\":\"{0}\"'\"name\":\"{1}\"'\"nameInternational\":\"{2}\"'\"country\":\"{3}\"'\"flag\":\"{4}\"'\"supported\":\"{5}\""'                          culture.Name'                          culture.NativeName'                          culture.EnglishName'                          region.EnglishName'                          flagFile.Length > 2? flagFile : noImage'                          cultureFullLookup.ContainsKey(culture.Name)? yesImage: culturePartialLookup.ContainsKey(culture.Name.Substring(0' culture.Name.IndexOf('-')))? halfImage: noImage                      );
Magic Number,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,FormatSmtpAccessString,The following statement contains a magic number: port != 25
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,FormatSmtpAccessString,The following statement contains a magic number: port != 25
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: lineParts.Length < 2
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: int percent = (count*99)/lines.Length;
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: lineParts.Length != 4
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: int percent = (count * 99) / lines.Length;
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: string cityName = lineParts[2].Trim();
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: string nodeName = lineParts[3].Trim();
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: lineParts.Length < 12
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: int percent = (count*99)/lines.Length;
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Applicants                      personCount = 1; // todo                      break;                  case 2: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 3: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Applicants                      personCount = 1; // todo                      break;                  case 2: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 3: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Applicants                      personCount = 1; // todo                      break;                  case 2: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 3: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Applicants                      personCount = 1; // todo                      break;                  case 2: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 3: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (personCount)              {                  case 0:                      result = resources[0];                      break;                  case 1:                      result = resources[1];                      break;                  default:                      result = String.Format (resources[2]' personCount);                      break;              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,GetRemainingBudgets,The following statement contains a magic number: result.Add (new BudgetRemainder { AccountId = accountId' Remaining = remaining/100.0 });
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,ApproveCorrectedItem,The following statement contains a magic number: notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,GetRemainingBudgets,The following statement contains a magic number: result.Add (new BudgetRemainder { AccountId = accountId' Remaining = remaining/100.0 });
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ApproveCosts.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,Page_Load,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateInboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateInboundInvoice.aspx.cs,Page_Load,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateInboundInvoice,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateInboundInvoice.aspx.cs,ButtonCreate_Click,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: satoshisReceived % 100 == 0
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(2);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(100);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(100);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(10);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(loop*90/recordList.Count + 10);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ProcessExpensifyUploadThread,The following statement contains a magic number: progress.Set(loop*90/recordList.Count + 10);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyOutputRecords,The following statement contains a magic number: ExpensifyOutputRecord newRecord = new ExpensifyOutputRecord                  {                      Description = record.CategoryCustom + " / " + record.Description'                      CreatedDateTime = record.Timestamp.ToString("MMM dd")'                      Amount = (record.AmountCents/100.0).ToString("N2")'                      AmountVat = (record.VatCents/100.0).ToString("N2")'                      Actions =                          String.Format(doxString'                              "D" + record.Documents[0].Identity.ToString(CultureInfo.InvariantCulture)) +                          String.Format(editString' record.Guid)'                      Guid = record.Guid                  };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyOutputRecords,The following statement contains a magic number: ExpensifyOutputRecord newRecord = new ExpensifyOutputRecord                  {                      Description = record.CategoryCustom + " / " + record.Description'                      CreatedDateTime = record.Timestamp.ToString("MMM dd")'                      Amount = (record.AmountCents/100.0).ToString("N2")'                      AmountVat = (record.VatCents/100.0).ToString("N2")'                      Actions =                          String.Format(doxString'                              "D" + record.Documents[0].Identity.ToString(CultureInfo.InvariantCulture)) +                          String.Format(editString' record.Guid)'                      Guid = record.Guid                  };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyFooter,The following statement contains a magic number: ExpensifyOutputRecord newRecord = new ExpensifyOutputRecord              {                  Amount = "<span class='weight-more-emphasis'>" + (amountCentsTotal / 100.0).ToString("N2") + "</span>"'                  AmountVat = "<span class='weight-more-emphasis'>" + (vatCentsTotal / 100.0).ToString("N2") + "</span>"'                  BudgetText = "<span class='weight-more-emphasis'>" + Resources.Global.Global_Total.ToUpperInvariant() + "</span>"              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,FormatExpensifyFooter,The following statement contains a magic number: ExpensifyOutputRecord newRecord = new ExpensifyOutputRecord              {                  Amount = "<span class='weight-more-emphasis'>" + (amountCentsTotal / 100.0).ToString("N2") + "</span>"'                  AmountVat = "<span class='weight-more-emphasis'>" + (vatCentsTotal / 100.0).ToString("N2") + "</span>"'                  BudgetText = "<span class='weight-more-emphasis'>" + Resources.Global.Global_Total.ToUpperInvariant() + "</span>"              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ExpensifyRecordProceed,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordList[index].Guid'                  ExistNext = (index < recordList.Count - 1 ? true : false)'                  Success = true'                  DataUpdate = FormatExpensifyOutputRecords(recordList)'                  FooterUpdate = FormatExpensifyFooter (recordList)'                  SubmitPrompt = FormatExpensifySubmitPrompt(recordList)              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ExpensifyRecordProceed,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordList[index].Guid'                  ExistNext = (index < recordList.Count - 1 ? true : false)'                  Success = true'                  DataUpdate = FormatExpensifyOutputRecords(recordList)'                  FooterUpdate = FormatExpensifyFooter (recordList)'                  SubmitPrompt = FormatExpensifySubmitPrompt(recordList)              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ExpensifyRecordDelete,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordList[index].Guid'                  ExistNext = (index < recordList.Count - 1 ? true : false)'                  Success = true'                  DataUpdate = FormatExpensifyOutputRecords(recordList)'                  FooterUpdate = FormatExpensifyFooter(recordList)'                  SubmitPrompt = FormatExpensifySubmitPrompt (recordList)              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ExpensifyRecordDelete,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordList[index].Guid'                  ExistNext = (index < recordList.Count - 1 ? true : false)'                  Success = true'                  DataUpdate = FormatExpensifyOutputRecords(recordList)'                  FooterUpdate = FormatExpensifyFooter(recordList)'                  SubmitPrompt = FormatExpensifySubmitPrompt (recordList)              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,GetExpensifyRecord,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordGuid'                  ExistNext = (index < recordList.Count - 1? true: false)'                  Success = true              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,GetExpensifyRecord,The following statement contains a magic number: return new AjaxCallExpensifyRecordResult              {                  Amount = (recordList[index].AmountCents / 100.0).ToString("N2")'                  AmountVat = (recordList[index].VatCents / 100.0).ToString("N2")'                  Description = recordList[index].Description'                  DocumentId = recordList[index].Documents.First().Identity'                  BudgetId = recordList[index].BudgetId'                  Guid = recordGuid'                  ExistNext = (index < recordList.Count - 1? true: false)'                  Success = true              };
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ButtonRequest_Click,The following statement contains a magic number: string successMessage = string.Format (Resources.Pages.Financial.FileExpenseClaim_SuccessMessagePartOne'                  CurrentOrganization.Currency.Code'                  amountCents/100.0'                  budget.Name);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,RequestCashAdvance,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\RequestCashAdvance.aspx.cs,ButtonRequest_Click,The following statement contains a magic number: string successMessage = string.Format (Resources.Pages.Financial.RequestCashAdvance_SuccessMessagePartOne'                  HttpUtility.HtmlEncode (CurrentUser.Name)'                  HttpUtility.HtmlEncode (description)' CurrentOrganization.Currency.Code'                  amountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int descriptionWidth = 137 + 170;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int descriptionWidth = 137 + 170;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int tagWidth = 170;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: descriptionWidth = 137 - tagSets.Count;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: tagWidth = 360/(tagSets.Count + 1);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,HandleValidationDevalidation,The following statement contains a magic number: result = string.Format (validatedTemplate' itemId' authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Json_TransactionTagsTree,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Automation\Json-TransactionTagsTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' tagsJson' null' DateTime.Now.AddMinutes (5)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: result.AppendFormat (                      "\"itemId\":\"{7}\"'" +                      "\"due\":\"{1}\"'" +                      "\"recipient\":\"{2}\"'" +                      "\"transferInfo\":\"{3}\"'" +                      "\"amount\":\"{6}\"'" +                      "\"ocrAvailable\":\"{4}\"'" +                      "\"action\":\"" +                      "<img id='IconApproval{7}' class='IconApproval{7} LocalIconApproval LocalPrototype action-icon' baseid='{7}' protoid='{0}' data-ocr='{10}' data-fieldcount='{9}' data-reference='{5}' />" +                      "<img id='IconApproved{7}' class='LocalIconApproved LocalPrototype status-icon' baseid='{7}' />" +                      "<img id='IconWait{7}' class='LocalIconWait LocalPrototype status-icon' baseid='{7}' />" +                      "<img id='IconUndo{7}' class='LocalIconUndo LocalPrototype action-icon' baseid='{7}' />" +                      "<img id='IconDenial{7}' class='LocalIconDenial LocalPrototype action-icon' baseid='{7}' />" +                      "<img id='IconDenied{7}' class='LocalIconDenied LocalPrototype status-icon' baseid='{7}' />" +                      "\""'                      payout.ProtoIdentity'                      (payout.ExpectedTransactionDate <= today                          ? Global.Global_ASAP                          : payout.ExpectedTransactionDate.ToShortDateString())'                      JsonSanitize (TryLocalize (transferInfo.Recipient))'                      transferInfo.Currency.Code + "' " + JsonSanitize (transferInfo.LocalizedPaymentMethodName)'                      transferInfo.OcrAvailable? "<img class='LocalIconOcr status-icon' />": string.Empty'                      JsonSanitize (TryLocalize (payout.Reference))'                      payout.HasNativeAmount? payout.NativeAmountString : (payout.AmountCents/100.0).ToString("N2")'                      payout.ProtoIdentity.Replace ("|"' "")'                      string.Empty' // this is here to match the databaseid field below                      transferInfo.LocalizedPaymentInformation.Count'                      transferInfo.OcrAvailable? "yes": "no");
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The following statement contains a magic number: result.AppendFormat(                      "\"itemId\":\"{7}\"'" +                      "\"paid\":\"yes\"'" +                      "\"databaseId\":\"{8}\"'" +                      "\"due\":\"{1}\"'" +                      "\"recipient\":\"{2}\"'" +                      "\"transferInfo\":\"{3}\"'" +                      "\"amount\":\"{6}\"'" +                      "\"ocrAvailable\":\"{4}\"'" +                      "\"action\":\"" +                      "<img id='IconApproval{7}' class='IconApproval{7} LocalIconApproval LocalPaid action-icon' baseid='{7}' protoid='{0}' databaseid='{8}' data-ocr='{10}' data-fieldcount='{9}' data-reference='{5}' />" +                      "<img class='IconApproved{7} LocalIconApproved LocalPaid status-icon' baseid='{7}' />" +                      "<img class='IconWait{7} LocalIconWait LocalPaid status-icon' baseid='{7}' />" +                      "<img class='IconUndo{7} LocalIconUndo LocalPaid action-icon' baseid='{7}' />" +                      "<img class='IconDenial{7} LocalIconDenial LocalPaid action-icon' baseid='{7}' />" +                      "<img class='IconDenied{7} LocalIconDenied LocalPaid status-icon' baseid='{7}' />" +                      "\""'                      payout.ProtoIdentity'                      payout.ExpectedTransactionDate.ToShortDateString()'                      JsonSanitize(TryLocalize(transferInfo.Recipient))'                      transferInfo.Currency.Code + "' " + JsonSanitize(transferInfo.LocalizedPaymentMethodName)'                      transferInfo.OcrAvailable ? "<img class='LocalIconOcr status-icon' />" : string.Empty'                      JsonSanitize(TryLocalize(payout.Reference))'                      payout.AmountCents / 100.0'                      payout.ProtoIdentity.Replace("|"' "")'                      payout.Identity'                      transferInfo.LocalizedPaymentInformation.Count'                      transferInfo.OcrAvailable ? "yes" : "no");
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: payout.Reference.Length < 2
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,GetAmountOcr,The following statement contains a magic number: return string.Format ("{0} {1:00} &nbsp; {2} &gt;"' // three spaces between the cents and the checksum                  payout.AmountCents/100' payout.AmountCents %100'                  Formatting.GetLuhnChecksum (payout.AmountCents.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,GetAmountOcr,The following statement contains a magic number: return string.Format ("{0} {1:00} &nbsp; {2} &gt;"' // three spaces between the cents and the checksum                  payout.AmountCents/100' payout.AmountCents %100'                  Formatting.GetLuhnChecksum (payout.AmountCents.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,Page_Load,The following statement contains a magic number: DbVersionRequired = 2;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.AccountOwnerAvatarUrl = account.OwnerPersonId != 0                  ? account.Owner.GetSecureAvatarLink (24)                  : "/Images/Icons/iconshock-warning-24px.png";
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.Budget = (accountTree.GetBudgetSumCents (year)/100L).ToString ("N0"' CultureInfo.CurrentCulture);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.Balance =                      (accountTree.GetDeltaCents (new DateTime (1900' 1' 1)' new DateTime (year + 1' 1' 1))/100L).ToString                          (                              "N0");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.Balance =                      (accountTree.GetDeltaCents (new DateTime (1900' 1' 1)' new DateTime (year + 1' 1' 1))/100L).ToString                          (                              "N0");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.InitialBalance =                      ((accountTree.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1))/100.0).ToString ("N2"));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,GetAccountData,The following statement contains a magic number: result.InitialBalance =                      ((accountTree.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1))/100.0).ToString ("N2"));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,SetAccountBudget,The following statement contains a magic number: newTreeBudget *= 100;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ChartOfAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ChartOfAccounts.aspx.cs,SetAccountBudget,The following statement contains a magic number: return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.Changed'                          NewData = (newTreeBudget/100).ToString ("N0"' CultureInfo.CurrentCulture)                      };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,Localize,The following statement contains a magic number: this.LabelRadioPayoutForeign.Text =                  String.Format(Resources.Pages.Ledgers.BalanceTransactions_ModalDialog_RadioPayoutForeign' 5);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetTransactionMatchability,The following statement contains a magic number: result.AmountAsPurchase = ((-transactionCents)/100.0).ToString("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetTransactionMatchability,The following statement contains a magic number: result.DifferingAmount = String.Format ("{0} {1:+#'#.00;−#'#.00;0}"'                  // this is a UNICODE MINUS (U+2212)' not the hyphen on the keyboard                  authData.CurrentOrganization.Currency.DisplayCode' transactionCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: this.DropMonths.Items.Add(new ListItem(new DateTime(2014' monthNumber' 1).ToString("MMM")'                          monthNumber.ToString(CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: this.DropGeneralMonths.Items.Add(new ListItem(new DateTime(2014' monthNumber' 1).ToString("MMM")'                          monthNumber.ToString(CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: this.DropHotwalletMonths.Items.Add(new ListItem(new DateTime(2014' monthNumber' 1).ToString("MMM")'                          monthNumber.ToString(CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: monthNumber <= 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetUnbalancedAmount,The following statement contains a magic number: return (-transaction.Rows.AmountCentsTotal/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,CreateTransaction,The following statement contains a magic number: AjaxInputCallResult result = new AjaxInputCallResult              {                  Success = true'                  ObjectIdentity = transaction.Identity'                  NewValue = (amountCents/100.0).ToString("N2")              };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetProfitLossNode,The following statement contains a magic number: string node = '{' + string.Format(                  "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"rowCssClass\":\"{2}\"'\"budget\":\"{3:N0}\""'                  "Row" + resource' string.Format (Resources.Pages.Ledgers.ResourceManager.GetString("AccountPlan_" + resource)' _year)' "Row" + resource' amount / 100.0) + '}';
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" +                              account.Owner.GetSecureAvatarLink (16) + "')\\\">" +                              JsonSanitize (Server.HtmlEncode (account.Owner.Canonical)) + "</span>";
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: childStrings.Add ('{' +                                    String.Format (                                        "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""'                                        account.Identity'                                        JsonSanitize (account.Name)'                                        ownerString'                                        this._hashedAccounts[account.Identity].Count > 1                                            ? JsonDualString (account.Identity' this._treeBalanceLookup[account.Identity]'                                                this._singleBalanceLookup[account.Identity])                                            : (this._singleBalanceLookup[account.Identity]/100.0).ToString ("N0"'                                                CultureInfo.CurrentCulture)'                                        account.AccountType == FinancialAccountType.Income ||                                        account.AccountType == FinancialAccountType.Cost                                            ? this._hashedAccounts[account.Identity].Count > 1                                                ? (JsonDualString (account.Identity'                                                    this._treeBudgetLookup[account.Identity]'                                                    this._singleBudgetLookup[account.Identity]))                                                : (this._singleBudgetLookup[account.Identity]/100.0).ToString ("N0"'                                                    CultureInfo.CurrentCulture)                                            : string.Empty'                                        editString'                                        account.Active? "false":"true" // reverses condition on purpose                                        ) + grandChildren + '}');
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: childStrings.Add ('{' +                                    String.Format (                                        "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""'                                        account.Identity'                                        JsonSanitize (account.Name)'                                        ownerString'                                        this._hashedAccounts[account.Identity].Count > 1                                            ? JsonDualString (account.Identity' this._treeBalanceLookup[account.Identity]'                                                this._singleBalanceLookup[account.Identity])                                            : (this._singleBalanceLookup[account.Identity]/100.0).ToString ("N0"'                                                CultureInfo.CurrentCulture)'                                        account.AccountType == FinancialAccountType.Income ||                                        account.AccountType == FinancialAccountType.Cost                                            ? this._hashedAccounts[account.Identity].Count > 1                                                ? (JsonDualString (account.Identity'                                                    this._treeBudgetLookup[account.Identity]'                                                    this._singleBudgetLookup[account.Identity]))                                                : (this._singleBudgetLookup[account.Identity]/100.0).ToString ("N0"'                                                    CultureInfo.CurrentCulture)                                            : string.Empty'                                        editString'                                        account.Active? "false":"true" // reverses condition on purpose                                        ) + grandChildren + '}');
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                      "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                      accountId' treeValue/100.00);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountChartData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountChartData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: CurrentOrganization.Identity == 8 && CurrentOrganization.Name.StartsWith("Rick Falkvinge")
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: month == 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: month > 0 && month <= 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append("{" +                             String.Format("\"description\":\"{0}\"'\"balanceBitcoin\":\"{1:N2}\""' JsonSanitize(startString)'                                 runningBitcoinBalance / 100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append("{" + String.Format(                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPresentation\":\"{3}\"'\"deltaBitcoin\":\"{4}\"'\"balanceBitcoin\":\"{5:N2}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize(description)'                      row.AmountCents != 0? (row.AmountCents / 100.0).ToString("N2") : string.Empty'                      deltaSatoshis != 0? (deltaSatoshis / 100.0).ToString("N2"): string.Empty'                      runningBitcoinBalance / 100.0'                      JsonSanitize(actionHtml)) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append("{" + String.Format(                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPresentation\":\"{3}\"'\"deltaBitcoin\":\"{4}\"'\"balanceBitcoin\":\"{5:N2}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize(description)'                      row.AmountCents != 0? (row.AmountCents / 100.0).ToString("N2") : string.Empty'                      deltaSatoshis != 0? (deltaSatoshis / 100.0).ToString("N2"): string.Empty'                      runningBitcoinBalance / 100.0'                      JsonSanitize(actionHtml)) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append("{" + String.Format(                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPresentation\":\"{3}\"'\"deltaBitcoin\":\"{4}\"'\"balanceBitcoin\":\"{5:N2}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize(description)'                      row.AmountCents != 0? (row.AmountCents / 100.0).ToString("N2") : string.Empty'                      deltaSatoshis != 0? (deltaSatoshis / 100.0).ToString("N2"): string.Empty'                      runningBitcoinBalance / 100.0'                      JsonSanitize(actionHtml)) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_LedgerNativeData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-LedgerNativeData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append("{" +                             String.Format("\"description\":\"{0}\"'\"balanceBitcoin\":\"{1:N2}\""' JsonSanitize(endString)'                                 runningBitcoinBalance / 100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: CurrentOrganization.Identity == 8 && CurrentOrganization.Name.StartsWith("Rick Falkvinge")
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: month > 0 && month <= 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: creditString = String.Format ("{0:N2}"' row.AmountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_GeneralLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-GeneralLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" + String.Format (                      "\"id\":\"{0:N0}-{6:N0}\"'\"idDisplay\":\"{0:N0}:{6:N0}\"'\"datetime\":\"{1}\"'\"txDescription\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"balance\":\"{5:N2}\""'                      row.Transaction.OrganizationSequenceId'                      JsonSanitize (accountClass)'                      JsonSanitize (accountName)'                      debitString'                      creditString'                      runningBalanceLookup[row.FinancialAccountId]/100.0'                      rowCount) + "}");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder response = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: element += String.Format("'\"turnover\":\"{0:N2}\""' item.TurnoverCents / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: element += String.Format("'\"inbound\":\"{0:N2}\""' item.VatInboundCents/ 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: element += String.Format("'\"outbound\":\"{0:N2}\""' item.VatOutboundCents/ 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: line1 += string.Format(CultureInfo.CurrentCulture' "'\"assets\":\"{0:N0}\""'                  _totals.AssetsCents / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: line1 += string.Format(CultureInfo.CurrentCulture' "'\"liabilities\":\"{0:N0}\""' _totals.LiabilitiesCents/-100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,FormatSingleString,The following statement contains a magic number: return String.Format("{0:" + format + "}"' centsValue / 100.0)                          .Replace("---"' "<span style='color:#CCC'>&mdash;</span>")                          .Replace("-"' "&minus;");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: quarter <= 4
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                      "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""'                      accountId' treeValue/100.00);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: StringBuilder childResult = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: childResult.AppendFormat (                          "\"id\":\"UTXO{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\""'                          unspent.Identity'                          Resources.Pages.Ledgers.BitcoinHotWallet_UnspentTransaction'                          unspent.TransactionHash'                          (unspent.AmountSatoshis/100.0).ToString ("N2")'                          (unspent.AmountSatoshis/100.0*conversionRateLookup[unspent.Address.Chain]).ToString ("N2")                          );
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: childResult.AppendFormat (                          "\"id\":\"UTXO{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\""'                          unspent.Identity'                          Resources.Pages.Ledgers.BitcoinHotWallet_UnspentTransaction'                          unspent.TransactionHash'                          (unspent.AmountSatoshis/100.0).ToString ("N2")'                          (unspent.AmountSatoshis/100.0*conversionRateLookup[unspent.Address.Chain]).ToString ("N2")                          );
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat(                          "\"derivePath\":\"" + Resources.Global.Global_Total.ToUpperInvariant() + " " +                          (string) chain.ToString().ToUpperInvariant() + "\"'\"balanceMicrocoins\":\"{0}\"'\"balanceFiat\":\"{1}\""'                          (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2"));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat(                          "\"derivePath\":\"" + Resources.Global.Global_Total.ToUpperInvariant() + " " +                          (string) chain.ToString().ToUpperInvariant() + "\"'\"balanceMicrocoins\":\"{0}\"'\"balanceFiat\":\"{1}\""'                          (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2"));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,JsonExpandingString,The following statement contains a magic number: return string.Format(CultureInfo.CurrentCulture'                  "<span class=\\\"bitcoinhotwalletdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N2}</span><span class=\\\"bitcoinhotwalletdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                  addressId' currencyValue / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: DateTime dawnOfMankind = new DateTime (1901' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: CurrentOrganization.Identity == 8 && CurrentOrganization.Name.StartsWith("Rick Falkvinge")
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: month == 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: month > 0 && month <= 12
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" +                             String.Format ("\"description\":\"{0}\"'\"balance\":\"{1:N2}\""' JsonSanitize (startString)'                                 runningBalance/100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: creditString = String.Format ("{0:N2}"' row.AmountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" + String.Format (                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"balance\":\"{5:N2}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize (description)'                      debitString'                      creditString'                      runningBalance/100.0'                      JsonSanitize (actionHtml)) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" +                             String.Format ("\"description\":\"{0}\"'\"balance\":\"{1:N2}\""' JsonSanitize (endString)'                                 runningBalance/100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: DateTime dawnOfMankind = new DateTime (1901' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: creditString = String.Format ("{0:N2}"' row.AmountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: result.AppendFormat("\"deltaPos\":\"<span class='spanAnnoyingBlink'>{0:N2}</span>\""'                          -amountCentsTotal / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat (                      "\"id\":\"{0}\"'" +                      "\"created\":\"{1}\"'" +                      "\"expected\":\"{2}\"'" +                      "\"recipient\":\"{3}\"'" +                      "\"description\":\"{4}\"'" +                      "\"amount\":\"{5:N2}\""'                      account.Identity'                      account.CreatedDateTime.ToShortDateString()'                      (account.ExpectedClosed.Year <= 1950                          ? Global.Global_NA                          : account.ExpectedClosed.ToShortDateString())'                      JsonSanitize (account.Recipient)'                      JsonSanitize (account.Description)'                      account.AmountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat (                      "\"id\":\"{0}\"'" +                      "\"created\":\"{1}\"'" +                      "\"expected\":\"{2}\"'" +                      "\"recipient\":\"{3}\"'" +                      "\"description\":\"{4}\"'" +                      "\"amount\":\"{5:N2}\""'                      account.Identity'                      account.CreatedDateTime.ToShortDateString()'                      (account.ExpectedClosed.Year <= 1950                          ? Global.Global_NA                          : account.ExpectedClosed.ToShortDateString())'                      JsonSanitize (account.Recipient)'                      JsonSanitize (account.Description)'                      account.AmountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{2:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterTotal' balanceExpectedCents' centsTotal/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{1:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterLedgerBalance' balanceExpectedCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{1:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterDifference'                  (centsTotal - balanceExpectedCents)/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,OutstandingAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FromCashAdvance,The following statement contains a magic number: OutstandingAccount result = new OutstandingAccount                  {                      AmountCents = advance.AmountCents'                      Description = advance.Description'                      Identity = advance.Identity'                      Recipient = advance.Person.Canonical'                      CreatedDateTime = dateTimePaidOut'                      ExpectedClosed = dateTimePaidOut.AddDays (90)                  };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: string swarmopsData = currentOrganizationCurrency + " " +                                        (mismatch.SwarmopsDeltaCents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: string masterData = currentOrganizationCurrency + " " +                                      (mismatch.MasterDeltaCents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: string notes = "Diff: " +                                 ((mismatch.MasterDeltaCents - mismatch.SwarmopsDeltaCents)/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,PrintNullableCents,The following statement contains a magic number: return currency + " " + (cents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,PrintCents,The following statement contains a magic number: return (cents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                      "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                      accountId' treeValue/100.00);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The following statement contains a magic number: string row =                          String.Format (                          "\"id\":\"{0:N0}\"'\"description\":\"{1}\"'\"accountName\":\"{2}\"'\"delta\":\"{3:+#'#.00;−#'#.00}\"'\"dateTime\":\"{4:yyyy-MMM-dd HH:mm}\""'                              transaction.OrganizationSequenceId' JsonSanitize (transaction.Description)' JsonSanitize (accountName)' txRows.AmountCentsTotal / 100.0' transaction.DateTime);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,GetProcessingProgress,The following statement contains a magic number: percentReady >= 100
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The following statement contains a magic number: long autoDepositDonationCents = 1000*100;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The following statement contains a magic number: long autoDepositDonationCents = 1000*100;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The following statement contains a magic number: int percentProcessed = (int) (currentRecordIndex*100L/externalData.Records.Length);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The following statement contains a magic number: percentProcessed > 99
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: this.DropYears.Items.Add (new ListItem (new DateTime (year' 12' 31).ToShortDateString()'                              year.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: this.DropYears.Items.Add (new ListItem (new DateTime (year' 12' 31).ToShortDateString()'                              year.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: int lastMonth = lastMonthEndDate.Year*100 + lastMonthEndDate.Month;
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: int lastStatementMonth = (this.CurrentOrganization.FirstFiscalYear - 1)*100 + 12;
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: int lastStatementMonth = (this.CurrentOrganization.FirstFiscalYear - 1)*100 + 12;
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: lastStatementMonth = lastBankStatement.ConcernsPeriodStart.Year*100 +                                               lastBankStatement.ConcernsPeriodStart.Month;
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: monthIterator += 88;
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: monthIterator%100 == 13
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: monthIterator%100 == 13
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: bankStatement.Name = string.Format(Resources.Pages.Ledgers.EndOfMonth_UploadBankStatementFor'                              assetAccount.Name' "PDF"'                              new DateTime(monthIterator/100' monthIterator%100' 15).ToString("MMMM yyyy"));
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: bankStatement.Name = string.Format(Resources.Pages.Ledgers.EndOfMonth_UploadBankStatementFor'                              assetAccount.Name' "PDF"'                              new DateTime(monthIterator/100' monthIterator%100' 15).ToString("MMMM yyyy"));
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,Page_Load,The following statement contains a magic number: bankStatement.Name = string.Format(Resources.Pages.Ledgers.EndOfMonth_UploadBankStatementFor'                              assetAccount.Name' "PDF"'                              new DateTime(monthIterator/100' monthIterator%100' 15).ToString("MMMM yyyy"));
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,UploadBankStatement,The following statement contains a magic number: int yearMonth = Int32.Parse(parts[2]);
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,UploadBankStatement,The following statement contains a magic number: DateTime statementStart = new DateTime(yearMonth/100' yearMonth%100' 1);
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,UploadBankStatement,The following statement contains a magic number: DateTime statementStart = new DateTime(yearMonth/100' yearMonth%100' 1);
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,ResyncSatoshisInLedger,The following statement contains a magic number: return new AjaxCallResult              {                  Success = true'                  DisplayMessage =                      String.Format(Resources.Pages.Ledgers.EndOfMonth_Dialog_LedgerBitcoinBalanceMismatch'                          cashSatoshisInHotwallet/100.0' cashSatoshisInLedger/100.0)              };
Magic Number,Swarmops.Frontend.Pages.Ledgers,EndOfMonth,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\EndOfMonth.aspx.cs,ResyncSatoshisInLedger,The following statement contains a magic number: return new AjaxCallResult              {                  Success = true'                  DisplayMessage =                      String.Format(Resources.Pages.Ledgers.EndOfMonth_Dialog_LedgerBitcoinBalanceMismatch'                          cashSatoshisInHotwallet/100.0' cashSatoshisInLedger/100.0)              };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The following statement contains a magic number: int key = yearLoop*100 + month;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The following statement contains a magic number: _minKey < yearLoop * 1000
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,GetSalaryData,The following statement contains a magic number: int monthKey = salary.PayoutDate.Year*100 + salary.PayoutDate.Month;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: quarter <= 4
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                      "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""'                      accountId' treeValue/100.00);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,Page_Load,The following statement contains a magic number: this.DropAccounts.Items.Count < 2
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                        if (resultDetail.InitialBalanceCents != 0)                      {                          html += "<p>" +                                  String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSet'                                      Currency.FromCode(resultDetail.InitialBalanceCurrencyCode).DisplayCode'                                      resultDetail.InitialBalanceCents / 100.0'                                      authData.CurrentOrganization.FirstFiscalYear);                            if (resultDetail.CurrencyCode != resultDetail.InitialBalanceCurrencyCode)                          {                              // nonpresentation currency                                html += " " +                                  String.Format(                                      Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSetForeignCurrency'                                      Currency.FromCode(resultDetail.CurrencyCode).DisplayCode'                                      resultDetail.BalanceMismatchCents / 100.0);                          }                            html += ".</p>";                      }                        break;                  case ImportResultsCategory.Questionable:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs(resultDetail.BalanceMismatchCents / 100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                            exceptionText + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                        if (resultDetail.InitialBalanceCents != 0)                      {                          html += "<p>" +                                  String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSet'                                      Currency.FromCode(resultDetail.InitialBalanceCurrencyCode).DisplayCode'                                      resultDetail.InitialBalanceCents / 100.0'                                      authData.CurrentOrganization.FirstFiscalYear);                            if (resultDetail.CurrencyCode != resultDetail.InitialBalanceCurrencyCode)                          {                              // nonpresentation currency                                html += " " +                                  String.Format(                                      Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSetForeignCurrency'                                      Currency.FromCode(resultDetail.CurrencyCode).DisplayCode'                                      resultDetail.BalanceMismatchCents / 100.0);                          }                            html += ".</p>";                      }                        break;                  case ImportResultsCategory.Questionable:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs(resultDetail.BalanceMismatchCents / 100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                            exceptionText + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                        if (resultDetail.InitialBalanceCents != 0)                      {                          html += "<p>" +                                  String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSet'                                      Currency.FromCode(resultDetail.InitialBalanceCurrencyCode).DisplayCode'                                      resultDetail.InitialBalanceCents / 100.0'                                      authData.CurrentOrganization.FirstFiscalYear);                            if (resultDetail.CurrencyCode != resultDetail.InitialBalanceCurrencyCode)                          {                              // nonpresentation currency                                html += " " +                                  String.Format(                                      Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSetForeignCurrency'                                      Currency.FromCode(resultDetail.CurrencyCode).DisplayCode'                                      resultDetail.BalanceMismatchCents / 100.0);                          }                            html += ".</p>";                      }                        break;                  case ImportResultsCategory.Questionable:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs(resultDetail.BalanceMismatchCents / 100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                            exceptionText + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                        if (resultDetail.InitialBalanceCents != 0)                      {                          html += "<p>" +                                  String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSet'                                      Currency.FromCode(resultDetail.InitialBalanceCurrencyCode).DisplayCode'                                      resultDetail.InitialBalanceCents / 100.0'                                      authData.CurrentOrganization.FirstFiscalYear);                            if (resultDetail.CurrencyCode != resultDetail.InitialBalanceCurrencyCode)                          {                              // nonpresentation currency                                html += " " +                                  String.Format(                                      Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSetForeignCurrency'                                      Currency.FromCode(resultDetail.CurrencyCode).DisplayCode'                                      resultDetail.BalanceMismatchCents / 100.0);                          }                            html += ".</p>";                      }                        break;                  case ImportResultsCategory.Questionable:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs(resultDetail.BalanceMismatchCents / 100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                            exceptionText + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                        if (resultDetail.InitialBalanceCents != 0)                      {                          html += "<p>" +                                  String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSet'                                      Currency.FromCode(resultDetail.InitialBalanceCurrencyCode).DisplayCode'                                      resultDetail.InitialBalanceCents / 100.0'                                      authData.CurrentOrganization.FirstFiscalYear);                            if (resultDetail.CurrencyCode != resultDetail.InitialBalanceCurrencyCode)                          {                              // nonpresentation currency                                html += " " +                                  String.Format(                                      Resources.Pages.Ledgers.UploadBankFiles_ResultsInitialBalanceSetForeignCurrency'                                      Currency.FromCode(resultDetail.CurrencyCode).DisplayCode'                                      resultDetail.BalanceMismatchCents / 100.0);                          }                            html += ".</p>";                      }                        break;                  case ImportResultsCategory.Questionable:                      html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs(resultDetail.BalanceMismatchCents / 100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                            exceptionText + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format(Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal / 100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,CreateReader,The following statement contains a magic number: switch (encoding)              {                  case "UTF-8":                  case "UTF8":                      return document.GetReader(Encoding.UTF8);                    default: // none specified                      return document.GetReader(1252); // Windows western 1 as default              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: int progressUpdateInterval = import.Records.Length / 40;
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: progressUpdateInterval = 100;
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: progressUpdateInterval > 100
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: int percent = (count * 99) / import.Records.Length;
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: progressUpdateInterval < 2 || count % progressUpdateInterval == 0
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: Int64 beyondEofCents = assetAccount.GetDeltaCents(result.LatestTransaction.AddSeconds(1)'                  DateTime.Now.AddDays(2));
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: line.Length < 2
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: switch (line.Substring(0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring(2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse(line.Substring(22' 2));                          timestamp = DateTime.ParseExact(line.Substring(24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode(line.Substring(22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add(curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring(2' 10);                          curPayment.Reference = line.Substring(12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse(line.Substring(37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring(57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Freeform'                              line.Substring(2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Name'                              line.Substring(2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Street'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.PostalCode'                              line.Substring(37' 9).Replace(" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.City'                              line.Substring(2' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.Country'                              line.Substring(37' 35).Trim()));                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.CountryCode'                              line.Substring(72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException("Payment start must precede payment information");                          }                          curPayment.Information.Add(new InMemoryPaymentInformation(PaymentInformationType.OrgNumber'                              line.Substring(2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add(curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring(45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag(organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create(organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse(line.Substring(50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment(payment.AmountCents / 100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation(paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: timestamp.Year < 1900
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,Page_Load,The following statement contains a magic number: this.TextRandomDbLabel.Text = Authentication.CreateWeakSecret (5);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestServerThreading,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: random = random.Substring (0' 5);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: random.Length > 5
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: random = Authentication.CreateWeakSecret (5);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,RecheckDatabasePermissions,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabase,The following statement contains a magic number: File.WriteAllText ("/etc/swarmops/machineKey.config"' machineKeyXml' Encoding.GetEncoding (1252));
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,GetMachineKey,The following statement contains a magic number: machineKey.Append ("validationKey=\"" + SupportFunctions.GenerateSecureRandomKey (64) + "\"\n");
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,GetMachineKey,The following statement contains a magic number: machineKey.Append ("decryptionKey=\"" + SupportFunctions.GenerateSecureRandomKey (32) + "\"\n");
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 3;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 4;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 5;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 7;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: ++countryRetries < 10 && (countries == null || countries.Length < 20)
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: ++countryRetries < 10 && (countries == null || countries.Length < 20)
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 10;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: float initStepPerCountry = 90f/initializableCountries.Count;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 10 + (int) (countryCount*initStepPerCountry);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: _initProgress = 100;
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (1000);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestDaemonHeartbeats,The following statement contains a magic number: SystemSettings.HeartbeatBackend + 60 > unixNow
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestDaemonHeartbeats,The following statement contains a magic number: SystemSettings.HeartbeatFrontend + 60 > unixNow
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The following statement contains a magic number: Person newPerson = Person.Create(name' mail' password' string.Empty' string.Empty' string.Empty'                      string.Empty' string.Empty' new DateTime(1972'1'21)' PersonGender.Unknown);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The following statement contains a magic number: Person newPerson = Person.Create(name' mail' password' string.Empty' string.Empty' string.Empty'                      string.Empty' string.Empty' new DateTime(1972'1'21)' PersonGender.Unknown);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The following statement contains a magic number: DateTime utcTimeout = DateTime.UtcNow.AddSeconds (15);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Json_SignupVolunteerPositions,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Json-SignupVolunteerPositions.aspx.cs,FormatAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Public,Signup,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The following statement contains a magic number: DateTime parsedDateOfBirth = new DateTime (1800' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Security,ChangeOrganizations,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizations.aspx.cs,PopulateRepeater,The following statement contains a magic number: newOrganizationParameters.LogoImage = logoLandscape.Image.GetBase64(64' 36);
Magic Number,Swarmops.Frontend.Pages.v5.Security,ChangeOrganizations,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizations.aspx.cs,PopulateRepeater,The following statement contains a magic number: newOrganizationParameters.LogoImage = logoLandscape.Image.GetBase64(64' 36);
Magic Number,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The following statement contains a magic number: documentDownloadName = documentDownloadName.Substring(0' documentDownloadName.Length - 4);
Magic Number,Swarmops.Frontend.Pages.v5.Swarm,AddPerson,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\AddPerson.aspx.cs,ButtonSubmit_Click,The following statement contains a magic number: DateTime dateOfBirth = new DateTime (1800' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Swarm,AddPerson,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\AddPerson.aspx.cs,ButtonSubmit_Click,The following statement contains a magic number: participationDurationMonths < 1000
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: matches.RemoveRange (1000' matches.Count - 1000);
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: matches.RemoveRange (1000' matches.Count - 1000);
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: matches.Count > 1000
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: string onePerson = '{' +                                     String.Format (                                         "\"id\":\"{0}\"'\"name\":\"<span class='spanUser{0}Name'>{1}</span>\"'\"avatar16Url\":\"{2}\"'\"geographyName\":\"{3}\"'\"mail\":\"<span class='spanUser{0}Mail'>{4}</span>\"'\"notes\":\"{6}\"'\"phone\":\"<span class='spanUser{0}Phone'>{5}</span>\""'                                         person.Identity'                                         JsonSanitize (person.Canonical)'                                         person.GetSecureAvatarLink (16)'                                         JsonSanitize (person.Geography.Localized)'                                         JsonSanitize (person.Mail)'                                         JsonSanitize (person.Phone)'                                          JsonSanitize(notes)) + "'" +                                      String.Format(                                          editPersonTemplate' person.Identity)                                         + '}';
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int year = Int32.Parse (monthString.Substring (0' 4));
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int month = Int32.Parse (monthString.Substring (4));
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int formVersion = 2015;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: formVersion = 2010;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: year < 2015
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010] = new Dictionary<GraphicsElement' int>();
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015] = new Dictionary<GraphicsElement' int>();
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.LeftColumnX] = 775;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.LeftColumnX] = 775;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.RightColumnX] = 1492;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.RightColumnX] = 1492;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.LeftColumnX] = 800;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.LeftColumnX] = 800;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.RightColumnX] = 1512;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.RightColumnX] = 1512;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketMainY] = 694;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketMainY] = 694;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketDistY] = 67;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketDistY] = 67;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketMainY] = 770;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketMainY] = 770;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketDistY] = 65;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketDistY] = 65;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryY] = 360;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryY] = 360;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryTotalY] = 560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryTotalY] = 560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AdditiveTaxTotalY] = 1329;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AdditiveTaxTotalY] = 1329;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxY] = 1529;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxY] = 1529;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxTotalY] = 1727;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxTotalY] = 1727;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SummaryTotalY] = 1795;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SummaryTotalY] = 1795;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryY] = 440;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryY] = 440;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryTotalY] = 640;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryTotalY] = 640;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AdditiveTaxTotalY] = 1395;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AdditiveTaxTotalY] = 1395;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxY] = 1560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxY] = 1560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxTotalY] = 1759;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxTotalY] = 1759;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SummaryTotalY] = 1825;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SummaryTotalY] = 1825;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int smallSize = 18;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int regularSize = 24;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int handWriteSize = 36;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: smallSize = 24;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: regularSize = 30;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: handWriteSize = 48;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: year <= 2014
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: ageBracket <= 2
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,DrawWrittenNumber,The following statement contains a magic number: x += 10;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: employeeBirthYear >= yearBreakpoints[2]
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.SalaryTotal += salary.GrossSalaryCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: result.TaxTotal += salary.TaxTotalCents/100.0;
Magic Number,Swarmops.Plugins.Stock.TaxForms,SalaryTaxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,SalaryTaxData,The following statement contains a magic number: Salary = new double[3];
Magic Number,Swarmops.Plugins.Stock.TaxForms,SalaryTaxData,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,SalaryTaxData,The following statement contains a magic number: TaxAdditive = new double[3];
Magic Number,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The following statement contains a magic number: _cacheVersionMark = SHA1.Hash(_cacheVersionMark).Replace(" "' "").Substring(0' 8);
Magic Number,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,ProcessRespondBitId,The following statement contains a magic number: response.StatusCode = 200;
Magic Number,Swarmops.Pages.Security,Login,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\Login.aspx.cs,TestCredentials,The following statement contains a magic number: PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE) && (lastOrgId == 3 || lastOrgId == 0)
Magic Number,Swarmops.Pages.Security,RequestPasswordReset,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The following statement contains a magic number: string resetTicket = SupportFunctions.GenerateSecureRandomKey (16);
Magic Number,Swarmops.Pages.Security,RequestPasswordReset,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The following statement contains a magic number: resetTicket = resetTicket.Substring (0' 21);
Magic Number,Swarmops.Pages.Security,ResetPassword,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,Page_Load,The following statement contains a magic number: !string.IsNullOrEmpty (suppliedTicket) && suppliedTicket.Trim().Length == 21
Magic Number,Swarmops.Pages.Security,ResetPassword,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,PerformReset,The following statement contains a magic number: resetData.Length != 2
Magic Number,Swarmops.Pages.Security,ResetPassword,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,PerformReset,The following statement contains a magic number: string lockdownTicket = SupportFunctions.GenerateSecureRandomKey (16);
Magic Number,Swarmops.Controls.Base,FileUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Controls\v5\Base\FileUpload.ascx.designer.cs,Page_Load,The following statement contains a magic number: DisplayCount = 16;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: int hue = (type == ColorType.Base ? 222 : 40);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: int hue = (type == ColorType.Base ? 222 : 40);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: saturation *= 2;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: saturation = 100;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: saturation > 100
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (shift)              {                  case ColorShift.SlightlyDarker:                      luminosity -= 2;                      break;                  case ColorShift.SlightlyLighter:                      luminosity += 2;                      break;                  default:                      // do nothing                      break;              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (shift)              {                  case ColorShift.SlightlyDarker:                      luminosity -= 2;                      break;                  case ColorShift.SlightlyLighter:                      luminosity += 2;                      break;                  default:                      // do nothing                      break;              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: s < 0.001
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: 0.5 < b
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iSextant = (int) Math.Floor (h/60f);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: h -= 360f;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: 300f <= h
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: h /= 60f;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: h -= 2f*(float) Math.Floor (((iSextant + 1f)%6f)/2f);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: h -= 2f*(float) Math.Floor (((iSextant + 1f)%6f)/2f);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: h -= 2f*(float) Math.Floor (((iSextant + 1f)%6f)/2f);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: 0 == iSextant%2
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMax = Convert.ToInt32 (fMax*255);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMid = Convert.ToInt32 (fMid*255);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMin = Convert.ToInt32 (fMin*255);
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double h = hue/360.0;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double s = saturation/100.0;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double l = luminosity/100.0;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: s < 0.0001
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: return p + (q - p)*6*t;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: t < 1/6
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: t < 1/2
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: t < 2/3
Magic Number,Swarmops.Frontend,CommonV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: t < 2/3
Magic Number,Swarmops.Frontend,DataV5Base,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,LocalizeCount,The following statement contains a magic number: switch (count)              {                  case 0:                      result = parts[0];                      break;                  case 1:                      result = parts[1];                      break;                  default:                      result = String.Format (parts[2]' count);                      break;              }
Magic Number,Swarmops.Frontend,DataV5Base,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,TryLocalize,The following statement contains a magic number: string resourceKey = inputParts[0].Substring (5);
Magic Number,Swarmops.Frontend,DataV5Base,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,TryLocalize,The following statement contains a magic number: argument = DateTime.Parse (inputParts[1].Substring (6)' CultureInfo.InvariantCulture);
Magic Number,Swarmops.Frontend,PageV5Base,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Bases\PageV5Base.cs,LocalizeCount,The following statement contains a magic number: switch (count)              {                  case 0:                      result = parts[0];                      break;                  case 1:                      result = parts[1];                      break;                  default:                      result = String.Format (parts[2]' count);                      break;              }
Magic Number,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The following statement contains a magic number: _cacheVersionMark = SHA1.Hash (_cacheVersionMark).Replace(" "' "").Substring (0' 8);
Magic Number,Swarmops.Frontend,MasterV5,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The following statement contains a magic number: cookieCulture.Expires = DateTime.Now.AddDays (365);
Missing Default,Swarmops.Pages.v5.Support,DownloadUploadedDocument,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\DownloadUploadedDocument.aspx.cs,Page_Load,The following switch statement is missing a default case: switch (document.DocumentType)                  {                      case DocumentType.FinancialTransaction:                      {  /*                          //TODO: Get the orgId from foreign object                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                          }*/                      }                          break;                      case DocumentType.ExpenseClaim:                      case DocumentType.InboundInvoice:                      case DocumentType.OutboundInvoice:                      {                          int budgetId = 0;                            if (document.DocumentType == DocumentType.ExpenseClaim)                          {                              ExpenseClaim claim = (ExpenseClaim) document.ForeignObject;                              orgId = claim.Budget.OrganizationId;                              budgetId = claim.BudgetId;                          }                          else if (document.DocumentType == DocumentType.InboundInvoice)                          {                              InboundInvoice invoice = (InboundInvoice) document.ForeignObject;                              orgId = invoice.Budget.OrganizationId;                              budgetId = invoice.BudgetId;                          }                          else                          {                              OutboundInvoice invoice = (OutboundInvoice) document.ForeignObject;                              orgId = invoice.OrganizationId;                              budgetId = invoice.BudgetId;                          }                              FinancialAccount budget = FinancialAccount.FromIdentity(budgetId);                            if (budget.OwnerPersonId == CurrentUser.Identity || budget.OwnerPersonId == 0)                          {                              hasPermission = true;                              break;                          }                            // TODO: Security leak - check CurrentOrganization against Document's org                            if (                              CurrentAuthority.HasAccess(new Access(CurrentOrganization' AccessAspect.Financials'                                  AccessType.Write)))                          {                              hasPermission = true;                          }                          /*                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                              break;                          }*/                            break;                      }                      case DocumentType.PaperLetter:                      {                          PaperLetter letter = (PaperLetter) document.ForeignObject;                            if (letter.Recipient.Identity == CurrentUser.Identity)                          {                              hasPermission = true; // A letter to the viewer                          }                          /*                          // Otherwise' are there overriding permissions' if not addressed to him/her?                            else if (!letter.Personal)                          {                              // Unpersonal paper letter' like a rally permit. Note that bank statements should                              // be considered personal as they contain donors' information in the transaction info.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else if (letter.ToPersonId == 0)                          {                              // Addressed to the organization' not to a specific person' but still personal.                              // Typical examples include political inquiries from private citizens written on                              // paper.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else                          {                              // Addressed to a specific individual that is not the viewer' and it's personal.                               // INVOCATION OF THIS CODE IS A BREACH OF THE POSTAL SECRET and should ONLY EVER                               // be done for technical' not operational' reasons and preferably NEVER.                                if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }*/                      }                          break;                      case DocumentType.PersonPhoto:                      case DocumentType.Logo:                      case DocumentType.Artwork:                      {                          // These are public                            hasPermission = true;                      }                          break;                    }
Missing Default,Swarmops.Pages.v5.Support,StreamUpload,D:\research\architectureSmells\repos1\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The following switch statement is missing a default case: switch (document.DocumentType)                  {                      case DocumentType.FinancialTransaction:                      {  /*                          //TODO: Get the orgId from foreign object                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                          }*/                      }                          break;                      case DocumentType.ExpenseClaim:                      case DocumentType.InboundInvoice:                      case DocumentType.OutboundInvoice:                      {                          int budgetId = 0;                            if (document.DocumentType == DocumentType.ExpenseClaim)                          {                              ExpenseClaim claim = (ExpenseClaim) document.ForeignObject;                              orgId = claim.Budget.OrganizationId;                              budgetId = claim.BudgetId;                          }                          else if (document.DocumentType == DocumentType.InboundInvoice)                          {                              InboundInvoice invoice = (InboundInvoice) document.ForeignObject;                              orgId = invoice.Budget.OrganizationId;                              budgetId = invoice.BudgetId;                          }                          else                          {                              OutboundInvoice invoice = (OutboundInvoice) document.ForeignObject;                              orgId = invoice.OrganizationId;                              budgetId = invoice.BudgetId;                          }                              FinancialAccount budget = FinancialAccount.FromIdentity(budgetId);                            if (budget.OwnerPersonId == CurrentUser.Identity || budget.OwnerPersonId == 0)                          {                              hasPermission = true;                              break;                          }                            // TODO: Security leak - check CurrentOrganization against Document's org                            if (                              CurrentAuthority.HasAccess(new Access(CurrentOrganization' AccessAspect.Financials'                                  AccessType.Write)))                          {                              hasPermission = true;                          }                          /*                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                              break;                          }*/                            break;                      }                      case DocumentType.PaperLetter:                      {                          PaperLetter letter = (PaperLetter) document.ForeignObject;                            if (letter.Recipient.Identity == CurrentUser.Identity)                          {                              hasPermission = true; // A letter to the viewer                          }                          /*                          // Otherwise' are there overriding permissions' if not addressed to him/her?                            else if (!letter.Personal)                          {                              // Unpersonal paper letter' like a rally permit. Note that bank statements should                              // be considered personal as they contain donors' information in the transaction info.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else if (letter.ToPersonId == 0)                          {                              // Addressed to the organization' not to a specific person' but still personal.                              // Typical examples include political inquiries from private citizens written on                              // paper.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else                          {                              // Addressed to a specific individual that is not the viewer' and it's personal.                               // INVOCATION OF THIS CODE IS A BREACH OF THE POSTAL SECRET and should ONLY EVER                               // be done for technical' not operational' reasons and preferably NEVER.                                if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }*/                      }                          break;                      case DocumentType.PersonPhoto:                      case DocumentType.Logo:                      case DocumentType.Artwork:                      {                          // These are public                            hasPermission = true;                      }                          break;                    }
