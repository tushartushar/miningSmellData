Implementation smell,Namespace,Class,File,Method,Description
Long Method,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The method has 148 lines of code.
Long Method,Swarmops.Frontend.Pages.Admin,OrgSettings,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,The method has 232 lines of code.
Long Method,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The method has 126 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,The method has 147 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,HandleAttestationDeattestation,The method has 147 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetTrackingDetails,The method has 123 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The method has 107 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The method has 163 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The method has 116 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The method has 317 lines of code.
Long Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The method has 143 lines of code.
Long Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The method has 168 lines of code.
Long Method,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The method has 108 lines of code.
Long Method,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The method has 171 lines of code.
Long Method,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The method has 150 lines of code.
Long Method,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The method has 137 lines of code.
Long Method,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,WriteMenuItem,The method has 121 lines of code.
Long Method,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The method has 103 lines of code.
Complex Method,Swarmops.Frontend.Automation,Json_FinancialAccountsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-FinancialAccountsTree.aspx.cs,Page_Load,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,Cyclomatic complexity of the method is 17
Complex Method,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,SetPersonEditorData,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 16
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,Cyclomatic complexity of the method is 35
Complex Method,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,Cyclomatic complexity of the method is 17
Complex Method,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,WriteMenuItem,Cyclomatic complexity of the method is 11
Complex Method,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,Cyclomatic complexity of the method is 12
Long Parameter List,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The method has 7 parameters. Parameters: recipientTypeId' geographyId' mode' subject' body' dummyMail' live
Long Parameter List,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The method has 6 parameters. Parameters: accountId' treeValue' singleValue' expanded' sigma' format
Long Parameter List,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The method has 5 parameters. Parameters: mysqlHostName' rootPassword' serverName' ipAddress' random
Long Parameter List,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,FirstCredentialsTest,The method has 14 parameters. Parameters: readDatabase' readServer' readUser' readPassword' writeDatabase' writeServer' writeUser' writePassword' adminDatabase' adminServer' adminUser' adminPassword' serverName' ipAddress
Long Parameter List,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The method has 15 parameters. Parameters: name' organizationId' mail' password' phone' street1' street2' postalCode' city' countryCode' dateOfBirth' geographyId' activist' gender' positionIdsVolunteer
Long Identifier,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the parameter overEngineeredAssignmentPrompts is 31.
Long Identifier,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,,The length of the parameter LabelImpersonationWarningHeader is 31.
Long Identifier,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,,The length of the parameter LiteralImpersonationWarningText is 31.
Long Identifier,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,,The length of the parameter LabelHeaderCorrespondenceTransmission is 37.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,,The length of the parameter LabelListOutboundInvoicesHeader is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,,The length of the parameter LabelListInboundInvoicesHeader is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,,The length of the parameter LiteralErrorInsufficientBudget is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralExpensesBudgetsAreNegative is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralDebtBalancesAreNegative is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralLabelAdministrativeShort is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralLabelHeaderDailyOperations is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralLabelHeaderConfiguration is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,,The length of the parameter LiteralLabelAdministrativeLong is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,,The length of the parameter LabelHeaderUnbalancedTransactions is 33.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LiteralErrorAddRowSelectAccount is 31.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,,The length of the parameter LabelGridHeaderDateTimeEntered is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewVatReports,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewVatReports.aspx.cs,,The length of the parameter LabelHeaderNoVatReportsToDisplay is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,,The length of the parameter LabelViewOutstandingAccountsHeader is 34.
Long Identifier,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,,The length of the parameter LabelGridHeaderExpectedCloseDate is 32.
Long Identifier,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,,The length of the parameter LabelDashboardTemporaryContent is 30.
Long Identifier,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,,The length of the parameter LabelSidebarTodoConnectDatabase is 31.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LiteralErrorSelectActivationLevel is 33.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LiteralErrorSelectVolunteerPosition is 35.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LabelVolunteerHeaderPositionTitle is 33.
Long Identifier,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,,The length of the parameter LabelVolunteerHeaderHighestGeography is 36.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelDashboardProfitLoss is 30.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderAccount is 34.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderSecurity is 35.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonCurrentPassword is 31.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonCurrentPassword is 36.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonNewPassword1 is 33.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonNewPassword2 is 33.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonHeaderSecurityProvisioning is 47.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPerson2FAProvisioning is 31.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPersonResetPassword is 34.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelEditPerson2FAProvisioning is 36.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemName is 37.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterPersonEditLiteralHeaderItemDescription is 44.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonPostalCodeCity is 30.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankClearing is 34.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankAccount is 33.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBankHolder is 32.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterEditPersonLegacyBitcoinAddress is 36.
Long Identifier,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,,The length of the parameter MasterLabelBitIdRegisterHeader is 30.
Long Statement,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The length of the statement  "            if (Double.TryParse(currencyStrings[1]' NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint' CultureInfo.CurrentCulture' out amountDouble)) " is 180.
Long Statement,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The length of the statement  "            else if (Double.TryParse(currencyStrings[1]' NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out amountDouble)) " is 187.
Long Statement,Swarmops.Frontend.Automation,Formatting,C:\repos\Swarmops_Swarmops\Site\Automation\Formatting.aspx.cs,FormatCurrencyString,The length of the statement  "            if (Double.TryParse(input' NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint' CultureInfo.CurrentCulture' out outParse)) " is 163.
Long Statement,Swarmops.Frontend.Automation,Formatting,C:\repos\Swarmops_Swarmops\Site\Automation\Formatting.aspx.cs,FormatCurrencyString,The length of the statement  "            else if (Double.TryParse(input' NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint' CultureInfo.InvariantCulture' out outParse)) " is 170.
Long Statement,Swarmops.Frontend.Automation,Json_ByGuid,C:\repos\Swarmops_Swarmops\Site\Automation\Json-ByGuid.aspx.cs,GetNonsocketProgress,The length of the statement  "                return new AjaxCallResult {Success = true' DisplayMessage = ((int) progressObject).ToString(CultureInfo.InvariantCulture) }; " is 124.
Long Statement,Swarmops.Frontend.Automation,Json_GeographiesTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-GeographiesTree.aspx.cs,RecurseTreeMap,The length of the statement  "                    // Special case for country nodes: "[NativeName] ([LocalizedName])"' e.g. "Deutschland (Tyskland)" for Germany when in Swedish " is 126.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,Page_Load,The length of the statement  "            PositionLevel level = (PositionLevel) Enum.Parse (typeof (PositionLevel)' Request["Level"]); // may throw on invalid param but so what' that's what should happen anyway " is 168.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"minMax\":\"{4} / {5}\"'\"iconType\":\"{6}\"'\"actions\":\"{7}\""' " is 160.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"\"'\"expires\":\"\"'\"minMax\":\"\"'\"iconType\":\"{6}\"'\"actions\":\"\""' " is 142.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                            "\"id\":\"{0}-{1}\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"actions\":\"{4}\""' " is 139.
Long Statement,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The length of the statement  "                if (positionNode.Children.Count > 0)  // This should only trigger when position.MaxCount is also 1' or a very weird UI will result " is 130.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,The length of the statement  "            if ((position.OrganizationId > 0 && authData.CurrentOrganization.Identity != position.OrganizationId) || person.Identity < 0) " is 125.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,AssignPosition,The length of the statement  "            if (position.PositionLevel == PositionLevel.SystemWide && !authData.Authority.HasAccess (new Access (AccessAspect.Administration))) " is 131.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,TerminatePositionAssignment,The length of the statement  "                assignment.Terminate(authData.CurrentUser' authData.CurrentUser.GetPrimaryPosition(authData.CurrentOrganization)' string.Empty); " is 128.
Long Statement,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,TerminateImpersonation,The length of the statement  "            HttpContext.Current.Response.AppendCookie(new HttpCookie("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Admin.CommenceImpersonation_Ended' utcNow)))); " is 179.
Long Statement,Swarmops.Frontend.Controls.Swarm,ImpersonationWarningBox,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Swarm\ImpersonationWarningBox.ascx.cs,Localize,The length of the statement  "            this.LiteralImpersonationWarningText.Text = String.Format(Resources.Pages.Admin.CommenceImpersonation_Active_Text' CurrentUser.Canonical); " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The length of the statement  "            this.InfoBoxLiteral = String.Format(Resources.Pages.Admin.BitcoinEchoTest_Info' BitcoinUtility.EchoFeeSatoshis / 100.0); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address " is 127.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash); " is 216.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.LabelApplicantLabel.Text = Resources.Pages.Admin.CreateOrganization_ApplicantTitle; // this seems to not take effect? " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add (new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Nonprofit' "Nonprofit")); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add(new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Commercial' "Commercial")); " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Localize,The length of the statement  "            this.DropPositionLabel.Items.Add(new ListItem(Resources.Pages.Admin.CreateOrganization_Titles_Government' "Government")); " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            ParticipantTitle applicantLabel = (ParticipantTitle)(Enum.Parse(typeof(ParticipantTitle)' this.DropApplicantLabel.SelectedValue)); " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            ParticipantTitle activistLabel = (ParticipantTitle)(Enum.Parse(typeof(ParticipantTitle)' this.DropActivistLabel.SelectedValue)); " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The length of the statement  "            if (activistLabel == ParticipantTitle.Unknown || peopleLabel == ParticipantTitle.Unknown || asRoot == "0" || currencyCode == "0") " is 129.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,CommenceImpersonation,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CommenceImpersonation.aspx.cs,Commence,The length of the statement  "            HttpContext.Current.Response.AppendCookie(new HttpCookie("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Admin.CommenceImpersonation_Success' utcNow)))); " is 181.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,Localize,The length of the statement  "            this.LabelHeaderStrategic.Text = String.Format(Resources.Pages.Admin.OrgStaffing_Header_StrategicPositions' CurrentOrganization.Name); " is 134.
Long Statement,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,Localize,The length of the statement  "            this.LabelHeaderExecutive.Text = String.Format(Resources.Pages.Admin.OrgStaffing_Header_ExecutivePositions' CurrentOrganization.Name); " is 134.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]]; " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female; " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None); " is 142.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]' " is 189.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The length of the statement  "                    lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender); " is 198.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,Temp_SetOrganizationAdminAccess,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\Temp-SetOrganizationAdminAccess.aspx.cs,Page_Load,The length of the statement  "                "This is a <strong>temporary</strong> access mechanism to get Swarmops usage off the ground. Real' fine-grained' responsibility-based access control per organizational role is scheduled to be implemented by the <em>Swarmops Orange</em> release (Jun 30' 2015)."; " is 261.
Long Statement,Swarmops.Frontend.Pages.v5.Admin.Hacks,Temp_SetOrganizationAdminAccess,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\Temp-SetOrganizationAdminAccess.aspx.cs,ButtonSave_Click,The length of the statement  "            // Rough stuff. This will throw up on the user if the input is bad. That's kind of intentional as it's before the save and this is a very temporary page. " is 153.
Long Statement,Swarmops.Frontend.Pages.Admin,OrgSettings,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,StoreCallback,The length of the statement  "            if (!authenticationData.Authority.HasAccess (new Access (authenticationData.CurrentOrganization' AccessAspect.Administration' AccessType.Write))) " is 145.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,CheckSysadminsPopulated,The length of the statement  "                    rootChildren.Where (position => position.PositionType == PositionType.System_SysadminReadWrite).ToList() [0]; // should exist " is 125.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The length of the statement  "                    Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase); " is 151.
Long Statement,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The length of the statement  "                        OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest); " is 127.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,Localize,The length of the statement  "            this.DropRecipientClasses.Items.Add (new ListItem (Participant.Localized(CurrentOrganization.RegularLabel' TitleVariant.Plural)' "1")); " is 135.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,Localize,The length of the statement  "            this.DropRecipientClasses.Items.Add (new ListItem (Participant.Localized(CurrentOrganization.ActivistLabel' TitleVariant.Plural)' "2")); " is 136.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The length of the statement  "            if (PilotInstallationIds.IsPilot(PilotInstallationIds.DevelopmentSandbox) && authData.CurrentUser.Identity == 1 && !live) " is 121.
Long Statement,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,ExecuteSend,The length of the statement  "                OutboundComm.CreateParticipantMail(subject' body' authData.CurrentUser' authData.CurrentUser' authData.CurrentOrganization' Geography.FromIdentity(geographyId)); " is 161.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Localize,The length of the statement  "                        this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesOutbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesOutbound.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Page_Load,The length of the statement  "                CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.Administration)).ToString(CultureInfo.InvariantCulture).ToLowerInvariant(); " is 149.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Localize,The length of the statement  "                        this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,Page_Load,The length of the statement  "            PageAccessRequired = new Access (CurrentOrganization' AccessAspect.Participant' AccessType.Read);   // No specific access aspect for owning a budget (yet?) " is 155.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,GetAttestationRights,The length of the statement  "                    (account.OwnerPersonId == 0 && authData.Authority.HasAccess(new Access(authData.CurrentOrganization' AccessAspect.Administration)))) " is 132.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,Localize,The length of the statement  "            this.LabelDescribeCorrect.Text = String.Format (Resources.Pages.Financial.AttestCosts_Modal_DescribeOptionAmount' CurrentOrganization.Currency.DisplayCode); " is 156.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,Localize,The length of the statement  "            this.LiteralPleaseSelectBudget.Text = JavascriptEscape (Resources.Pages.Financial.AttestCosts_Error_PleaseSelectBudget); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            OutboundInvoice newInvoice = OutboundInvoice.Create (CurrentOrganization' dueDate' budget' this.TextClient.Text' string.Empty' string.Empty' CurrentOrganization.Currency' false' this.TextReference.Text' CurrentUser); " is 216.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            // TODO: VAT -- needs to be PER ITEM' and dbfields must update for this' quite a large work item' do not short circuit hack this " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The length of the statement  "            // Create financial transaction in the ledger (this logic should not be in the presentation layer at all' move it to a better OutboundInvoice.Create that takes OutboundInvoiceItems as parameter) " is 194.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The length of the statement  "                    ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash); " is 215.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,Page_Load,The length of the statement  "            Payouts previousPayouts = Payouts.ForOrganization (CurrentOrganization); // gets all currently open payouts - enabled for undoing " is 129.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3 " is 203.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img id=\\\"IconApproval{7}\\\" class=\\\"IconApproval{7} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 155.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconApproved{7} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 128.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconDenial{7} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 124.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconDenied{7} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 124.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconUndo{7} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 120.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The length of the statement  "                    "<img id=\\\"IconApproval{7}\\\" class=\\\"IconApproval{7} LocalIconApproval LocalPrevious\\\" databaseid=\\\"{8}\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 177.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The length of the statement  "                    "<img class=\\\"IconApproved{7} LocalIconApproved LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 127.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The length of the statement  "                    "<img class=\\\"IconDenial{7} LocalIconDenial LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 123.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The length of the statement  "                    "<img class=\\\"IconDenied{7} LocalIconDenied LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 123.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,Page_Load,The length of the statement  "            Payouts previousPayouts = Payouts.ForOrganization (CurrentOrganization); // gets all currently open payouts - enabled for undoing " is 129.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3 " is 203.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconApproval{5} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 128.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconApproved{5} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 128.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconDenial{5} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 124.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconDenied{5} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 124.
Long Statement,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The length of the statement  "                    "<img class=\\\"IconUndo{5} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" + " is 120.
Long Statement,Swarmops.Frontend.Pages.Financial,PayOutMoney,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\PayOutMoney.aspx.cs,Localize,The length of the statement  "            this.LabelOptionsShowPrevious.Text = String.Format(Resources.Pages.Financial.PayOutMoney_OptionShowOpen' previouslyOpenPayouts); " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,Page_Load,The length of the statement  "                this.LabelOptionsShowInactive.Text = String.Format(Resources.Pages.Ledgers.AccountPlan_Options_ShowInactive' inactiveCount); " is 124.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountOwner,The length of the statement  "            // TODO SECURITY: Verify that authdata.AuthenticatedPerson can see personId' or this can be exploited to enumerate all people " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The length of the statement  "                if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear) " is 171.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountBudget,The length of the statement  "                    Int64 newProfitLossProjection = allProfitLossAccounts.Where(queryAccount => queryAccount.Identity != authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.Identity).Sum(queryAccount => queryAccount.GetBudgetCents(thisYear)); " is 235.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,GetInactiveAccountCount,The length of the statement  "            int inactiveAccountCount = FinancialAccounts.ForOrganization(authData.CurrentOrganization).Count(account => !account.Active); " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The length of the statement  "                    bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description); " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The length of the statement  "                            @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches' " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The length of the statement  "                            @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches' " is 153.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenVatReportData,The length of the statement  "                Int64 vatDiffCents = report.VatInboundCents - report.VatOutboundCents; // produces positive value for surplus; same as tx on match " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,BalanceTransactionManually,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || account.OrganizationId != authData.CurrentOrganization.Identity) " is 139.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayout,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || payout.OrganizationId != authData.CurrentOrganization.Identity) " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenOutboundInvoice,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || outboundInvoice.OrganizationId != authData.CurrentOrganization.Identity) " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayoutForeign,The length of the statement  "            if (transaction.OrganizationId != authData.CurrentOrganization.Identity || payout.OrganizationId != authData.CurrentOrganization.Identity) " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,MatchTransactionOpenPayoutForeign,The length of the statement  "            transaction.AddRow (forexSpillAccount' -(payout.AmountCents + transaction.Rows.AmountCentsTotal)' // plus because AmountCentsTotal is negative " is 142.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderDerivationPath.Text = Resources.Global.Financial_BitcoinChain + @"' " + Resources.Pages.Ledgers.BitcoinHotwallet_DerivationPath; " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderAddress.Text = Resources.Pages.Ledgers.BitcoinHotwallet_Address + @" / " + Resources.Pages.Ledgers.BitcoinHotWallet_TransactionHash; " is 150.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BitcoinHotwallet,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BitcoinHotwallet.aspx.cs,Localize,The length of the statement  "            this.LiteralHeaderFiatValue.Text = String.Format(Resources.Pages.Ledgers.BitcoinHotwallet_ValueFiat' CurrentOrganization.Currency.DisplayCode); " is 143.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetProfitLossNode,The length of the statement  "                "Row" + resource' string.Format (Resources.Pages.Ledgers.ResourceManager.GetString("AccountPlan_" + resource)' _year)' "Row" + resource' amount / 100.0) + '}'; " is 159.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The length of the statement  "            IOrderedEnumerable<FinancialAccount> childAccountsSorted = this._hashedAccounts[rootNodeId].OrderBy(account => account.Name);; " is 126.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The length of the statement  "                            "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" + " is 146.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The length of the statement  "                            "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('/Images/Icons/iconshock-warning-16x12px.png')\\\">" + " is 196.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The length of the statement  "                        "<img class='IconEdit' accountId='{0}{1}' height='16' width='24' src='/Images/Icons/iconshock-wrench-128x96px-centered.png' />"' " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The length of the statement  "                                      "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""' " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,JsonDualString,The length of the statement  "                    "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,JsonDualString,The length of the statement  "                "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "                "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\\\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\\\" onmouseout=\\\"this.src='/Images/Icons/iconshock-search-256px.png';\\\" baseid='{0}' class='LocalViewDox' style='cursor:pointer' height='20' width='20' />"; " is 286.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "            Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""' " is 139.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The length of the statement  "                JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0)); " is 170.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The length of the statement  "                string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_ProfitToDate' _year)); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The length of the statement  "                string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_LossToDate' _year)); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The length of the statement  "                                   (line.AccountValues.ThisYear-line.AccountValues.PreviousYear) * signReverser' line.DefaultExpand' string.Empty' "(+#'#.);(-#'#.);---"); " is 135.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The length of the statement  "                    element += "'\"state\":\"" + (line.DefaultExpand? "open":"closed") + "\"'\"children\":" + RecurseReport (line.Children); " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class='annualreportdata-collapsed-{0}' " + (expanded? "style='display:none'": "") + ">" + sigma + " " + FormatSingleString(treeValue' format) + "</span>" +  " is 164.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class='annualreportdata-collapsed-{0}'>" + sigma + " " + FormatSingleString(treeValue' format) + " " + "</span>" + " is 123.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,JsonDualString,The length of the statement  "                "<span class='annualreportdata-expanded-{0}' style='display:none'>" + FormatSingleString(singleValue' format) + "</span>\""' " is 124.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The length of the statement  "                    element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children); " is 122.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""' " is 186.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""' " is 186.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            long fiatCentsPerCoreCoin = new Money (BitcoinUtility.SatoshisPerBitcoin' Currency.BitcoinCore).ToCurrency(_authenticationData.CurrentOrganization.Currency).Cents; " is 163.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            long fiatCentsPerCashCoin = new Money(BitcoinUtility.SatoshisPerBitcoin' Currency.BitcoinCash).ToCurrency(_authenticationData.CurrentOrganization.Currency).Cents; " is 162.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "            conversionRateLookup[BitcoinChain.Cash] = fiatCentsPerCashCoin/1.0/BitcoinUtility.SatoshisPerBitcoin;   // the "/1.0" converts to double implicitly " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The length of the statement  "                        (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2")); " is 130.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,JsonExpandingString,The length of the statement  "                "<span class=\\\"bitcoinhotwalletdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N2}</span><span class=\\\"bitcoinhotwalletdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 190.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The length of the statement  "            bool displayDescription = CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.BookkeepingDetails' AccessType.Read)); " is 138.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The length of the statement  "                    "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" txId='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />"; " is 280.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The length of the statement  "                result.Append ("{\"accountName\":\"<img src='/Images/Icons/iconshock-warning-24px.png' height='16px' width='16px' class='elementFloatFar' />" + " is 143.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The length of the statement  "                result.Append ("}'");  // the comma isn't really necessary here but will be stripped later and is kept for cut&paste consistency of this code block " is 147.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The length of the statement  "                ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1)); // replaces DateTime.Min...MaxValue " is 137.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // This is a very expensive op. We need to load ALL the cash advances' and determine the opening date from its associated " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // payout. Then' we need to determine when it was paid pack through another associated payout (or invoice payment) which  " is 120.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "            // I don't know how to find at the time of writing this comment' and if the target date is in between those two' then the " is 121.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,GetOutstandingCashAdvances,The length of the statement  "                    // TODO: Find OutboundInvoiceItem that depends on this CashAdvance. Look at the invoice date. That's our PaidBack datetime. " is 123.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The length of the statement  "                    "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The length of the statement  "                "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"' " is 180.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                        // one transaction row (we know there's not zero rows' because the transaction is unbalanced' which requires at least one nonzero row) " is 134.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                        "\"id\":\"{0:N0}\"'\"description\":\"{1}\"'\"accountName\":\"{2}\"'\"delta\":\"{3:+#'#.00;−#'#.00}\"'\"dateTime\":\"{4:yyyy-MMM-dd HH:mm}\""' " is 141.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                            transaction.OrganizationSequenceId' JsonSanitize (transaction.Description)' JsonSanitize (accountName)' txRows.AmountCentsTotal / 100.0' transaction.DateTime); " is 159.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The length of the statement  "                            "'\"action\":\"<img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='16' width='24' class='LocalIconFix' txId='{0}' />\""' " is 140.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The length of the statement  "                    yearElements.Add (WriteElement (yearLoop' String.Format (Resources.Global.Global_YearX' yearLoop)' yearData' monthElements)); " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The length of the statement  "            element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""' " is 173.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The length of the statement  "                data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0' " is 149.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The length of the statement  "                    "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""' " is 182.
Long Statement,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The length of the statement  "                "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""' " is 182.
Long Statement,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,Page_Load,The length of the statement  "                DashboardMessage.Set ("There are no asset accounts set up for automation' so no accounts support data upload at this time. Returning to Dashboard."); " is 149.
Long Statement,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The length of the statement  "                    // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015. " is 125.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,Localize,The length of the statement  "            this.LabelSidebarInfoContent.Text = @"Welcome to the Swarmops installation pages. This will guide you to an operational Swarmops."; " is 131.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Check the host names and addresses again as a security measure - after all' we can be called from outside our intended script " is 128.
Long Statement,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Protect against race condition on a really really slow server: wait until there is a first person or 15 seconds have expired " is 127.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Page_Load,The length of the statement  "                Response.Redirect(Request.RawUrl.Substring (0' Request.RawUrl.IndexOf ("Culture=")-1)' true); // "-1" removes the preceding & or ? " is 130.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.LabelActivationLevelIntro.Text = String.Format(Resources.Pages.Public.Signup_ActivationLevelText' this.Organization.Name); " is 127.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.RadioActivationPassive.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassiveHeader' Participant.Localized (this.Organization.RegularLabel)); " is 160.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.LabelActivationPassiveText.Text = String.Format(Resources.Pages.Public.Signup_ActivationPassive' Participant.Localized(this.Organization.RegularLabel)); " is 157.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "            this.RadioActivationActive.Text = String.Format(Resources.Pages.Public.Signup_ActivationActiveHeader' Participant.Localized (this.Organization.ActivistLabel)); " is 159.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,Localize,The length of the statement  "                Participant.Localized (this.Organization.RegularLabel' TitleVariant.Ship)' DateTime.Today.AddYears (1).ToShortDateString()' this.Organization.Name); " is 148.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The length of the statement  "            Participation participation = newPerson.AddParticipation (organization' DateTime.UtcNow.AddYears (1));  // TODO: set duration from organization settings of Participantship " is 171.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The length of the statement  "            HttpContext.Current.Response.AppendCookie (new HttpCookie ("DashboardMessage"' CommonV5.JavascriptEscape(String.Format(Resources.Pages.Public.Signup_DashboardMessage' organization.Name)))); " is 189.
Long Statement,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,GuessCountry,The length of the statement  "            // IMPORTANT: If you're implementing a sensitive organization' this should use YOUR OWN geoip server and not freegeoip.com' which " is 129.
Long Statement,Swarmops.Frontend.Pages.Security,ChangeOrganizationsAdvanced,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizationsAdvanced.aspx.cs,Page_Load,The length of the statement  "            // this.PageAccessRequired = new Access(AccessAspect.Bookkeeping' AccessType.Write);  // bogus' but will prevent bad ppl from entering until real security done " is 159.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                        if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization)) " is 122.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 137.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 135.
Long Statement,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The length of the statement  "                            if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default)) " is 141.
Long Statement,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The length of the statement  "                "\"actions\":\"<a href='javascript:masterBeginEditPerson({0})'><img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='16' width='24' /></a>\""; " is 160.
Long Statement,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The length of the statement  "                                       "\"id\":\"{0}\"'\"name\":\"<span class='spanUser{0}Name'>{1}</span>\"'\"avatar16Url\":\"{2}\"'\"geographyName\":\"{3}\"'\"mail\":\"<span class='spanUser{0}Mail'>{4}</span>\"'\"phone\":\"<span class='spanUser{0}Phone'>{5}</span>\""' " is 231.
Long Statement,Swarmops.Frontend.Pages.v5.User,SelectLanguage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,Localize,The length of the statement  "                "Select language&nbsp;/ Seleccione su idioma&nbsp;/ Sélectionner votre langue&nbsp;/ Wählen Sie Ihre Sprache&nbsp;/ Välj språk&nbsp;/ Selecione seu idioma&nbsp;/ " + " is 165.
Long Statement,Swarmops.Frontend.Pages.v5.User,SelectLanguage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,Localize,The length of the statement  "                "Velg ditt språk&nbsp;/ Selecteer uw taal&nbsp;/ Vælg dit sprog&nbsp;/ Valitse kieli&nbsp;/ επιλέξτε τη γλώσσα σας&nbsp;/ выберите язык"; " is 137.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "            Image form = Image.FromFile (MapPath (".") + "/MonthlyTaxForm-SE-" + formVersion + ".png");  // the "." says "in same folder as this file" " is 138.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics); " is 140.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics); " is 145.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics); " is 157.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics); " is 145.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics); " is 150.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics); " is 154.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics); " is 159.
Long Statement,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The length of the statement  "                DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics); " is 145.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                DashboardMessage.Set ("<p>You have been logged on as <strong>Sandbox Administrator</strong> to the Swarmops Development Sandbox.</p><br/><p>This machine runs the latest development build' so you may run into diagnostic code and half-finished features. All data here is bogus test data and is reset every night.</p><br/><p><strong>In other words' welcome' and play away!</strong></p>"); " is 385.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                FormsAuthentication.SetAuthCookie (Authority.FromLogin (Person.FromIdentity (1)' Organization.Sandbox).ToEncryptedXml()' true); " is 127.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "            Organization organizationOpenLedgers = Organization.FromOpenLedgersDomain(requestHost); // returns null if doesn't exist " is 120.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                FormsAuthentication.SetAuthCookie(Authority.FromLogin (Person.FromIdentity (Person.OpenLedgersIdentity)' organizationOpenLedgers).ToEncryptedXml()' true); " is 154.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "            // Special case for CloudFlare deployments - there is a case where somebody will get their connections de-SSLed at the server " is 125.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The length of the statement  "                    !(Request.Url.ToString().StartsWith ("http://localhost:") && Debugger.IsAttached))  // Debugger.IsAttached is necessary' as link can be faked " is 141.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,TestCredentials,The length of the statement  "                    if (!authenticatedPerson.ParticipatesInOrganizationOrParent (lastOrgId) && !testAuthority.HasSystemAccess (AccessType.Read)) " is 124.
Long Statement,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,ButtonLogin_Click,The length of the statement  "            // Check the host names and addresses again as a security measure - after all' we can be called from outside our intended script " is 128.
Long Statement,Swarmops.Pages.Security,RequestPasswordReset,C:\repos\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The length of the statement  "            resetTicket = resetTicket.Substring (0' 21); // We're using a 21-character (84-bit) key mostly for UI consistency with the ticket sent in mail' and it's secure enough " is 166.
Long Statement,Swarmops.Pages.Security,RequestPasswordReset,C:\repos\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The length of the statement  "            concernedPerson.ResetPasswordTicket = DateTime.UtcNow.AddHours (1).ToString(CultureInfo.InvariantCulture) + "'" + resetTicket; // Adds expiry - one hour " is 152.
Long Statement,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write(("<li class='Submenu' id='LiSwarmopsLogo'><a href='/'><div id='DivSwarmopsLogo'></div></a><ul>")); // Swarmops logo " is 128.
Long Statement,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='BuildNumber' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/swarmops-builder-40px.png' height='20' width='20' />" + Formatting.SwarmopsVersion + "</a></li>"); " is 195.
Long Statement,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "                "<li class='Disabled' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/transparency-16px.png' height='20' width='20' />" + " is 132.
Long Statement,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='Disabled' dir='ltr'><a href='#builddata'><img src='/Images/PageIcons/transparency-16px.png' height='20' width='20' />" + String.Format(Resources.Menu5.Menu5_Beta_LinesOfCode' @"<!--KaylockCount-->157'127<!--EndKaylock-->") + "</a></li>"); " is 263.
Long Statement,Swarmops.Controls.Base,MainMenu,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\MainMenu.ascx.designer.cs,Render,The length of the statement  "            output.Write("<li class='Link'><a target='_blank' href='https://github.com/Swarmops/Swarmops/issues/new'><img src='/Images/Icons/iconshock-warning-24px.png' height='20' width='20' />" + Resources.Menu5.Menu5_Beta_ReportBug + "</a></li>"); " is 238.
Long Statement,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,CulturePreInit,The length of the statement  "            // Set the calendar to GregorianCalendar.USEnglish. This sometimes fails on Windows but works on Mono. If it fails on Windows' no biggie b/c " is 140.
Long Statement,Swarmops.Frontend,Default,C:\repos\Swarmops_Swarmops\Site\Default.aspx.cs,Page_Load,The length of the statement  "                "This is a Dashboard placeholder. It will contain a snapshot of the state of things as soon as the basic functions are re-implemented in the new interface."; " is 157.
Long Statement,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The length of the statement  "            // Special case for CloudFlare deployments - there is a case where somebody will get their connections de-SSLed at the server " is 125.
Long Statement,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The length of the statement  "            // this.LiteralCurrentlyLoggedIntoSwitch.Text = string.Format(Resources.Global.Master_SwitchOrganizationDialog' _currentOrganization.Name); " is 139.
Long Statement,Swarmops.Frontend.Controls.UI,IncludedScripts,C:\repos\Swarmops_Swarmops\Site\Controls\v5\UI\IncludedScripts.ascx.cs,Page_Load,The length of the statement  "                            "<script src=\"/Scripts/jquery.fileupload/jquery.iframe-transport.js\" type=\"text/javascript\" language=\"javascript\"></script>\r\n" + " is 136.
Long Statement,Swarmops.Frontend.Controls.UI,IncludedScripts,C:\repos\Swarmops_Swarmops\Site\Controls\v5\UI\IncludedScripts.ascx.cs,Page_Load,The length of the statement  "                            "<script src=\"/Scripts/jquery.fileupload/jquery.fileupload.js\" type=\"text/javascript\" language=\"javascript\"></script>\r\n"); " is 130.
Complex Conditional,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The conditional expression  "_assignable && (assignmentCount < position.MaxCount || (position.MaxCount == 0 && position.Assignments.Count > 0))"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,ButtonCreate_Click,The conditional expression  "activistLabel == ParticipantTitle.Unknown || peopleLabel == ParticipantTitle.Unknown || asRoot == "0" || currencyCode == "0""  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Admin,OrgSettings,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,The conditional expression  "!bitcoinNative && newValue == false &&                              ((authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinCold != null &&                                authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinCold.Active) ||                               (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot != null &&                                authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.Active))"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The conditional expression  "bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The conditional expression  "bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4"  is complex.
Complex Conditional,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The conditional expression  "string.IsNullOrEmpty (accountIdString) || string.IsNullOrEmpty (yearString) ||                  string.IsNullOrEmpty (monthString) || accountIdString == "undefined""  is complex.
Complex Conditional,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The conditional expression  "(requestHost == "sandbox.swarmops.com" || requestHost == "dev.swarmops.com") &&                  PilotInstallationIds.IsPilot (PilotInstallationIds.DevelopmentSandbox) &&                  Request.QueryString["SuppressAutologin"] != "true""  is complex.
Empty Catch Block,Swarmops.Frontend.Automation,FieldValidation,C:\repos\Swarmops_Swarmops\Site\Automation\FieldValidation.aspx.cs,IsAmountValid,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,PrepareAccountChange,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabase,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,GuessCountry,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,CulturePreInit,The method has an empty catch block.
Empty Catch Block,Swarmops.Frontend,DataV5Base,C:\repos\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,OnInitComplete,The method has an empty catch block.
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: if (currencyStrings.Length != 2)              {                  return new InterpretedCurrencyResult {Success = false' DisplayMessage="Cannot interpret field"};              }
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: Money money = new Money((long) (amountDouble * 100.0 + 0.5)' currencyUsed);
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: Money money = new Money((long) (amountDouble * 100.0 + 0.5)' currencyUsed);
Magic Number,Swarmops.Frontend.Automation,FinancialFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\FinancialFunctions.aspx.cs,InterpretCurrency,The following statement contains a magic number: return new InterpretedCurrencyResult              {                  Success = true'                  EnteredAmount = amountDouble.ToString("N2")'                  CurrencyCode = money.Currency.Code'                  DisplayAmount = (money.ToCurrency(authData.CurrentOrganization.Currency).Cents/100.0).ToString("N2")              };
Magic Number,Swarmops.Frontend.Automation,Json_AvailableCurrencies,C:\repos\Swarmops_Swarmops\Site\Automation\Json-AvailableCurrencies.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' currenciesJson' null' DateTime.Now.AddMinutes (60)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_BudgetsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-BudgetsTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' accountsJson' null' DateTime.Now.AddMinutes (5)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_GeographiesTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-GeographiesTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' accountsJson' null' DateTime.Now.AddMinutes (15)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The following statement contains a magic number: foreach (TreeNode<Position> positionNode in positionNodes)              {                  Position position = positionNode.Data;                  string localizedPositionName = position.Localized (positionNode.Data.MaxCount != 1);                  PositionAssignments assignments = new PositionAssignments();                  string nodeState = "open";                    if (position.GeographyId != _geographyId)                  {                      localizedPositionName += " " + position.Geography.Name;                      nodeState = "closed";                  }                      string expires = string.Empty;                  string action = string.Empty;                  string assignedName = string.Empty;                    if (_displayAssignments)                  {                      assignments = position.Assignments;                      assignedName = Resources.Controls.Swarm.Positions_Vacant;                  }                    if (_assignable)                  {                      assignedName =                          string.Format (                              "<a positionId='{3}' geographyId='{5}' positionName='{4}' class='{1} LocalAssignPerson'>{2}</a> {0}"'                              Resources.Controls.Swarm.Positions_Vacant' _customCookieClass'                              Resources.Controls.Swarm.Positions_AssignFirstPerson' position.Identity'                              JavascriptEscape(position.Localized())' position.GeographyId);                  }                    if (localizedPositionName == null)                  {                      localizedPositionName = @"NULL (" + position.PositionType.ToString() + ")";                      string test = position.Localized();                  }                    if (assignments.Count > 0)                  {                      assignedName = assignments[0].Person.Canonical;                      if (assignments[0].ExpiresDateTimeUtc.IsDefined())                      {                           expires = assignments[0].ExpiresDateTimeUtc.ToString("yyyy-MMM-dd");                      }                      if (_assignable)                      {                          action =                              String.Format (                                  "<img class='LocalIconTerminate {1}' height='18' width='24' {2} assignmentId='{0}' />"'                                  assignments[0].Identity' _customCookieClass'                                  assignments[0].PersonId == CurrentUser.Identity ? "self='true'" : string.Empty);                      }                  }                  string element = string.Empty;                    if (position.PositionTitle != PositionTitle.UxElement) // regular title type                  {                      element =                          string.Format(                              "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"minMax\":\"{4} / {5}\"'\"iconType\":\"{6}\"'\"actions\":\"{7}\""'                              position.Identity' JsonSanitize(localizedPositionName)' JsonSanitize(assignedName)'                              JsonSanitize(expires)' position.MinCount'                              position.MaxCount == 0                                  ? @"&infin;"                                  : position.MaxCount.ToString(CultureInfo.InvariantCulture)'                              position.MaxCount == 1 ? "Person" : "Group"'                              action' position.GeographyId);                  }                  else // UX element                  {                      nodeState = "closed";                      element =                          string.Format(                              "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"\"'\"expires\":\"\"'\"minMax\":\"\"'\"iconType\":\"{6}\"'\"actions\":\"\""'                              position.Identity' JsonSanitize(localizedPositionName)' JsonSanitize(assignedName)'                              JsonSanitize(expires)' position.MinCount'                              position.MaxCount == 0                                  ? @"&infin;"                                  : position.MaxCount.ToString(CultureInfo.InvariantCulture)'                              position.MaxCount == 1 ? "Person" : "Group"'                              action' position.GeographyId);                  }                    // TODO: Add all assignments after the first one right here                    int assignmentCount = 1;                    while (assignmentCount < assignments.Count)                  {                      // add more lines to match the number of assignments for this position                        elements.Add ("{" + element + "}");                        expires = string.Empty;                      if (_assignable)                      {                          action =                              String.Format (                                  "<img class='LocalIconTerminate {1}' height='18' width='24' {2} assignmentId='{0}' />"'                                  assignments[assignmentCount].Identity' _customCookieClass'                                  assignments[0].PersonId == CurrentUser.Identity ? "self='true'" : string.Empty);                      }                        DateTime expiresUtc = assignments[assignmentCount].ExpiresDateTimeUtc;                      if (expiresUtc.IsDefined())                      {                          expires = expiresUtc.ToString ("yyyy-MMM-dd");                      }                      element =                          String.Format (                              "\"id\":\"{0}-{1}\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"actions\":\"{4}\""'                              position.Identity' assignmentCount+1' assignments[assignmentCount].Person.Canonical' expires' action);                        assignmentCount++;                  }                    if (_assignable && (assignmentCount < position.MaxCount || (position.MaxCount == 0 && position.Assignments.Count > 0)))                  {                      // finally' if the assigned count is less than max count' add a "assign another person" link if _assignable is true                        int count = position.Assignments.Count;                      if (count > 6)                      {                          count = 6;                      }                      string[] overEngineeredAssignmentPrompts =                      {                          Resources.Controls.Swarm.Positions_AssignFirstPerson'                          Resources.Controls.Swarm.Positions_AssignSecondPerson'                          Resources.Controls.Swarm.Positions_AssignThirdPerson'                          Resources.Controls.Swarm.Positions_AssignFourthPerson'                          Resources.Controls.Swarm.Positions_AssignFifthPerson'                          Resources.Controls.Swarm.Positions_AssignSixthPerson'                          Resources.Controls.Swarm.Positions_AssignAnotherPerson                      };                        elements.Add ("{" + element + "}");                      string addPerson =                          string.Format (                              "<a positionId='{1}' geographyId='{4}' positionName='{2}' class='{3} LocalAssignPerson'>{0}</a>"'                              overEngineeredAssignmentPrompts[count]' position.Identity'                              JavascriptEscape (position.Localized())' _customCookieClass' position.GeographyId);                        element =                          String.Format(                          "\"id\":\"{0}-0\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{1}\""'                              position.Identity' addPerson);                    }                    if (positionNode.Children.Count > 0)  // This should only trigger when position.MaxCount is also 1' or a very weird UI will result                  {                      element += "'\"state\":\"" + nodeState + "\"'\"children\":" + RecursePositionTree(positionNode.Children);                  }                    elements.Add("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Automation,Json_PositionsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-PositionsTree.aspx.cs,RecursePositionTree,The following statement contains a magic number: foreach (TreeNode<Position> positionNode in positionNodes)              {                  Position position = positionNode.Data;                  string localizedPositionName = position.Localized (positionNode.Data.MaxCount != 1);                  PositionAssignments assignments = new PositionAssignments();                  string nodeState = "open";                    if (position.GeographyId != _geographyId)                  {                      localizedPositionName += " " + position.Geography.Name;                      nodeState = "closed";                  }                      string expires = string.Empty;                  string action = string.Empty;                  string assignedName = string.Empty;                    if (_displayAssignments)                  {                      assignments = position.Assignments;                      assignedName = Resources.Controls.Swarm.Positions_Vacant;                  }                    if (_assignable)                  {                      assignedName =                          string.Format (                              "<a positionId='{3}' geographyId='{5}' positionName='{4}' class='{1} LocalAssignPerson'>{2}</a> {0}"'                              Resources.Controls.Swarm.Positions_Vacant' _customCookieClass'                              Resources.Controls.Swarm.Positions_AssignFirstPerson' position.Identity'                              JavascriptEscape(position.Localized())' position.GeographyId);                  }                    if (localizedPositionName == null)                  {                      localizedPositionName = @"NULL (" + position.PositionType.ToString() + ")";                      string test = position.Localized();                  }                    if (assignments.Count > 0)                  {                      assignedName = assignments[0].Person.Canonical;                      if (assignments[0].ExpiresDateTimeUtc.IsDefined())                      {                           expires = assignments[0].ExpiresDateTimeUtc.ToString("yyyy-MMM-dd");                      }                      if (_assignable)                      {                          action =                              String.Format (                                  "<img class='LocalIconTerminate {1}' height='18' width='24' {2} assignmentId='{0}' />"'                                  assignments[0].Identity' _customCookieClass'                                  assignments[0].PersonId == CurrentUser.Identity ? "self='true'" : string.Empty);                      }                  }                  string element = string.Empty;                    if (position.PositionTitle != PositionTitle.UxElement) // regular title type                  {                      element =                          string.Format(                              "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"minMax\":\"{4} / {5}\"'\"iconType\":\"{6}\"'\"actions\":\"{7}\""'                              position.Identity' JsonSanitize(localizedPositionName)' JsonSanitize(assignedName)'                              JsonSanitize(expires)' position.MinCount'                              position.MaxCount == 0                                  ? @"&infin;"                                  : position.MaxCount.ToString(CultureInfo.InvariantCulture)'                              position.MaxCount == 1 ? "Person" : "Group"'                              action' position.GeographyId);                  }                  else // UX element                  {                      nodeState = "closed";                      element =                          string.Format(                              "\"id\":\"{0}-1-{8}\"'\"positionTitle\":\"{1}\"'\"assignedName\":\"\"'\"expires\":\"\"'\"minMax\":\"\"'\"iconType\":\"{6}\"'\"actions\":\"\""'                              position.Identity' JsonSanitize(localizedPositionName)' JsonSanitize(assignedName)'                              JsonSanitize(expires)' position.MinCount'                              position.MaxCount == 0                                  ? @"&infin;"                                  : position.MaxCount.ToString(CultureInfo.InvariantCulture)'                              position.MaxCount == 1 ? "Person" : "Group"'                              action' position.GeographyId);                  }                    // TODO: Add all assignments after the first one right here                    int assignmentCount = 1;                    while (assignmentCount < assignments.Count)                  {                      // add more lines to match the number of assignments for this position                        elements.Add ("{" + element + "}");                        expires = string.Empty;                      if (_assignable)                      {                          action =                              String.Format (                                  "<img class='LocalIconTerminate {1}' height='18' width='24' {2} assignmentId='{0}' />"'                                  assignments[assignmentCount].Identity' _customCookieClass'                                  assignments[0].PersonId == CurrentUser.Identity ? "self='true'" : string.Empty);                      }                        DateTime expiresUtc = assignments[assignmentCount].ExpiresDateTimeUtc;                      if (expiresUtc.IsDefined())                      {                          expires = expiresUtc.ToString ("yyyy-MMM-dd");                      }                      element =                          String.Format (                              "\"id\":\"{0}-{1}\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{2}\"'\"expires\":\"{3}\"'\"actions\":\"{4}\""'                              position.Identity' assignmentCount+1' assignments[assignmentCount].Person.Canonical' expires' action);                        assignmentCount++;                  }                    if (_assignable && (assignmentCount < position.MaxCount || (position.MaxCount == 0 && position.Assignments.Count > 0)))                  {                      // finally' if the assigned count is less than max count' add a "assign another person" link if _assignable is true                        int count = position.Assignments.Count;                      if (count > 6)                      {                          count = 6;                      }                      string[] overEngineeredAssignmentPrompts =                      {                          Resources.Controls.Swarm.Positions_AssignFirstPerson'                          Resources.Controls.Swarm.Positions_AssignSecondPerson'                          Resources.Controls.Swarm.Positions_AssignThirdPerson'                          Resources.Controls.Swarm.Positions_AssignFourthPerson'                          Resources.Controls.Swarm.Positions_AssignFifthPerson'                          Resources.Controls.Swarm.Positions_AssignSixthPerson'                          Resources.Controls.Swarm.Positions_AssignAnotherPerson                      };                        elements.Add ("{" + element + "}");                      string addPerson =                          string.Format (                              "<a positionId='{1}' geographyId='{4}' positionName='{2}' class='{3} LocalAssignPerson'>{0}</a>"'                              overEngineeredAssignmentPrompts[count]' position.Identity'                              JavascriptEscape (position.Localized())' _customCookieClass' position.GeographyId);                        element =                          String.Format(                          "\"id\":\"{0}-0\"'\"iconType\":\"Hidden\"'\"positionTitle\":\"&nbsp;\"'\"assignedName\":\"{1}\""'                              position.Identity' addPerson);                    }                    if (positionNode.Children.Count > 0)  // This should only trigger when position.MaxCount is also 1' or a very weird UI will result                  {                      element += "'\"state\":\"" + nodeState + "\"'\"children\":" + RecursePositionTree(positionNode.Children);                  }                    elements.Add("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,C:\repos\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 10)              {                  matches.RemoveRange (10' matches.Count - 10);              }
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,C:\repos\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 10)              {                  matches.RemoveRange (10' matches.Count - 10);              }
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,C:\repos\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 10)              {                  matches.RemoveRange (10' matches.Count - 10);              }
Magic Number,Swarmops.Frontend.Automation,Json_SearchPeoplePattern,C:\repos\Swarmops_Swarmops\Site\Automation\Json-SearchPeoplePattern.aspx.cs,Page_Load,The following statement contains a magic number: foreach (Person person in matches)              {                  string onePerson = '{' +                                     String.Format ("\"id\":\"{0}\"'\"name\":\"{1}\"'\"avatar16Url\":\"{2}\""'                                         person.Identity' JsonSanitize (person.Canonical)' person.GetSecureAvatarLink (16)) +                                     '}';                  jsonPeople.Add (onePerson);              }
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,GetPersonAvatar,The following statement contains a magic number: return new AvatarData              {                  PersonId = personId'                  Success = true'                  Canonical = person.Canonical'                  Avatar16Url = person.GetSecureAvatarLink (16)'                  Avatar24Url = person.GetSecureAvatarLink (24)              };
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,GetPersonAvatar,The following statement contains a magic number: return new AvatarData              {                  PersonId = personId'                  Success = true'                  Canonical = person.Canonical'                  Avatar16Url = person.GetSecureAvatarLink (16)'                  Avatar24Url = person.GetSecureAvatarLink (24)              };
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,ChangePassword,The following statement contains a magic number: if (newPassword.Length < 6) // TODO: Make per-installation and per-organization policy for this              {                  return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = Resources.Global.Master_EditPersonNewPassword_CannotChange_TooWeak                  };              }
Magic Number,Swarmops.Frontend.Automation,SwarmFunctions,C:\repos\Swarmops_Swarmops\Site\Automation\SwarmFunctions.aspx.cs,ChangePassword,The following statement contains a magic number: authData.CurrentUser.Quarantines.Withdrawal.QuarantineFor(new TimeSpan(2' 0' 0' 0));
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The following statement contains a magic number: this.InfoBoxLiteral = String.Format(Resources.Pages.Admin.BitcoinEchoTest_Info' BitcoinUtility.EchoFeeSatoshis / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,Page_Load,The following statement contains a magic number: this.LabelExplainBitcoinEchoTest.Text = String.Format (Resources.Pages.Admin.BitcoinEchoTest_Explain'                  CurrentOrganization.Name' address.Address' BitcoinUtility.EchoFeeSatoshis / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                  Int64 satoshisReceived = unspents.Last().AmountSatoshis;                    if (unspents.Last().TransactionHash != txHash && txHash.Length > 0)                  {                      // Race condition.                      Debugger.Break();                  }                    HotBitcoinAddressUnspent utxoToReturn = unspents.Last();                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    // TODO: Get the tx' get the input                    string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address                    // Return the money' too. Set fee for a 300-byte transaction.                    ReturnBitcoinEchoUtxoOrder backendOrder = new ReturnBitcoinEchoUtxoOrder(utxoToReturn);                  backendOrder.Create(authData.CurrentOrganization' authData.CurrentUser);                    string tx1Description = "Bitcoin technical echo test (will be repaid immediately)";                      if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin' so cent units are satoshis                        FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -(satoshisReceived)' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx1.BlockchainHash = txHash;                        // The return payment will be logged when made' so its hash can be recorded                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency(authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -orgNativeCents' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx1.BlockchainHash = txHash;                        // The second transaction is logged when executed in the back-end order                        successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                  Int64 satoshisReceived = unspents.Last().AmountSatoshis;                    if (unspents.Last().TransactionHash != txHash && txHash.Length > 0)                  {                      // Race condition.                      Debugger.Break();                  }                    HotBitcoinAddressUnspent utxoToReturn = unspents.Last();                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    // TODO: Get the tx' get the input                    string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address                    // Return the money' too. Set fee for a 300-byte transaction.                    ReturnBitcoinEchoUtxoOrder backendOrder = new ReturnBitcoinEchoUtxoOrder(utxoToReturn);                  backendOrder.Create(authData.CurrentOrganization' authData.CurrentUser);                    string tx1Description = "Bitcoin technical echo test (will be repaid immediately)";                      if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin' so cent units are satoshis                        FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -(satoshisReceived)' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx1.BlockchainHash = txHash;                        // The return payment will be logged when made' so its hash can be recorded                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency(authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -orgNativeCents' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx1.BlockchainHash = txHash;                        // The second transaction is logged when executed in the back-end order                        successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                  Int64 satoshisReceived = unspents.Last().AmountSatoshis;                    if (unspents.Last().TransactionHash != txHash && txHash.Length > 0)                  {                      // Race condition.                      Debugger.Break();                  }                    HotBitcoinAddressUnspent utxoToReturn = unspents.Last();                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    // TODO: Get the tx' get the input                    string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address                    // Return the money' too. Set fee for a 300-byte transaction.                    ReturnBitcoinEchoUtxoOrder backendOrder = new ReturnBitcoinEchoUtxoOrder(utxoToReturn);                  backendOrder.Create(authData.CurrentOrganization' authData.CurrentUser);                    string tx1Description = "Bitcoin technical echo test (will be repaid immediately)";                      if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin' so cent units are satoshis                        FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -(satoshisReceived)' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx1.BlockchainHash = txHash;                        // The return payment will be logged when made' so its hash can be recorded                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency(authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -orgNativeCents' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx1.BlockchainHash = txHash;                        // The second transaction is logged when executed in the back-end order                        successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                  Int64 satoshisReceived = unspents.Last().AmountSatoshis;                    if (unspents.Last().TransactionHash != txHash && txHash.Length > 0)                  {                      // Race condition.                      Debugger.Break();                  }                    HotBitcoinAddressUnspent utxoToReturn = unspents.Last();                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    // TODO: Get the tx' get the input                    string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address                    // Return the money' too. Set fee for a 300-byte transaction.                    ReturnBitcoinEchoUtxoOrder backendOrder = new ReturnBitcoinEchoUtxoOrder(utxoToReturn);                  backendOrder.Create(authData.CurrentOrganization' authData.CurrentUser);                    string tx1Description = "Bitcoin technical echo test (will be repaid immediately)";                      if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin' so cent units are satoshis                        FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -(satoshisReceived)' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx1.BlockchainHash = txHash;                        // The return payment will be logged when made' so its hash can be recorded                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency(authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -orgNativeCents' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx1.BlockchainHash = txHash;                        // The second transaction is logged when executed in the back-end order                        successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin,BitcoinEchoTest,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\BitcoinEchoTest.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                  Int64 satoshisReceived = unspents.Last().AmountSatoshis;                    if (unspents.Last().TransactionHash != txHash && txHash.Length > 0)                  {                      // Race condition.                      Debugger.Break();                  }                    HotBitcoinAddressUnspent utxoToReturn = unspents.Last();                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    // TODO: Get the tx' get the input                    string returnAddress = BitcoinUtility.GetInputAddressesForTransaction(chain' txHash) [0]; // assumes at least one input address                    // Return the money' too. Set fee for a 300-byte transaction.                    ReturnBitcoinEchoUtxoOrder backendOrder = new ReturnBitcoinEchoUtxoOrder(utxoToReturn);                  backendOrder.Create(authData.CurrentOrganization' authData.CurrentUser);                    string tx1Description = "Bitcoin technical echo test (will be repaid immediately)";                      if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin' so cent units are satoshis                        FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -(satoshisReceived)' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx1.BlockchainHash = txHash;                        // The return payment will be logged when made' so its hash can be recorded                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency(authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx1 = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' tx1Description);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.DebtsOther' -orgNativeCents' authData.CurrentUser);                      ledgerTx1.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx1.BlockchainHash = txHash;                        // The second transaction is logged when executed in the back-end order                        successMessage = string.Format(Resources.Pages.Admin.BitcoinEchoTest_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin,CreateOrganization,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\CreateOrganization.aspx.cs,Page_Load,The following statement contains a magic number: DbVersionRequired = 2;
Magic Number,Swarmops.Frontend.Pages.v5.Admin,OrganizationStaffing,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgStaffing.aspx.cs,FormatSmtpAccessString,The following statement contains a magic number: if (port != 25)              {                  result += ":" + port.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: using (StreamReader reader = uploadedDoc.GetReader (1252))              {                  data = reader.ReadToEnd();              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 2)                  {                      continue;  // at least country and one geo required                  }                    // set progress                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    // process                    string countryCode = lineParts[0].Trim().ToUpperInvariant();                    int countryGeoId = Geography.RootIdentity;                  if (geoNameLookup.ContainsKey (countryCode))                  {                      countryGeoId = geoNameLookup[countryCode];                  }                  else                  {                      Country country = Country.FromCode (countryCode);                      if (countryGeoId == Geography.RootIdentity) // country not initialized as node                      {                          countryGeoId =                              SwarmDb.GetDatabaseForWriting().CreateGeography (country.Name + " (" + country.Name + ")"'                                  Geography.RootIdentity); // TODO: Locate country                          SwarmDb.GetDatabaseForWriting().SetCountryGeographyId (country.Identity' countryGeoId);                          geoNameLookup[countryCode] = countryGeoId;                      }                        Geographies countryGeographies = Geography.FromIdentity(countryGeoId).ThisAndBelow();                        foreach (Geography geography in countryGeographies)                      {                          geoNameLookup[countryCode + geography.Name] = geography.Identity;                      }                  }                    int lastGeoId = countryGeoId;                  for (int partIndex = 1; partIndex < lineParts.Length; partIndex++)                  {                      if (geoNameLookup.ContainsKey (countryCode + lineParts[partIndex]))                      {                          // geography exists                          lastGeoId = geoNameLookup[countryCode + lineParts[partIndex]];                      }                      else                      {                          // geography does not exist yet: create                            int newGeoId = SwarmDb.GetDatabaseForWriting().CreateGeography (lineParts[partIndex]' lastGeoId);                          geoNameLookup[countryCode + lineParts[partIndex]] = newGeoId;                          lastGeoId = newGeoId;                      }                    }                }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 2)                  {                      continue;  // at least country and one geo required                  }                    // set progress                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    // process                    string countryCode = lineParts[0].Trim().ToUpperInvariant();                    int countryGeoId = Geography.RootIdentity;                  if (geoNameLookup.ContainsKey (countryCode))                  {                      countryGeoId = geoNameLookup[countryCode];                  }                  else                  {                      Country country = Country.FromCode (countryCode);                      if (countryGeoId == Geography.RootIdentity) // country not initialized as node                      {                          countryGeoId =                              SwarmDb.GetDatabaseForWriting().CreateGeography (country.Name + " (" + country.Name + ")"'                                  Geography.RootIdentity); // TODO: Locate country                          SwarmDb.GetDatabaseForWriting().SetCountryGeographyId (country.Identity' countryGeoId);                          geoNameLookup[countryCode] = countryGeoId;                      }                        Geographies countryGeographies = Geography.FromIdentity(countryGeoId).ThisAndBelow();                        foreach (Geography geography in countryGeographies)                      {                          geoNameLookup[countryCode + geography.Name] = geography.Identity;                      }                  }                    int lastGeoId = countryGeoId;                  for (int partIndex = 1; partIndex < lineParts.Length; partIndex++)                  {                      if (geoNameLookup.ContainsKey (countryCode + lineParts[partIndex]))                      {                          // geography exists                          lastGeoId = geoNameLookup[countryCode + lineParts[partIndex]];                      }                      else                      {                          // geography does not exist yet: create                            int newGeoId = SwarmDb.GetDatabaseForWriting().CreateGeography (lineParts[partIndex]' lastGeoId);                          geoNameLookup[countryCode + lineParts[partIndex]] = newGeoId;                          lastGeoId = newGeoId;                      }                    }                }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry1,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry1.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: using (StreamReader reader = uploadedDoc.GetReader (1252))              {                  data = reader.ReadToEnd();              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length != 4)                  {                      continue;                  }                    int percent = (count * 99) / lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set(guid + "-Progress"' percent);                      string countryCode = lineParts[0].Trim().ToUpperInvariant();                  string postalCode = lineParts[1].Trim();                  string cityName = lineParts[2].Trim();                  string nodeName = lineParts[3].Trim();                    // Dupecheck                    if (postalCodeDupes.ContainsKey (postalCode))                  {                      continue;                  }                    Geography geography = Geography.FromName (nodeName); // may dupe!                    // First' make sure country exists                    Country country = Country.FromCode (countryCode);                    // Then' check if the city name exists                    City city = null;                    try                  {                      city = City.FromName (cityName' country.Identity);                  }                  catch (ArgumentException)                  {                      city = City.Create (cityName' country.Identity' geography.Identity);                  }                    // Last' add the postal code' if there is any                    if (!string.IsNullOrEmpty (postalCode))                  {                      SwarmDb.GetDatabaseForWriting().CreatePostalCode (postalCode' city.Identity' country.Identity);                      postalCodeDupes[postalCode] = true;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length != 4)                  {                      continue;                  }                    int percent = (count * 99) / lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set(guid + "-Progress"' percent);                      string countryCode = lineParts[0].Trim().ToUpperInvariant();                  string postalCode = lineParts[1].Trim();                  string cityName = lineParts[2].Trim();                  string nodeName = lineParts[3].Trim();                    // Dupecheck                    if (postalCodeDupes.ContainsKey (postalCode))                  {                      continue;                  }                    Geography geography = Geography.FromName (nodeName); // may dupe!                    // First' make sure country exists                    Country country = Country.FromCode (countryCode);                    // Then' check if the city name exists                    City city = null;                    try                  {                      city = City.FromName (cityName' country.Identity);                  }                  catch (ArgumentException)                  {                      city = City.Create (cityName' country.Identity' geography.Identity);                  }                    // Last' add the postal code' if there is any                    if (!string.IsNullOrEmpty (postalCode))                  {                      SwarmDb.GetDatabaseForWriting().CreatePostalCode (postalCode' city.Identity' country.Identity);                      postalCodeDupes[postalCode] = true;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length != 4)                  {                      continue;                  }                    int percent = (count * 99) / lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set(guid + "-Progress"' percent);                      string countryCode = lineParts[0].Trim().ToUpperInvariant();                  string postalCode = lineParts[1].Trim();                  string cityName = lineParts[2].Trim();                  string nodeName = lineParts[3].Trim();                    // Dupecheck                    if (postalCodeDupes.ContainsKey (postalCode))                  {                      continue;                  }                    Geography geography = Geography.FromName (nodeName); // may dupe!                    // First' make sure country exists                    Country country = Country.FromCode (countryCode);                    // Then' check if the city name exists                    City city = null;                    try                  {                      city = City.FromName (cityName' country.Identity);                  }                  catch (ArgumentException)                  {                      city = City.Create (cityName' country.Identity' geography.Identity);                  }                    // Last' add the postal code' if there is any                    if (!string.IsNullOrEmpty (postalCode))                  {                      SwarmDb.GetDatabaseForWriting().CreatePostalCode (postalCode' city.Identity' country.Identity);                      postalCodeDupes[postalCode] = true;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length != 4)                  {                      continue;                  }                    int percent = (count * 99) / lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set(guid + "-Progress"' percent);                      string countryCode = lineParts[0].Trim().ToUpperInvariant();                  string postalCode = lineParts[1].Trim();                  string cityName = lineParts[2].Trim();                  string nodeName = lineParts[3].Trim();                    // Dupecheck                    if (postalCodeDupes.ContainsKey (postalCode))                  {                      continue;                  }                    Geography geography = Geography.FromName (nodeName); // may dupe!                    // First' make sure country exists                    Country country = Country.FromCode (countryCode);                    // Then' check if the city name exists                    City city = null;                    try                  {                      city = City.FromName (cityName' country.Identity);                  }                  catch (ArgumentException)                  {                      city = City.Create (cityName' country.Identity' geography.Identity);                  }                    // Last' add the postal code' if there is any                    if (!string.IsNullOrEmpty (postalCode))                  {                      SwarmDb.GetDatabaseForWriting().CreatePostalCode (postalCode' city.Identity' country.Identity);                      postalCodeDupes[postalCode] = true;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateCountry2,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateCountry2.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 12)                  {                      continue;                  }                    if (count == 1)                  {                      // header line                      continue;                  }                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]];                  PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female;                  DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None);                  Country country = Country.FromCode (lineParts[fieldNameLookup[FakePersonFields.Country]]);                      Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]'                      lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender);                    newPerson.NationalIdNumber = lineParts[fieldNameLookup[FakePersonFields.NationalID]];                  newPerson.Longitude = lineParts[fieldNameLookup[FakePersonFields.Longitude]];                  newPerson.Latitude = lineParts[fieldNameLookup[FakePersonFields.Latitude]];                    newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 12)                  {                      continue;                  }                    if (count == 1)                  {                      // header line                      continue;                  }                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]];                  PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female;                  DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None);                  Country country = Country.FromCode (lineParts[fieldNameLookup[FakePersonFields.Country]]);                      Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]'                      lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender);                    newPerson.NationalIdNumber = lineParts[fieldNameLookup[FakePersonFields.NationalID]];                  newPerson.Longitude = lineParts[fieldNameLookup[FakePersonFields.Longitude]];                  newPerson.Latitude = lineParts[fieldNameLookup[FakePersonFields.Latitude]];                    newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 12)                  {                      continue;                  }                    if (count == 1)                  {                      // header line                      continue;                  }                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]];                  PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female;                  DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None);                  Country country = Country.FromCode (lineParts[fieldNameLookup[FakePersonFields.Country]]);                      Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]'                      lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender);                    newPerson.NationalIdNumber = lineParts[fieldNameLookup[FakePersonFields.NationalID]];                  newPerson.Longitude = lineParts[fieldNameLookup[FakePersonFields.Longitude]];                  newPerson.Latitude = lineParts[fieldNameLookup[FakePersonFields.Latitude]];                    newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: foreach (string lineRaw in lines)              {                  count++;                  string line = lineRaw.Trim();                  string[] lineParts = line.Split ('\t');                    if (lineParts.Length < 12)                  {                      continue;                  }                    if (count == 1)                  {                      // header line                      continue;                  }                    int percent = (count*99)/lines.Length;                  if (percent == 0)                  {                      percent = 1;                  }                  GuidCache.Set (guid + "-Progress"' percent);                    string name = lineParts[fieldNameLookup[FakePersonFields.GivenName]] + " " + lineParts[fieldNameLookup[FakePersonFields.Surname]];                  PersonGender gender = lineParts[fieldNameLookup[FakePersonFields.Gender]] == "male" ? PersonGender.Male : PersonGender.Female;                  DateTime dateOfBirth = DateTime.Parse (lineParts[fieldNameLookup[FakePersonFields.Birthday]]' new CultureInfo ("en-US")' DateTimeStyles.None);                  Country country = Country.FromCode (lineParts[fieldNameLookup[FakePersonFields.Country]]);                      Person newPerson = Person.Create (name' string.Empty' string.Empty' lineParts[fieldNameLookup[FakePersonFields.TelephoneNumber]]' lineParts[fieldNameLookup[FakePersonFields.StreetAddress]]'                      lineParts[fieldNameLookup[FakePersonFields.ZipCode]].Replace (" "' "")' lineParts[fieldNameLookup[FakePersonFields.City]]' lineParts[fieldNameLookup[FakePersonFields.Country]]' dateOfBirth' gender);                    newPerson.NationalIdNumber = lineParts[fieldNameLookup[FakePersonFields.NationalID]];                  newPerson.Longitude = lineParts[fieldNameLookup[FakePersonFields.Longitude]];                  newPerson.Latitude = lineParts[fieldNameLookup[FakePersonFields.Latitude]];                    newPerson.AddParticipation (Organization.Sandbox' DateTime.Today.AddDays (3650 + random.Next (365)));              }
Magic Number,Swarmops.Frontend.Pages.v5.Admin.Hacks,PopulateFakePeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\Hacks\PopulateFakePeople.aspx.cs,ProcessUploadThread,The following statement contains a magic number: GuidCache.Set (guid + "-Progress"' 100);
Magic Number,Swarmops.Frontend.Pages.Admin,OrgSettings,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\OrgSettings.aspx.cs,SwitchToggled,The following statement contains a magic number: if (workAccounts.Count > 0 && String.IsNullOrEmpty (result.DisplayMessage))              {                  if (newValue) // switch has been turned on                  {                      // accounts can always be re-enabled. This is not a create' it is a re-enable.                        foreach (FinancialAccount account in workAccounts)                      {                          account.Active = true;                      }                        if (workAccounts.Count > 1)                      {                          result.DisplayMessage = "The accounts were re-enabled.";                      }                      else                      {                          result.DisplayMessage = "The account was re-enabled.";                      }                  }                  else // switch is being set to off position                  {                      // if the accounts are currently enabled' we must first check there aren't                      // any transactions in them before disabling                      bool transactionsOnAccount = false;                        foreach (FinancialAccount account in workAccounts)                      {                          if (account.GetLastRows (5).Count > 0)                          {                              transactionsOnAccount = true;                          }                      }                        if (transactionsOnAccount)                      {                          if (workAccounts.Count > 1)                          {                              result.DisplayMessage = "Can't disable these accounts: there are transactions";                          }                          else                          {                              result.DisplayMessage = "Can't disable this account: there are transactions";                          }                            result.Success = false;                          result.NewValue = "true";                      }                      else                      {                          // Disable accounts                            foreach (FinancialAccount account in workAccounts)                          {                              account.Active = false;                          }                            if (workAccounts.Count > 1)                          {                              result.DisplayMessage = "The accounts were disabled.";                          }                          else                          {                              result.DisplayMessage = "The account was disabled.";                          }                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,FormatSmtpAccessString,The following statement contains a magic number: if (port != 25)              {                  result += ":" + port.ToString(CultureInfo.InvariantCulture);              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.Admin,SystemSettingsPage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Admin\SystemSettings.aspx.cs,StoreCallback,The following statement contains a magic number: switch (cookie)              {                  case "Smtp":                      Match match = Regex.Match (newValue' "((?<user>[a-z0-9_]+)(:(?<pass>[^@]+))?@)?(?<host>[a-z0-9_\\-\\.]+)(:(?<port>[0-9]+))?"' RegexOptions.IgnoreCase);                      if (match.Success)                      {                          string user = match.Groups["user"].Value;                          string pass = match.Groups["pass"].Value;                          string host = match.Groups["host"].Value;                          string portString = match.Groups["port"].Value;                          int port = 25;                            if (!string.IsNullOrEmpty(portString))                          {                              try                              {                                  port = Int32.Parse(portString);                              }                              catch (FormatException)                              {                                  result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpHostPort;                                  result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                                  result.Success = false;                                  return result; // return early                              }                          }                            SystemSettings.SmtpUser = user ?? string.Empty;                          SystemSettings.SmtpPassword = pass ?? string.Empty;                          SystemSettings.SmtpHost = host;                          SystemSettings.SmtpPort = port;                            OutboundComm.CreateNotification(Organization.Sandbox' Logic.Communications.Payload.NotificationResource.System_MailServerTest);                            result.Success = true;                          result.NewValue = FormatSmtpAccessString (user' pass' host' port);                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_TestMailSent;                      }                      else                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.DisplayMessage = Resources.Pages.Admin.SystemSettings_Error_SmtpSyntax;                      }                      break;                    case "ExtUrl":                      if (!newValue.EndsWith("/"))                      {                          newValue = newValue + "/";                      }                      if (!newValue.StartsWith("http://") && !newValue.StartsWith("https://"))                      {                          newValue = "https://" + newValue;                      }                        SystemSettings.ExternalUrl = newValue;                        result.NewValue = newValue;                      result.Success = true;                      break;                    case "InstallationName":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminSender":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.InstallationName = result.NewValue;                      break;                    case "AdminAddress":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.AdminNotificationAddress = result.NewValue;                      break;                    case "BackendHost":                      result.NewValue = newValue.Trim();                      result.Success = true;                      SystemSettings.BackendHostnameOverride = result.NewValue;                      break;                    case "WebsocketFrontend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                          result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortFrontend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortFrontend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    case "WebsocketBackend":                      try                      {                          int newPort = Int32.Parse(newValue);                          if (newPort < 1 || newPort > 32767)                          {                              throw new ArgumentException();                          }                            result.NewValue = newValue.Trim();                          result.Success = true;                          SystemSettings.WebsocketPortBackend = newPort;                      }                      catch (Exception)                      {                          result.Success = false;                          result.FailReason = AjaxInputCallResult.ErrorInvalidFormat;                          result.NewValue = SystemSettings.WebsocketPortBackend.ToString(CultureInfo.InvariantCulture);                      }                      break;                    default:                      throw new NotImplementedException("Unknown cookie in StoreCallback");              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 2: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 2: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (recipientTypeId)              {                  case 0: // "Select one"                      personCount = 0;                      break;                  case 1: // Regulars                      personCount = orgTree.GetMemberCountForGeographies (geoTree);                      break;                  case 2: // Agents                      personCount = Activists.GetCountForGeography (geography);                      break;                        // TODO: Dynamic membership types                    case 101: // Officers                      personCount = orgTree.GetRoleHolderCountForGeographies (geoTree);                      break;                  case 102: // Volunteers                      personCount = 0; // TODO                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend.Pages.Comms,SendMassMessage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Comms\SendMassMessage.aspx.cs,GetRecipientCount,The following statement contains a magic number: switch (personCount)              {                  case 0:                      result = resources[0];                      break;                  case 1:                      result = resources[1];                      break;                  default:                      result = String.Format (resources[2]' personCount);                      break;              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: try              {                  amount = Double.Parse (amountString' NumberStyles.Currency' Thread.CurrentThread.CurrentCulture);              }              catch (Exception)              {                  return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = String.Format(Resources.Global.Error_CurrencyParsing' 1000.00)                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: Int64 amountCents = (Int64) (amount*100);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: if (centsRemaining/100.0 < amount)              {                  // TODO: Handle the special case where the IPayable is not on current year' so against another (last) year's budget                    string notEnoughFunds;                    if (centsRemaining > 0)                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);                  }                  else                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_BudgetIsEmpty'                          DateTime.UtcNow.Year);                  }                    return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = notEnoughFunds                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: if (centsRemaining/100.0 < amount)              {                  // TODO: Handle the special case where the IPayable is not on current year' so against another (last) year's budget                    string notEnoughFunds;                    if (centsRemaining > 0)                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);                  }                  else                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_BudgetIsEmpty'                          DateTime.UtcNow.Year);                  }                    return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = notEnoughFunds                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,GetRemainingBudgets,The following statement contains a magic number: foreach (int accountId in accountLookup.Keys)              {                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                  Int64 remaining = account.GetBudgetCentsRemaining (currentYear);                    result.Add (new BudgetRemainder { AccountId = accountId' Remaining = remaining/100.0 });              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  Int64 budgetRemaining = attestableItem.Budget.GetBudgetCentsRemaining();                    result = string.Empty;                    if (amountCents > -budgetRemaining)                  {                      if (                          authData.Authority.HasAccess (new Access (authData.CurrentOrganization'                              AccessAspect.Administration)))                      {                          // Admin rights' so allow (forced) overdraft                            // Unless budget was nonzero and allocated' set protest message                            if (attestableItem.Budget.Owner != null || attestableItem.Budget.GetBudgetCents() != 0)                            result = Resources.Pages.Financial.AttestCosts_Overdrafted + " ";                      }                      else                      {                          // Do not allow overdraft                            return new AjaxCallResult                          {                              DisplayMessage = Resources.Pages.Financial.AttestCosts_OutOfBudget'                              Success = false                          };                      }                  }                    attestableItem.Attest (authData.CurrentUser);                  result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  attestableItem.Deattest (authData.CurrentUser);                  result = string.Format (deattestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ListInvoicesInbound,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ListInvoicesInbound.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  Int64 budgetRemaining = attestableItem.Budget.GetBudgetCentsRemaining();                    result = string.Empty;                    if (amountCents > -budgetRemaining)                  {                      if (                          authData.Authority.HasAccess (new Access (authData.CurrentOrganization'                              AccessAspect.Administration)))                      {                          // Admin rights' so allow (forced) overdraft                            // Unless budget was nonzero and allocated' set protest message                            if (attestableItem.Budget.Owner != null || attestableItem.Budget.GetBudgetCents() != 0)                            result = Resources.Pages.Financial.AttestCosts_Overdrafted + " ";                      }                      else                      {                          // Do not allow overdraft                            return new AjaxCallResult                          {                              DisplayMessage = Resources.Pages.Financial.AttestCosts_OutOfBudget'                              Success = false                          };                      }                  }                    attestableItem.Attest (authData.CurrentUser);                  result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  attestableItem.Deattest (authData.CurrentUser);                  result = string.Format (deattestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: try              {                  amount = Double.Parse (amountString' NumberStyles.Currency' Thread.CurrentThread.CurrentCulture);              }              catch (Exception)              {                  return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = String.Format(Resources.Global.Error_CurrencyParsing' 1000.00)                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: Int64 amountCents = (Int64) (amount*100);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: if (centsRemaining/100.0 < amount)              {                  // TODO: Handle the special case where the IPayable is not on current year' so against another (last) year's budget                    string notEnoughFunds;                    if (centsRemaining > 0)                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);                  }                  else                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_BudgetIsEmpty'                          DateTime.UtcNow.Year);                  }                    return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = notEnoughFunds                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,AttestCorrectedItem,The following statement contains a magic number: if (centsRemaining/100.0 < amount)              {                  // TODO: Handle the special case where the IPayable is not on current year' so against another (last) year's budget                    string notEnoughFunds;                    if (centsRemaining > 0)                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_OutOfBudgetPrecise'                          authData.CurrentOrganization.Currency.DisplayCode' centsRemaining/100.0' DateTime.UtcNow.Year);                  }                  else                  {                      notEnoughFunds = String.Format (Resources.Pages.Financial.AttestCosts_BudgetIsEmpty'                          DateTime.UtcNow.Year);                  }                    return new AjaxCallResult                  {                      Success = false'                      DisplayMessage = notEnoughFunds                  };              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,GetRemainingBudgets,The following statement contains a magic number: foreach (int accountId in accountLookup.Keys)              {                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                  Int64 remaining = account.GetBudgetCentsRemaining (currentYear);                    result.Add (new BudgetRemainder { AccountId = accountId' Remaining = remaining/100.0 });              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  Int64 budgetRemaining = attestableItem.Budget.GetBudgetCentsRemaining();                    result = string.Empty;                    if (amountCents > -budgetRemaining)                  {                      if (                          authData.Authority.HasAccess (new Access (authData.CurrentOrganization'                              AccessAspect.Administration)))                      {                          // Admin rights' so allow (forced) overdraft                            // Unless budget was nonzero and allocated' set protest message                            if (attestableItem.Budget.Owner != null || attestableItem.Budget.GetBudgetCents() != 0)                            result = Resources.Pages.Financial.AttestCosts_Overdrafted + " ";                      }                      else                      {                          // Do not allow overdraft                            return new AjaxCallResult                          {                              DisplayMessage = Resources.Pages.Financial.AttestCosts_OutOfBudget'                              Success = false                          };                      }                  }                    attestableItem.Attest (authData.CurrentUser);                  result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  attestableItem.Deattest (authData.CurrentUser);                  result = string.Format (deattestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,AttestCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\AttestCosts.aspx.cs,HandleAttestationDeattestation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  Int64 budgetRemaining = attestableItem.Budget.GetBudgetCentsRemaining();                    result = string.Empty;                    if (amountCents > -budgetRemaining)                  {                      if (                          authData.Authority.HasAccess (new Access (authData.CurrentOrganization'                              AccessAspect.Administration)))                      {                          // Admin rights' so allow (forced) overdraft                            // Unless budget was nonzero and allocated' set protest message                            if (attestableItem.Budget.Owner != null || attestableItem.Budget.GetBudgetCents() != 0)                            result = Resources.Pages.Financial.AttestCosts_Overdrafted + " ";                      }                      else                      {                          // Do not allow overdraft                            return new AjaxCallResult                          {                              DisplayMessage = Resources.Pages.Financial.AttestCosts_OutOfBudget'                              Success = false                          };                      }                  }                    attestableItem.Attest (authData.CurrentUser);                  result += string.Format (attestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  attestableItem.Deattest (authData.CurrentUser);                  result = string.Format (deattestedTemplate' itemId' beneficiary'                      authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  // Prime bank details                    this.CurrencyAmount.Cents = 0;                  this.CurrencyVat.Cents = 0;                  this.TextClient.Focus();                  this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString(); // Use current culture                    Localize();              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateOutboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateOutboundInvoice.aspx.cs,ButtonCreate_Click,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateInboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateInboundInvoice.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  // Prime bank details                    this.CurrencyAmount.Cents = 0;                  this.CurrencyVat.Cents = 0;                  this.TextSupplier.Focus();                  this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString(); // Use current culture                    Localize();              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,CreateInboundInvoice,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\CreateInboundInvoice.aspx.cs,ButtonCreate_Click,The following statement contains a magic number: this.TextDueDate.Text = DateTime.Today.AddDays (30).ToShortDateString();
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                    // TODO: Update the HotBitcoinAddress with the new amount?                    HotBitcoinAddressUnspent unspent = null;                  Int64 satoshisReceived = 0;                    foreach (HotBitcoinAddressUnspent potentialUnspent in unspents)                  {                      if (potentialUnspent.TransactionHash == txHash)                      {                          satoshisReceived = potentialUnspent.AmountSatoshis;                          unspent = potentialUnspent;                      }                  }                    if (unspent == null)  // Supplied transaction hash was not found in collection                  {                      Debugger.Break();   // TODO: Something else than break the debugger                  }                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin cash                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    FinancialTransaction testTransaction = null;                  try                  {                      testTransaction = FinancialTransaction.FromBlockchainHash (authData.CurrentOrganization' txHash);                        // We've already seen this donation! Something is seriously bogus here                      Debugger.Break();                      return new AjaxCallResult() { DisplayMessage = successMessage' Success = true };                  }                  catch (ArgumentException)                  {                      // This exception is expected - the transaction should not yet exist                  }                    if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin cash' so units are Satoshis                         FinancialTransaction ledgerTx = FinancialTransaction.Create (authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser);                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx.BlockchainHash = txHash;                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency (authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -orgNativeCents' authData.CurrentUser);                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx.BlockchainHash = txHash;                        successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                    // TODO: Update the HotBitcoinAddress with the new amount?                    HotBitcoinAddressUnspent unspent = null;                  Int64 satoshisReceived = 0;                    foreach (HotBitcoinAddressUnspent potentialUnspent in unspents)                  {                      if (potentialUnspent.TransactionHash == txHash)                      {                          satoshisReceived = potentialUnspent.AmountSatoshis;                          unspent = potentialUnspent;                      }                  }                    if (unspent == null)  // Supplied transaction hash was not found in collection                  {                      Debugger.Break();   // TODO: Something else than break the debugger                  }                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin cash                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    FinancialTransaction testTransaction = null;                  try                  {                      testTransaction = FinancialTransaction.FromBlockchainHash (authData.CurrentOrganization' txHash);                        // We've already seen this donation! Something is seriously bogus here                      Debugger.Break();                      return new AjaxCallResult() { DisplayMessage = successMessage' Success = true };                  }                  catch (ArgumentException)                  {                      // This exception is expected - the transaction should not yet exist                  }                    if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin cash' so units are Satoshis                         FinancialTransaction ledgerTx = FinancialTransaction.Create (authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser);                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx.BlockchainHash = txHash;                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency (authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -orgNativeCents' authData.CurrentUser);                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx.BlockchainHash = txHash;                        successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                    // TODO: Update the HotBitcoinAddress with the new amount?                    HotBitcoinAddressUnspent unspent = null;                  Int64 satoshisReceived = 0;                    foreach (HotBitcoinAddressUnspent potentialUnspent in unspents)                  {                      if (potentialUnspent.TransactionHash == txHash)                      {                          satoshisReceived = potentialUnspent.AmountSatoshis;                          unspent = potentialUnspent;                      }                  }                    if (unspent == null)  // Supplied transaction hash was not found in collection                  {                      Debugger.Break();   // TODO: Something else than break the debugger                  }                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin cash                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    FinancialTransaction testTransaction = null;                  try                  {                      testTransaction = FinancialTransaction.FromBlockchainHash (authData.CurrentOrganization' txHash);                        // We've already seen this donation! Something is seriously bogus here                      Debugger.Break();                      return new AjaxCallResult() { DisplayMessage = successMessage' Success = true };                  }                  catch (ArgumentException)                  {                      // This exception is expected - the transaction should not yet exist                  }                    if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin cash' so units are Satoshis                         FinancialTransaction ledgerTx = FinancialTransaction.Create (authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser);                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx.BlockchainHash = txHash;                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency (authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -orgNativeCents' authData.CurrentUser);                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx.BlockchainHash = txHash;                        successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                    // TODO: Update the HotBitcoinAddress with the new amount?                    HotBitcoinAddressUnspent unspent = null;                  Int64 satoshisReceived = 0;                    foreach (HotBitcoinAddressUnspent potentialUnspent in unspents)                  {                      if (potentialUnspent.TransactionHash == txHash)                      {                          satoshisReceived = potentialUnspent.AmountSatoshis;                          unspent = potentialUnspent;                      }                  }                    if (unspent == null)  // Supplied transaction hash was not found in collection                  {                      Debugger.Break();   // TODO: Something else than break the debugger                  }                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin cash                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    FinancialTransaction testTransaction = null;                  try                  {                      testTransaction = FinancialTransaction.FromBlockchainHash (authData.CurrentOrganization' txHash);                        // We've already seen this donation! Something is seriously bogus here                      Debugger.Break();                      return new AjaxCallResult() { DisplayMessage = successMessage' Success = true };                  }                  catch (ArgumentException)                  {                      // This exception is expected - the transaction should not yet exist                  }                    if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin cash' so units are Satoshis                         FinancialTransaction ledgerTx = FinancialTransaction.Create (authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser);                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx.BlockchainHash = txHash;                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency (authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -orgNativeCents' authData.CurrentUser);                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx.BlockchainHash = txHash;                        successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Donate,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Donate.aspx.cs,ProcessTransactionReceived,The following statement contains a magic number: if (BitcoinUtility.TestUnspents (chain' bitcoinAddress))              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddress.FromAddress (chain' bitcoinAddress).Unspents;                    // TODO: Update the HotBitcoinAddress with the new amount?                    HotBitcoinAddressUnspent unspent = null;                  Int64 satoshisReceived = 0;                    foreach (HotBitcoinAddressUnspent potentialUnspent in unspents)                  {                      if (potentialUnspent.TransactionHash == txHash)                      {                          satoshisReceived = potentialUnspent.AmountSatoshis;                          unspent = potentialUnspent;                      }                  }                    if (unspent == null)  // Supplied transaction hash was not found in collection                  {                      Debugger.Break();   // TODO: Something else than break the debugger                  }                    Swarmops.Logic.Financial.Money moneyReceived = new Swarmops.Logic.Financial.Money(satoshisReceived'                      Currency.BitcoinCash);                    // Make sure that the hotwallet native currency is bitcoin cash                  authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot.ForeignCurrency = Currency.BitcoinCash;                    // Create success message and ledger transaction                  string successMessage = string.Empty;                    FinancialTransaction testTransaction = null;                  try                  {                      testTransaction = FinancialTransaction.FromBlockchainHash (authData.CurrentOrganization' txHash);                        // We've already seen this donation! Something is seriously bogus here                      Debugger.Break();                      return new AjaxCallResult() { DisplayMessage = successMessage' Success = true };                  }                  catch (ArgumentException)                  {                      // This exception is expected - the transaction should not yet exist                  }                    if (authData.CurrentOrganization.Currency.IsBitcoinCash)                  {                      // The ledger is native bitcoin cash' so units are Satoshis                         FinancialTransaction ledgerTx = FinancialTransaction.Create (authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -satoshisReceived' authData.CurrentUser);                      ledgerTx.AddRow (authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' satoshisReceived' authData.CurrentUser);                      ledgerTx.BlockchainHash = txHash;                        if (satoshisReceived % 100 == 0)                      {                          successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived/100.0).ToString ("N0"));                      }                      else                      {                          successMessage = string.Format(Resources.Pages.Financial.Donate_FundsReceivedNative'                              (satoshisReceived / 100.0).ToString("N2"));                      }                  }                  else                  {                      // The ledger is NOT native bitcoin' so we'll need to convert currencies                        long orgNativeCents = moneyReceived.ToCurrency (authData.CurrentOrganization.Currency).Cents;                      FinancialTransaction ledgerTx = FinancialTransaction.Create(authData.CurrentOrganization'                          DateTime.UtcNow' "Donation (bitcoin to hotwallet)");                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.IncomeDonations' -orgNativeCents' authData.CurrentUser);                      ledgerTx.AddRow(authData.CurrentOrganization.FinancialAccounts.AssetsBitcoinHot' orgNativeCents' authData.CurrentUser).AmountForeignCents = new Swarmops.Logic.Financial.Money(satoshisReceived' Currency.BitcoinCash);                      ledgerTx.BlockchainHash = txHash;                        successMessage = string.Format (Resources.Pages.Financial.Donate_FundsReceived'                          authData.CurrentOrganization.Currency.DisplayCode' orgNativeCents/100.0' satoshisReceived/100.0);                  }                    return new AjaxCallResult() {DisplayMessage = successMessage' Success = true};                    // TODO: Ack donation via mail?                  // TODO: Notify CFO/etc of donation?              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,FileExpenseClaim,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\FileExpenseClaim.aspx.cs,ButtonRequest_Click,The following statement contains a magic number: string successMessage = string.Format (Resources.Pages.Financial.FileExpenseClaim_SuccessMessagePartOne'                  CurrentOrganization.Currency.Code'                  amountCents/100.0'                  budget.Name);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,RequestCashAdvance,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\RequestCashAdvance.aspx.cs,ButtonRequest_Click,The following statement contains a magic number: string successMessage = string.Format (Resources.Pages.Financial.RequestCashAdvance_SuccessMessagePartOne'                  HttpUtility.HtmlEncode (CurrentUser.Name)'                  HttpUtility.HtmlEncode (description)' CurrentOrganization.Currency.Code'                  amountCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int descriptionWidth = 142 + 180;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int descriptionWidth = 142 + 180;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: int tagWidth = 180;
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: if (tagSets.Count > 0)              {                  descriptionWidth = 142 - tagSets.Count;                  tagWidth = 360/(tagSets.Count + 1);                    //this.LiteralBudgetNameWidth.Text = tagWidth.ToString(CultureInfo.InvariantCulture);                    StringBuilder tagSetHtml = new StringBuilder();                    foreach (FinancialTransactionTagSet tagSet in tagSets)                  {                      tagSetHtml.AppendFormat (                          "<th data-options=\"field:'tagSet{0}''width:{1}'sortable:true'order:'asc'\">{2}</th>\r\n"'                          tagSet.Identity' tagWidth'                          FinancialTransactionTagSetType.GetLocalizedName (tagSet.FinancialTransactionTagSetTypeId));                  }                    this.LiteralExtraTags.Text = tagSetHtml.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,Localize,The following statement contains a magic number: if (tagSets.Count > 0)              {                  descriptionWidth = 142 - tagSets.Count;                  tagWidth = 360/(tagSets.Count + 1);                    //this.LiteralBudgetNameWidth.Text = tagWidth.ToString(CultureInfo.InvariantCulture);                    StringBuilder tagSetHtml = new StringBuilder();                    foreach (FinancialTransactionTagSet tagSet in tagSets)                  {                      tagSetHtml.AppendFormat (                          "<th data-options=\"field:'tagSet{0}''width:{1}'sortable:true'order:'asc'\">{2}</th>\r\n"'                          tagSet.Identity' tagWidth'                          FinancialTransactionTagSetType.GetLocalizedName (tagSet.FinancialTransactionTagSetTypeId));                  }                    this.LiteralExtraTags.Text = tagSetHtml.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,HandleValidationDevalidation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  validatableItem.Validate (authData.CurrentUser);                  result = string.Format (validatedTemplate' itemId' authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  validatableItem.Devalidate (authData.CurrentUser);                  result = string.Format (devalidatedTemplate' itemId' authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,ValidateReceipts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\ValidateReceipts.aspx.cs,HandleValidationDevalidation,The following statement contains a magic number: if (mode == AttestationMode.Attestation)              {                  validatableItem.Validate (authData.CurrentUser);                  result = string.Format (validatedTemplate' itemId' authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else if (mode == AttestationMode.Deattestation)              {                  validatableItem.Devalidate (authData.CurrentUser);                  result = string.Format (devalidatedTemplate' itemId' authData.CurrentOrganization.Currency.Code'                      amountCents/100.0);              }              else              {                  throw new InvalidOperationException ("Unknown Attestation Mode: " + mode);              }
Magic Number,Swarmops.Frontend.Pages.v5.Financial,Json_TransactionTagsTree,C:\repos\Swarmops_Swarmops\Site\Automation\Json-TransactionTagsTree.aspx.cs,Page_Load,The following statement contains a magic number: Cache.Insert (cacheKey' tagsJson' null' DateTime.Now.AddMinutes (5)' TimeSpan.Zero);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: foreach (Payout payout in payouts)              {                  if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3                  {                      // This is a person who will be paid in bitcoin per personal preferences' so don't show for manual payout                        continue;                  }                    if (bitcoinHotWalletActive && payout.Account.StartsWith ("bitcoin:"))                  {                      // This is a payout registered to be paid in bitcoin' so don't show for manual payout                        continue;                  }                    result.Append ("{");                  result.AppendFormat (                      "\"itemId\":\"{0}\"'" +                      "\"due\":\"{1}\"'" +                      "\"recipient\":\"{2}\"'" +                      "\"bank\":\"{3}\"'" +                      "\"account\":\"{4}\"'" +                      "\"reference\":\"{5}\"'" +                      "\"amount\":\"{6}\"'" +                      "\"action\":\"" +                      "<img id=\\\"IconApproval{7}\\\" class=\\\"IconApproval{7} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconApproved{7} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenial{7} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenied{7} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconUndo{7} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "\""'                      payout.ProtoIdentity'                      (payout.ExpectedTransactionDate <= today                          ? Global.Global_ASAP                          : payout.ExpectedTransactionDate.ToShortDateString())'                      JsonSanitize (TryLocalize (payout.Recipient))'                      JsonSanitize (TryLocalize (payout.Bank))'                      JsonSanitize (payout.Account)'                      JsonSanitize (TryLocalize (payout.Reference))'                      payout.HasNativeAmount? payout.NativeAmountString : (payout.AmountCents/100.0).ToString("N2")'                      payout.ProtoIdentity.Replace ("|"' ""));                  result.Append ("}'");              }
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: foreach (Payout payout in payouts)              {                  if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3                  {                      // This is a person who will be paid in bitcoin per personal preferences' so don't show for manual payout                        continue;                  }                    if (bitcoinHotWalletActive && payout.Account.StartsWith ("bitcoin:"))                  {                      // This is a payout registered to be paid in bitcoin' so don't show for manual payout                        continue;                  }                    result.Append ("{");                  result.AppendFormat (                      "\"itemId\":\"{0}\"'" +                      "\"due\":\"{1}\"'" +                      "\"recipient\":\"{2}\"'" +                      "\"bank\":\"{3}\"'" +                      "\"account\":\"{4}\"'" +                      "\"reference\":\"{5}\"'" +                      "\"amount\":\"{6}\"'" +                      "\"action\":\"" +                      "<img id=\\\"IconApproval{7}\\\" class=\\\"IconApproval{7} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconApproved{7} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenial{7} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenied{7} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconUndo{7} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "\""'                      payout.ProtoIdentity'                      (payout.ExpectedTransactionDate <= today                          ? Global.Global_ASAP                          : payout.ExpectedTransactionDate.ToShortDateString())'                      JsonSanitize (TryLocalize (payout.Recipient))'                      JsonSanitize (TryLocalize (payout.Bank))'                      JsonSanitize (payout.Account)'                      JsonSanitize (TryLocalize (payout.Reference))'                      payout.HasNativeAmount? payout.NativeAmountString : (payout.AmountCents/100.0).ToString("N2")'                      payout.ProtoIdentity.Replace ("|"' ""));                  result.Append ("}'");              }
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCosts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCosts.aspx.cs,FormatPreviousAsJson,The following statement contains a magic number: foreach (Payout payout in payouts)              {                  result.Append("{");                  result.AppendFormat(                      "\"itemId\":\"{0}\"'" +                      "\"databaseId\":\"{8}\"'" +                      "\"due\":\"{1}\"'" +                      "\"recipient\":\"{2}\"'" +                      "\"bank\":\"{3}\"'" +                      "\"account\":\"{4}\"'" +                      "\"reference\":\"{5}\"'" +                      "\"amount\":\"{6:N2}\"'" +                      "\"action\":\"" +                      "<img id=\\\"IconApproval{7}\\\" class=\\\"IconApproval{7} LocalIconApproval LocalPrevious\\\" databaseid=\\\"{8}\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconApproved{7} LocalIconApproved LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenial{7} LocalIconDenial LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenied{7} LocalIconDenied LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconUndo{7} LocalIconUndo LocalPrevious\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "\""'                      payout.ProtoIdentity'                      payout.ExpectedTransactionDate.ToShortDateString()'                      JsonSanitize(TryLocalize(payout.Recipient))'                      JsonSanitize(payout.Bank)'                      JsonSanitize(payout.Account)'                      JsonSanitize(TryLocalize(payout.Reference))'                      payout.AmountCents / 100.0'                      payout.ProtoIdentity.Replace("|"' "")'                      payout.Identity);                  result.Append("}'");              }
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: foreach (Payout payout in payouts)              {                  if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3                  {                      // This is a person who will be paid in bitcoin per personal preferences' so don't show for manual payout                        continue;                  }                    if (bitcoinHotWalletActive && payout.Account.StartsWith ("bitcoin:"))                  {                      // This is a payout registered to be paid in bitcoin' so don't show for manual payout                        continue;                  }                    if (payout.Reference.Length < 2)                  {                      continue; // must have at least a reference and a checksum - two digits minimum                  }                    if (!Formatting.CheckLuhnChecksum (payout.Reference))                  {                      // invalid checksum                        continue;                  }                    if (!Formatting.CheckLuhnChecksum (payout.Account))                  {                      continue;                  }                    result.Append ("{");                  result.AppendFormat (                      "\"itemId\":\"{0}\"'" +                      "\"due\":\"{1}\"'"  +                      "\"reference\":\"<span class='ocrFont'>{2}</span>\"'" +                      "\"amount\":\"<span class='ocrFont'>{3}</span>\"'" +                      "\"account\":\"<span class='ocrFont'>{4}</span>\"'" +                      "\"action\":\"" +                      "<img class=\\\"IconApproval{5} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconApproved{5} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenial{5} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenied{5} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconUndo{5} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "\"" '                      payout.ProtoIdentity'                      (payout.ExpectedTransactionDate <= today                          ? Global.Global_ASAP                          : payout.ExpectedTransactionDate.ToShortDateString())'                      GetReferenceOcr (payout)'                      GetAmountOcr (payout)'                      GetAccountOcr (payout)'                      payout.ProtoIdentity.Replace ("|"' ""));                  result.Append ("}'");              }
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,FormatPrototypesAsJson,The following statement contains a magic number: foreach (Payout payout in payouts)              {                  if (bitcoinHotWalletActive && payout.RecipientPerson != null && payout.RecipientPerson.BitcoinPayoutAddress.Length > 0 && payout.Account.Length < 4)  // 4 because an empty account will be " / "' length 3                  {                      // This is a person who will be paid in bitcoin per personal preferences' so don't show for manual payout                        continue;                  }                    if (bitcoinHotWalletActive && payout.Account.StartsWith ("bitcoin:"))                  {                      // This is a payout registered to be paid in bitcoin' so don't show for manual payout                        continue;                  }                    if (payout.Reference.Length < 2)                  {                      continue; // must have at least a reference and a checksum - two digits minimum                  }                    if (!Formatting.CheckLuhnChecksum (payout.Reference))                  {                      // invalid checksum                        continue;                  }                    if (!Formatting.CheckLuhnChecksum (payout.Account))                  {                      continue;                  }                    result.Append ("{");                  result.AppendFormat (                      "\"itemId\":\"{0}\"'" +                      "\"due\":\"{1}\"'"  +                      "\"reference\":\"<span class='ocrFont'>{2}</span>\"'" +                      "\"amount\":\"<span class='ocrFont'>{3}</span>\"'" +                      "\"account\":\"<span class='ocrFont'>{4}</span>\"'" +                      "\"action\":\"" +                      "<img class=\\\"IconApproval{5} LocalIconApproval LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconApproved{5} LocalIconApproved LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenial{5} LocalIconDenial LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconDenied{5} LocalIconDenied LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "<img class=\\\"IconUndo{5} LocalIconUndo LocalPrototype\\\" baseid=\\\"{0}\\\" height=\\\"18\\\" width=\\\"24\\\" />" +                      "\"" '                      payout.ProtoIdentity'                      (payout.ExpectedTransactionDate <= today                          ? Global.Global_ASAP                          : payout.ExpectedTransactionDate.ToShortDateString())'                      GetReferenceOcr (payout)'                      GetAmountOcr (payout)'                      GetAccountOcr (payout)'                      payout.ProtoIdentity.Replace ("|"' ""));                  result.Append ("}'");              }
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,GetAmountOcr,The following statement contains a magic number: return string.Format ("{0} {1:00} &nbsp; {2} &gt;"' // three spaces between the cents and the checksum                  payout.AmountCents/100' payout.AmountCents %100'                  Formatting.GetLuhnChecksum (payout.AmountCents.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.Financial,JsonPayableCostsOcr,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Financial\Json-PayableCostsOcr.aspx.cs,GetAmountOcr,The following statement contains a magic number: return string.Format ("{0} {1:00} &nbsp; {2} &gt;"' // three spaces between the cents and the checksum                  payout.AmountCents/100' payout.AmountCents %100'                  Formatting.GetLuhnChecksum (payout.AmountCents.ToString (CultureInfo.InvariantCulture)));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,Page_Load,The following statement contains a magic number: DbVersionRequired = 2;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,GetAccountData,The following statement contains a magic number: result.AccountOwnerAvatarUrl = account.OwnerPersonId != 0                  ? account.Owner.GetSecureAvatarLink (24)                  : "/Images/Icons/iconshock-warning-24px.png";
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,GetAccountData,The following statement contains a magic number: if (account.AccountType == FinancialAccountType.Asset || account.AccountType == FinancialAccountType.Debt)              {                  result.Balance =                      (accountTree.GetDeltaCents (new DateTime (1900' 1' 1)' new DateTime (year + 1' 1' 1))/100L).ToString                          (                              "N0");                  result.InitialBalance =                      ((accountTree.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1))/100.0).ToString ("N2"));              }              else              {                  result.Balance =                      (-accountTree.GetDeltaCents (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1))/100L)                          .ToString (                              "N0");                  result.InitialBalance = "N/A"; // unused              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,GetAccountData,The following statement contains a magic number: if (account.AccountType == FinancialAccountType.Asset || account.AccountType == FinancialAccountType.Debt)              {                  result.Balance =                      (accountTree.GetDeltaCents (new DateTime (1900' 1' 1)' new DateTime (year + 1' 1' 1))/100L).ToString                          (                              "N0");                  result.InitialBalance =                      ((accountTree.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1))/100.0).ToString ("N2"));              }              else              {                  result.Balance =                      (-accountTree.GetDeltaCents (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1))/100L)                          .ToString (                              "N0");                  result.InitialBalance = "N/A"; // unused              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,GetAccountData,The following statement contains a magic number: if (account.AccountType == FinancialAccountType.Asset || account.AccountType == FinancialAccountType.Debt)              {                  result.Balance =                      (accountTree.GetDeltaCents (new DateTime (1900' 1' 1)' new DateTime (year + 1' 1' 1))/100L).ToString                          (                              "N0");                  result.InitialBalance =                      ((accountTree.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1))/100.0).ToString ("N2"));              }              else              {                  result.Balance =                      (-accountTree.GetDeltaCents (new DateTime (year' 1' 1)' new DateTime (year + 1' 1' 1))/100L)                          .ToString (                              "N0");                  result.InitialBalance = "N/A"; // unused              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountInitialBalance,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false) || authData.CurrentOrganization.Parameters.FiscalBooksClosedUntilYear >= authData.CurrentOrganization.FirstFiscalYear)                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 desiredInitialBalanceCents =                      (Int64)                          (Double.Parse (newInitialBalanceString'                              NumberStyles.AllowThousands | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint'                              CultureInfo.CurrentCulture)*100.0);                    Int64 currentInitialBalanceCents = account.GetDeltaCents (new DateTime (1900' 1' 1)'                      new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    Int64 deltaCents = desiredInitialBalanceCents - currentInitialBalanceCents;                    // Find or create "Initial Balances" transaction                    FinancialAccountRows testRows = FinancialAccountRows.ForOrganization (authData.CurrentOrganization'                      new DateTime (1900' 1' 1)' new DateTime (authData.CurrentOrganization.FirstFiscalYear' 1' 1));                    FinancialTransaction initialBalancesTransaction = null;                    foreach (FinancialAccountRow row in testRows)                  {                      if (row.Transaction.Description == "Initial Balances")                      {                          initialBalancesTransaction = row.Transaction;                          break;                      }                  }                    if (initialBalancesTransaction == null)                  {                      // create transaction                        initialBalancesTransaction = FinancialTransaction.Create (authData.CurrentOrganization.Identity'                          new DateTime (authData.CurrentOrganization.FirstFiscalYear - 1' 12' 31)' "Initial Balances");                  }                    Dictionary<int' Int64> recalcBase = initialBalancesTransaction.GetRecalculationBase();                  int equityAccountId = authData.CurrentOrganization.FinancialAccounts.DebtsEquity.Identity;                    if (!recalcBase.ContainsKey (accountId))                  {                      recalcBase[accountId] = 0;                  }                  if (!recalcBase.ContainsKey (equityAccountId))                  {                      recalcBase[equityAccountId] = 0;                  }                    recalcBase[accountId] += deltaCents;                  recalcBase[equityAccountId] -= deltaCents;                  initialBalancesTransaction.RecalculateTransaction (recalcBase' authData.CurrentUser);                  return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Changed'                      NewData = (desiredInitialBalanceCents / 100.0).ToString("N2"' CultureInfo.CurrentCulture)                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetInitBalance"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountBudget,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false))                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 newTreeBudget;                  budget = budget.Replace ("%A0"' "%20");                  // some very weird browser space-to-otherspace translation weirds out number parsing                  budget = HttpContext.Current.Server.UrlDecode (budget);                    if (budget.Trim().Length > 0 &&                      Int64.TryParse (budget' NumberStyles.Currency' CultureInfo.CurrentCulture' out newTreeBudget))                  {                      newTreeBudget *= 100; // convert to cents                        int year = DateTime.Today.Year;                      FinancialAccounts accountTree = account.ThisAndBelow();                      Int64 currentTreeBudget = accountTree.GetBudgetSumCents (year);                      Int64 currentSingleBudget = account.GetBudgetCents (year);                      Int64 suballocatedBudget = currentTreeBudget - currentSingleBudget;                        Int64 newSingleBudget = newTreeBudget - suballocatedBudget;                        account.SetBudgetCents (DateTime.Today.Year' newSingleBudget);                        // Once we've set the budget' also update the "yearly result" budget.                      // The "yearly result" budget isn't shown in the account plan' but is                      // abstracted to "projected loss" or "projected gain" pseudobudgets.                        int thisYear = DateTime.UtcNow.Year;                      FinancialAccounts allProfitLossAccounts = FinancialAccounts.ForOrganization(authData.CurrentOrganization);                      Int64 newProfitLossProjection = allProfitLossAccounts.Where(queryAccount => queryAccount.Identity != authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.Identity).Sum(queryAccount => queryAccount.GetBudgetCents(thisYear));                        authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.SetBudgetCents(thisYear' -newProfitLossProjection);                        return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.Changed'                          NewData = (newTreeBudget/100).ToString ("N0"' CultureInfo.CurrentCulture)                      };                  }                    return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Invalid                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetBudget"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlan,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\AccountPlan.aspx.cs,SetAccountBudget,The following statement contains a magic number: try              {                  AuthenticationData authData = GetAuthenticationDataAndCulture();                  FinancialAccount account = FinancialAccount.FromIdentity (accountId);                    if (!PrepareAccountChange (account' authData' false))                  {                      return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.NoPermission                      };                  }                    Int64 newTreeBudget;                  budget = budget.Replace ("%A0"' "%20");                  // some very weird browser space-to-otherspace translation weirds out number parsing                  budget = HttpContext.Current.Server.UrlDecode (budget);                    if (budget.Trim().Length > 0 &&                      Int64.TryParse (budget' NumberStyles.Currency' CultureInfo.CurrentCulture' out newTreeBudget))                  {                      newTreeBudget *= 100; // convert to cents                        int year = DateTime.Today.Year;                      FinancialAccounts accountTree = account.ThisAndBelow();                      Int64 currentTreeBudget = accountTree.GetBudgetSumCents (year);                      Int64 currentSingleBudget = account.GetBudgetCents (year);                      Int64 suballocatedBudget = currentTreeBudget - currentSingleBudget;                        Int64 newSingleBudget = newTreeBudget - suballocatedBudget;                        account.SetBudgetCents (DateTime.Today.Year' newSingleBudget);                        // Once we've set the budget' also update the "yearly result" budget.                      // The "yearly result" budget isn't shown in the account plan' but is                      // abstracted to "projected loss" or "projected gain" pseudobudgets.                        int thisYear = DateTime.UtcNow.Year;                      FinancialAccounts allProfitLossAccounts = FinancialAccounts.ForOrganization(authData.CurrentOrganization);                      Int64 newProfitLossProjection = allProfitLossAccounts.Where(queryAccount => queryAccount.Identity != authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.Identity).Sum(queryAccount => queryAccount.GetBudgetCents(thisYear));                        authData.CurrentOrganization.FinancialAccounts.CostsYearlyResult.SetBudgetCents(thisYear' -newProfitLossProjection);                        return new ChangeAccountDataResult                      {                          Result = ChangeAccountDataOperationsResult.Changed'                          NewData = (newTreeBudget/100).ToString ("N0"' CultureInfo.CurrentCulture)                      };                  }                    return new ChangeAccountDataResult                  {                      Result = ChangeAccountDataOperationsResult.Invalid                  };              }              catch (Exception weirdException)              {                  SupportFunctions.LogException ("AccountPlan-SetBudget"' weirdException);                    throw;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,Localize,The following statement contains a magic number: this.LabelRadioPayoutForeign.Text =                  String.Format(Resources.Pages.Ledgers.BalanceTransactions_ModalDialog_RadioPayoutForeign' 5);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetTransactionMatchability,The following statement contains a magic number: result.DifferingAmount = String.Format ("{0} {1:+#'#.00;−#'#.00;0}"'                  // this is a UNICODE MINUS (U+2212)' not the hyphen on the keyboard                  authData.CurrentOrganization.Currency.DisplayCode' transaction.Rows.AmountCentsTotal/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: foreach (Payout payout in openPayouts)              {                  if (payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);                        if (payout.AmountCents == -matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: foreach (Payout payout in openPayouts)              {                  if (payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);                        if (payout.AmountCents == -matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: foreach (Payout payout in openPayouts)              {                  if (payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);                        if (payout.AmountCents == -matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: foreach (Payout payout in openPayouts)              {                  if (payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);                        if (payout.AmountCents == -matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenPayoutData,The following statement contains a magic number: foreach (Payout payout in openPayouts)              {                  if (payout.AmountCents > -matchAmount*95/100 &&                           payout.AmountCents < -matchAmount*105/100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_PayoutMatch' payout.Identity'                          payout.ExpectedTransactionDate' payout.Recipient' payout.Organization.Currency.DisplayCode' payout.AmountCents / 100.0'                          payout.Specification);                        if (payout.AmountCents == -matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = payout.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: foreach (OutboundInvoice invoice in invoices)              {                  if (invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.Identity'                          invoice.CustomerName' invoice.DueDate' invoice.DisplayNativeAmount);                        if (invoice.HasNativeCurrency)                      {                          description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";                      }                        bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description);                          if (invoice.AmountCents == matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: foreach (OutboundInvoice invoice in invoices)              {                  if (invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.Identity'                          invoice.CustomerName' invoice.DueDate' invoice.DisplayNativeAmount);                        if (invoice.HasNativeCurrency)                      {                          description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";                      }                        bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description);                          if (invoice.AmountCents == matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: foreach (OutboundInvoice invoice in invoices)              {                  if (invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.Identity'                          invoice.CustomerName' invoice.DueDate' invoice.DisplayNativeAmount);                        if (invoice.HasNativeCurrency)                      {                          description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";                      }                        bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description);                          if (invoice.AmountCents == matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: foreach (OutboundInvoice invoice in invoices)              {                  if (invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.Identity'                          invoice.CustomerName' invoice.DueDate' invoice.DisplayNativeAmount);                        if (invoice.HasNativeCurrency)                      {                          description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";                      }                        bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description);                          if (invoice.AmountCents == matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\BalanceTransactions.aspx.cs,GetOpenOutboundInvoiceData,The following statement contains a magic number: foreach (OutboundInvoice invoice in invoices)              {                  if (invoice.AmountCents > matchAmount * 95 / 100 &&                           invoice.AmountCents < matchAmount * 105 / 100)                  {                      string description = String.Format(Resources.Pages.Ledgers.BalanceTransactions_OutboundInvoiceMatch' invoice.Identity'                          invoice.CustomerName' invoice.DueDate' invoice.DisplayNativeAmount);                        if (invoice.HasNativeCurrency)                      {                          description += " (" + transaction.Organization.Currency.DisplayCode + " " +                                         (invoice.AmountCents/100.0).ToString("N2") + ")";                      }                        bool invoiceIdMatch = DescriptionContainsInvoiceReference(invoice.Reference' invoice.TheirReference' transaction.Description);                          if (invoice.AmountCents == matchAmount)                      {                          listExact.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_ExactMatches'                              text = description                          });                      }                      else                      {                          listTolerant.Add(new DropdownOption                          {                              id = invoice.Identity.ToString(CultureInfo.InvariantCulture)'                              @group = invoiceIdMatch ? Resources.Pages.Ledgers.BalanceTransactions_MostProbableMatch : Resources.Pages.Ledgers.BalanceTransactions_FivePercentMatches'                              text = description                          });                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  DateTime today = DateTime.Today;                  int year = today.Year;                  int firstYear = CurrentOrganization.FirstFiscalYear;                    while (year >= firstYear)                  {                      this.DropYears.Items.Add (year.ToString (CultureInfo.InvariantCulture));                      year--;                  }                    for (int monthNumber = 1; monthNumber <= 12; monthNumber++)                  {                      this.DropMonths.Items.Add (new ListItem (new DateTime (2014' monthNumber' 1).ToString ("MMM")'                          monthNumber.ToString (CultureInfo.InvariantCulture))); // will autolocalize                  }                    this.DropMonths.Items.Add (new ListItem (Global.Global_Q1' "21"));                  // quarters and all-year are coded as fake month numbers                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q2' "22"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q3' "23"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q4' "24"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_AllYear' "31"));                    this.DropYears.SelectedIndex = 0;                  this.DropMonths.SelectedValue = today.Month.ToString (CultureInfo.InvariantCulture);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  DateTime today = DateTime.Today;                  int year = today.Year;                  int firstYear = CurrentOrganization.FirstFiscalYear;                    while (year >= firstYear)                  {                      this.DropYears.Items.Add (year.ToString (CultureInfo.InvariantCulture));                      year--;                  }                    for (int monthNumber = 1; monthNumber <= 12; monthNumber++)                  {                      this.DropMonths.Items.Add (new ListItem (new DateTime (2014' monthNumber' 1).ToString ("MMM")'                          monthNumber.ToString (CultureInfo.InvariantCulture))); // will autolocalize                  }                    this.DropMonths.Items.Add (new ListItem (Global.Global_Q1' "21"));                  // quarters and all-year are coded as fake month numbers                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q2' "22"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q3' "23"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_Q4' "24"));                  this.DropMonths.Items.Add (new ListItem (Global.Global_AllYear' "31"));                    this.DropYears.SelectedIndex = 0;                  this.DropMonths.SelectedValue = today.Month.ToString (CultureInfo.InvariantCulture);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,AddTransactionRow,The following statement contains a magic number: Int64 amountCents = (Int64) (amountFloat*100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetUnbalancedAmount,The following statement contains a magic number: return (-transaction.Rows.AmountCentsTotal/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,GetObjectDetails,The following statement contains a magic number: switch (identifiableObject.GetType().Name)              {                  case "ExpenseClaim":                      ExpenseClaim claim = (ExpenseClaim) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_ExpenseClaimLongSpecification' claim.Identity) +                             ":</strong> " + claim.Organization.Currency.Code + " " +                             (claim.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (claim.Validations)) + " " +                             GetDocumentDetails (claim.Documents' claim);                    case "CashAdvance":                      CashAdvance advance = (CashAdvance) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_CashAdvanceSpecification' advance.Identity) +                             ":</strong> " + advance.Organization.Currency.Code + " " +                             (advance.AmountCents/100.0).ToString ("N2") + ". " +                             HttpUtility.HtmlEncode (GetValidationDetails (advance.Validations));                    case "InboundInvoice":                      InboundInvoice invoice = (InboundInvoice) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_InboundInvoiceSpecification' invoice.Identity) +                             ":</strong> " + invoice.Organization.Currency.Code + " " +                             (invoice.AmountCents/100.0).ToString ("N2") + ". " +                             GetValidationDetails (invoice.Validations) + " " +                             GetDocumentDetails (invoice.Documents' invoice);                    case "Salary":                      Salary salary = (Salary) identifiableObject;                        return "<strong>" +                             String.Format (Global.Financial_SalaryIdentity' salary.Identity) +                             ":</strong> " +                             String.Format (Resources.Pages.Ledgers.InspectLedgers_TxDetail_SalaryDetail'                                 salary.PayrollItem.Organization.Currency.Code'                                 salary.BaseSalaryCents/100.0' // base salary                                 (salary.GrossSalaryCents - salary.BaseSalaryCents)/100.0' // before-tax adjustments                                 salary.GrossSalaryCents/100.0' // before-tax adjusted salary                                 salary.SubtractiveTaxCents/100.0' // tax deduction                                 (salary.NetSalaryCents + salary.SubtractiveTaxCents -                                  salary.GrossSalaryCents)/100.0' // after-tax adjustments                                 salary.NetSalaryCents/100.0) + // actual payout amount                             " " + GetValidationDetails (salary.Validations);                    default:                      throw new NotImplementedException ("Unhandled object type in GetObjectDetails: " +                                                         identifiableObject.GetType().Name);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,CreateTransaction,The following statement contains a magic number: Int64 amountCents = (Int64) (amount *100);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,InspectLedgers,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\InspectLedgers.aspx.cs,CreateTransaction,The following statement contains a magic number: AjaxInputCallResult result = new AjaxInputCallResult              {                  Success = true'                  ObjectIdentity = transaction.Identity'                  NewValue = (amountCents/100.0).ToString("N2")              };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetProfitLossNode,The following statement contains a magic number: string node = '{' + string.Format(                  "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"rowCssClass\":\"{2}\"'\"budget\":\"{3:N0}\""'                  "Row" + resource' string.Format (Resources.Pages.Ledgers.ResourceManager.GetString("AccountPlan_" + resource)' _year)' "Row" + resource' amount / 100.0) + '}';
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: foreach (FinancialAccount account in childAccountsSorted)              {                  if (account.Identity == rootNodeId || account.AccountType != accountType || account.Identity == _resultAccountId)                  {                      continue;                  }                    string ownerString = "&nbsp;";                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      if (account.OwnerPersonId != 0)                      {                          // TODO: add zoom' write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" +                              account.Owner.GetSecureAvatarLink (16) + "')\\\">" +                              JsonSanitize (Server.HtmlEncode (account.Owner.Canonical)) + "</span>";                      }                      else                      {                          // TODO: add write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('/Images/Icons/iconshock-warning-16x12px.png')\\\">" +                              JsonSanitize (Server.HtmlEncode (Global.Global_NoOwner)) + "</span>";                      }                  }                    string grandChildren = GetAccountsRecurse (accountType' account.Identity);                  if (!string.IsNullOrEmpty (grandChildren))                  {                      grandChildren = "'\"state\":\"closed\"'\"children\":[" + grandChildren + "]";                  }                    string editString =                      String.Format (                          "<img class='IconEdit' accountId='{0}{1}' height='16' width='24' src='/Images/Icons/iconshock-wrench-128x96px-centered.png' />"'                          accountType.ToString().Substring (0' 1)' account.Identity);                      childStrings.Add ('{' +                                    String.Format (                                        "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""'                                        account.Identity'                                        JsonSanitize (account.Name)'                                        ownerString'                                        this._hashedAccounts[account.Identity].Count > 1                                            ? JsonDualString (account.Identity' this._treeBalanceLookup[account.Identity]'                                                this._singleBalanceLookup[account.Identity])                                            : (this._singleBalanceLookup[account.Identity]/100.0).ToString ("N0"'                                                CultureInfo.CurrentCulture)'                                        account.AccountType == FinancialAccountType.Income ||                                        account.AccountType == FinancialAccountType.Cost                                            ? this._hashedAccounts[account.Identity].Count > 1                                                ? (JsonDualString (account.Identity'                                                    this._treeBudgetLookup[account.Identity]'                                                    this._singleBudgetLookup[account.Identity]))                                                : (this._singleBudgetLookup[account.Identity]/100.0).ToString ("N0"'                                                    CultureInfo.CurrentCulture)                                            : string.Empty'                                        editString'                                        account.Active? "false":"true" // reverses condition on purpose                                        ) + grandChildren + '}');              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: foreach (FinancialAccount account in childAccountsSorted)              {                  if (account.Identity == rootNodeId || account.AccountType != accountType || account.Identity == _resultAccountId)                  {                      continue;                  }                    string ownerString = "&nbsp;";                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      if (account.OwnerPersonId != 0)                      {                          // TODO: add zoom' write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" +                              account.Owner.GetSecureAvatarLink (16) + "')\\\">" +                              JsonSanitize (Server.HtmlEncode (account.Owner.Canonical)) + "</span>";                      }                      else                      {                          // TODO: add write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('/Images/Icons/iconshock-warning-16x12px.png')\\\">" +                              JsonSanitize (Server.HtmlEncode (Global.Global_NoOwner)) + "</span>";                      }                  }                    string grandChildren = GetAccountsRecurse (accountType' account.Identity);                  if (!string.IsNullOrEmpty (grandChildren))                  {                      grandChildren = "'\"state\":\"closed\"'\"children\":[" + grandChildren + "]";                  }                    string editString =                      String.Format (                          "<img class='IconEdit' accountId='{0}{1}' height='16' width='24' src='/Images/Icons/iconshock-wrench-128x96px-centered.png' />"'                          accountType.ToString().Substring (0' 1)' account.Identity);                      childStrings.Add ('{' +                                    String.Format (                                        "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""'                                        account.Identity'                                        JsonSanitize (account.Name)'                                        ownerString'                                        this._hashedAccounts[account.Identity].Count > 1                                            ? JsonDualString (account.Identity' this._treeBalanceLookup[account.Identity]'                                                this._singleBalanceLookup[account.Identity])                                            : (this._singleBalanceLookup[account.Identity]/100.0).ToString ("N0"'                                                CultureInfo.CurrentCulture)'                                        account.AccountType == FinancialAccountType.Income ||                                        account.AccountType == FinancialAccountType.Cost                                            ? this._hashedAccounts[account.Identity].Count > 1                                                ? (JsonDualString (account.Identity'                                                    this._treeBudgetLookup[account.Identity]'                                                    this._singleBudgetLookup[account.Identity]))                                                : (this._singleBudgetLookup[account.Identity]/100.0).ToString ("N0"'                                                    CultureInfo.CurrentCulture)                                            : string.Empty'                                        editString'                                        account.Active? "false":"true" // reverses condition on purpose                                        ) + grandChildren + '}');              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,GetAccountsRecurse,The following statement contains a magic number: foreach (FinancialAccount account in childAccountsSorted)              {                  if (account.Identity == rootNodeId || account.AccountType != accountType || account.Identity == _resultAccountId)                  {                      continue;                  }                    string ownerString = "&nbsp;";                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      if (account.OwnerPersonId != 0)                      {                          // TODO: add zoom' write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('" +                              account.Owner.GetSecureAvatarLink (16) + "')\\\">" +                              JsonSanitize (Server.HtmlEncode (account.Owner.Canonical)) + "</span>";                      }                      else                      {                          // TODO: add write capability                            ownerString =                              "<span style=\\\"padding-" + _nearEdge + ":20px;background-repeat:no-repeat;background-position:center " + _nearEdge + ";background-image:url('/Images/Icons/iconshock-warning-16x12px.png')\\\">" +                              JsonSanitize (Server.HtmlEncode (Global.Global_NoOwner)) + "</span>";                      }                  }                    string grandChildren = GetAccountsRecurse (accountType' account.Identity);                  if (!string.IsNullOrEmpty (grandChildren))                  {                      grandChildren = "'\"state\":\"closed\"'\"children\":[" + grandChildren + "]";                  }                    string editString =                      String.Format (                          "<img class='IconEdit' accountId='{0}{1}' height='16' width='24' src='/Images/Icons/iconshock-wrench-128x96px-centered.png' />"'                          accountType.ToString().Substring (0' 1)' account.Identity);                      childStrings.Add ('{' +                                    String.Format (                                        "\"id\":\"{0}\"'\"accountName\":\"{1}\"'\"owner\":\"{2}\"'\"balance\":\"{3}\"'\"budget\":\"{4}\"'\"action\":\"{5}\"'\"inactive\":\"{6}\""'                                        account.Identity'                                        JsonSanitize (account.Name)'                                        ownerString'                                        this._hashedAccounts[account.Identity].Count > 1                                            ? JsonDualString (account.Identity' this._treeBalanceLookup[account.Identity]'                                                this._singleBalanceLookup[account.Identity])                                            : (this._singleBalanceLookup[account.Identity]/100.0).ToString ("N0"'                                                CultureInfo.CurrentCulture)'                                        account.AccountType == FinancialAccountType.Income ||                                        account.AccountType == FinancialAccountType.Cost                                            ? this._hashedAccounts[account.Identity].Count > 1                                                ? (JsonDualString (account.Identity'                                                    this._treeBudgetLookup[account.Identity]'                                                    this._singleBudgetLookup[account.Identity]))                                                : (this._singleBudgetLookup[account.Identity]/100.0).ToString ("N0"'                                                    CultureInfo.CurrentCulture)                                            : string.Empty'                                        editString'                                        account.Active? "false":"true" // reverses condition on purpose                                        ) + grandChildren + '}');              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,PopulateLookups,The following statement contains a magic number: foreach (FinancialAccount account in accounts)              {                  // Get current balances                    // TODO: There must be a more optimized way to do this' like with a database optimization. This                  // is a HORRIBLY expensive operation' as it performs one complex database query PER ACCOUNT.                    if (account.AccountType == FinancialAccountType.Cost ||                      account.AccountType == FinancialAccountType.Income)                  {                      this._singleBalanceLookup[account.Identity] =                          -account.GetDeltaCents (new DateTime (this._year' 1' 1)'                              new DateTime (this._year + 1' 1' 1));                      this._singleBudgetLookup[account.Identity] = account.GetBudgetCents (this._year);                  }                  else if (account.AccountType == FinancialAccountType.Asset ||                           account.AccountType == FinancialAccountType.Debt)                  {                      this._singleBalanceLookup[account.Identity] = account.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (this._year + 1' 1' 1));                      this._singleBudgetLookup[account.Identity] = 0; // balance accounts don't have budgets                  }                  else                  {                      throw new InvalidOperationException ("Account with invalid type encountered - " +                                                           account.AccountType);                  }                    // copy to treeLookups                    this._treeBalanceLookup[account.Identity] = this._singleBalanceLookup[account.Identity];                  this._treeBudgetLookup[account.Identity] = this._singleBudgetLookup[account.Identity];              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,JsonDualString,The following statement contains a magic number: if (treeValue != 0 && singleValue == 0)              {                  return string.Format (CultureInfo.CurrentCulture'                      "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                      accountId' treeValue/100.00);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,AccountPlanData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-AccountPlanData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder response = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (VatReportItem item in items)              {                  FinancialTransaction transaction = item.Transaction;                  bool include = false;                    string element = string.Format("\"id\":\"{0}\"'\"txid\":\"{1}\"'\"datetime\":\"{2:MMM dd}\"'\"description\":\"{3}\""'                       transaction.Identity'                      transaction.OrganizationSequenceId'                      transaction.DateTime'                      JsonSanitize(transaction.Description));                    if (item.TurnoverCents != 0)                  {                      element += String.Format("'\"turnover\":\"{0:N2}\""' item.TurnoverCents / 100.0);                      turnoverCentsTotal += item.TurnoverCents;                      include = true;                  }                    if (item.VatInboundCents != 0)                  {                      element += String.Format("'\"inbound\":\"{0:N2}\""' item.VatInboundCents/ 100.0);                      inboundCentsTotal += item.VatInboundCents;                      include = true;                  }                    if (item.VatOutboundCents != 0)                  {                      element += String.Format("'\"outbound\":\"{0:N2}\""' item.VatOutboundCents/ 100.0);                      outboundCentsTotal += item.VatOutboundCents;                      include = true;                  }                    if (transaction.Dependency != null)                  {                        element += String.Format("'\"dox\":\"" + hasDoxString + "\""' transaction.Identity);                  }                    if (include)                  {                      lines.Add("{" + element + "}");                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (VatReportItem item in items)              {                  FinancialTransaction transaction = item.Transaction;                  bool include = false;                    string element = string.Format("\"id\":\"{0}\"'\"txid\":\"{1}\"'\"datetime\":\"{2:MMM dd}\"'\"description\":\"{3}\""'                       transaction.Identity'                      transaction.OrganizationSequenceId'                      transaction.DateTime'                      JsonSanitize(transaction.Description));                    if (item.TurnoverCents != 0)                  {                      element += String.Format("'\"turnover\":\"{0:N2}\""' item.TurnoverCents / 100.0);                      turnoverCentsTotal += item.TurnoverCents;                      include = true;                  }                    if (item.VatInboundCents != 0)                  {                      element += String.Format("'\"inbound\":\"{0:N2}\""' item.VatInboundCents/ 100.0);                      inboundCentsTotal += item.VatInboundCents;                      include = true;                  }                    if (item.VatOutboundCents != 0)                  {                      element += String.Format("'\"outbound\":\"{0:N2}\""' item.VatOutboundCents/ 100.0);                      outboundCentsTotal += item.VatOutboundCents;                      include = true;                  }                    if (transaction.Dependency != null)                  {                        element += String.Format("'\"dox\":\"" + hasDoxString + "\""' transaction.Identity);                  }                    if (include)                  {                      lines.Add("{" + element + "}");                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (VatReportItem item in items)              {                  FinancialTransaction transaction = item.Transaction;                  bool include = false;                    string element = string.Format("\"id\":\"{0}\"'\"txid\":\"{1}\"'\"datetime\":\"{2:MMM dd}\"'\"description\":\"{3}\""'                       transaction.Identity'                      transaction.OrganizationSequenceId'                      transaction.DateTime'                      JsonSanitize(transaction.Description));                    if (item.TurnoverCents != 0)                  {                      element += String.Format("'\"turnover\":\"{0:N2}\""' item.TurnoverCents / 100.0);                      turnoverCentsTotal += item.TurnoverCents;                      include = true;                  }                    if (item.VatInboundCents != 0)                  {                      element += String.Format("'\"inbound\":\"{0:N2}\""' item.VatInboundCents/ 100.0);                      inboundCentsTotal += item.VatInboundCents;                      include = true;                  }                    if (item.VatOutboundCents != 0)                  {                      element += String.Format("'\"outbound\":\"{0:N2}\""' item.VatOutboundCents/ 100.0);                      outboundCentsTotal += item.VatOutboundCents;                      include = true;                  }                    if (transaction.Dependency != null)                  {                        element += String.Format("'\"dox\":\"" + hasDoxString + "\""' transaction.Identity);                  }                    if (include)                  {                      lines.Add("{" + element + "}");                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_VatReportData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-VatReportData.aspx.cs,Page_Load,The following statement contains a magic number: Response.Write(String.Format("\"id\":\"0\"'\"description\":\"{0}\"'\"turnover\":\"{1:N2}\"'\"inbound\":\"{2:N2}\"'\"outbound\":\"{3:N2}\""'                  JsonSanitize(Resources.Pages.Ledgers.ViewVatReports_Footer_Total.ToUpperInvariant())' turnoverCentsTotal / 100.0' inboundCentsTotal / 100.0' outboundCentsTotal / 100.0));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: line1 += string.Format(CultureInfo.CurrentCulture' "'\"assets\":\"{0:N0}\""'                  _totals.AssetsCents / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: line1 += string.Format(CultureInfo.CurrentCulture' "'\"liabilities\":\"{0:N0}\""' _totals.LiabilitiesCents/-100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: if (_totals.AssetsCents == -_totals.LiabilitiesCents)              {                  return "{" + line1 + "}";              }              else if (_totals.AssetsCents > -_totals.LiabilitiesCents) // Predicted profit              {                  string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_ProfitToDate' _year));                    line2 += string.Format(CultureInfo.CurrentCulture' "'\"liabilities\":\"{0:N0}\""'                      (_totals.AssetsCents + _totals.LiabilitiesCents) / 100.0);                    return "{" + line1 + "}'{" + line2 + "}";              }              else              {                  string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_LossToDate' _year));                    line2 += string.Format(CultureInfo.CurrentCulture' "'\"assets\":\"{0:N0}\""'                      (_totals.LiabilitiesCents + _totals.AssetsCents) / -100.0);                    return "{" + line1 + "}'{" + line2 + "}";              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,WriteFooter,The following statement contains a magic number: if (_totals.AssetsCents == -_totals.LiabilitiesCents)              {                  return "{" + line1 + "}";              }              else if (_totals.AssetsCents > -_totals.LiabilitiesCents) // Predicted profit              {                  string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_ProfitToDate' _year));                    line2 += string.Format(CultureInfo.CurrentCulture' "'\"liabilities\":\"{0:N0}\""'                      (_totals.AssetsCents + _totals.LiabilitiesCents) / 100.0);                    return "{" + line1 + "}'{" + line2 + "}";              }              else              {                  string line2 = string.Format("\"name\":\"{0}\""' string.Format(Resources.Pages.Ledgers.BalanceSheet_LossToDate' _year));                    line2 += string.Format(CultureInfo.CurrentCulture' "'\"assets\":\"{0:N0}\""'                      (_totals.LiabilitiesCents + _totals.AssetsCents) / -100.0);                    return "{" + line1 + "}'{" + line2 + "}";              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string columnCardinal = "assets";                  string columnDelta = "assetdelta";                  int signReverser = 1;                    if (line.AccountType == FinancialAccountType.Debt)                  {                      columnCardinal = "liabilities";                      columnDelta = "liabilitydelta";                      signReverser = -1;                      this._totals.LiabilitiesCents += line.AccountValues.ThisYear;                  }                  else                  {                      this._totals.AssetsCents += line.AccountValues.ThisYear;                  }                    string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"" + columnCardinal + "\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear * signReverser'                                     line.AccountValues.ThisYear * signReverser' line.DefaultExpand);                        element += "'\"" + columnDelta + "\":" +                                 JsonDualString (line.AccountId' (line.AccountTreeValues.ThisYear-line.AccountTreeValues.PreviousYear) * signReverser'                                     (line.AccountValues.ThisYear-line.AccountValues.PreviousYear) * signReverser' line.DefaultExpand' string.Empty' "(+#'#.);(-#'#.);---");                          element += "'\"state\":\"" + (line.DefaultExpand? "open":"closed") + "\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"" + columnCardinal + "\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0*signReverser);                        element += string.Format (CultureInfo.CurrentCulture' "'\"" + columnDelta + "\":\"{0:(+#'#.);(-#'#.);---}\""'                          (double) (line.AccountValues.ThisYear-line.AccountValues.PreviousYear)/100.0*signReverser)                          .Replace("---"'"<span style='color:#CCC'>&mdash;</span>")                          .Replace("-"' "&minus;");                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string columnCardinal = "assets";                  string columnDelta = "assetdelta";                  int signReverser = 1;                    if (line.AccountType == FinancialAccountType.Debt)                  {                      columnCardinal = "liabilities";                      columnDelta = "liabilitydelta";                      signReverser = -1;                      this._totals.LiabilitiesCents += line.AccountValues.ThisYear;                  }                  else                  {                      this._totals.AssetsCents += line.AccountValues.ThisYear;                  }                    string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"" + columnCardinal + "\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear * signReverser'                                     line.AccountValues.ThisYear * signReverser' line.DefaultExpand);                        element += "'\"" + columnDelta + "\":" +                                 JsonDualString (line.AccountId' (line.AccountTreeValues.ThisYear-line.AccountTreeValues.PreviousYear) * signReverser'                                     (line.AccountValues.ThisYear-line.AccountValues.PreviousYear) * signReverser' line.DefaultExpand' string.Empty' "(+#'#.);(-#'#.);---");                          element += "'\"state\":\"" + (line.DefaultExpand? "open":"closed") + "\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"" + columnCardinal + "\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0*signReverser);                        element += string.Format (CultureInfo.CurrentCulture' "'\"" + columnDelta + "\":\"{0:(+#'#.);(-#'#.);---}\""'                          (double) (line.AccountValues.ThisYear-line.AccountValues.PreviousYear)/100.0*signReverser)                          .Replace("---"'"<span style='color:#CCC'>&mdash;</span>")                          .Replace("-"' "&minus;");                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetDataSimplified,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetDataSimplified.aspx.cs,FormatSingleString,The following statement contains a magic number: return String.Format("{0:" + format + "}"' centsValue / 100.0)                          .Replace("---"' "<span style='color:#CCC'>&mdash;</span>")                          .Replace("-"' "&minus;");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"name\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"" + (line.DefaultExpand ? "open" : "closed") + "\"'\"children\":" + RecurseReport(line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: if (treeValue != 0 && singleValue == 0)              {                  return string.Format (CultureInfo.CurrentCulture'                      "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""'                      accountId' treeValue/100.00);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,BalanceSheetData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BalanceSheetData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"annualreportdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"annualreportdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: StringBuilder result = new StringBuilder(16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: foreach (HotBitcoinAddress address in addresses)              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddressUnspents.ForAddress (address);                  Int64 satoshisUnspentAddress = 0;                    StringBuilder childResult = new StringBuilder (16384);                  foreach (HotBitcoinAddressUnspent unspent in unspents)                  {                      childResult.Append ("{");                      childResult.AppendFormat (                          "\"id\":\"UTXO{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\""'                          unspent.Identity'                          Resources.Pages.Ledgers.BitcoinHotWallet_UnspentTransaction'                          unspent.TransactionHash'                          (unspent.AmountSatoshis/100.0).ToString ("N2")'                          (unspent.AmountSatoshis/100.0*conversionRateLookup[unspent.Address.Chain]).ToString ("N2")                          );                      satoshisUnspentAddress += unspent.AmountSatoshis;                      childResult.Append ("}'");                  }                  if (unspents.Count > 0)                  {                      childResult.Remove (childResult.Length - 1' 1); // remove last comma                  }                    if (satoshisUnspentAddress > 0)                  {                      result.Append ("{");                      result.AppendFormat (                          "\"id\":\"{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\"'"'                          address.Identity'                          address.Chain.ToString() + " " + address.DerivationPath'                          address.Address'                          JsonExpandingString (address.Identity' satoshisUnspentAddress)'                          JsonExpandingString (address.Identity' (Int64) (satoshisUnspentAddress * conversionRateLookup[address.Chain]))                          );                      result.Append ("\"state\":\"closed\"'\"children\":[" + childResult.ToString() + "]");                      result.Append ("}'");                      addressesWithFunds++;                        if (!satoshisTotalLookup.ContainsKey(address.Chain))                      {                          satoshisTotalLookup[address.Chain] = 0;                      }                        satoshisTotalLookup[address.Chain] += satoshisUnspentAddress;                    }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: foreach (HotBitcoinAddress address in addresses)              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddressUnspents.ForAddress (address);                  Int64 satoshisUnspentAddress = 0;                    StringBuilder childResult = new StringBuilder (16384);                  foreach (HotBitcoinAddressUnspent unspent in unspents)                  {                      childResult.Append ("{");                      childResult.AppendFormat (                          "\"id\":\"UTXO{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\""'                          unspent.Identity'                          Resources.Pages.Ledgers.BitcoinHotWallet_UnspentTransaction'                          unspent.TransactionHash'                          (unspent.AmountSatoshis/100.0).ToString ("N2")'                          (unspent.AmountSatoshis/100.0*conversionRateLookup[unspent.Address.Chain]).ToString ("N2")                          );                      satoshisUnspentAddress += unspent.AmountSatoshis;                      childResult.Append ("}'");                  }                  if (unspents.Count > 0)                  {                      childResult.Remove (childResult.Length - 1' 1); // remove last comma                  }                    if (satoshisUnspentAddress > 0)                  {                      result.Append ("{");                      result.AppendFormat (                          "\"id\":\"{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\"'"'                          address.Identity'                          address.Chain.ToString() + " " + address.DerivationPath'                          address.Address'                          JsonExpandingString (address.Identity' satoshisUnspentAddress)'                          JsonExpandingString (address.Identity' (Int64) (satoshisUnspentAddress * conversionRateLookup[address.Chain]))                          );                      result.Append ("\"state\":\"closed\"'\"children\":[" + childResult.ToString() + "]");                      result.Append ("}'");                      addressesWithFunds++;                        if (!satoshisTotalLookup.ContainsKey(address.Chain))                      {                          satoshisTotalLookup[address.Chain] = 0;                      }                        satoshisTotalLookup[address.Chain] += satoshisUnspentAddress;                    }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: foreach (HotBitcoinAddress address in addresses)              {                  HotBitcoinAddressUnspents unspents = HotBitcoinAddressUnspents.ForAddress (address);                  Int64 satoshisUnspentAddress = 0;                    StringBuilder childResult = new StringBuilder (16384);                  foreach (HotBitcoinAddressUnspent unspent in unspents)                  {                      childResult.Append ("{");                      childResult.AppendFormat (                          "\"id\":\"UTXO{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\""'                          unspent.Identity'                          Resources.Pages.Ledgers.BitcoinHotWallet_UnspentTransaction'                          unspent.TransactionHash'                          (unspent.AmountSatoshis/100.0).ToString ("N2")'                          (unspent.AmountSatoshis/100.0*conversionRateLookup[unspent.Address.Chain]).ToString ("N2")                          );                      satoshisUnspentAddress += unspent.AmountSatoshis;                      childResult.Append ("}'");                  }                  if (unspents.Count > 0)                  {                      childResult.Remove (childResult.Length - 1' 1); // remove last comma                  }                    if (satoshisUnspentAddress > 0)                  {                      result.Append ("{");                      result.AppendFormat (                          "\"id\":\"{0}\"'" +                          "\"derivePath\":\"{1}\"'" +                          "\"address\":\"{2}\"'" +                          "\"balanceMicrocoins\":\"{3}\"'" +                          "\"balanceFiat\":\"{4}\"'"'                          address.Identity'                          address.Chain.ToString() + " " + address.DerivationPath'                          address.Address'                          JsonExpandingString (address.Identity' satoshisUnspentAddress)'                          JsonExpandingString (address.Identity' (Int64) (satoshisUnspentAddress * conversionRateLookup[address.Chain]))                          );                      result.Append ("\"state\":\"closed\"'\"children\":[" + childResult.ToString() + "]");                      result.Append ("}'");                      addressesWithFunds++;                        if (!satoshisTotalLookup.ContainsKey(address.Chain))                      {                          satoshisTotalLookup[address.Chain] = 0;                      }                        satoshisTotalLookup[address.Chain] += satoshisUnspentAddress;                    }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: if (satoshisTotalLookup.Count > 0)              {                  // We should also have a footer' because we need a total                    result.Append("'\"footer\":[");                    bool previousFooterRow = false;                    foreach (BitcoinChain chain in satoshisTotalLookup.Keys)                  {                      if (previousFooterRow)                      {                          result.Append("'");                      }                        result.Append("{");                        result.AppendFormat(                          "\"derivePath\":\"" + Resources.Global.Global_Total.ToUpperInvariant() + " " +                          (string) chain.ToString().ToUpperInvariant() + "\"'\"balanceMicrocoins\":\"{0}\"'\"balanceFiat\":\"{1}\""'                          (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2"));                        result.Append("}"); // on separate line to suppress warning*/                        previousFooterRow = true;                  }                    result.Append("]");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,FormatJson,The following statement contains a magic number: if (satoshisTotalLookup.Count > 0)              {                  // We should also have a footer' because we need a total                    result.Append("'\"footer\":[");                    bool previousFooterRow = false;                    foreach (BitcoinChain chain in satoshisTotalLookup.Keys)                  {                      if (previousFooterRow)                      {                          result.Append("'");                      }                        result.Append("{");                        result.AppendFormat(                          "\"derivePath\":\"" + Resources.Global.Global_Total.ToUpperInvariant() + " " +                          (string) chain.ToString().ToUpperInvariant() + "\"'\"balanceMicrocoins\":\"{0}\"'\"balanceFiat\":\"{1}\""'                          (satoshisTotalLookup[chain]/100.0).ToString("N2")' (satoshisTotalLookup[chain]/100.0*conversionRateLookup[chain]).ToString("N2"));                        result.Append("}"); // on separate line to suppress warning*/                        previousFooterRow = true;                  }                    result.Append("]");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_BitcoinHotwalletData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-BitcoinHotwalletData.aspx.cs,JsonExpandingString,The following statement contains a magic number: return string.Format(CultureInfo.CurrentCulture'                  "<span class=\\\"bitcoinhotwalletdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N2}</span><span class=\\\"bitcoinhotwalletdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                  addressId' currencyValue / 100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: DateTime dawnOfMankind = new DateTime (1901' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: if (month > 0 && month <= 12)              {                  periodStart = new DateTime (year' month' 1);                  periodEnd = periodStart.AddMonths (1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 1)                      {                          zeroStart = true;                      }                      if (month == 12)                      {                          zeroEnd = true;                      }                  }              }              else if (month > 20 && month < 25) // quarters 1..4 are coded as months 21..24              {                  periodStart = new DateTime (year' (month - 21)*3 + 1' 1);                  periodEnd = periodStart.AddMonths (3);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      balanceStart = new DateTime (year' 1' 1);                        if (month == 21)                      {                          zeroStart = true;                      }                      if (month == 24)                      {                          zeroEnd = true;                      }                  }              }              else if (month == 31) // "whole year" is coded as month 31              {                  periodStart = new DateTime (year' 1' 1);                  periodEnd = new DateTime (year + 1' 1' 1);                  if (account.AccountType == FinancialAccountType.Income ||                      account.AccountType == FinancialAccountType.Cost)                  {                      zeroStart = true;                      zeroEnd = true;                  }              }              else              {                  throw new ArgumentException ("Invalid month supplied: " + month.ToString (CultureInfo.InvariantCulture));              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" +                             String.Format ("\"description\":\"{0}\"'\"balance\":\"{1:N0}\""' JsonSanitize (startString)'                                 runningBalance/100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (FinancialAccountRow row in rows)              {                  string creditString = string.Empty;                  string debitString = string.Empty;                  string description = row.Description;                    if (!displayDescription)                  {                      description = Resources.Pages.Ledgers.InspectLedgers_TxDetail_DescriptionWithheld;                  }                    if (row.AmountCents < 0)                  {                      creditString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                  else if (row.AmountCents > 0)                  {                      debitString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                    runningBalance += row.AmountCents;                    string hasDoxString =                      "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" txId='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />";                    string actionHtml = String.Format (hasDoxString' row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                    if (canSeeAudit)                  {                      actionHtml +=                          String.Format (                              "&nbsp;<img src=\"/Images/Icons/iconshock-flag-white-16px.png\" class=\"LocalIconFlag\" txId=\"{0}\" />"'                              row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                  }                    result.Append ("{" + String.Format (                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"balance\":\"{5:N0}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize (description)'                      debitString'                      creditString'                      runningBalance/100.0'                      JsonSanitize (actionHtml)) + "}'");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (FinancialAccountRow row in rows)              {                  string creditString = string.Empty;                  string debitString = string.Empty;                  string description = row.Description;                    if (!displayDescription)                  {                      description = Resources.Pages.Ledgers.InspectLedgers_TxDetail_DescriptionWithheld;                  }                    if (row.AmountCents < 0)                  {                      creditString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                  else if (row.AmountCents > 0)                  {                      debitString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                    runningBalance += row.AmountCents;                    string hasDoxString =                      "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" txId='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />";                    string actionHtml = String.Format (hasDoxString' row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                    if (canSeeAudit)                  {                      actionHtml +=                          String.Format (                              "&nbsp;<img src=\"/Images/Icons/iconshock-flag-white-16px.png\" class=\"LocalIconFlag\" txId=\"{0}\" />"'                              row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                  }                    result.Append ("{" + String.Format (                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"balance\":\"{5:N0}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize (description)'                      debitString'                      creditString'                      runningBalance/100.0'                      JsonSanitize (actionHtml)) + "}'");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (FinancialAccountRow row in rows)              {                  string creditString = string.Empty;                  string debitString = string.Empty;                  string description = row.Description;                    if (!displayDescription)                  {                      description = Resources.Pages.Ledgers.InspectLedgers_TxDetail_DescriptionWithheld;                  }                    if (row.AmountCents < 0)                  {                      creditString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                  else if (row.AmountCents > 0)                  {                      debitString = String.Format ("{0:N0}"' row.AmountCents/100.0);                  }                    runningBalance += row.AmountCents;                    string hasDoxString =                      "<img src='/Images/Icons/iconshock-search-256px.png' onmouseover=\"this.src='/Images/Icons/iconshock-search-hot-256px.png';\" onmouseout=\"this.src='/Images/Icons/iconshock-search-256px.png';\" txId='{0}' class='LocalIconInspect' style='cursor:pointer' height='20' width='20' />";                    string actionHtml = String.Format (hasDoxString' row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                    if (canSeeAudit)                  {                      actionHtml +=                          String.Format (                              "&nbsp;<img src=\"/Images/Icons/iconshock-flag-white-16px.png\" class=\"LocalIconFlag\" txId=\"{0}\" />"'                              row.FinancialTransactionId.ToString (CultureInfo.InvariantCulture));                  }                    result.Append ("{" + String.Format (                      "\"id\":\"{0:N0}\"'\"datetime\":\"{1:MMM-dd HH:mm}\"'\"description\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"balance\":\"{5:N0}\"'\"action\":\"{6}\""'                      row.Transaction.OrganizationSequenceId'                      row.TransactionDateTime'                      JsonSanitize (description)'                      debitString'                      creditString'                      runningBalance/100.0'                      JsonSanitize (actionHtml)) + "}'");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerData.aspx.cs,Page_Load,The following statement contains a magic number: result.Append ("{" +                             String.Format ("\"description\":\"{0}\"'\"balance\":\"{1:N0}\""' JsonSanitize (endString)'                                 runningBalance/100.0) + "}'");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: DateTime dawnOfMankind = new DateTime (1901' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (FinancialTransactionRow row in rows)              {                  string creditString = string.Empty;                  string debitString = string.Empty;                    if (row.AmountCents < 0)                  {                      creditString = String.Format ("{0:N2}"' row.AmountCents/100.0);                  }                  else if (row.AmountCents > 0)                  {                      debitString = String.Format ("{0:N2}"' row.AmountCents/100.0);                  }                    result.Append ("{" + String.Format (                      "\"id\":\"{0}\"'\"dateTime\":\"{1:yyyy-MMM-dd HH:mm}\"'\"accountName\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"initials\":\"{5}\""'                      row.FinancialTransactionId'                      row.CreatedDateTime'                      JsonSanitize (row.AccountName)'                      debitString'                      creditString'                      row.CreatedByPerson != null? row.CreatedByPerson.Initials: Resources.Global.Global_System) + "}'");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: foreach (FinancialTransactionRow row in rows)              {                  string creditString = string.Empty;                  string debitString = string.Empty;                    if (row.AmountCents < 0)                  {                      creditString = String.Format ("{0:N2}"' row.AmountCents/100.0);                  }                  else if (row.AmountCents > 0)                  {                      debitString = String.Format ("{0:N2}"' row.AmountCents/100.0);                  }                    result.Append ("{" + String.Format (                      "\"id\":\"{0}\"'\"dateTime\":\"{1:yyyy-MMM-dd HH:mm}\"'\"accountName\":\"{2}\"'" +                      "\"deltaPos\":\"{3}\"'\"deltaNeg\":\"{4}\"'\"initials\":\"{5}\""'                      row.FinancialTransactionId'                      row.CreatedDateTime'                      JsonSanitize (row.AccountName)'                      debitString'                      creditString'                      row.CreatedByPerson != null? row.CreatedByPerson.Initials: Resources.Global.Global_System) + "}'");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: if (amountCentsTotal != 0)              {                  // If the transaction is unbalanced' make a huge deal about it                    result.Append ("{\"accountName\":\"<img src='/Images/Icons/iconshock-warning-24px.png' height='16px' width='16px' class='elementFloatFar' />" +                                 JsonSanitize (Resources.Pages.Ledgers.InspectLedgers_UnbalancedTransaction) + "\"'");                    if (amountCentsTotal < 0)                  {                      result.AppendFormat("\"deltaPos\":\"<span class='spanAnnoyingBlink'>{0:N2}</span>\""'                          -amountCentsTotal / 100.0);                  }                  else if (amountCentsTotal > 0)                  {                      result.AppendFormat("\"deltaNeg\":\"<span class='spanAnnoyingBlink'>{0:N2}</span>\""'                          -amountCentsTotal / 100.0);                  }                    result.Append ("}'");  // the comma isn't really necessary here but will be stripped later and is kept for cut&paste consistency of this code block              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_InspectLedgerTxData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-InspectLedgerTxData.aspx.cs,Page_Load,The following statement contains a magic number: if (amountCentsTotal != 0)              {                  // If the transaction is unbalanced' make a huge deal about it                    result.Append ("{\"accountName\":\"<img src='/Images/Icons/iconshock-warning-24px.png' height='16px' width='16px' class='elementFloatFar' />" +                                 JsonSanitize (Resources.Pages.Ledgers.InspectLedgers_UnbalancedTransaction) + "\"'");                    if (amountCentsTotal < 0)                  {                      result.AppendFormat("\"deltaPos\":\"<span class='spanAnnoyingBlink'>{0:N2}</span>\""'                          -amountCentsTotal / 100.0);                  }                  else if (amountCentsTotal > 0)                  {                      result.AppendFormat("\"deltaNeg\":\"<span class='spanAnnoyingBlink'>{0:N2}</span>\""'                          -amountCentsTotal / 100.0);                  }                    result.Append ("}'");  // the comma isn't really necessary here but will be stripped later and is kept for cut&paste consistency of this code block              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: if (renderPresentTime)              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1)); // replaces DateTime.Min...MaxValue                  // get ALL transactions              }              else              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime(1800'1'1)' targetDateTime);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: if (renderPresentTime)              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1)); // replaces DateTime.Min...MaxValue                  // get ALL transactions              }              else              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime(1800'1'1)' targetDateTime);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: if (renderPresentTime)              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime (1800'1'1)' new DateTime(2200'1'1)); // replaces DateTime.Min...MaxValue                  // get ALL transactions              }              else              {                  ledgerExpectedCents = balanceAccount.GetDeltaCents (new DateTime(1800'1'1)' targetDateTime);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: foreach (OutstandingAccount account in outstandingAccounts)              {                  result.Append ("{");                  result.AppendFormat (                      "\"id\":\"{0}\"'" +                      "\"created\":\"{1}\"'" +                      "\"expected\":\"{2}\"'" +                      "\"recipient\":\"{3}\"'" +                      "\"description\":\"{4}\"'" +                      "\"amount\":\"{5:N2}\""'                      account.Identity'                      account.CreatedDateTime.ToShortDateString()'                      (account.ExpectedClosed.Year <= 1950                          ? Global.Global_NA                          : account.ExpectedClosed.ToShortDateString())'                      JsonSanitize (account.Recipient)'                      JsonSanitize (account.Description)'                      account.AmountCents/100.0);                  result.Append ("}'");                  centsTotal += account.AmountCents;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: foreach (OutstandingAccount account in outstandingAccounts)              {                  result.Append ("{");                  result.AppendFormat (                      "\"id\":\"{0}\"'" +                      "\"created\":\"{1}\"'" +                      "\"expected\":\"{2}\"'" +                      "\"recipient\":\"{3}\"'" +                      "\"description\":\"{4}\"'" +                      "\"amount\":\"{5:N2}\""'                      account.Identity'                      account.CreatedDateTime.ToShortDateString()'                      (account.ExpectedClosed.Year <= 1950                          ? Global.Global_NA                          : account.ExpectedClosed.ToShortDateString())'                      JsonSanitize (account.Recipient)'                      JsonSanitize (account.Description)'                      account.AmountCents/100.0);                  result.Append ("}'");                  centsTotal += account.AmountCents;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{2:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterTotal' balanceExpectedCents' centsTotal/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{1:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterLedgerBalance' balanceExpectedCents/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_OutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FormatJson,The following statement contains a magic number: result.AppendFormat ("\"description\":\"{0}\"'\"amount\":\"{1:N2}\""'                  Resources.Pages.Ledgers.ViewOutstandingAccounts_FooterDifference'                  (centsTotal - balanceExpectedCents)/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,OutstandingAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-OutstandingAccounts.aspx.cs,FromCashAdvance,The following statement contains a magic number: OutstandingAccount result = new OutstandingAccount                  {                      AmountCents = advance.AmountCents'                      Description = advance.Description'                      Identity = advance.Identity'                      Recipient = advance.Person.Canonical'                      CreatedDateTime = dateTimePaidOut'                      ExpectedClosed = dateTimePaidOut.AddDays (90)                  };
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: foreach (ExternalBankMismatchingDateTime mismatch in mismatchArray)              {                  string rowId = mismatch.DateTime.ToString ("yyyyMMddHHmmss");                    List<string> childItems = new List<string>();                    foreach (ExternalBankMismatchingRecordDescription mismatchingRecord in mismatch.MismatchingRecords)                  {                      for (int masterIndex = 0; masterIndex < mismatchingRecord.MasterCents.Count(); masterIndex++)                      {                          string dependencyString = string.Empty;                          FinancialTransaction transaction = mismatchingRecord.Transactions[masterIndex];                          object dependency = null;                            if (transaction != null)                          {                              dependency = transaction.Dependency;                          }                            if (dependency != null)                          {                              dependencyString = dependency.GetType().ToString();                              int lastPeriod = dependencyString.LastIndexOf ('.');                              dependencyString = dependencyString.Substring (lastPeriod + 1);                                dependencyString += " #" + (dependency as IHasIdentity).Identity.ToString ("N0");                          }                            childItems.Add ("{\"id\":\"" + rowId + childItems.Count.ToString ("##0") + "\"'\"rowName\":\"" +                                          JsonSanitize (mismatchingRecord.Description) + "\"'\"swarmopsData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.SwarmopsCents[masterIndex]) + "\"'\"masterData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.MasterCents[masterIndex]) + "\"'\"resyncAction\":\"" +                                          JsonSanitize (mismatchingRecord.ResyncActions[masterIndex].ToString()) +                                          "\"'\"notes\":\"" +                                          JsonSanitize (dependencyString) + "\"}");                      }                  }                    string childrenString = String.Join ("'"' childItems.ToArray());                    string rowName = mismatch.DateTime.ToString (profile.DateTimeFormatString);                    string swarmopsData = currentOrganizationCurrency + " " +                                        (mismatch.SwarmopsDeltaCents/100.0).ToString ("N2");                    string masterData = currentOrganizationCurrency + " " +                                      (mismatch.MasterDeltaCents/100.0).ToString ("N2");                    string notes = "Diff: " +                                 ((mismatch.MasterDeltaCents - mismatch.SwarmopsDeltaCents)/100.0).ToString ("N2");                    items.Add ("{\"id\":\"" + rowId + "\"'\"rowName\":\"" + rowName + "\"'\"swarmopsData\":\"" +                             JsonSanitize (swarmopsData) + "\"'\"masterData\":\"" + JsonSanitize (masterData) +                             "\"'\"notes\":\"" + JsonSanitize (notes) + "\"'\"state\":\"closed\"'\"children\":[" +                             childrenString + "]}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: foreach (ExternalBankMismatchingDateTime mismatch in mismatchArray)              {                  string rowId = mismatch.DateTime.ToString ("yyyyMMddHHmmss");                    List<string> childItems = new List<string>();                    foreach (ExternalBankMismatchingRecordDescription mismatchingRecord in mismatch.MismatchingRecords)                  {                      for (int masterIndex = 0; masterIndex < mismatchingRecord.MasterCents.Count(); masterIndex++)                      {                          string dependencyString = string.Empty;                          FinancialTransaction transaction = mismatchingRecord.Transactions[masterIndex];                          object dependency = null;                            if (transaction != null)                          {                              dependency = transaction.Dependency;                          }                            if (dependency != null)                          {                              dependencyString = dependency.GetType().ToString();                              int lastPeriod = dependencyString.LastIndexOf ('.');                              dependencyString = dependencyString.Substring (lastPeriod + 1);                                dependencyString += " #" + (dependency as IHasIdentity).Identity.ToString ("N0");                          }                            childItems.Add ("{\"id\":\"" + rowId + childItems.Count.ToString ("##0") + "\"'\"rowName\":\"" +                                          JsonSanitize (mismatchingRecord.Description) + "\"'\"swarmopsData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.SwarmopsCents[masterIndex]) + "\"'\"masterData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.MasterCents[masterIndex]) + "\"'\"resyncAction\":\"" +                                          JsonSanitize (mismatchingRecord.ResyncActions[masterIndex].ToString()) +                                          "\"'\"notes\":\"" +                                          JsonSanitize (dependencyString) + "\"}");                      }                  }                    string childrenString = String.Join ("'"' childItems.ToArray());                    string rowName = mismatch.DateTime.ToString (profile.DateTimeFormatString);                    string swarmopsData = currentOrganizationCurrency + " " +                                        (mismatch.SwarmopsDeltaCents/100.0).ToString ("N2");                    string masterData = currentOrganizationCurrency + " " +                                      (mismatch.MasterDeltaCents/100.0).ToString ("N2");                    string notes = "Diff: " +                                 ((mismatch.MasterDeltaCents - mismatch.SwarmopsDeltaCents)/100.0).ToString ("N2");                    items.Add ("{\"id\":\"" + rowId + "\"'\"rowName\":\"" + rowName + "\"'\"swarmopsData\":\"" +                             JsonSanitize (swarmopsData) + "\"'\"masterData\":\"" + JsonSanitize (masterData) +                             "\"'\"notes\":\"" + JsonSanitize (notes) + "\"'\"state\":\"closed\"'\"children\":[" +                             childrenString + "]}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,Page_Load,The following statement contains a magic number: foreach (ExternalBankMismatchingDateTime mismatch in mismatchArray)              {                  string rowId = mismatch.DateTime.ToString ("yyyyMMddHHmmss");                    List<string> childItems = new List<string>();                    foreach (ExternalBankMismatchingRecordDescription mismatchingRecord in mismatch.MismatchingRecords)                  {                      for (int masterIndex = 0; masterIndex < mismatchingRecord.MasterCents.Count(); masterIndex++)                      {                          string dependencyString = string.Empty;                          FinancialTransaction transaction = mismatchingRecord.Transactions[masterIndex];                          object dependency = null;                            if (transaction != null)                          {                              dependency = transaction.Dependency;                          }                            if (dependency != null)                          {                              dependencyString = dependency.GetType().ToString();                              int lastPeriod = dependencyString.LastIndexOf ('.');                              dependencyString = dependencyString.Substring (lastPeriod + 1);                                dependencyString += " #" + (dependency as IHasIdentity).Identity.ToString ("N0");                          }                            childItems.Add ("{\"id\":\"" + rowId + childItems.Count.ToString ("##0") + "\"'\"rowName\":\"" +                                          JsonSanitize (mismatchingRecord.Description) + "\"'\"swarmopsData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.SwarmopsCents[masterIndex]) + "\"'\"masterData\":\"" +                                          PrintNullableCents (currentOrganizationCurrency'                                              mismatchingRecord.MasterCents[masterIndex]) + "\"'\"resyncAction\":\"" +                                          JsonSanitize (mismatchingRecord.ResyncActions[masterIndex].ToString()) +                                          "\"'\"notes\":\"" +                                          JsonSanitize (dependencyString) + "\"}");                      }                  }                    string childrenString = String.Join ("'"' childItems.ToArray());                    string rowName = mismatch.DateTime.ToString (profile.DateTimeFormatString);                    string swarmopsData = currentOrganizationCurrency + " " +                                        (mismatch.SwarmopsDeltaCents/100.0).ToString ("N2");                    string masterData = currentOrganizationCurrency + " " +                                      (mismatch.MasterDeltaCents/100.0).ToString ("N2");                    string notes = "Diff: " +                                 ((mismatch.MasterDeltaCents - mismatch.SwarmopsDeltaCents)/100.0).ToString ("N2");                    items.Add ("{\"id\":\"" + rowId + "\"'\"rowName\":\"" + rowName + "\"'\"swarmopsData\":\"" +                             JsonSanitize (swarmopsData) + "\"'\"masterData\":\"" + JsonSanitize (masterData) +                             "\"'\"notes\":\"" + JsonSanitize (notes) + "\"'\"state\":\"closed\"'\"children\":[" +                             childrenString + "]}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,PrintNullableCents,The following statement contains a magic number: return currency + " " + (cents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,PrintCents,The following statement contains a magic number: return (cents/100.0).ToString ("N2");
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,PopulateLookups,The following statement contains a magic number: foreach (FinancialAccount account in accounts)              {                  // Get current balances                    // TODO: There must be a more optimized way to do this' like with a database optimization. This                  // is a HORRIBLY expensive operation' as it performs one complex database query PER ACCOUNT.                    if (account.AccountType == FinancialAccountType.Cost ||                      account.AccountType == FinancialAccountType.Income)                  {                      this._singleBalanceLookup[account.Identity] =                          -account.GetDeltaCents (new DateTime (this._year' 1' 1)'                              new DateTime (this._year + 1' 1' 1));                      this._singleBudgetLookup[account.Identity] = account.GetBudgetCents (this._year);                  }                  else if (account.AccountType == FinancialAccountType.Asset ||                           account.AccountType == FinancialAccountType.Debt)                  {                      this._singleBalanceLookup[account.Identity] = account.GetDeltaCents (new DateTime (1900' 1' 1)'                          new DateTime (this._year + 1' 1' 1));                      this._singleBudgetLookup[account.Identity] = 0; // balance accounts don't have budgets                  }                  else                  {                      throw new InvalidOperationException ("Account with invalid type encountered - " +                                                           account.AccountType);                  }                    // copy to treeLookups                    this._treeBalanceLookup[account.Identity] = this._singleBalanceLookup[account.Identity];                  this._treeBudgetLookup[account.Identity] = this._singleBudgetLookup[account.Identity];              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: if (treeValue != 0 && singleValue == 0)              {                  return string.Format (CultureInfo.CurrentCulture'                      "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>"'                      accountId' treeValue/100.00);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncDataPreview,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-ResyncPreview.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "<span class=\\\"accountplandata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"accountplandata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>"'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,Json_UnbalancedTransactions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\Json-UnbalancedTransactions.aspx.cs,Page_Load,The following statement contains a magic number: if (                  CurrentAuthority.HasAccess (new Access (CurrentOrganization' AccessAspect.BookkeepingDetails' AccessType.Read)))              {                  foreach (FinancialTransaction transaction in unbalancedTransactions)                  {                      string accountName = string.Empty;                        FinancialTransactionRows txRows = transaction.Rows;                      if (txRows.Count > 1)                      {                          accountName = Resources.Global.Global_Several_Display;                      }                      else                      {                          // one transaction row (we know there's not zero rows' because the transaction is unbalanced' which requires at least one nonzero row)                          accountName = txRows[0].AccountName;                      }                        string row =                          String.Format (                          "\"id\":\"{0:N0}\"'\"description\":\"{1}\"'\"accountName\":\"{2}\"'\"delta\":\"{3:+#'#.00;−#'#.00}\"'\"dateTime\":\"{4:yyyy-MMM-dd HH:mm}\""'                              transaction.OrganizationSequenceId' JsonSanitize (transaction.Description)' JsonSanitize (accountName)' txRows.AmountCentsTotal / 100.0' transaction.DateTime);                        row +=                          String.Format (                              "'\"action\":\"<img src='/Images/Icons/iconshock-wrench-128x96px-centered.png' height='16' width='24' class='LocalIconFix' txId='{0}' />\""'                              transaction.Identity);                        rows.Add ("{" + row + "}");                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,GetProcessingProgress,The following statement contains a magic number: lock (_staticDataLookup)              {                  int percentReady = (int) _staticDataLookup[key];                    if (percentReady >= 100)                  {                      // copy result from static class-scope variable to session-scope variable                      HttpContext.Current.Session["LedgersResync" + guid + "MismatchArray"] =                          _staticDataLookup[guid + "MismatchArray"];                        HttpContext.Current.Session["LedgersResync" + guid + "Profile"] =                          _staticDataLookup[guid + "Profile"];                        HttpContext.Current.Session["LedgersResync" + guid + "Account"] =                          _staticDataLookup[guid + "Account"];                        _staticDataLookup[guid + "MismatchArray"] = null;                      // clear the static object' which will otherwise live on                      _staticDataLookup[guid + "Profile"] = null;                        // TODO: Clear all _staticDataLookup starting with guid (leaks memory slightly)                  }                    return percentReady;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The following statement contains a magic number: long autoDepositDonationCents = 1000*100;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ExecuteResync,The following statement contains a magic number: long autoDepositDonationCents = 1000*100;
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The following statement contains a magic number: using (                  StreamReader reader = new StreamReader (StorageRoot + uploadedDoc.ServerFileName'                      Encoding.GetEncoding (1252)))              {                  externalData.LoadData (reader' ((ProcessThreadArguments) args).Organization);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ResyncExternalAccount,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ResyncExternalAccount.aspx.cs,ProcessUploadThread,The following statement contains a magic number: while (currentRecordIndex < externalData.Records.Length)              {                  DateTime lastTimestamp = timeWalker;                    timeWalker = externalData.Records[currentRecordIndex].DateTime;                    long swarmopsDeltaCents = account.GetDeltaCents (lastTimestamp.AddSeconds (1)' timeWalker.AddSeconds (1));                  // "AddSeconds" because DeltaCents operates on ">= lowbound' < highbound"                  int timestampStartIndex = currentRecordIndex;                  long masterDeltaCents = externalData.Records[currentRecordIndex++].TransactionNetCents;                  int masterTransactionCount = 1;                    while (currentRecordIndex < externalData.Records.Length &&                         externalData.Records[currentRecordIndex].DateTime == timeWalker)                  {                      masterDeltaCents += externalData.Records[currentRecordIndex++].TransactionNetCents;                      masterTransactionCount++;                  }                    if (masterDeltaCents != swarmopsDeltaCents)                  {                      // We have a mismatch. Add it to the list.                        ExternalBankMismatchingDateTime newMismatch = new ExternalBankMismatchingDateTime();                      newMismatch.DateTime = timeWalker;                      newMismatch.MasterDeltaCents = masterDeltaCents;                      newMismatch.MasterTransactionCount = masterTransactionCount;                      newMismatch.SwarmopsDeltaCents = swarmopsDeltaCents;                      newMismatch.SwarmopsTransactionCount = 0; // TODO                        // Load transactions from both sources. First' create the interim construction object.                        ExternalBankMismatchConstruction mismatchConstruction = new ExternalBankMismatchConstruction();                        // Load from Master                        for (int innerRecordIndex = timestampStartIndex;                          innerRecordIndex < currentRecordIndex;                          innerRecordIndex++)                      {                          string description = externalData.Records[innerRecordIndex].Description.Replace ("  "' " ");                            if (!mismatchConstruction.Master.ContainsKey (description))                          {                              mismatchConstruction.Master[description] =                                  new ExternalBankMismatchingRecordConstruction();                          }                            mismatchConstruction.Master[description].Cents.Add (                              externalData.Records[innerRecordIndex].TransactionNetCents);                          mismatchConstruction.Master[description].Transactions.Add (null);                          // no dependencies on the master side' only on swarmops side                      }                        // Load from Swarmops                        FinancialAccountRows swarmopsTransactionRows =                          account.GetRowsFar (lastTimestamp' timeWalker);                      // the "select far" is a boundary < x <= boundary selector. Default is boundary <= x < boundary.                        Dictionary<int' FinancialTransaction> lookupTransactions =                          new Dictionary<int' FinancialTransaction>();                        // note all transaction IDs' then sum up per transaction                        foreach (FinancialAccountRow swarmopsTransactionRow in swarmopsTransactionRows)                      {                          lookupTransactions[swarmopsTransactionRow.FinancialTransactionId] =                              swarmopsTransactionRow.Transaction;                      }                          foreach (FinancialTransaction transaction in lookupTransactions.Values)                      {                          string description = transaction.Description.Replace ("  "' " ");                          // for legacy compatibility with new importer                            if (!mismatchConstruction.Swarmops.ContainsKey (description))                          {                              mismatchConstruction.Swarmops[description] =                                  new ExternalBankMismatchingRecordConstruction();                          }                            long cents = transaction[account];                            if (cents != 0) // only add nonzero records                          {                              mismatchConstruction.Swarmops[description].Cents.Add (transaction[account]);                              mismatchConstruction.Swarmops[description].Transactions.Add (transaction);                          }                      }                        // Then' parse the intermediate construction object to the presentation-and-action object.                        Dictionary<string' ExternalBankMismatchingRecordDescription> mismatchingRecordList =                          new Dictionary<string' ExternalBankMismatchingRecordDescription>();                        foreach (string masterKey in mismatchConstruction.Master.Keys)                      {                          Dictionary<int' bool> checkMasterIndex = new Dictionary<int' bool>();                          Dictionary<int' bool> checkSwarmopsIndex = new Dictionary<int' bool>();                            // For each key and entry for each key;                            // 1) locate an exact corresponding amount in swarmops records and log; failing that'                          // 2) if exactly one record left in master and swarmops records' log; failing that'                          // 3) log the rest of the master OR rest of swarmops records with no corresponding                          //    equivalent with counterpart. (May produce bad results if 2 consistent mismatches                          //    for every description.)                            ExternalBankMismatchingRecordDescription newRecord =                              new ExternalBankMismatchingRecordDescription();                          newRecord.Description = masterKey;                            List<long> masterCentsList = new List<long>();                          List<long> swarmopsCentsList = new List<long>();                          List<object> dependenciesList = new List<object>();                          List<FinancialTransaction> transactionsList = new List<FinancialTransaction>();                          List<ExternalBankMismatchResyncAction> actionsList =                              new List<ExternalBankMismatchResyncAction>();                            // STEP 1 - locate all identical matches                            if (mismatchConstruction.Swarmops.ContainsKey (masterKey))                          {                              for (int masterIndex = 0;                                  masterIndex < mismatchConstruction.Master[masterKey].Cents.Count;                                  masterIndex++)                              {                                  // no "continue" necessary on first run-through; nothing has been checked off yet                                    long findMasterCents = mismatchConstruction.Master[masterKey].Cents[masterIndex];                                    for (int swarmopsIndex = 0;                                      swarmopsIndex < mismatchConstruction.Swarmops[masterKey].Cents.Count;                                      swarmopsIndex++)                                  {                                      if (checkSwarmopsIndex.ContainsKey (swarmopsIndex))                                      {                                          continue;                                          // may have been checked off already in the rare case of twin identical amounts                                      }                                        if (findMasterCents == mismatchConstruction.Swarmops[masterKey].Cents[swarmopsIndex])                                      {                                          // There is a match as per case 1. Record both' mark both as used' continue.                                            masterCentsList.Add (findMasterCents);                                          swarmopsCentsList.Add (                                              mismatchConstruction.Swarmops[masterKey].Cents[swarmopsIndex]);                                          // should be equal' we're defensive here                                          transactionsList.Add (                                              mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex]);                                          dependenciesList.Add (                                              mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex]                                                  .Dependency);                                          actionsList.Add (ExternalBankMismatchResyncAction.NoAction);                                            checkMasterIndex[masterIndex] = true;                                          checkSwarmopsIndex[swarmopsIndex] = true;                                            break;                                      }                                  }                              }                          }                            // STEP 2 - if exactly one record left on both sides' connect and log as mismatching record                            // TODO: improve logic to handle same number of records left on both sides                            if (mismatchConstruction.Swarmops.ContainsKey (masterKey) &&                              mismatchConstruction.Master[masterKey].Cents.Count - checkMasterIndex.Keys.Count == 1 &&                              mismatchConstruction.Swarmops[masterKey].Cents.Count - checkSwarmopsIndex.Keys.Count == 1)                          {                              for (int masterIndex = 0;                                  masterIndex < mismatchConstruction.Master[masterKey].Cents.Count;                                  masterIndex++)                              {                                  if (checkMasterIndex.ContainsKey (masterIndex))                                  {                                      continue; // This will fire for all but one indexes                                  }                                    long findMasterCents = mismatchConstruction.Master[masterKey].Cents[masterIndex];                                    for (int swarmopsIndex = 0;                                      swarmopsIndex < mismatchConstruction.Swarmops[masterKey].Cents.Count;                                      swarmopsIndex++)                                  {                                      if (checkSwarmopsIndex.ContainsKey (swarmopsIndex))                                      {                                          continue;                                      }                                        masterCentsList.Add (findMasterCents);                                      swarmopsCentsList.Add (mismatchConstruction.Swarmops[masterKey].Cents[swarmopsIndex]);                                      dependenciesList.Add (                                          mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex].Dependency);                                      transactionsList.Add (                                          mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex]);                                      actionsList.Add (ExternalBankMismatchResyncAction.RewriteSwarmops);                                        checkMasterIndex[masterIndex] = true;                                      checkSwarmopsIndex[swarmopsIndex] = true;                                  }                              }                          }                            // STEP 3 - log remaining records on both sides as missing counterparts. Only one of these should fire.                            // STEP 3a - log remaining on Master side                            if (mismatchConstruction.Master[masterKey].Cents.Count > checkMasterIndex.Keys.Count)                          {                              for (int masterIndex = 0;                                  masterIndex < mismatchConstruction.Master[masterKey].Cents.Count;                                  masterIndex++)                              {                                  if (checkMasterIndex.ContainsKey (masterIndex))                                  {                                      continue;                                  }                                    masterCentsList.Add (mismatchConstruction.Master[masterKey].Cents[masterIndex]);                                  swarmopsCentsList.Add (0); // null equivalent; invalid value                                  dependenciesList.Add (null);                                  transactionsList.Add (null);                                  actionsList.Add (ExternalBankMismatchResyncAction.CreateSwarmops);                                    checkMasterIndex[masterIndex] = true;                              }                          }                            // STEP 3b - log remaining on Swarmops side                            if (mismatchConstruction.Swarmops.ContainsKey (masterKey) &&                              mismatchConstruction.Swarmops[masterKey].Cents.Count > checkSwarmopsIndex.Keys.Count)                          {                              for (int swarmopsIndex = 0;                                  swarmopsIndex < mismatchConstruction.Swarmops[masterKey].Cents.Count;                                  swarmopsIndex++)                              {                                  if (checkSwarmopsIndex.ContainsKey (swarmopsIndex))                                  {                                      continue;                                  }                                    masterCentsList.Add (0); // null equivalent; invalid value                                  swarmopsCentsList.Add (mismatchConstruction.Swarmops[masterKey].Cents[swarmopsIndex]);                                  transactionsList.Add (                                      mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex]);                                    if (mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex].Dependency !=                                      null)                                  {                                      dependenciesList.Add (                                          mismatchConstruction.Swarmops[masterKey].Transactions[swarmopsIndex].Dependency);                                      actionsList.Add (ExternalBankMismatchResyncAction.ManualAction); // can't auto                                  }                                  else                                  {                                      dependenciesList.Add (null);                                      actionsList.Add (ExternalBankMismatchResyncAction.DeleteSwarmops);                                  }                                    checkMasterIndex[swarmopsIndex] = true;                              }                          }                            newRecord.MasterCents = masterCentsList.ToArray();                          newRecord.SwarmopsCents = swarmopsCentsList.ToArray();                          newRecord.ResyncActions = actionsList.ToArray();                          // newRecord.TransactionDependencies = dependenciesList.ToArray();                          newRecord.Transactions = transactionsList.ToArray();                            mismatchingRecordList[masterKey] = newRecord;                      }                        // Finally' add the transactions that were (described) in Swarmops but not in Master                        foreach (string swarmopsKey in mismatchConstruction.Swarmops.Keys)                      {                          if (!mismatchingRecordList.ContainsKey (swarmopsKey))                          {                              mismatchingRecordList[swarmopsKey] = new ExternalBankMismatchingRecordDescription();                              mismatchingRecordList[swarmopsKey].Description = swarmopsKey;                                mismatchingRecordList[swarmopsKey].SwarmopsCents =                                  mismatchConstruction.Swarmops[swarmopsKey].Cents.ToArray();                              mismatchingRecordList[swarmopsKey].Transactions =                                  mismatchConstruction.Swarmops[swarmopsKey].Transactions.ToArray();                              mismatchingRecordList[swarmopsKey].MasterCents =                                  new long[mismatchConstruction.Swarmops[swarmopsKey].Cents.Count]; // inits to zero                                mismatchingRecordList[swarmopsKey].ResyncActions =                                  new ExternalBankMismatchResyncAction[                                      mismatchConstruction.Swarmops[swarmopsKey].Cents.Count];                              for (int index = 0;                                  index < mismatchingRecordList[swarmopsKey].ResyncActions.Length;                                  index++)                              {                                  mismatchingRecordList[swarmopsKey].ResyncActions[index] =                                      ExternalBankMismatchResyncAction.DeleteSwarmops;                              }                          }                      }                        newMismatch.MismatchingRecords = mismatchingRecordList.Values.ToArray();                        mismatchList.Add (newMismatch);                  }                    int percentProcessed = (int) (currentRecordIndex*100L/externalData.Records.Length);                    lock (_staticDataLookup)                  {                      if (percentProcessed > 1)                      {                          _staticDataLookup[guid + "PercentRead"] = percentProcessed;                          // for the progress bar to update async                      }                        if (percentProcessed > 99)                      {                          // Placed inside loop to have a contiguous lock block' even though it decreases performance.                          // Should normally be placed just outside.                          _staticDataLookup[guid + "MismatchArray"] = mismatchList.ToArray();                          _staticDataLookup[guid + "Account"] = account;                      }                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  Localize();                    if (!Page.IsPostBack)                  {                      int year = DateTime.Today.Year - 1;                      int firstFiscalYear = CurrentOrganization.FirstFiscalYear;                        this.DropYears.Items.Add (new ListItem (Global.Global_AsOfNow' "Now"));                        while (year >= firstFiscalYear)                      {                          this.DropYears.Items.Add (new ListItem (new DateTime (year' 12' 31).ToShortDateString()'                              year.ToString (CultureInfo.InvariantCulture)));                          year--;                      }                        this.DropAccounts.Items.Add (new ListItem (Global.Financial_ExpenseClaimsLong'                          "ExpenseClaims"));                      this.DropAccounts.Items.Add (new ListItem (Global.Financial_CashAdvancesLong' "CashAdvances"));                        Localize();                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers,ViewOutstandingAccounts,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\ViewOutstandingAccounts.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  Localize();                    if (!Page.IsPostBack)                  {                      int year = DateTime.Today.Year - 1;                      int firstFiscalYear = CurrentOrganization.FirstFiscalYear;                        this.DropYears.Items.Add (new ListItem (Global.Global_AsOfNow' "Now"));                        while (year >= firstFiscalYear)                      {                          this.DropYears.Items.Add (new ListItem (new DateTime (year' 12' 31).ToShortDateString()'                              year.ToString (CultureInfo.InvariantCulture)));                          year--;                      }                        this.DropAccounts.Items.Add (new ListItem (Global.Financial_ExpenseClaimsLong'                          "ExpenseClaims"));                      this.DropAccounts.Items.Add (new ListItem (Global.Financial_CashAdvancesLong' "CashAdvances"));                        Localize();                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The following statement contains a magic number: while (_minKey < yearLoop * 1000)  // at least one more year with data              {                  List<string> monthElements = new List<string>();                  SalaryData yearData = new SalaryData();                    for (int month = 12; month >= 1; month--)                  {                      int key = yearLoop*100 + month;                      if (data.ContainsKey (key))                      {                          monthElements.Add (WriteElement (key' new DateTime (yearLoop' month' 1).ToString("yyyy MMMM")' data [key]));                          yearData.GrossSalaryCents += data[key].GrossSalaryCents;                          yearData.AdditiveTaxCents += data[key].AdditiveTaxCents;                          yearData.DeductedTaxCents += data[key].DeductedTaxCents;                      }                  }                    if (monthElements.Count > 0)                  {                      yearElements.Add (WriteElement (yearLoop' String.Format (Resources.Global.Global_YearX' yearLoop)' yearData' monthElements));                  }                    yearLoop--;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The following statement contains a magic number: while (_minKey < yearLoop * 1000)  // at least one more year with data              {                  List<string> monthElements = new List<string>();                  SalaryData yearData = new SalaryData();                    for (int month = 12; month >= 1; month--)                  {                      int key = yearLoop*100 + month;                      if (data.ContainsKey (key))                      {                          monthElements.Add (WriteElement (key' new DateTime (yearLoop' month' 1).ToString("yyyy MMMM")' data [key]));                          yearData.GrossSalaryCents += data[key].GrossSalaryCents;                          yearData.AdditiveTaxCents += data[key].AdditiveTaxCents;                          yearData.DeductedTaxCents += data[key].DeductedTaxCents;                      }                  }                    if (monthElements.Count > 0)                  {                      yearElements.Add (WriteElement (yearLoop' String.Format (Resources.Global.Global_YearX' yearLoop)' yearData' monthElements));                  }                    yearLoop--;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,Page_Load,The following statement contains a magic number: while (_minKey < yearLoop * 1000)  // at least one more year with data              {                  List<string> monthElements = new List<string>();                  SalaryData yearData = new SalaryData();                    for (int month = 12; month >= 1; month--)                  {                      int key = yearLoop*100 + month;                      if (data.ContainsKey (key))                      {                          monthElements.Add (WriteElement (key' new DateTime (yearLoop' month' 1).ToString("yyyy MMMM")' data [key]));                          yearData.GrossSalaryCents += data[key].GrossSalaryCents;                          yearData.AdditiveTaxCents += data[key].AdditiveTaxCents;                          yearData.DeductedTaxCents += data[key].DeductedTaxCents;                      }                  }                    if (monthElements.Count > 0)                  {                      yearElements.Add (WriteElement (yearLoop' String.Format (Resources.Global.Global_YearX' yearLoop)' yearData' monthElements));                  }                    yearLoop--;              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  int monthKey = salary.PayoutDate.Year*100 + salary.PayoutDate.Month;                    if (!result.ContainsKey (monthKey))                  {                      result[monthKey] = new SalaryData();                  }                    result[monthKey].GrossSalaryCents += salary.GrossSalaryCents;                  result[monthKey].AdditiveTaxCents += salary.AdditiveTaxCents;                  result[monthKey].DeductedTaxCents += salary.SubtractiveTaxCents;                    if (monthKey < _minKey)                  {                      _minKey = monthKey;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,WriteElement,The following statement contains a magic number: element += String.Format("'\"grossPay\":\"{0:N0}\"'\"additiveTax\":\"{1:N0}\"'\"deductedTax\":\"{2:N0}\"'\"costTotal\":\"{3:N0}\"'\"taxTotal\":\"{4:N0}\"'\"forms\":\"{5}\""'                  data.GrossSalaryCents / 100.0' data.AdditiveTaxCents / 100.0' data.DeductedTaxCents / 100.0' (data.GrossSalaryCents + data.AdditiveTaxCents) / 100.0'                  (data.AdditiveTaxCents + data.DeductedTaxCents) / 100.0' image.Replace ("\""' "\\\""));
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"monthYear\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"closed\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"monthYear\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"closed\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"monthYear\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"closed\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"monthYear\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"closed\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,RecurseReport,The following statement contains a magic number: foreach (AnnualReportLine line in reportLines)              {                  string element = string.Format ("\"id\":\"{0}\"'\"monthYear\":\"{1}\""' line.AccountId'                      JsonSanitize (line.AccountName));                    if (line.Children.Count > 0)                  {                      element += "'\"lastYear\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.PreviousYear'                                     line.AccountValues.PreviousYear);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format ("'\"q{0}\":"' quarter) +                                     JsonDualString (line.AccountId' line.AccountTreeValues.Quarters[quarter - 1]'                                         line.AccountValues.Quarters[quarter - 1]);                      }                        element += "'\"ytd\":" +                                 JsonDualString (line.AccountId' line.AccountTreeValues.ThisYear'                                     line.AccountValues.ThisYear);                          element += "'\"state\":\"closed\"'\"children\":" + RecurseReport (line.Children);                  }                  else                  {                      element += string.Format (CultureInfo.CurrentCulture' "'\"lastYear\":\"{0:N0}\""'                          (double) line.AccountValues.PreviousYear/100.0);                        for (int quarter = 1; quarter <= 4; quarter++)                      {                          element += string.Format (CultureInfo.CurrentCulture' "'\"q{0}\":\"{1:N0}\""' quarter'                              line.AccountValues.Quarters[quarter - 1]/100.0);                      }                        element += string.Format (CultureInfo.CurrentCulture' "'\"ytd\":\"{0:N0}\""'                          (double) line.AccountValues.ThisYear/100.0);                  }                    elements.Add ("{" + element + "}");              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: if (treeValue != 0 && singleValue == 0)              {                  return string.Format (CultureInfo.CurrentCulture'                      "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">&nbsp;</span>\""'                      accountId' treeValue/100.00);              }
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Frontend.Pages.v5.Ledgers.TaxForms,Json_PayrollData,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\TaxForms\Json-Payroll-TaxFormData.aspx.cs,JsonDualString,The following statement contains a magic number: return string.Format (CultureInfo.CurrentCulture'                  "\"<span class=\\\"profitlossdata-collapsed-{0}\\\"><strong>&Sigma;</strong> {1:N0}</span><span class=\\\"profitlossdata-expanded-{0}\\\" style=\\\"display:none\\\">{2:N0}</span>\""'                  accountId' treeValue/100.0' singleValue/100.0);
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,Page_Load,The following statement contains a magic number: if (PilotInstallationIds.IsPilot(PilotInstallationIds.SwarmopsLive) && CurrentOrganization.Identity == 7)              // EPA              {                  supportedHardcode = true;              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,Page_Load,The following statement contains a magic number: if (PilotInstallationIds.IsPilot(PilotInstallationIds.SwarmopsLive) && CurrentOrganization.Identity == 8)              // RFF              {                  supportedHardcode = true;              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetAccountUploadInstructions,The following statement contains a magic number: switch (accountId)              {                  case 0:                      return string.Empty;                  case 1:                  case 29:                      return "(Instruct Stock-SE-SEB)";                  case 2:                      return "(Instruct Stock-Global-Paypal)";                  case 150:                      return "(Instruct Stock-DE-Postbank)";                  default:                      throw new NotImplementedException();                }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetAccountUploadInstructions,The following statement contains a magic number: switch (accountId)              {                  case 0:                      return string.Empty;                  case 1:                  case 29:                      return "(Instruct Stock-SE-SEB)";                  case 2:                      return "(Instruct Stock-Global-Paypal)";                  case 150:                      return "(Instruct Stock-DE-Postbank)";                  default:                      throw new NotImplementedException();                }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetAccountUploadInstructions,The following statement contains a magic number: switch (accountId)              {                  case 0:                      return string.Empty;                  case 1:                  case 29:                      return "(Instruct Stock-SE-SEB)";                  case 2:                      return "(Instruct Stock-Global-Paypal)";                  case 150:                      return "(Instruct Stock-DE-Postbank)";                  default:                      throw new NotImplementedException();                }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                      break;                  case ImportResultsCategory.Questionable:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs (resultDetail.BalanceMismatchCents/100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                             (string) GuidCache.Get(guid + "-Exception") + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException ("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                      break;                  case ImportResultsCategory.Questionable:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs (resultDetail.BalanceMismatchCents/100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                             (string) GuidCache.Get(guid + "-Exception") + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException ("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,GetReportedImportResults,The following statement contains a magic number: switch (category)              {                  case ImportResultsCategory.Good:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsGood'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          resultDetail.EarliestTransaction' resultDetail.LatestTransaction);                      break;                  case ImportResultsCategory.Questionable:                      html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsQuestionable'                          resultDetail.TransactionsImported' resultDetail.DuplicateTransactions'                          Math.Abs (resultDetail.BalanceMismatchCents/100.0)' resultDetail.CurrencyCode);                      break;                  case ImportResultsCategory.Bad:                      html = Resources.Pages.Ledgers.UploadBankFiles_ResultsBad + "<!-- Technical Information: " +                             (string) GuidCache.Get(guid + "-Exception") + "-->";                      break;                  case ImportResultsCategory.Payments:                      if (paymentsDetail.DuplicatePaymentCount > 0)                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPaymentsWithDupes'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code' paymentsDetail.DuplicatePaymentGroupCount'                              paymentsDetail.DuplicatePaymentCount);                      }                      else                      {                          html = String.Format (Resources.Pages.Ledgers.UploadBankFiles_ResultsPayments'                              paymentsDetail.PaymentGroupCount' paymentsDetail.PaymentCount'                              paymentsDetail.PaymentCentsTotal/100.0'                              paymentsDetail.Currency.Code);                      }                      break;                  default:                      throw new NotImplementedException ("Unhandled ImportResultCategory");              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessUploadThread,The following statement contains a magic number: try              {                  FinancialAccount account = ((ProcessThreadArguments) args).Account;                    ExternalBankData externalData = new ExternalBankData();                  externalData.Profile = account.ExternalBankDataProfile;                    if (fileType == BankFileType.Unknown)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          try                          {                              externalData.LoadData (reader' organization);                              // catch here and set result to BAD                              ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                                GuidCache.Set (guid + "-ResultDetails"' results);                              if (results.AccountBalanceMatchesBank)                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                              }                              else                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                              }                          }                          catch (Exception e)                          {                              try                              {                                  reader.BaseStream.Position = 0; // rewind stream to retry parse with different file type                                    // Try a payment file instead                                  ImportedPaymentData paymentData = ImportBankgiroSE(reader' currentUser' organization);                                    // Apparently' we were successful                                    GuidCache.Set(guid + "-Result"' ImportResultsCategory.Payments);                                  GuidCache.Set(guid + "-ResultDetails"' paymentData);                              }                              catch (Exception innerException)                              {                                  // rethrow the original exception                                    throw e;                              }                          }                      }                  }                    if (fileType == BankFileType.AccountStatement)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          externalData.LoadData (reader' ((ProcessThreadArguments) args).Organization);                          // catch here and set result to BAD                          ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                            GuidCache.Set (guid + "-ResultDetails"' results);                          if (results.AccountBalanceMatchesBank)                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                          }                          else                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                          }                      }                  }                  else if (fileType == BankFileType.PaymentDetails)                  {                      // Get reader factory from ExternalBankData                        throw new NotImplementedException ("Need to implement new flexible payment reader structure");                        // IBankDataPaymentsReader paymentsReader = externalData.GetPaymentsReader();                      // then read                  }              }              catch (Exception e)              {                  GuidCache.Set (guid + "-Exception"' e.ToString());                                }              finally              {                  GuidCache.Set (guid + "-Progress"' 100); // only here may the caller fetch the results                  uploadedDoc.Delete(); // document no longer needed after processing' no matter the result              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessUploadThread,The following statement contains a magic number: try              {                  FinancialAccount account = ((ProcessThreadArguments) args).Account;                    ExternalBankData externalData = new ExternalBankData();                  externalData.Profile = account.ExternalBankDataProfile;                    if (fileType == BankFileType.Unknown)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          try                          {                              externalData.LoadData (reader' organization);                              // catch here and set result to BAD                              ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                                GuidCache.Set (guid + "-ResultDetails"' results);                              if (results.AccountBalanceMatchesBank)                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                              }                              else                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                              }                          }                          catch (Exception e)                          {                              try                              {                                  reader.BaseStream.Position = 0; // rewind stream to retry parse with different file type                                    // Try a payment file instead                                  ImportedPaymentData paymentData = ImportBankgiroSE(reader' currentUser' organization);                                    // Apparently' we were successful                                    GuidCache.Set(guid + "-Result"' ImportResultsCategory.Payments);                                  GuidCache.Set(guid + "-ResultDetails"' paymentData);                              }                              catch (Exception innerException)                              {                                  // rethrow the original exception                                    throw e;                              }                          }                      }                  }                    if (fileType == BankFileType.AccountStatement)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          externalData.LoadData (reader' ((ProcessThreadArguments) args).Organization);                          // catch here and set result to BAD                          ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                            GuidCache.Set (guid + "-ResultDetails"' results);                          if (results.AccountBalanceMatchesBank)                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                          }                          else                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                          }                      }                  }                  else if (fileType == BankFileType.PaymentDetails)                  {                      // Get reader factory from ExternalBankData                        throw new NotImplementedException ("Need to implement new flexible payment reader structure");                        // IBankDataPaymentsReader paymentsReader = externalData.GetPaymentsReader();                      // then read                  }              }              catch (Exception e)              {                  GuidCache.Set (guid + "-Exception"' e.ToString());                                }              finally              {                  GuidCache.Set (guid + "-Progress"' 100); // only here may the caller fetch the results                  uploadedDoc.Delete(); // document no longer needed after processing' no matter the result              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessUploadThread,The following statement contains a magic number: try              {                  FinancialAccount account = ((ProcessThreadArguments) args).Account;                    ExternalBankData externalData = new ExternalBankData();                  externalData.Profile = account.ExternalBankDataProfile;                    if (fileType == BankFileType.Unknown)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          try                          {                              externalData.LoadData (reader' organization);                              // catch here and set result to BAD                              ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                                GuidCache.Set (guid + "-ResultDetails"' results);                              if (results.AccountBalanceMatchesBank)                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                              }                              else                              {                                  GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                              }                          }                          catch (Exception e)                          {                              try                              {                                  reader.BaseStream.Position = 0; // rewind stream to retry parse with different file type                                    // Try a payment file instead                                  ImportedPaymentData paymentData = ImportBankgiroSE(reader' currentUser' organization);                                    // Apparently' we were successful                                    GuidCache.Set(guid + "-Result"' ImportResultsCategory.Payments);                                  GuidCache.Set(guid + "-ResultDetails"' paymentData);                              }                              catch (Exception innerException)                              {                                  // rethrow the original exception                                    throw e;                              }                          }                      }                  }                    if (fileType == BankFileType.AccountStatement)                  {                      using (StreamReader reader = uploadedDoc.GetReader (1252))                      {                          externalData.LoadData (reader' ((ProcessThreadArguments) args).Organization);                          // catch here and set result to BAD                          ImportResults results = ProcessImportedData (externalData' (ProcessThreadArguments) args);                            GuidCache.Set (guid + "-ResultDetails"' results);                          if (results.AccountBalanceMatchesBank)                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Good);                          }                          else                          {                              GuidCache.Set (guid + "-Result"' ImportResultsCategory.Questionable);                          }                      }                  }                  else if (fileType == BankFileType.PaymentDetails)                  {                      // Get reader factory from ExternalBankData                        throw new NotImplementedException ("Need to implement new flexible payment reader structure");                        // IBankDataPaymentsReader paymentsReader = externalData.GetPaymentsReader();                      // then read                  }              }              catch (Exception e)              {                  GuidCache.Set (guid + "-Exception"' e.ToString());                                }              finally              {                  GuidCache.Set (guid + "-Progress"' 100); // only here may the caller fetch the results                  uploadedDoc.Delete(); // document no longer needed after processing' no matter the result              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: int progressUpdateInterval = import.Records.Length/40;
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: if (progressUpdateInterval > 100)              {                  progressUpdateInterval = 100;              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: if (progressUpdateInterval > 100)              {                  progressUpdateInterval = 100;              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: foreach (ExternalBankDataRecord row in import.Records)              {                  // Update progress.                    count++;                  if (progressUpdateInterval < 2 || count%progressUpdateInterval == 0)                  {                      int percent = (count*99)/import.Records.Length;                        GuidCache.Set (args.Guid + "-Progress"' percent);                  }                    // Update high- and low-water marks.                    if (row.DateTime < result.EarliestTransaction)                  {                      result.EarliestTransaction = row.DateTime;                  }                    if (row.DateTime > result.LatestTransaction)                  {                      result.LatestTransaction = row.DateTime;                  }                      string importKey = row.ImportHash;                    Int64 amountCents = row.TransactionNetCents;                    if (amountCents == 0)                      // defensive programming - these _should_ be duplicated in the interpreter if no "fee" field                  {                      amountCents = row.TransactionGrossCents;                  }                    if (args.Organization.Identity == 1 && assetAccount.Identity == 1 &&                      PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // This is an ugly-as-fuck hack that sorts under the category "just bring our pilots the fuck back to operational                      // status right fucking now".                        // This code can and should be safely removed once the pilot's books are closed for 2014' which should be some time mid-2015.                        if (row.DateTime < new DateTime (2014' 03' 22))                      {                          result.DuplicateTransactions++;                          continue;                      }                  }                    FinancialTransaction transaction = FinancialTransaction.ImportWithStub (args.Organization.Identity'                      row.DateTime'                      assetAccount.Identity' amountCents'                      row.Description' importKey'                      args.CurrentUser.Identity);                    if (transaction != null)                  {                      // The transaction was created. Examine if the autobook criteria are true.                        result.TransactionsImported++;                        FinancialAccounts accounts = FinancialAccounts.FromBankTransactionTag (row.Description);                        if (accounts.Count == 1)                      {                          // This is a labelled local donation.                            Geography geography = accounts[0].AssignedGeography;                          FinancialAccount localAccount = accounts[0];                            transaction.AddRow (args.Organization.FinancialAccounts.IncomeDonations' -amountCents'                              args.CurrentUser);                          transaction.AddRow (args.Organization.FinancialAccounts.CostsLocalDonationTransfers'                              amountCents' args.CurrentUser);                          transaction.AddRow (localAccount' -amountCents' args.CurrentUser);                            PWEvents.CreateEvent (EventSource.PirateWeb' EventType.LocalDonationReceived'                              args.CurrentUser.Identity' args.Organization.Identity'                              geography.Identity' 0'                              transaction.Identity' localAccount.Identity.ToString());                      }                      else if (row.Description.ToLowerInvariant().StartsWith (args.Organization.IncomingPaymentTag))                      {                          // Check for previously imported payment group                            // TODO: MAKE FLEXIBLE - CALL PAYMENTREADERINTERFACE!                          // HACK HACK HACK HACK                            PaymentGroup group = PaymentGroup.FromTag (args.Organization'                              "SEBGM" + DateTime.Today.Year + // TODO: Get tags from org                              row.Description.Substring (args.Organization.IncomingPaymentTag.Length).Trim());                            if (group != null && group.Open)                          {                              // There was a previously imported and not yet closed payment group matching this transaction                              // Close the payment group and match the transaction against accounts receivable                                transaction.Dependency = group;                              group.Open = false;                              transaction.AddRow (args.Organization.FinancialAccounts.AssetsOutboundInvoices' -amountCents'                                  args.CurrentUser);                          }                      }                      else if (amountCents < 0)                      {                          // Autowithdrawal mechanisms removed' condition kept because of downstream else-if conditions                      }                      else if (amountCents > 0)                      {                          if (row.FeeCents < 0)                          {                              // This is always an autodeposit' if there is a fee (which is never > 0.0)                                transaction.AddRow (args.Organization.FinancialAccounts.CostsBankFees' -row.FeeCents'                                  args.CurrentUser);                              transaction.AddRow (autoDepositAccount' -row.TransactionGrossCents' args.CurrentUser);                          }                          else if (amountCents < autoDepositLimit*100)                          {                              // Book against autoDeposit account.                                transaction.AddRow (autoDepositAccount' -amountCents' args.CurrentUser);                          }                      }                  }                  else                  {                      // Transaction was not imported; assume duplicate                        result.DuplicateTransactions++;                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ProcessImportedData,The following statement contains a magic number: Int64 beyondEofCents = assetAccount.GetDeltaCents (result.LatestTransaction.AddSeconds (1)'                  DateTime.Now.AddDays (2));
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: foreach (string line in lines)              {                  if (line.Length < 2)                  {                      continue; // CR/LF split causes every other line to be empty                  }                    switch (line.Substring (0' 2))                  {                      case "01": // BGMAX intro                          string bgmaxmarker = line.Substring (2' 20).Trim();                          if (bgmaxmarker != "BGMAX")                          {                              throw new Exception ("bad format -- not bgmax");                          }                          bgMaxVersion = Int32.Parse (line.Substring (22' 2));                          timestamp = DateTime.ParseExact (line.Substring (24' 20)' "yyyyMMddHHmmssffffff"'                              CultureInfo.InvariantCulture);                          break;                      case "05": // Begin payment group                          if (bgMaxVersion < 1)                          {                              throw new InvalidOperationException ("BGMax record must precede first payment group");                          }                          curPayments = new List<InMemoryPayment>();                          currency = Currency.FromCode (line.Substring (22' 3));                          result.Currency = currency;                          curPaymentGroupAmountCents = 0;                          break;                      case "20": // Begin payment                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede first payment");                          }                            // If we have a previous payment in this group' add it to list                            if (curPayment != null)                          {                              curPayments.Add (curPayment);                          }                            curPayment = new InMemoryPayment();                            curPayment.FromAccount = line.Substring (2' 10);                          curPayment.Reference = line.Substring (12' 25).Trim(); // left space padded in BgMax format                          curPayment.AmountCents = Int64.Parse (line.Substring (37' 18)' CultureInfo.InvariantCulture);                          curPayment.Key = "SEBGM" + DateTime.Today.Year + line.Substring (57' 12);                          curPayment.HasImage = (line[69] == '1' ? true : false);                            // TODO: Check if existed already -- must do -- IMPORTANT (same todo as below)                            curPaymentGroupAmountCents += curPayment.AmountCents;                          break;                      case "25": // Payment info: Freeform                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Freeform'                              line.Substring (2' 50).Trim()));                          break;                      case "26": // Payment info: Name                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Name'                              line.Substring (2' 35).Trim()));                          break;                      case "27": // Payment info: Street' postal code                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Street'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.PostalCode'                              line.Substring (37' 9).Replace (" "' ""))); // also removes inspace                          break;                      case "28": // Payment info: City' Country                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.City'                              line.Substring (2' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.Country'                              line.Substring (37' 35).Trim()));                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.CountryCode'                              line.Substring (72' 2).Trim()));                          break;                      case "29": // Payment info: Organization or personal ID number                          if (curPayment == null)                          {                              throw new InvalidOperationException ("Payment start must precede payment information");                          }                          curPayment.Information.Add (new InMemoryPaymentInformation (PaymentInformationType.OrgNumber'                              line.Substring (2' 12).Trim()));                          break;                      case "15": // End payment group                          if (curPayments == null)                          {                              throw new InvalidOperationException ("Payment group start must precede payment group end");                          }                            // Add currently building payment to group before committing                            curPayments.Add (curPayment);                            // This is where we finally get a unique identifier that allows us to dupecheck.                            string tag = timestamp.Year + line.Substring (45' 5);                            if (timestamp.Year >= 2012)                          {                              tag = "SEBGM" + tag;                              // a flag date where we add a tag for SE Bankgiro Max format' enabling other formats in other namespaces                          }                            // Dupe check                            PaymentGroup dupe = PaymentGroup.FromTag (organization' tag);                            if (dupe == null)                          {                              // Commit all recorded payments                                PaymentGroup newGroup = PaymentGroup.Create (organization' timestamp' currency' currentUser);                              result.PaymentGroupCount++;                                Int64 reportedAmountCents = Int64.Parse (line.Substring (50' 18)'                                  CultureInfo.InvariantCulture);                              // may differ because of duplicates                              newGroup.AmountCents = curPaymentGroupAmountCents;                              result.PaymentCentsTotal += curPaymentGroupAmountCents;                                foreach (InMemoryPayment payment in curPayments)                              {                                  // TODO: DUPECHECK PAYMENT KEY AS WELL (same todo as above)                                    Payment newPayment = newGroup.CreatePayment (payment.AmountCents/100.0'                                      payment.Reference'                                      payment.FromAccount' payment.Key'                                      payment.HasImage);                                    foreach (InMemoryPaymentInformation paymentInfo in payment.Information)                                  {                                      newPayment.AddInformation (paymentInfo.Type' paymentInfo.Data);                                  }                                  result.PaymentCount++;                              }                                newGroup.Tag = tag;                              newGroup.Open = true; // flags payment group as ready                                newGroup.MapTransaction();                          }                          else                          {                              // This was a duplicate                                result.DuplicatePaymentGroupCount++;                              result.DuplicatePaymentCount += curPayments.Count;                          }                            curPayment = null;                          curPayments = null;                            break;                      case "70": // BGMAX termination                          break; // don't care                      default:                          break; // don't care about other fields                  }              }
Magic Number,Swarmops.Site.Pages.Ledgers,UploadBankFiles,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Ledgers\UploadBankFiles.aspx.cs,ImportBankgiroSE,The following statement contains a magic number: if (timestamp.Year < 1900)              {                  // The file contained no instructions at all                    throw new ArgumentException ("This was not a BGMAX-SE file");              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  // Safety check: If already initialized' throw                    if (SwarmDb.Configuration.IsConfigured())                  {                      throw new InvalidOperationException (                          "This installation has already been initialized. Cannot re-initalize on top of existing installation.");                  }                    this.TextCredentialsReadDatabase.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsReadServer.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsReadUser.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsReadPassword.Style[HtmlTextWriterStyle.Width] = "70px";                    this.TextCredentialsWriteDatabase.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsWriteServer.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsWriteUser.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsWritePassword.Style[HtmlTextWriterStyle.Width] = "70px";                    this.TextCredentialsAdminDatabase.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsAdminServer.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsAdminUser.Style[HtmlTextWriterStyle.Width] = "70px";                  this.TextCredentialsAdminPassword.Style[HtmlTextWriterStyle.Width] = "70px";                    this.DropFavoriteColor.Style[HtmlTextWriterStyle.Width] = "155px";                    // this.LanguageSelector.LanguageChanged += new EventHandler(LanguageSelector_LanguageChanged);                    this.TextRandomDbLabel.Text = Authentication.CreateWeakSecret (5);                    // If we're running on Localhost' disable the "is this your server?" question                    if (IsLocalhost())                  {                      this.TextServerName.Text = @"(localhost)";                      if (HttpContext.Current.Request.ServerVariables["LOCAL_ADDR"] == "::1")                      {                          this.TextServerAddress.Text = @"IPv6 Loopback";                      }                      else                      {                          this.TextServerAddress.Text = @"IPv4 Loopback";                      }                      this.TextServerName.Enabled = false;                      this.TextServerAddress.Enabled = false;                  }                    Localize();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestServerThreading,The following statement contains a magic number: Thread.Sleep (500);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: try              {                  random = random.Trim();                    if (random.Length > 5) // if UI-enforced maxlength beaten somehow' limit here                  {                      random = random.Substring (0' 5); // MySQL will hit a maxlength otherwise                  }                    if (string.IsNullOrEmpty (random))                  {                      random = Authentication.CreateWeakSecret (5);                  }                    SwarmDb.Credentials rootCredentials = new SwarmDb.Credentials ("mysql"'                      new SwarmDb.ServerSet (mysqlHostName)' "root"' rootPassword);                    string readPass = GenerateLongPassword();                  string writePass = GenerateLongPassword();                  string adminPass = GenerateLongPassword();                    string[] initInstructions =                      DbCreateScript.Replace ("[random]"' random)                          .Replace ("[readpass]"' readPass)                          .Replace ("[writepass]"' writePass)                          .Replace ("[adminpass]"' adminPass).Split ('#');                    SwarmDb.GetTestDatabase (rootCredentials).ExecuteAdminCommands (initInstructions);                    PermissionsAnalysis permissionsResult = FirstCredentialsTest (                      "Swarmops-" + random' mysqlHostName' "Swarmops-R-" + random' readPass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-W-" + random' writePass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-A-" + random' adminPass'                      serverName' ipAddress);                    if (!permissionsResult.AllPermissionsOk)                  {                      throw new InvalidOperationException ("waaaaaah");                  }                    return true;              }              catch (Exception)              {                  return false;              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: try              {                  random = random.Trim();                    if (random.Length > 5) // if UI-enforced maxlength beaten somehow' limit here                  {                      random = random.Substring (0' 5); // MySQL will hit a maxlength otherwise                  }                    if (string.IsNullOrEmpty (random))                  {                      random = Authentication.CreateWeakSecret (5);                  }                    SwarmDb.Credentials rootCredentials = new SwarmDb.Credentials ("mysql"'                      new SwarmDb.ServerSet (mysqlHostName)' "root"' rootPassword);                    string readPass = GenerateLongPassword();                  string writePass = GenerateLongPassword();                  string adminPass = GenerateLongPassword();                    string[] initInstructions =                      DbCreateScript.Replace ("[random]"' random)                          .Replace ("[readpass]"' readPass)                          .Replace ("[writepass]"' writePass)                          .Replace ("[adminpass]"' adminPass).Split ('#');                    SwarmDb.GetTestDatabase (rootCredentials).ExecuteAdminCommands (initInstructions);                    PermissionsAnalysis permissionsResult = FirstCredentialsTest (                      "Swarmops-" + random' mysqlHostName' "Swarmops-R-" + random' readPass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-W-" + random' writePass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-A-" + random' adminPass'                      serverName' ipAddress);                    if (!permissionsResult.AllPermissionsOk)                  {                      throw new InvalidOperationException ("waaaaaah");                  }                    return true;              }              catch (Exception)              {                  return false;              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateDatabaseFromRoot,The following statement contains a magic number: try              {                  random = random.Trim();                    if (random.Length > 5) // if UI-enforced maxlength beaten somehow' limit here                  {                      random = random.Substring (0' 5); // MySQL will hit a maxlength otherwise                  }                    if (string.IsNullOrEmpty (random))                  {                      random = Authentication.CreateWeakSecret (5);                  }                    SwarmDb.Credentials rootCredentials = new SwarmDb.Credentials ("mysql"'                      new SwarmDb.ServerSet (mysqlHostName)' "root"' rootPassword);                    string readPass = GenerateLongPassword();                  string writePass = GenerateLongPassword();                  string adminPass = GenerateLongPassword();                    string[] initInstructions =                      DbCreateScript.Replace ("[random]"' random)                          .Replace ("[readpass]"' readPass)                          .Replace ("[writepass]"' writePass)                          .Replace ("[adminpass]"' adminPass).Split ('#');                    SwarmDb.GetTestDatabase (rootCredentials).ExecuteAdminCommands (initInstructions);                    PermissionsAnalysis permissionsResult = FirstCredentialsTest (                      "Swarmops-" + random' mysqlHostName' "Swarmops-R-" + random' readPass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-W-" + random' writePass'                      "Swarmops-" + random' mysqlHostName' "Swarmops-A-" + random' adminPass'                      serverName' ipAddress);                    if (!permissionsResult.AllPermissionsOk)                  {                      throw new InvalidOperationException ("waaaaaah");                  }                    return true;              }              catch (Exception)              {                  return false;              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,RecheckDatabasePermissions,The following statement contains a magic number: while (_testReadCredentials == null || _testWriteCredentials == null || _testAdminCredentials == null)              {                  Thread.Sleep (100);                  // A couple of async race conditions happen as this is called' we need to wait for credentials              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabase,The following statement contains a magic number: if (!Debugger.IsAttached) // (but not while debugging in a non-live environment)              {                  string machineKeyXml =                      "<?xml version=\"1.0\" ?>\n" +                      "<!--\n" +                      "  The MachineKey is the key used to encrypt/decrypt the cookie containing\n" +                      "  authentication information. When you have multiple front-end web servers\n" +                      "  serving a single Swarmops installation' this key must be identical on\n" +                      "  all front-end machines - otherwise' authentication won't follow from\n" +                      "  one server to the next.\n\n" +                      "  This particular MachineKey was randomized at the time of initial\n" +                      "  installation of this Swarmops database' and is unique. If you have\n" +                      "  multiple front-ends' you need to copy this file to /etc/swarmops\n" +                      "  on each of them.\n" +                      "-->\n" +                      GetMachineKey() + "\n";                    File.WriteAllText ("/etc/swarmops/machineKey.config"' machineKeyXml' Encoding.GetEncoding (1252));              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,GetMachineKey,The following statement contains a magic number: machineKey.Append ("validationKey=\"" + SupportFunctions.GenerateSecureRandomKey (64) + "\"\n");
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,GetMachineKey,The following statement contains a magic number: machineKey.Append ("decryptionKey=\"" + SupportFunctions.GenerateSecureRandomKey (32) + "\"\n");
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (100);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: try              {                  // Get the schema and initialize the database structures. Requires ADMIN access to database.                    DatabaseMaintenance.FirstInitialization();                    _initProgress = 3;                  _initMessage = "Applying all post-baseline database schema upgrades...";                  DatabaseMaintenance.UpgradeSchemata();                  Thread.Sleep (100);                    // SECURITY: With schemata to hold them in place' initialize the encryption keys                    Authentication.InitializeSymmetricDatabaseKey();                  Authentication.InitializeSymmetricFileSystemKey();                    // Set Geography at baseline (TODO: Ask for what baseline we got)                    Persistence.Key["LastGeographyUpdateId"] = "0";                  Persistence.Key["LastGeographyUpdate"] = Constants.DateTimeLow.ToString("yyyy-MM-dd");                    // Set an installation ID                  // Doubles as start signal to daemons (if installation ID exists' db is ready for processing)                    Persistence.Key["SwarmopsInstallationId"] = Guid.NewGuid().ToString();                    _initProgress = 4;                  _initMessage = "Initializing currencies...";                    // Create initial currencies (European et al)                    Currency.CreateFiat("EUR"' "Euros"' "€");                  Currency.CreateFiat("USD"' "US Dollars"' "$");                  Currency.CreateFiat("CAD"' "Canadian Dollars"' "CA$");                  Currency.CreateFiat("SEK"' "Swedish Krona"' string.Empty);                  Currency.CreateFiat("NOK"' "Norwegian Krona"' string.Empty);                  Currency.CreateFiat("DKK"' "Danish Krona"' string.Empty);                  Currency.CreateFiat("ISK"' "Icelandic Krona"' string.Empty);                  Currency.CreateFiat("CHF"' "Swiss Franc"' string.Empty);                  Currency.CreateFiat("GBP"' "Pounds Sterling"' "£");                  Currency.CreateCrypto("BTC"' "Bitcoin Core"' "฿");                  Currency.CreateCrypto("BCH"' "Bitcoin Cash"' "฿");                    // Fetch the first set of exchange rates' completing the currency collection                    SupportFunctions.DisableSslCertificateChecks(); // needed bc SSL root store on Mono hosed                  ExchangeRateSnapshot.Create();                    // Disable SSL required - turn this on manually                    SystemSettings.RequireSsl = false;                    _initProgress = 5;                  _initMessage = "Getting list of countries from Swarmops servers...";                  Thread.Sleep (100);                    // Create translation lists                    Dictionary<string' int> countryIdTranslation = new Dictionary<string' int>();                    // Initialize the root geography (which becomes #1 if everything works)                    int rootGeographyId = SwarmDb.GetDatabaseForWriting().CreateGeography ("[LOC]World"' 0);                    // Create the sandbox                    Organization sandbox = Organization.Create(0' "Sandbox"' "Sandbox"' "Sandbox"' "swarmops.com"' "Ops"'                      rootGeographyId' true'                      true' 0);                                    sandbox.EnableEconomy(Currency.FromCode("EUR"));                    Positions.CreateOrganizationDefaultPositions(sandbox);                    // Get the list of countries                    GetGeographyData geoDataFetcher = new GetGeographyData();                    Country[] countries = geoDataFetcher.GetCountries();                    _initProgress = 7;                  _initMessage = "Creating all countries on local server...";                  Thread.Sleep (100);                  int count = 0;                  int total = countries.Length;                    // Create all countries in our own database                    foreach (Country country in countries)                  {                      countryIdTranslation[country.Code] = SwarmDb.GetDatabaseForWriting().CreateCountry (country.Name'                          country.Code'                          country.Culture'                          rootGeographyId' country.PostalCodeLength'                          string.Empty);                        count++;                      _initMessage = String.Format ("Creating all countries on local server... ({0}%)"' count*100/total);                  }                    _initProgress = 10;                    // Construct list of countries that have geographic data                    List<string> initializableCountries = new List<string>();                    foreach (Country country in countries)                  {                      if (country.GeographyId != 1)                      {                          initializableCountries.Add (country.Code);                      }                  }                    float initStepPerCountry = 90f/initializableCountries.Count;                  int countryCount = 0;                    // For each country...                    foreach (string countryCode in initializableCountries)                  {                      // Get the geography layout                        _initMessage = "Initializing geography for country " + countryCode + "... ";                      Thread.Sleep (100);                        GeographyUpdate.PrimeCountry (countryCode);                      GuidCache.Set ("DbInitProgress"' string.Empty);                        countryCount++;                        _initProgress = 10 + (int) (countryCount*initStepPerCountry);                  }                    _initProgress = 100;                  _initMessage = "Complete.";              }              catch (Exception failedException)              {                  // Use initMessage to push info about what went wrong to the user                    _initMessage = failedException.ToString();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,InitDatabaseThread,The following statement contains a magic number: Thread.Sleep (1000);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestDaemonHeartbeats,The following statement contains a magic number: if (SystemSettings.HeartbeatBackend + 60 > unixNow)              {                  result.Backend = true; // backend heart is beating              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,TestDaemonHeartbeats,The following statement contains a magic number: if (SystemSettings.HeartbeatFrontend + 60 > unixNow)              {                  result.Frontend = true; // frontend heart is beating              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The following statement contains a magic number: try              {                  Person personOne = null;                  bool personOneExists = false;                    try                  {                      personOne = Person.FromIdentity(1);                      if (Debugger.IsAttached)                      {                          if (personOne.CityName != "Duckville" || personOne.Mail != "noreply@example.com")                              // these values are returned in debug environments when no person is found                          {                              personOneExists = true;                          }                          else                          {                              personOne = null;                          }                      }                      else                      {                          personOneExists = true;                      }                  }                  catch (Exception)                  {                      // We expect this to throw.                  }                    if (personOneExists || personOne != null)                  {                      throw new InvalidOperationException("Cannot run initialization processes again when initialized.");                  }                    Person newPerson = Person.Create(name' mail' password' string.Empty' string.Empty' string.Empty'                      string.Empty' string.Empty' new DateTime(1972'1'21)' PersonGender.Unknown);                    // Add membership in Sandbox                  newPerson.AddParticipation(Organization.Sandbox' DateTime.UtcNow.AddYears(25));                    // Initialize staffing to System and Sandbox with the new user                  Positions.CreateSysadminPositions();                    Positions.ForOrganization(Organization.Sandbox).AtLevel(PositionLevel.OrganizationExecutive)[0].Assign(                      newPerson' null /* assignedByPerson */' null /* assignedByPosition */' "Initial Sandbox executive"'                      null /* expires */);              }              catch (Exception exception)              {                  try                  {                      SwarmDb.GetDatabaseForWriting().CreateExceptionLogEntry(DateTime.UtcNow' "Initialization"' exception);                      throw;                  }                  catch (Exception)                  {                                            throw;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The following statement contains a magic number: try              {                  Person personOne = null;                  bool personOneExists = false;                    try                  {                      personOne = Person.FromIdentity(1);                      if (Debugger.IsAttached)                      {                          if (personOne.CityName != "Duckville" || personOne.Mail != "noreply@example.com")                              // these values are returned in debug environments when no person is found                          {                              personOneExists = true;                          }                          else                          {                              personOne = null;                          }                      }                      else                      {                          personOneExists = true;                      }                  }                  catch (Exception)                  {                      // We expect this to throw.                  }                    if (personOneExists || personOne != null)                  {                      throw new InvalidOperationException("Cannot run initialization processes again when initialized.");                  }                    Person newPerson = Person.Create(name' mail' password' string.Empty' string.Empty' string.Empty'                      string.Empty' string.Empty' new DateTime(1972'1'21)' PersonGender.Unknown);                    // Add membership in Sandbox                  newPerson.AddParticipation(Organization.Sandbox' DateTime.UtcNow.AddYears(25));                    // Initialize staffing to System and Sandbox with the new user                  Positions.CreateSysadminPositions();                    Positions.ForOrganization(Organization.Sandbox).AtLevel(PositionLevel.OrganizationExecutive)[0].Assign(                      newPerson' null /* assignedByPerson */' null /* assignedByPosition */' "Initial Sandbox executive"'                      null /* expires */);              }              catch (Exception exception)              {                  try                  {                      SwarmDb.GetDatabaseForWriting().CreateExceptionLogEntry(DateTime.UtcNow' "Initialization"' exception);                      throw;                  }                  catch (Exception)                  {                                            throw;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,CreateFirstUser,The following statement contains a magic number: try              {                  Person personOne = null;                  bool personOneExists = false;                    try                  {                      personOne = Person.FromIdentity(1);                      if (Debugger.IsAttached)                      {                          if (personOne.CityName != "Duckville" || personOne.Mail != "noreply@example.com")                              // these values are returned in debug environments when no person is found                          {                              personOneExists = true;                          }                          else                          {                              personOne = null;                          }                      }                      else                      {                          personOneExists = true;                      }                  }                  catch (Exception)                  {                      // We expect this to throw.                  }                    if (personOneExists || personOne != null)                  {                      throw new InvalidOperationException("Cannot run initialization processes again when initialized.");                  }                    Person newPerson = Person.Create(name' mail' password' string.Empty' string.Empty' string.Empty'                      string.Empty' string.Empty' new DateTime(1972'1'21)' PersonGender.Unknown);                    // Add membership in Sandbox                  newPerson.AddParticipation(Organization.Sandbox' DateTime.UtcNow.AddYears(25));                    // Initialize staffing to System and Sandbox with the new user                  Positions.CreateSysadminPositions();                    Positions.ForOrganization(Organization.Sandbox).AtLevel(PositionLevel.OrganizationExecutive)[0].Assign(                      newPerson' null /* assignedByPerson */' null /* assignedByPosition */' "Initial Sandbox executive"'                      null /* expires */);              }              catch (Exception exception)              {                  try                  {                      SwarmDb.GetDatabaseForWriting().CreateExceptionLogEntry(DateTime.UtcNow' "Initialization"' exception);                      throw;                  }                  catch (Exception)                  {                                            throw;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The following statement contains a magic number: DateTime utcTimeout = DateTime.UtcNow.AddSeconds (15);
Magic Number,Swarmops.Frontend.Pages.v5.Public,Initialize,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Initialize.aspx.cs,ButtonLogin_Click,The following statement contains a magic number: while (people.Count < 1 && DateTime.UtcNow < utcTimeout)              {                  Thread.Sleep (500);                  people = People.GetAll();              }
Magic Number,Swarmops.Frontend.Pages.v5.Public,Json_SignupVolunteerPositions,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Json-SignupVolunteerPositions.aspx.cs,FormatAsJson,The following statement contains a magic number: StringBuilder result = new StringBuilder (16384);
Magic Number,Swarmops.Frontend.Pages.Public,Signup,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Public\Signup.aspx.cs,SignupParticipant,The following statement contains a magic number: DateTime parsedDateOfBirth = new DateTime (1800' 1' 1);
Magic Number,Swarmops.Frontend.Pages.v5.Security,ChangeOrganizations,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizations.aspx.cs,PopulateRepeater,The following statement contains a magic number: foreach (Participation membership in participations)              {                  if (membership.OrganizationId == 1 && !PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // sandbox. Ignore.                      continue;                  }                    Organization organization = membership.Organization;                  OrganizationParameters newOrganizationParameters = new OrganizationParameters();                    string logoUrl = "/Images/Other/blank-logo-640x360.png";                    Document logoLandscape = organization.LogoLandscape;                    try                  {                      if (logoLandscape != null)                      {                          newOrganizationParameters.LogoImage = logoLandscape.Image.GetBase64(64' 36);                      }                  }                  catch (Exception)                  {                       newOrganizationParameters.LogoImage = "/Images/Flags/txl-64px.png";                  }                  newOrganizationParameters.OrganizationId = membership.OrganizationId;                  newOrganizationParameters.OrganizationName = membership.Organization.Name;                    availableOrganizations.Add (newOrganizationParameters);              }
Magic Number,Swarmops.Frontend.Pages.v5.Security,ChangeOrganizations,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Security\ChangeOrganizations.aspx.cs,PopulateRepeater,The following statement contains a magic number: foreach (Participation membership in participations)              {                  if (membership.OrganizationId == 1 && !PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                  {                      // sandbox. Ignore.                      continue;                  }                    Organization organization = membership.Organization;                  OrganizationParameters newOrganizationParameters = new OrganizationParameters();                    string logoUrl = "/Images/Other/blank-logo-640x360.png";                    Document logoLandscape = organization.LogoLandscape;                    try                  {                      if (logoLandscape != null)                      {                          newOrganizationParameters.LogoImage = logoLandscape.Image.GetBase64(64' 36);                      }                  }                  catch (Exception)                  {                       newOrganizationParameters.LogoImage = "/Images/Flags/txl-64px.png";                  }                  newOrganizationParameters.OrganizationId = membership.OrganizationId;                  newOrganizationParameters.OrganizationName = membership.Organization.Name;                    availableOrganizations.Add (newOrganizationParameters);              }
Magic Number,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The following statement contains a magic number: if (!File.Exists (StorageRoot + legacyMarker + serverFileName))              {                  if (!Debugger.IsAttached) // if running live; ignore FNF errors when debugging                  {                      throw new FileNotFoundException(StorageRoot + legacyMarker + serverFileName);                  }                  else                  {                      Response.StatusCode = 404;                      Response.End();                      return;                  }              }
Magic Number,Swarmops.Frontend.Pages.v5.Swarm,AddPerson,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\AddPerson.aspx.cs,ButtonSubmit_Click,The following statement contains a magic number: DateTime dateOfBirth = new DateTime (1800' 1' 1);
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 1000)              {                  matches.RemoveRange (1000' matches.Count - 1000);              }
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 1000)              {                  matches.RemoveRange (1000' matches.Count - 1000);              }
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: if (matches.Count > 1000)              {                  matches.RemoveRange (1000' matches.Count - 1000);              }
Magic Number,Swarmops.Frontend.Pages.Swarm,Json_ListFindPeople,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Swarm\Json-ListFindPeople.aspx.cs,Page_Load,The following statement contains a magic number: foreach (Person person in matches)              {                  string onePerson = '{' +                                     String.Format (                                         "\"id\":\"{0}\"'\"name\":\"<span class='spanUser{0}Name'>{1}</span>\"'\"avatar16Url\":\"{2}\"'\"geographyName\":\"{3}\"'\"mail\":\"<span class='spanUser{0}Mail'>{4}</span>\"'\"phone\":\"<span class='spanUser{0}Phone'>{5}</span>\""'                                         person.Identity'                                         JsonSanitize (person.Canonical)'                                         person.GetSecureAvatarLink (16)'                                         JsonSanitize (person.Geography.Name)'                                         JsonSanitize (person.Mail)'                                         JsonSanitize (person.Phone)) + "'" +                                      String.Format(                                          editPersonTemplate' person.Identity)                                         + '}';                  jsonPeople.Add (onePerson);              }
Magic Number,Swarmops.Frontend.Pages.v5.User,SelectLanguage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,PopulateRepeater,The following statement contains a magic number: foreach (string cultureId in availableCultures)              {                  LanguageParameters newLanguage = new LanguageParameters();                  newLanguage.CultureId = cultureId;                  CultureInfo culture = CultureInfo.CreateSpecificCulture (cultureId);                  newLanguage.DisplayName = culture.NativeName;                  newLanguage.DisplayName = Char.ToUpperInvariant (newLanguage.DisplayName[0]) +                                            newLanguage.DisplayName.Substring (1); // Capitalize                    // Do not display country' just the language name                  newLanguage.DisplayName = newLanguage.DisplayName.Split (' ')[0];                    if (cultureId.StartsWith("en"))                  {                      newLanguage.IconUrl = "/Images/Flags/uk-64px.png";                      // use "uk" for en-GB and en-US rather than "gb" or "us"                  }                  else if (cultureId.StartsWith ("ar"))                  {                      newLanguage.IconUrl = "/Images/Flags/Arabic-64px.png";                      // crowdin's generic culture is ar-SA but Arabic is not country specific                  }                  else                  {                      newLanguage.IconUrl = "/Images/Flags/" + cultureId.Substring(3' 2).ToLowerInvariant() + "-64px.png";                  }                  if (culture.TextInfo.IsRightToLeft)                  {                      newLanguage.Rtl = "rtl";                  }                    availableLanguages.Add (newLanguage);              }
Magic Number,Swarmops.Frontend.Pages.v5.User,SelectLanguage,C:\repos\Swarmops_Swarmops\Site\Pages\v5\User\SelectLanguage.aspx.cs,PopulateRepeater,The following statement contains a magic number: foreach (string cultureId in availableCultures)              {                  LanguageParameters newLanguage = new LanguageParameters();                  newLanguage.CultureId = cultureId;                  CultureInfo culture = CultureInfo.CreateSpecificCulture (cultureId);                  newLanguage.DisplayName = culture.NativeName;                  newLanguage.DisplayName = Char.ToUpperInvariant (newLanguage.DisplayName[0]) +                                            newLanguage.DisplayName.Substring (1); // Capitalize                    // Do not display country' just the language name                  newLanguage.DisplayName = newLanguage.DisplayName.Split (' ')[0];                    if (cultureId.StartsWith("en"))                  {                      newLanguage.IconUrl = "/Images/Flags/uk-64px.png";                      // use "uk" for en-GB and en-US rather than "gb" or "us"                  }                  else if (cultureId.StartsWith ("ar"))                  {                      newLanguage.IconUrl = "/Images/Flags/Arabic-64px.png";                      // crowdin's generic culture is ar-SA but Arabic is not country specific                  }                  else                  {                      newLanguage.IconUrl = "/Images/Flags/" + cultureId.Substring(3' 2).ToLowerInvariant() + "-64px.png";                  }                  if (culture.TextInfo.IsRightToLeft)                  {                      newLanguage.Rtl = "rtl";                  }                    availableLanguages.Add (newLanguage);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int year = Int32.Parse (monthString.Substring (0' 4));
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int month = Int32.Parse (monthString.Substring (4));
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int[] yearBreakpoints = {1938' year - 65' year - 26};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: double[] taxRates = {10.21' 15.49' 31.42};
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int formVersion = 2015;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: if (year < 2015)              {                  formVersion = 2010;              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: if (year < 2015)              {                  formVersion = 2010;              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010] = new Dictionary<GraphicsElement' int>();
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015] = new Dictionary<GraphicsElement' int>();
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.LeftColumnX] = 775;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.LeftColumnX] = 775;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.RightColumnX] = 1492;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.RightColumnX] = 1492;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.LeftColumnX] = 800;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.LeftColumnX] = 800;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.RightColumnX] = 1512;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.RightColumnX] = 1512;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketMainY] = 694;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketMainY] = 694;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketDistY] = 67;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AgeBracketDistY] = 67;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketMainY] = 770;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketMainY] = 770;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketDistY] = 65;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AgeBracketDistY] = 65;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryY] = 360;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryY] = 360;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryTotalY] = 560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SalaryTotalY] = 560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AdditiveTaxTotalY] = 1329;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.AdditiveTaxTotalY] = 1329;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxY] = 1529;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxY] = 1529;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxTotalY] = 1727;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.DeductedTaxTotalY] = 1727;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SummaryTotalY] = 1795;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2010][GraphicsElement.SummaryTotalY] = 1795;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryY] = 440;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryY] = 440;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryTotalY] = 640;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SalaryTotalY] = 640;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AdditiveTaxTotalY] = 1395;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.AdditiveTaxTotalY] = 1395;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxY] = 1560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxY] = 1560;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxTotalY] = 1759;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.DeductedTaxTotalY] = 1759;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SummaryTotalY] = 1825;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: coord[2015][GraphicsElement.SummaryTotalY] = 1825;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int smallSize = 18;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int regularSize = 24;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: int handWriteSize = 36;
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: if (Debugger.IsAttached)              {                  sansFontName = "Arial"; // yeahyeah...                  courierFontName = "Courier New";                  orgNumber = "DEBUGGER ATTACHED";                  smallSize = 24;                  regularSize = 30;                  handWriteSize = 48;              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: if (Debugger.IsAttached)              {                  sansFontName = "Arial"; // yeahyeah...                  courierFontName = "Courier New";                  orgNumber = "DEBUGGER ATTACHED";                  smallSize = 24;                  regularSize = 30;                  handWriteSize = 48;              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: if (Debugger.IsAttached)              {                  sansFontName = "Arial"; // yeahyeah...                  courierFontName = "Courier New";                  orgNumber = "DEBUGGER ATTACHED";                  smallSize = 24;                  regularSize = 30;                  handWriteSize = 48;              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,Page_Load,The following statement contains a magic number: using (Graphics graphics = Graphics.FromImage (form))              {                  StringFormat rightAlign = new StringFormat();                  rightAlign.Alignment = StringAlignment.Far;                    _fontHandwriting = new Font (sansFontName' handWriteSize' FontStyle.Bold);                  Font fontPreprinted = new Font (courierFontName' regularSize' FontStyle.Bold);                  Font fontPreprintedSmall = new Font (courierFontName' smallSize' FontStyle.Bold);                  Font fontPreprintedSans = new Font (sansFontName' regularSize' FontStyle.Bold);                    _brushHandwriting = Brushes.Blue;                  Brush brushPreprinted = Brushes.Red;                  Brush brushPreprintedDiscreet = Brushes.DarkRed;                    graphics.CompositingQuality = CompositingQuality.HighQuality;                  graphics.SmoothingMode = SmoothingMode.AntiAlias;                    // Draw the header and monthname - things to pay attention to when looking at cheat sheet                    if (year <= 2014)                  {                      graphics.DrawString(organization.Name' fontPreprinted' brushPreprinted' 150' 170);                        graphics.DrawString(monthString' fontPreprinted' brushPreprinted' 676' 288);                      graphics.DrawString (monthString' fontPreprinted' brushPreprinted' 610' 1455);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 820' 160);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1110' 160);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 729);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 796);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 840' 863);                        graphics.DrawString(string.Format("{0} - {1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 729);                      graphics.DrawString(string.Format("{0} -"' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 190' 796);                      graphics.DrawString(string.Format("{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 250' 859);                  }                  else // the latest revision of the tax form                  {                      graphics.DrawString(organization.Name.ToUpperInvariant()' fontPreprinted' brushPreprinted' 840' 255);                        graphics.DrawString(monthString' fontPreprintedSans' brushPreprinted' 702' 363);                      graphics.DrawString (monthString' fontPreprintedSans' brushPreprinted' 639' 1485);                      graphics.DrawString (String.Format ("{0'4}-{1:D2}-{2:D2}"' year' month + 1' 12)' fontPreprinted'                          brushPreprinted' 840' 180);                      graphics.DrawString (orgNumber' fontPreprinted' brushPreprinted' 1125' 180);                        // Draw the years and tax rates and other on-form constants more discreetly                        graphics.DrawString(taxRates[2].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 798);                      graphics.DrawString(taxRates[1].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 864);                      graphics.DrawString(taxRates[0].ToString("F2"' swedishCulture)' fontPreprintedSmall'                          brushPreprintedDiscreet' 855' 929);                        graphics.DrawString(string.Format("{0}-{1}"' yearBreakpoints[1]' yearBreakpoints[2] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 800);                      graphics.DrawString(string.Format("{0}-"' yearBreakpoints[2])'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 866);                      graphics.DrawString(string.Format("1938-{0}"' yearBreakpoints[1] - 1)'                          fontPreprintedSmall' brushPreprintedDiscreet' 215' 932);                  }                    // Draw the actual numbers: First' salary totals                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.SalaryTotalY]' graphics);                    // Additive tax                    for (int ageBracket = 0; ageBracket <= 2; ageBracket++)                  {                      if (data.Salary[ageBracket] > 0.0)                      {                          DrawWrittenNumber(data.Salary[ageBracket]' coord[formVersion][GraphicsElement.LeftColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                            DrawWrittenNumber(data.TaxAdditive[ageBracket]' coord[formVersion][GraphicsElement.RightColumnX]'                              coord[formVersion][GraphicsElement.AgeBracketMainY] +                              coord[formVersion][GraphicsElement.AgeBracketDistY] * ageBracket'                              graphics);                        }                  }                    DrawWrittenNumber (data.TaxAdditiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.AdditiveTaxTotalY]' graphics);                    // Deducted taxes                    DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.SalaryTotal' coord[formVersion][GraphicsElement.LeftColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxY]' graphics);                  DrawWrittenNumber(data.TaxSubtractiveTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.DeductedTaxTotalY]' graphics);                    // Grand total                    DrawWrittenNumber (data.TaxTotal' coord[formVersion][GraphicsElement.RightColumnX]' coord[formVersion][GraphicsElement.SummaryTotalY]' graphics);              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,DrawWrittenNumber,The following statement contains a magic number: if (Debugger.IsAttached)              {                  x += 10; // Mono has different metrics because of bloody course it has              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,MonthlyTaxFormSE,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,GetSalaryData,The following statement contains a magic number: foreach (Salary salary in salaries)              {                  if (salary.PayoutDate.Year == year && salary.PayoutDate.Month == month)                  {                      int employeeBirthYear = salary.PayrollItem.Person.Birthdate.Year;                      int ageBracket = 0; // main                      if (employeeBirthYear >= yearBreakpoints[2])                      {                          ageBracket = 1; // youth rebate                      }                      else if (employeeBirthYear < yearBreakpoints[1])                      {                          ageBracket = 2; // pensioners                      }                        result.Salary[ageBracket] += salary.GrossSalaryCents/100.0;                      result.SalaryTotal += salary.GrossSalaryCents/100.0;                      result.TaxSubtractiveTotal += salary.SubtractiveTaxCents/100.0;                      result.TaxAdditive[ageBracket] += salary.AdditiveTaxCents/100.0;                      result.TaxAdditiveTotal += salary.AdditiveTaxCents/100.0;                      result.TaxTotal += salary.TaxTotalCents/100.0;                  }              }
Magic Number,Swarmops.Plugins.Stock.TaxForms,SalaryTaxData,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,SalaryTaxData,The following statement contains a magic number: Salary = new double[3];
Magic Number,Swarmops.Plugins.Stock.TaxForms,SalaryTaxData,C:\repos\Swarmops_Swarmops\Site\Plugins-Stock\Taxes\SE\MonthlyTaxForm-SE.aspx.cs,SalaryTaxData,The following statement contains a magic number: TaxAdditive = new double[3];
Magic Number,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,Page_Load,The following statement contains a magic number: _cacheVersionMark = SHA1.Hash(_cacheVersionMark).Replace(" "' "").Substring(0' 8);
Magic Number,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,ProcessRespondBitId,The following statement contains a magic number: if (testAddress.VerifyMessage (credentials.uri' credentials.signature))              {                  // woooooo                    try                  {                      // Test for registration                        string intent = GuidCache.Get(credentials.uri + "-Intent") as string;                        if (!string.IsNullOrEmpty(intent))                      {                          if (intent.StartsWith("Register"))                          {                              int personId = Int32.Parse(intent.Substring("Register-".Length));                              Person person = Person.FromIdentity(personId);                              person.BitIdAddress = credentials.address;                              GuidCache.Set(credentials.uri + "-Intent"' "Complete");                          }                      }                        // Otherwise' test for logon                        if (GuidCache.Get (credentials.uri + "-Logon") as string == "Unauth")                      {                          Person person = Person.FromBitIdAddress (credentials.address);                            // TODO: If above throws' show friendly "unknown wallet" message                            int lastOrgId = person.LastLogonOrganizationId;                            if (lastOrgId == 0)                          {                              lastOrgId = Organization.SandboxIdentity;                              person.LastLogonOrganizationId = lastOrgId;                          }                            GuidCache.Set (credentials.uri + "-LoggedOn"'                              Authority.FromLogin(person' Organization.FromIdentity(person.LastLogonOrganizationId)).ToEncryptedXml());                      }                  }                  catch (Exception e)                  {                      Persistence.Key["BitIdLogin_Debug_Exception"] = e.ToString();                  }                    // TODO: Error codes                    response.StatusCode = 200;                  response.SetJson();                  response.Write ("{\"address\":\"" + credentials.address + "\"'\"signature\":\"" + credentials.signature +                                  "\"}");                  response.End();              }              else              {                  response.StatusCode = 401; // Be a bit more friendly in your return codes              }
Magic Number,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,ProcessRespondBitId,The following statement contains a magic number: if (testAddress.VerifyMessage (credentials.uri' credentials.signature))              {                  // woooooo                    try                  {                      // Test for registration                        string intent = GuidCache.Get(credentials.uri + "-Intent") as string;                        if (!string.IsNullOrEmpty(intent))                      {                          if (intent.StartsWith("Register"))                          {                              int personId = Int32.Parse(intent.Substring("Register-".Length));                              Person person = Person.FromIdentity(personId);                              person.BitIdAddress = credentials.address;                              GuidCache.Set(credentials.uri + "-Intent"' "Complete");                          }                      }                        // Otherwise' test for logon                        if (GuidCache.Get (credentials.uri + "-Logon") as string == "Unauth")                      {                          Person person = Person.FromBitIdAddress (credentials.address);                            // TODO: If above throws' show friendly "unknown wallet" message                            int lastOrgId = person.LastLogonOrganizationId;                            if (lastOrgId == 0)                          {                              lastOrgId = Organization.SandboxIdentity;                              person.LastLogonOrganizationId = lastOrgId;                          }                            GuidCache.Set (credentials.uri + "-LoggedOn"'                              Authority.FromLogin(person' Organization.FromIdentity(person.LastLogonOrganizationId)).ToEncryptedXml());                      }                  }                  catch (Exception e)                  {                      Persistence.Key["BitIdLogin_Debug_Exception"] = e.ToString();                  }                    // TODO: Error codes                    response.StatusCode = 200;                  response.SetJson();                  response.Write ("{\"address\":\"" + credentials.address + "\"'\"signature\":\"" + credentials.signature +                                  "\"}");                  response.End();              }              else              {                  response.StatusCode = 401; // Be a bit more friendly in your return codes              }
Magic Number,Swarmops.Pages.Security,Login,C:\repos\Swarmops_Swarmops\Site\Security\Login.aspx.cs,TestCredentials,The following statement contains a magic number: if (!string.IsNullOrEmpty (credentialsLogin.Trim()) && !string.IsNullOrEmpty (credentialsPass.Trim()))              {                  string logonUri = HttpUtility.UrlDecode (logonUriEncoded);                    try                  {                      Person authenticatedPerson = Authentication.Authenticate (credentialsLogin'                          credentialsPass);                        if (!string.IsNullOrEmpty(authenticatedPerson.BitIdAddress))                      {                          // We can't logon with username/password combo; bitID is activated and so                          // require it.                            return "BitIdRequired";                      }                        int lastOrgId = authenticatedPerson.LastLogonOrganizationId;                        if (PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE) && (lastOrgId == 3 || lastOrgId == 0))                      {                          lastOrgId = 1; // legacy: log on to Piratpartiet SE if indeterminate; prevent sandbox for this pilot                          authenticatedPerson.LastLogonOrganizationId = 1; // avoid future legacy problems                      }                      else if (lastOrgId == 0)                      {                          lastOrgId = Organization.SandboxIdentity;                          authenticatedPerson.LastLogonOrganizationId = lastOrgId;                      }                        Authority testAuthority = Authority.FromLogin (authenticatedPerson'                          Organization.FromIdentity (lastOrgId));                        if (!authenticatedPerson.ParticipatesInOrganizationOrParent (lastOrgId) && !testAuthority.HasSystemAccess (AccessType.Read))                      {                          // If the person doesn't have access to the last organization (anymore)' log on to Sandbox                          // unless first pilot' in which case throw (deny login)                            if (PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))                          {                              throw new UnauthorizedAccessException();                          }                            lastOrgId = Organization.SandboxIdentity;                      }                        GuidCache.Set (logonUri + "-LoggedOn"'                          Authority.FromLogin (authenticatedPerson' Organization.FromIdentity (lastOrgId)).ToEncryptedXml());                        return "Success";  // Prepare here for "Additional2FARequired" return code                  }                  catch (UnauthorizedAccessException)                  {                      return "Fail";                  }              }
Magic Number,Swarmops.Pages.Security,RequestPasswordReset,C:\repos\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The following statement contains a magic number: string resetTicket = SupportFunctions.GenerateSecureRandomKey (16);
Magic Number,Swarmops.Pages.Security,RequestPasswordReset,C:\repos\Swarmops_Swarmops\Site\Security\RequestPasswordReset.aspx.cs,RequestTicket,The following statement contains a magic number: resetTicket = resetTicket.Substring (0' 21);
Magic Number,Swarmops.Pages.Security,ResetPassword,C:\repos\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  string suppliedTicket = Request.QueryString["Ticket"];                  if (!string.IsNullOrEmpty (suppliedTicket) && suppliedTicket.Trim().Length == 21)                  {                      this.TextTicket.Text = suppliedTicket.Trim().ToUpperInvariant();                      this.TextTicket.ReadOnly = true;                      this.TextTicket.Enabled = false;                  }                    Localize();              }
Magic Number,Swarmops.Pages.Security,ResetPassword,C:\repos\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,PerformReset,The following statement contains a magic number: if (resetData.Length != 2)              {                  return false; // invalid data or no ticket              }
Magic Number,Swarmops.Pages.Security,ResetPassword,C:\repos\Swarmops_Swarmops\Site\Security\ResetPassword.aspx.cs,PerformReset,The following statement contains a magic number: string lockdownTicket = SupportFunctions.GenerateSecureRandomKey (16);
Magic Number,Swarmops.Controls.Base,FileUpload,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Base\FileUpload.ascx.designer.cs,Page_Load,The following statement contains a magic number: if (!Page.IsPostBack)              {                  Guid newGuid = Guid.NewGuid();                  this.HiddenGuid.Value = this.GuidString = newGuid.ToString();                    if (Filter == UploadFilter.Unknown) // if not set in control                  {                      Filter = UploadFilter.NoFilter;                  }                  if (DisplayCount == 0) // if not set                  {                      DisplayCount = 16;                  }                  if (ClientUploadCompleteCallback == null)                  {                      ClientUploadCompleteCallback = string.Empty;                  }                  if (ClientUploadStartedCallback == null)                  {                      ClientUploadStartedCallback = string.Empty;                  }              }              else              {                  this.GuidString = this.HiddenGuid.Value;              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: int hue = (type == ColorType.Base ? 222 : 40);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: int hue = (type == ColorType.Base ? 222 : 40);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (variant)              {                  case ColorVariant.Base:                      saturation = 100;                      luminosity = 80;                      break;                  case ColorVariant.Dark:                      saturation = 50;                      luminosity = 50;                      break;                  case ColorVariant.XDark:                      saturation = 65;                      luminosity = 30;                      break;                  case ColorVariant.Light:                      saturation = 100;                      luminosity = 90;                      break;                  case ColorVariant.XLight:                      saturation = 100;                      luminosity = 95;                      break;                  default:                      throw new NotImplementedException();              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: if (type == ColorType.Accent)              {                  saturation *= 2;                  if (saturation > 100)                  {                      saturation = 100;                  }              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: if (type == ColorType.Accent)              {                  saturation *= 2;                  if (saturation > 100)                  {                      saturation = 100;                  }              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: if (type == ColorType.Accent)              {                  saturation *= 2;                  if (saturation > 100)                  {                      saturation = 100;                  }              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (shift)              {                  case ColorShift.SlightlyDarker:                      luminosity -= 2;                      break;                  case ColorShift.SlightlyLighter:                      luminosity += 2;                      break;                  default:                      // do nothing                      break;              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: switch (shift)              {                  case ColorShift.SlightlyDarker:                      luminosity -= 2;                      break;                  case ColorShift.SlightlyLighter:                      luminosity += 2;                      break;                  default:                      // do nothing                      break;              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,GetColor,The following statement contains a magic number: Color color = ColorFromAhsb (100' hue' saturation/100.0' luminosity/100.0);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (s < 0.001)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (s < 0.001)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (s < 0.001)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (s < 0.001)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (0.5 < b)              {                  fMax = b - (b*s) + s;                  fMin = b + (b*s) - s;              }              else              {                  fMax = b + (b*s);                  fMin = b - (b*s);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: if (0 == iSextant%2)              {                  fMid = h*(fMax - fMin) + fMin;              }              else              {                  fMid = fMin - h*(fMax - fMin);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMax = Convert.ToInt32 (fMax*255);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMid = Convert.ToInt32 (fMid*255);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: iMin = Convert.ToInt32 (fMin*255);
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double h = hue/360.0;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double s = saturation/100.0;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: double l = luminosity/100.0;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: if (s < 0.0001) // zero              {                  r = g = b = l; // achromatic              }              else              {                  double q = l < 0.5 ? l*(1 + s) : l + s - l*s;                  double p = 2*l - q;                  r = Hue2Rgb (p' q' h + 1/3);                  g = Hue2Rgb (p' q' h);                  b = Hue2Rgb (p' q' h - 1/3);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: if (s < 0.0001) // zero              {                  r = g = b = l; // achromatic              }              else              {                  double q = l < 0.5 ? l*(1 + s) : l + s - l*s;                  double p = 2*l - q;                  r = Hue2Rgb (p' q' h + 1/3);                  g = Hue2Rgb (p' q' h);                  b = Hue2Rgb (p' q' h - 1/3);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: if (s < 0.0001) // zero              {                  r = g = b = l; // achromatic              }              else              {                  double q = l < 0.5 ? l*(1 + s) : l + s - l*s;                  double p = 2*l - q;                  r = Hue2Rgb (p' q' h + 1/3);                  g = Hue2Rgb (p' q' h);                  b = Hue2Rgb (p' q' h - 1/3);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: if (s < 0.0001) // zero              {                  r = g = b = l; // achromatic              }              else              {                  double q = l < 0.5 ? l*(1 + s) : l + s - l*s;                  double p = 2*l - q;                  r = Hue2Rgb (p' q' h + 1/3);                  g = Hue2Rgb (p' q' h);                  b = Hue2Rgb (p' q' h - 1/3);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: if (s < 0.0001) // zero              {                  r = g = b = l; // achromatic              }              else              {                  double q = l < 0.5 ? l*(1 + s) : l + s - l*s;                  double p = 2*l - q;                  r = Hue2Rgb (p' q' h + 1/3);                  g = Hue2Rgb (p' q' h);                  b = Hue2Rgb (p' q' h - 1/3);              }
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,HslToWebColor,The following statement contains a magic number: return String.Format ("#{0:x2}{1:x2}{2:x2}"' (int) (r*255)' (int) (g*255)' (int) (b*255));
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 1/6) return p + (q - p)*6*t;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 1/6) return p + (q - p)*6*t;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 1/2) return q;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 2/3) return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 2/3) return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 2/3) return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 2/3) return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,CommonV5,C:\repos\Swarmops_Swarmops\Site\Bases\CommonV5.cs,Hue2Rgb,The following statement contains a magic number: if (t < 2/3) return p + (q - p)*(2/3 - t)*6;
Magic Number,Swarmops.Frontend,DataV5Base,C:\repos\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,LocalizeCount,The following statement contains a magic number: switch (count)              {                  case 0:                      result = parts[0];                      break;                  case 1:                      result = parts[1];                      break;                  default:                      result = String.Format (parts[2]' count);                      break;              }
Magic Number,Swarmops.Frontend,DataV5Base,C:\repos\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,TryLocalize,The following statement contains a magic number: string resourceKey = inputParts[0].Substring (5);
Magic Number,Swarmops.Frontend,DataV5Base,C:\repos\Swarmops_Swarmops\Site\Bases\DataV5Base.cs,TryLocalize,The following statement contains a magic number: if (inputParts[1].StartsWith ("[Date]"))              {                  argument = DateTime.Parse (inputParts[1].Substring (6)' CultureInfo.InvariantCulture);              }              else              {                  argument = inputParts[1];              }
Magic Number,Swarmops.Frontend,PageV5Base,C:\repos\Swarmops_Swarmops\Site\Bases\PageV5Base.cs,LocalizeCount,The following statement contains a magic number: switch (count)              {                  case 0:                      result = parts[0];                      break;                  case 1:                      result = parts[1];                      break;                  default:                      result = String.Format (parts[2]' count);                      break;              }
Magic Number,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Init,The following statement contains a magic number: if (this._authority.Organization.Identity == 3 &&                  PilotInstallationIds.IsPilot (PilotInstallationIds.PiratePartySE))              {                  this._authority = null;                  FormsAuthentication.SignOut();                  Response.Redirect("/"' true);              }
Magic Number,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Page_Load,The following statement contains a magic number: _cacheVersionMark = SHA1.Hash (_cacheVersionMark).Replace(" "' "").Substring (0' 8);
Magic Number,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The following statement contains a magic number: if (cultureStringLower == "en-us")              {                  cultureString = "en-US";                  cultureStringLower = "en-us";                  Thread.CurrentThread.CurrentCulture = new CultureInfo (cultureString);                    HttpCookie cookieCulture = new HttpCookie ("PreferredCulture");                  cookieCulture.Value = cultureString;                  cookieCulture.Expires = DateTime.Now.AddDays (365);                  Response.Cookies.Add (cookieCulture);              }
Magic Number,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The following statement contains a magic number: if (!cultureStringLower.StartsWith ("en") && cultureString.Length > 3)              {                  flagName = cultureStringLower.Substring (3);              }
Magic Number,Swarmops.Frontend,MasterV5,C:\repos\Swarmops_Swarmops\Site\Master-v5.master.cs,Localize,The following statement contains a magic number: if (!cultureStringLower.StartsWith ("en") && cultureString.Length > 3)              {                  flagName = cultureStringLower.Substring (3);              }
Magic Number,Swarmops.Controls.Swarm,PersonDetailPopup,C:\repos\Swarmops_Swarmops\Site\Controls\v5\Swarm\PersonDetailPopup.ascx.cs,Reset,The following statement contains a magic number: if (ViewState[ClientID + "_PersonId"] == null)              {                  this.ImageAvatar.ImageUrl = "https://pirateweb.net/Images/Public/Fugue/icons-shadowless/cross.png";              }              else              {                  this.ImageAvatar.ImageUrl =                      Person.FromIdentity ((int) ViewState[ClientID + "_PersonId"]).GetSecureAvatarLink (96);              }
Missing Default,Swarmops.Pages.v5.Support,StreamUpload,C:\repos\Swarmops_Swarmops\Site\Pages\v5\Support\StreamUpload.aspx.cs,Page_Load,The following switch statement is missing a default case: switch (document.DocumentType)                  {                      case DocumentType.FinancialTransaction:                      {  /*                          //TODO: Get the orgId from foreign object                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                          }*/                      }                          break;                      case DocumentType.ExpenseClaim:                      case DocumentType.InboundInvoice:                      case DocumentType.OutboundInvoice:                      {                          int budgetId = 0;                            if (document.DocumentType == DocumentType.ExpenseClaim)                          {                              ExpenseClaim claim = (ExpenseClaim) document.ForeignObject;                              orgId = claim.Budget.OrganizationId;                              budgetId = claim.BudgetId;                          }                          else if (document.DocumentType == DocumentType.InboundInvoice)                          {                              InboundInvoice invoice = (InboundInvoice) document.ForeignObject;                              orgId = invoice.Budget.OrganizationId;                              budgetId = invoice.BudgetId;                          }                          else                          {                              OutboundInvoice invoice = (OutboundInvoice) document.ForeignObject;                              orgId = invoice.OrganizationId;                              budgetId = invoice.BudgetId;                          }                              FinancialAccount budget = FinancialAccount.FromIdentity(budgetId);                            if (budget.OwnerPersonId == CurrentUser.Identity || budget.OwnerPersonId == 0)                          {                              hasPermission = true;                              break;                          }                            // TODO: Security leak - check CurrentOrganization against Document's org                            if (                              CurrentAuthority.HasAccess(new Access(CurrentOrganization' AccessAspect.Financials'                                  AccessType.Write)))                          {                              hasPermission = true;                          }                          /*                          if (this.CurrentAuthority.HasPermission(Permission.CanSeeEconomyDetails' orgId' -1' Authorization.Flag.ExactOrganization))                          {                              hasPermission = true;                              break;                          }*/                            break;                      }                      case DocumentType.PaperLetter:                      {                          PaperLetter letter = (PaperLetter) document.ForeignObject;                            if (letter.Recipient.Identity == CurrentUser.Identity)                          {                              hasPermission = true; // A letter to the viewer                          }                          /*                          // Otherwise' are there overriding permissions' if not addressed to him/her?                            else if (!letter.Personal)                          {                              // Unpersonal paper letter' like a rally permit. Note that bank statements should                              // be considered personal as they contain donors' information in the transaction info.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeInsensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else if (letter.ToPersonId == 0)                          {                              // Addressed to the organization' not to a specific person' but still personal.                              // Typical examples include political inquiries from private citizens written on                              // paper.                                if (this.CurrentAuthority.HasPermission(Permission.CanSeeSensitivePaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }                          else                          {                              // Addressed to a specific individual that is not the viewer' and it's personal.                               // INVOCATION OF THIS CODE IS A BREACH OF THE POSTAL SECRET and should ONLY EVER                               // be done for technical' not operational' reasons and preferably NEVER.                                if (this.CurrentAuthority.HasPermission(Permission.CanBreachPostalSecretPaperLetters' letter.OrganizationId' -1' Authorization.Flag.Default))                              {                                  hasPermission = true;                              }                          }*/                      }                          break;                      case DocumentType.PersonPhoto:                      case DocumentType.Logo:                      case DocumentType.Artwork:                      {                          // These are public                            hasPermission = true;                      }                          break;                    }
