Implementation smell,Namespace,Class,File,Method,Description
Long Method,Swarmops.Utility.BotCode,EventProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\EventProcessor.cs,Run,The method has 141 lines of code.
Long Method,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The method has 182 lines of code.
Long Method,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The method has 311 lines of code.
Long Method,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,Run,The method has 118 lines of code.
Long Method,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,The method has 183 lines of code.
Long Method,Swarmops.Utility.BotCode,UpdateStatsCache,C:\repos\Swarmops_Swarmops\Utility\BotCode\UpdateStatsCache.cs,ObsoletedUpdateBallotDistroData,The method has 165 lines of code.
Long Method,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,Send,The method has 110 lines of code.
Long Method,Swarmops.Utility.Mail,NewsletterTransmitter2,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter.cs,Send,The method has 129 lines of code.
Long Method,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The method has 178 lines of code.
Long Method,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The method has 174 lines of code.
Complex Method,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GenerateBallot,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,Cyclomatic complexity of the method is 8
Complex Method,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,Cyclomatic complexity of the method is 17
Complex Method,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,Cyclomatic complexity of the method is 19
Complex Method,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,Run,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,Cyclomatic complexity of the method is 16
Complex Method,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,RemindExpiriesMail,Cyclomatic complexity of the method is 9
Complex Method,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,ChurnExpiredMembers,Cyclomatic complexity of the method is 12
Complex Method,Swarmops.Utility.BotCode,SchulzeProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\SchulzeProcessor.cs,CalculateLinkStrengths,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,Cyclomatic complexity of the method is 10
Complex Method,Swarmops.Utility.Special.Sweden,SupportMailReview,C:\repos\Swarmops_Swarmops\Utility\Special\Sweden\SupportMailReview.cs,Run,Cyclomatic complexity of the method is 8
Long Parameter List,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,MailTransmitter,The method has 6 parameters. Parameters: fromName' fromAddress' subject' bodyPlain' recipients' toOfficers
Long Parameter List,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,MailTransmitter,The method has 5 parameters. Parameters: fromName' fromAddress' subject' bodyPlain' recipient
Long Parameter List,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,MailTransmitter,The method has 6 parameters. Parameters: fromName' fromAddress' subject' bodyPlain' recipient' toOfficers
Long Parameter List,Swarmops.Utility.Mail,Newsletter,C:\repos\Swarmops_Swarmops\Utility\Mail\Newsletter.cs,Newsletter,The method has 6 parameters. Parameters: templateId' senderName' senderAddress' title' body' recipients
Long Parameter List,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The method has 5 parameters. Parameters: title' sendToAll' categories' mailText' reporters
Long Statement,Swarmops.Utility.BotCode,ActivityMailer,C:\repos\Swarmops_Swarmops\Utility\BotCode\ActivityMailer.cs,Run,The length of the statement  "                "<p>F&ouml;r att logga aktivism d&auml;r du &auml;r funktion&auml;r' g&aring; till PirateWeb' Aktivism' <a href=\"https://pirateweb.net/Pages/v4/Activism/LogActivism.aspx\">Logga aktivism</a>. B&auml;sta valkretsen fram till valet vinner Fina Priser!</p>" + " is 257.
Long Statement,Swarmops.Utility.BotCode,ActivityMailer,C:\repos\Swarmops_Swarmops\Utility\BotCode\ActivityMailer.cs,Run,The length of the statement  "                    if (person.ParticipatesInOrganization(Organization.PPSE) && person.PartyEmail.Length > 0 && !dupeCheck.ContainsKey(person.Identity)) " is 132.
Long Statement,Swarmops.Utility.BotCode,EventProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\EventProcessor.cs,Run,The length of the statement  "                                PaypalImporter.Run(Encoding.ASCII.GetString(Convert.FromBase64String(newEvent.ParameterText))' Organization.FromIdentity(newEvent.OrganizationId)' Person.FromIdentity(newEvent.ActingPersonId)); " is 193.
Long Statement,Swarmops.Utility.BotCode,EventProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\EventProcessor.cs,Run,The length of the statement  "                                PaysonImporter.Run(Encoding.ASCII.GetString(Convert.FromBase64String(newEvent.ParameterText))' Organization.FromIdentity(newEvent.OrganizationId)' Person.FromIdentity(newEvent.ActingPersonId)); " is 193.
Long Statement,Swarmops.Utility.BotCode,EventProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\EventProcessor.cs,Run,The length of the statement  "                    ExceptionMail.Send(new Exception("Eventprocessor failed for EventType:" + newEvent.EventType + "' id=" + newEvent.EventId + ". Event was ignored."' ex)); " is 153.
Long Statement,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The length of the statement  "                                          " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n"; " is 121.
Long Statement,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The length of the statement  "                // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be " is 156.
Long Statement,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The length of the statement  "                // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution. " is 131.
Long Statement,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The length of the statement  "                // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so' " is 160.
Long Statement,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,Run,The length of the statement  "                              "copied on the mail to know what's happening in the organization. There is normally some overlap between these two groups.\r\n\r\n"; " is 132.
Long Statement,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,The length of the statement  "                    // We used to add 70 minutes as a defense against mistakes on DST switch in spring and fall (yes' it has happened)' but have reduced to two. " is 140.
Long Statement,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,RemindAllExpiries,The length of the statement  "                              "Piratpartiet: Ditt medlemskap gεr ut om bara ett par dagar. Svara pε detta SMS med texten \"PP IGEN\" fφr att fφrnya (5 kr)."); " is 128.
Long Statement,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,RemindAllExpiries,The length of the statement  "                              "Piratpartiet: Ditt medlemskap gεr ut vid midnatt ikvδll. Svara pε detta SMS med texten \"PP IGEN\" fφr att fφrnya.");*/ " is 120.
Long Statement,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,SendReminderMail,The length of the statement  "            // NEW December 2010: Organizations are separated as per common agreement' there are no common reminder mails. Every membership renews on its own. " is 146.
Long Statement,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,SendReminderMail,The length of the statement  "            remindermail.pPreamble = "<p> Nu δr det dags att <strong>fφrnya ditt medlemskap</strong> i " + membership.Organization.Name + "."; " is 130.
Long Statement,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,SendReminderMail,The length of the statement  "            OutboundMail mail = remindermail.CreateFunctionalOutboundMail(MailAuthorType.MemberService' OutboundMail.PriorityNormal' membership.Organization' Geography.Root); " is 162.
Long Statement,Swarmops.Utility.BotCode,UpdateStatsCache,C:\repos\Swarmops_Swarmops\Utility\BotCode\UpdateStatsCache.cs,ObsoletedUpdateBallotDistroData,The length of the statement  "            //        BotLog.Write(3' "BallotDistroData"' city.Name + " ElectionDay: " + (singleDistro + doubleDistro + fullCoverage).ToString() + "/" + total.ToString()); " is 159.
Long Statement,Swarmops.Utility.Communications,CommsTransmitterMail,C:\repos\Swarmops_Swarmops\Utility\Communications\CommsTransmitterMail.cs,Transmit,The length of the statement  "            var methodInfo = payloadType.GetMethod("FromXml"' BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy); " is 125.
Long Statement,Swarmops.Utility.Communications,CommsTransmitterMail,C:\repos\Swarmops_Swarmops\Utility\Communications\CommsTransmitterMail.cs,Transmit,The length of the statement  "                if (person.Identity == 1 && PilotInstallationIds.DevelopmentSandbox == SystemSettings.InstallationId && mail.Subject.Contains("|")) " is 131.
Long Statement,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ImportPayson,The length of the statement  "                @"<tr>\s+<td>\s*(?<datetime>[0-9]{4}-[0-9]{2}-[0-9]{2}\s[0-9]{2}:[0-9]{2}:[0-9]{2})\s*</td><td>(?<comment1>[^<]*)</td><td>[^>]*</td><td>(?<txid>[0-9]+)</td>\s*<td>(?<from>[^<]+)</td>\s*<td>(?<to>[^<]+)</td><td class=\""tal\"">(?<gross>[\-0-9']+)</td><td class=\""tal\"">(?<fee>[\-0-9']+)</td><td class=\""tal\"">(?<vat>[\-0-9']+)</td><td class=\""tal\"">(?<net>[\-0-9']+)</td><td class=\""tal\"">(?<balance>[\-0-9']+)</td><td>(?<currency>[^<]+)</td><td>(?<reference>[^<]+)</td><td[^>]+?>(?<comment2>[^<]+)</td>"; " is 512.
Long Statement,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,Run,The length of the statement  "                    "The file you uploaded does not appear to be a PayPal tab-delimited file of all activity. No processing done. The data has been discarded."); " is 141.
Long Statement,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The length of the statement  "            Regex regexLinksForum = new Regex("(?s)\\[a\\s+href=\\\"(?<link>[^\\\"]+)\\\"\\](?<description>[^\\[]+)\\[/a\\]"' RegexOptions.Multiline); " is 138.
Long Statement,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The length of the statement  "            Regex regexLinks = new Regex("(?s)\\[a\\s+href=\\\"(?<link>[^\\\"]+)\\\"\\](?<description>[^\\[]+)\\[/a\\]"' RegexOptions.Multiline); " is 133.
Long Statement,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The length of the statement  "            AlternateView textHotmailView = new AlternateView(new MemoryStream(Encoding.Default.GetBytes(textTemplate))' typeIsoLatin1); " is 124.
Long Statement,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The length of the statement  "            Regex regexLinksForum = new Regex("(?s)\\[a\\s+href=\\\"(?<link>[^\\\"]+)\\\"\\](?<description>[^\\[]+)\\[/a\\]"' RegexOptions.Multiline); " is 138.
Long Statement,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The length of the statement  "            Regex regexLinks = new Regex("(?s)\\[a\\s+href=\\\"(?<link>[^\\\"]+)\\\"\\](?<description>[^\\[]+)\\[/a\\]"' RegexOptions.Multiline); " is 133.
Long Statement,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The length of the statement  "            AlternateView textHotmailView = new AlternateView(new MemoryStream(Encoding.Default.GetBytes(textTemplate))' typeIsoLatin1); " is 124.
Complex Conditional,Swarmops.Utility.Financial,PaymentGroupMapper,C:\repos\Swarmops_Swarmops\Utility\Financial\PaymentGroupMapper.cs,Run,The conditional expression  "group.Open && tx.Description.EndsWith (group.Tag.Substring (4)) &&                              tx.DateTime.Date == group.DateTime.Date && tx.Rows.AmountCentsTotal == group.AmountCents"  is complex.
Empty Catch Block,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GenerateBallot,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.BotCode,BlogWatcher,C:\repos\Swarmops_Swarmops\Utility\BotCode\BlogWatcher.cs,Run,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,SendReminderSms,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility,ExceptionMail,C:\repos\Swarmops_Swarmops\Utility\ExceptionMail.cs,Send,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,Run,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,Run,The method has an empty catch block.
Empty Catch Block,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,TransmitOneMessage,The method has an empty catch block.
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,ComposeBallots,The following statement contains a magic number: foreach (Geography ballotGeography in BallotGeographies)              {                  FinalBallots[ballotGeography.Identity] = GenerateBallot (this.geographicLists[ballotGeography.Identity]'                      22'                      method);              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,CalculateListMaleQuota,The following statement contains a magic number: if (candidates.Count < 1)              {                  return 0.5; // Division by zero protection' here and in caller              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,The following statement contains a magic number: if (method == BallotCompositionMethod.TopTenNational)              {                  if (currentPosition <= 10)                  {                      return currentPosition;                  }                    return 0;              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,The following statement contains a magic number: if (method == BallotCompositionMethod.TopFiveNational)              {                  if (currentPosition <= 5)                  {                      return currentPosition;                  }                    return 0;              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,The following statement contains a magic number: if (method == BallotCompositionMethod.InterleavedTenNational)              {                  if ((currentPosition%2 == 1) && currentPosition < 20)                  {                      return (currentPosition/2 + 1);                  }                    return 0;              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,The following statement contains a magic number: if (method == BallotCompositionMethod.InterleavedTenNational)              {                  if ((currentPosition%2 == 1) && currentPosition < 20)                  {                      return (currentPosition/2 + 1);                  }                    return 0;              }
Magic Number,Swarmops.Utility.BotCode,BallotComposer,C:\repos\Swarmops_Swarmops\Utility\BotCode\BallotComposer.cs,GetMasterListPosition,The following statement contains a magic number: if (method == BallotCompositionMethod.InterleavedTenNational)              {                  if ((currentPosition%2 == 1) && currentPosition < 20)                  {                      return (currentPosition/2 + 1);                  }                    return 0;              }
Magic Number,Swarmops.Utility.BotCode,BlogTop50Scraper,C:\repos\Swarmops_Swarmops\Utility\BotCode\BlogTop50Scraper.cs,ScrapeAndStore,The following statement contains a magic number: using (Stream stream = request.GetResponse().GetResponseStream())              {                  using (StreamReader reader = new StreamReader (stream' Encoding.GetEncoding (1252)))                  {                      scrapeData = reader.ReadToEnd();                  }              }
Magic Number,Swarmops.Utility.BotCode,BlogWatcher,C:\repos\Swarmops_Swarmops\Utility\BotCode\BlogWatcher.cs,Run,The following statement contains a magic number: foreach (string keyword in keywords)              {                  string rssUrl = "http://knuff.se/rss/q/" + keyword;                    // Read the RSS URL into memory' then feed RssReader from a MemoryStream                    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (rssUrl);                  request.UserAgent = "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5";                  HttpWebResponse resp = (HttpWebResponse) request.GetResponse();                  RssReader reader = new RssReader (resp.GetResponseStream());                    try                  {                      Rss rss = reader.Read();                        foreach (RssChannelItem item in rss.Channel.Items)                      {                          // We want the title' link and pubdate.                            string url = item.Link;                          DateTime dateTime = item.PubDate;                            int dividerIndex = item.Title.LastIndexOf ('(');                            if (item.Title.EndsWith ("))"))                          {                              dividerIndex = item.Title.Substring (0' item.Title.Length - 7).LastIndexOf ('(');                          }                            string title = item.Title.Substring (0' dividerIndex).Trim();                          string blogName = item.Title.Substring (dividerIndex + 1' item.Title.Length - dividerIndex - 2);                            bool newEntry = MediaEntry.CreateFromKeyword (keyword' blogName' true' url' title' dateTime);                            if (newEntry)                          {                              try                              {                                  PingCreeper (url);                              }                              catch (Exception)                              {                                  // Ignore exceptions here' move on to the next entry                              }                          }                      }                  }                  catch (Exception e)                  {                      throw new ReaderException ("feed:" + rssUrl + "' Status=" + resp.StatusCode' e);                  }                    finally                  {                      request.GetResponse().GetResponseStream().Close();                  }              }
Magic Number,Swarmops.Utility.BotCode,BlogWatcher,C:\repos\Swarmops_Swarmops\Utility\BotCode\BlogWatcher.cs,Run,The following statement contains a magic number: foreach (string keyword in keywords)              {                  string rssUrl = "http://knuff.se/rss/q/" + keyword;                    // Read the RSS URL into memory' then feed RssReader from a MemoryStream                    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (rssUrl);                  request.UserAgent = "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9b5) Gecko/2008050509 Firefox/3.0b5";                  HttpWebResponse resp = (HttpWebResponse) request.GetResponse();                  RssReader reader = new RssReader (resp.GetResponseStream());                    try                  {                      Rss rss = reader.Read();                        foreach (RssChannelItem item in rss.Channel.Items)                      {                          // We want the title' link and pubdate.                            string url = item.Link;                          DateTime dateTime = item.PubDate;                            int dividerIndex = item.Title.LastIndexOf ('(');                            if (item.Title.EndsWith ("))"))                          {                              dividerIndex = item.Title.Substring (0' item.Title.Length - 7).LastIndexOf ('(');                          }                            string title = item.Title.Substring (0' dividerIndex).Trim();                          string blogName = item.Title.Substring (dividerIndex + 1' item.Title.Length - dividerIndex - 2);                            bool newEntry = MediaEntry.CreateFromKeyword (keyword' blogName' true' url' title' dateTime);                            if (newEntry)                          {                              try                              {                                  PingCreeper (url);                              }                              catch (Exception)                              {                                  // Ignore exceptions here' move on to the next entry                              }                          }                      }                  }                  catch (Exception e)                  {                      throw new ReaderException ("feed:" + rssUrl + "' Status=" + resp.StatusCode' e);                  }                    finally                  {                      request.GetResponse().GetResponseStream().Close();                  }              }
Magic Number,Swarmops.Utility.BotCode,BotLog,C:\repos\Swarmops_Swarmops\Utility\BotCode\BotLog.cs,LogWrite,The following statement contains a magic number: if (!Debugger.IsAttached)              {                  using (StreamWriter writer = new StreamWriter (logFileName' true' Encoding.GetEncoding (1252)))                  {                      writer.WriteLine ("[" + now.ToString ("HH:mm:ss.fff") + "] " + message);                  }              }              else              {                  // If we're in a development environment' write the log entry to the Output window instead.                  Debug.WriteLine("[" + now.ToString("HH:mm:ss.fff") + "] " + message);              }
Magic Number,Swarmops.Utility.BotCode,HeartBeater,C:\repos\Swarmops_Swarmops\Utility\BotCode\HeartBeater.cs,Beat,The following statement contains a magic number: if ((DateTime.Now.Subtract (this.lastBeat).TotalSeconds > 10)                  && (this.FlagRestartRequested == false))              {                  try                  {                      this.lastBeat = DateTime.Now;                      string nowString = this.lastBeat.ToString();                      Persistence.Key["PirateBot-L-Heartbeat"] = nowString;                        if (nowString == Persistence.Key["PirateBot-L-Heartbeat"])                      {                          writeFile (filename' DateTime.Now.ToString());                      }                      else                      {                          SuggestRestart();                          throw new Exception ("Failed to update HeartBeat");                      }                  }                  catch (Exception e)                  {                      SuggestRestart();                      throw new Exception ("Failed to update HeartBeat"' e);                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: OutboundMails mails = OutboundMails.GetTopUnprocessed (100);
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: int maxBatchSize = 20;
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,Run,The following statement contains a magic number: foreach (OutboundMail mail in mails)              {                  // If we have already processed past our limit' return for now.                  if (maxBatchSize < 1)                  {                      return;                  }                    // We are continuing to process' and starting with a fresh outbound mail.                    // Is this the first time we touch this mail?                  if (mail.StartProcessDateTime.Year < 2000)                  {                      // Yes! Mark it as started and mail our author.                      mail.StartProcessDateTime = DateTime.Now;                        if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                          || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail) // TODO: Set special flag                      {                          string mailBody = string.Empty;                            new MailTransmitter (                              Strings.MailSenderName' Strings.MailSenderAddress' "Mail transmission begins: " + mail.Title'                              mailBody' Person.FromIdentity (mail.AuthorPersonId)' true).Send();                      }                  }                    int batchSize = maxBatchSize;                    // If we are debugging' and stepping through this program' avoid the misery of many simultaneous threads.                    if (Debugger.IsAttached)                  {                      batchSize = 1; // Do NOT multithread while debugging                  }                    while (true)                  {                      if (!Debugger.IsAttached)                      {                          HeartBeater.Instance.Beat();                          //Tick the heartbeat to stop exernal restart if this takes a lot of time' but only if not debugging.                      }                        OutboundMailRecipients recipients = mail.GetNextRecipientBatch (batchSize);                        maxBatchSize -= recipients.Count; // Decrement number of recipients to process on next mail' if any                        if (recipients.Count == 0)                      {                          // This mail is complete!                            mail.SetProcessed();                            if (mail.MailType == (int) TypedMailTemplate.TemplateType.MemberMail                              || mail.MailType == (int) TypedMailTemplate.TemplateType.OfficerMail)                              // TODO: Set special flag                          {                              string body = "Your mail has completed transmitting to " +                                            mail.RecipientCount.ToString ("#'##0") +                                            " intended recipients. Out of these' " +                                            mail.RecipientsFail.ToString ("#'##0") +                                            " failed because of invalid' empty' or otherwise bad e-mail addresses. These people have not received your message.\r\n";                                new MailTransmitter (                                  Strings.MailSenderName' Strings.MailSenderAddress'                                  "Mail transmission completed: " + mail.Title' body'                                  Person.FromIdentity (mail.AuthorPersonId)'                                  true).Send();                          }                            if (maxBatchSize < 1)                          {                              return;                          }                            break; //the while loop                      }                      List<IAsyncResult> sendInProgress = new List<IAsyncResult>();                      List<WaitHandle> waitHandlesList = new List<WaitHandle>();                      foreach (OutboundMailRecipient recipient in recipients)                      {                          // Skip known invalid mail addresses                          if (recipient.Person != null                              && (recipient.Person.EMailIsInvalid || recipient.Person.MailUnreachable))                          {                              lock (lockObject)                              {                                  recipient.Delete();                                  recipient.OutboundMail.IncrementFailures();                              }                                continue;                          }                            // Start the transmission process' asynchronously                            lock (lockObject)                          {                              MailTransmissionDelegate asyncTransmitter = TransmitOneMail;                              MailTransmissionAsyncState asyncState = new MailTransmissionAsyncState();                              asyncState.dlgt = asyncTransmitter;                              asyncState.recipient = recipient;                              IAsyncResult asyncResult = asyncTransmitter.BeginInvoke (recipient' MailSent' asyncState);                              sendInProgress.Add (asyncResult);                              waitHandlesList.Add (asyncResult.AsyncWaitHandle);                              mailQueueSize++;                          }                            Thread.Sleep (25); // Allow some time                      }                        // now wait for them to finish;                      int numberStillExecuting = sendInProgress.Count;                      int numberExecutingLast = numberStillExecuting + 1;                      DateTime lastProgress = DateTime.Now;                          while (numberStillExecuting > 0)                      {                          WaitHandle.WaitAny (waitHandlesList.ToArray()' 100' true);                          lock (lockObject)                          {                              numberStillExecuting = 0;                              waitHandlesList = new List<WaitHandle>();                                for (int i = 0; i < sendInProgress.Count; ++i)                              {                                  IAsyncResult iares = sendInProgress[i];                                  MailTransmissionAsyncState asyncState = (MailTransmissionAsyncState) iares.AsyncState;                                    if (asyncState.dlgt != null)                                  {                                      if (!asyncState.callbackCompleted)                                      {                                          waitHandlesList.Add (iares.AsyncWaitHandle);                                          numberStillExecuting++;                                      }                                      else                                      {                                          //Just finalised                                          if (asyncState.exception != null)                                          {                                              if (asyncState.exception is RetryRecipientException)                                              {                                                  //Failed in sending due to some reason that can clear up by itself.                                                  asyncState.dlgt = null;                                              }                                              else                                              {                                                  //Make sure recipient is deleted                                                  try                                                  {                                                      asyncState.recipient.Delete();                                                        // if RemoveRecipientException everything went ok except for the removal                                                      if (asyncState.exception is RemoveRecipientException)                                                          asyncState.recipient.OutboundMail.IncrementSuccesses();                                                        asyncState.dlgt = null; // mark as done;                                                      mailQueueSize--;                                                  }                                                  catch                                                  {                                                      //Keep looping until recipient removed                                                      numberStillExecuting++;                                                  }                                              }                                          }                                      }                                  }                              }                          }                            if (numberExecutingLast != numberStillExecuting)                              lastProgress = DateTime.Now;                            numberExecutingLast = numberStillExecuting;                            if (lastProgress.AddSeconds (60*2) < DateTime.Now)                          {                              // since last change' something must have hanged                              lock (lockObject)                              {                                  mailQueueSize = -1000;                              }                              throw new Exception ("Timeout in MailProcessor");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The following statement contains a magic number: try              {                  // If the mail address in illegal format' do not try to send anything:                  if (!Formatting.ValidateEmailFormat (recipient.EmailPerson.Email.Trim()))                  {                      string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.MailUnreachable)                  {                      string msg = "MailUnreachable email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.NeverMail)                  {                      string msg = "NeverMail email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new IgnoreRecipientException (msg' null);                  }                      // Otherwise' let's start processing                    OutboundMail mail = recipient.OutboundMail;                    bool limitToLatin1 = false;                  bool limitToText = false;                  Encoding currentEncoding = Encoding.UTF8;                    string email = recipient.EmailPerson.Email.ToLower();                      if (mail.MailType == 0 || mail.TemplateName.EndsWith ("Plain"))                      limitToText = true;                    // TEST: Does this user require the use of a text-only message (as opposed to multipart/alternative)?                  if (recipient.Person != null && recipient.Person.LimitMailToText)                  {                      limitToText = true;                  }                    // This is supposedly not a problem anymore                  //if (email.EndsWith("@hotmail.com") || email.EndsWith("@msn.com"))                  //{                  //    limitToLatin1 = true;                  //}                    // TEST: Does this user require the limited use of the Latin-1 charset (as opposed to Unicode?)                  if (recipient.Person != null && recipient.Person.LimitMailToLatin1)                  {                      limitToLatin1 = true;                  }                    // Capability tests end here                    if (limitToLatin1)                      currentEncoding = Encoding.GetEncoding ("ISO-8859-1");                  else                      currentEncoding = Encoding.UTF8;                    QuotedPrintable qp = QuotedPrintableEncoder[currentEncoding];                      MailMessage message = new MailMessage();                    if (mail.AuthorType == MailAuthorType.Person)                  {                      try                      {                          message.From = new MailAddress (mail.Author.PartyEmail'                              qp.EncodeMailHeaderString (mail.Author.Name + " (" + mail.Organization.MailPrefixInherited +                                                         ")")'                              currentEncoding);                            if (mail.Author.Identity == 1)                          {                              //TODO: Create alternative party mail optional data field' or organization chairman (based on roles) differently                              // Ugly hack                              message.From = new MailAddress ("rick.falkvinge@piratpartiet.se"'                                  qp.EncodeMailHeaderString (mail.Author.Name + " (" +                                                             mail.Organization.MailPrefixInherited + ")")'                                  currentEncoding);                          }                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Invalid author address in MailProcessor.TransmitOneMail:" + (mail.AuthorPersonId) + ";" +                              mail.Author.PartyEmail' ex);                      }                  }                  else                  {                      try                      {                          FunctionalMail.AddressItem aItem =                              mail.Organization.GetFunctionalMailAddressInh (mail.AuthorType);                          message.From = new MailAddress (aItem.Email' qp.EncodeMailHeaderString (aItem.Name)'                              currentEncoding);                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Unknown MailAuthorType in MailProcessor.TransmitOneMail:" + ((int) mail.AuthorType)' ex);                      }                  }                      if (recipient.AsOfficer && recipient.Person != null)                  {                      try                      {                          message.To.Add (new MailAddress (recipient.Person.PartyEmail'                              qp.EncodeMailHeaderString (recipient.Person.Name + " (" +                                                         mail.Organization.MailPrefixInherited + ")")'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid officer email address:\r\nperson [" + recipient.Person.Identity +                                       "]' mail [" +                                       recipient.Person.PartyEmail + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                  else                  {                      try                      {                          message.To.Add (new MailAddress (recipient.EmailPerson.Email'                              qp.EncodeMailHeaderString (recipient.EmailPerson.Name)'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                       "]' mail [" +                                       recipient.EmailPerson.Email + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                    string culture = mail.Organization.DefaultCountry.Culture;                    // UGLY UGLY UGLY HACK' NEEDS TO CHANGE ASAP:                  // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be                  // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution.                    // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so'                  // we change the culture to en-US. It's an ugly as all hell hack but it should work as a temporary stopgap.                    if (recipient.Reporter != null)                  {                      MediaCategories categories = recipient.Reporter.MediaCategories;                        foreach (MediaCategory category in categories)                      {                          if (category.Name == "International/English")                          {                              culture = Strings.InternationalCultureCode;                              break;                          }                      }                  }                    if (limitToText)                  {                      // if just text' then just add a plaintext body;                      string text = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                          }                          catch (Exception ex)                          {                              throw new RemoveRecipientException (                                  "TextRendering failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                                  " will not retry.\n"' ex);                          }                      }                      message.BodyEncoding = currentEncoding;                      message.Body = text;                  }                  else                  {                      // otherwise' add a multipart/alternative with text and HTML                      string text = "";                      string html = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      Exception ex = null;                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                              html = mail.RenderHtml (recipient.EmailPerson' culture);                          }                          catch (Exception e)                          {                              ex = e;                          }                      }                      if (text == "")                          throw new RemoveRecipientException (                              "Rendering (text) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                      if (html == "" || ex != null)                          throw new RemoveRecipientException (                              "Rendering (html) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                        ContentType textContentType = new ContentType (MediaTypeNames.Text.Plain);                      textContentType.CharSet = currentEncoding.BodyName;                        ContentType htmlContentType = new ContentType (MediaTypeNames.Text.Html);                      htmlContentType.CharSet = currentEncoding.BodyName;                        AlternateView textView = null;                      AlternateView htmlView = null;                          if (limitToLatin1)                      {                          textView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              textContentType);                          htmlView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              htmlContentType);                      }                      else                      {                          textView = AlternateView.CreateAlternateViewFromString (text' textContentType);                          htmlView = AlternateView.CreateAlternateViewFromString (html' htmlContentType);                      }                        // A fucking stupid Mono bug forces us to transfer-encode in base64: it can't encode qp properly                      // (the "=" is not encoded to "=3D")                        htmlView.TransferEncoding = TransferEncoding.Base64;                      textView.TransferEncoding = TransferEncoding.Base64;                        // Add the views in increasing order of preference                        message.AlternateViews.Add (textView);                      message.AlternateViews.Add (htmlView);                  }                    if (mail.AuthorType == MailAuthorType.PirateWeb)                  {                      message.Subject = mail.Title;                  }                  else if (mail.MailType == 0)                  {                      message.Subject = mail.Organization.MailPrefixInherited + ": " + mail.Title;                  }                  else                  {                      //Title is set up in template processing in OutboundMail rendering.                      message.Subject = mail.Title;                  }                    message.SubjectEncoding = currentEncoding;                    string smtpServer = ConfigurationManager.AppSettings["SmtpServer"];                    if (Debugger.IsAttached)                  {                      Debug.WriteLine ("sending " + message.Subject + " to " + recipient.EmailPerson.Email);                      Thread.Sleep (200); //simulate delay                  }                      if (smtpServer.ToLower() != "none")                  {                      if (smtpServer == null || smtpServer.Length < 2)                      {                          smtpServer = "localhost";                      }                        try                      {                          SmtpClient client = new SmtpClient (smtpServer' 25);                          client.Send (message);                      }                      catch (SmtpException e)                      {                          if (e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4"))                          {                              // Temporary error (SMTP 4xx). Try again.                                Thread.Sleep (2000); // Allow 2 seconds pause to wait for smtp-server to become available                              throw new ReportAndRetryRecipientException ("Temporary smtp error' will retry."' e);                          }                            // Otherwise' bad recipient (assume so). Have the mail removed from the queue.                            List<string> recipients = new List<string>();                          foreach (MailAddress address in message.To)                          {                              recipients.Add (address.Address);                          }                            ExceptionMail.Send (                              new ArgumentException (                                  "Bad Recipients when sending to " + recipient.EmailPerson.Email + ": " +                                  String.Join ("' "' recipients.ToArray())' e));                            if (mail.AuthorType == MailAuthorType.Person)                          {                              try                              {                                  mail.Author.SendOfficerNotice (                                      "Failed recipient(s): " + String.Join ("' "' recipients.ToArray())'                                      "Some recipients failed inexplicably in a mail from you."' 1);                              }                              catch (Exception ex)                              {                                  throw new Exception ("Failed to SendOfficerNotice to :" + mail.AuthorPersonId' ex);                              }                          }                      }                  }                  return recipient; // To pass this object onto the we're-done callback              }              catch (InvalidRecipientException ex)              {                  throw ex;              }              catch (RetryRecipientException ex)              {                  Thread.Sleep (2000);                  // Allow 2 seconds pause to avoid flooding the errorlog too fast in case of a permanent failure                  throw ex;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The following statement contains a magic number: try              {                  // If the mail address in illegal format' do not try to send anything:                  if (!Formatting.ValidateEmailFormat (recipient.EmailPerson.Email.Trim()))                  {                      string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.MailUnreachable)                  {                      string msg = "MailUnreachable email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.NeverMail)                  {                      string msg = "NeverMail email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new IgnoreRecipientException (msg' null);                  }                      // Otherwise' let's start processing                    OutboundMail mail = recipient.OutboundMail;                    bool limitToLatin1 = false;                  bool limitToText = false;                  Encoding currentEncoding = Encoding.UTF8;                    string email = recipient.EmailPerson.Email.ToLower();                      if (mail.MailType == 0 || mail.TemplateName.EndsWith ("Plain"))                      limitToText = true;                    // TEST: Does this user require the use of a text-only message (as opposed to multipart/alternative)?                  if (recipient.Person != null && recipient.Person.LimitMailToText)                  {                      limitToText = true;                  }                    // This is supposedly not a problem anymore                  //if (email.EndsWith("@hotmail.com") || email.EndsWith("@msn.com"))                  //{                  //    limitToLatin1 = true;                  //}                    // TEST: Does this user require the limited use of the Latin-1 charset (as opposed to Unicode?)                  if (recipient.Person != null && recipient.Person.LimitMailToLatin1)                  {                      limitToLatin1 = true;                  }                    // Capability tests end here                    if (limitToLatin1)                      currentEncoding = Encoding.GetEncoding ("ISO-8859-1");                  else                      currentEncoding = Encoding.UTF8;                    QuotedPrintable qp = QuotedPrintableEncoder[currentEncoding];                      MailMessage message = new MailMessage();                    if (mail.AuthorType == MailAuthorType.Person)                  {                      try                      {                          message.From = new MailAddress (mail.Author.PartyEmail'                              qp.EncodeMailHeaderString (mail.Author.Name + " (" + mail.Organization.MailPrefixInherited +                                                         ")")'                              currentEncoding);                            if (mail.Author.Identity == 1)                          {                              //TODO: Create alternative party mail optional data field' or organization chairman (based on roles) differently                              // Ugly hack                              message.From = new MailAddress ("rick.falkvinge@piratpartiet.se"'                                  qp.EncodeMailHeaderString (mail.Author.Name + " (" +                                                             mail.Organization.MailPrefixInherited + ")")'                                  currentEncoding);                          }                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Invalid author address in MailProcessor.TransmitOneMail:" + (mail.AuthorPersonId) + ";" +                              mail.Author.PartyEmail' ex);                      }                  }                  else                  {                      try                      {                          FunctionalMail.AddressItem aItem =                              mail.Organization.GetFunctionalMailAddressInh (mail.AuthorType);                          message.From = new MailAddress (aItem.Email' qp.EncodeMailHeaderString (aItem.Name)'                              currentEncoding);                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Unknown MailAuthorType in MailProcessor.TransmitOneMail:" + ((int) mail.AuthorType)' ex);                      }                  }                      if (recipient.AsOfficer && recipient.Person != null)                  {                      try                      {                          message.To.Add (new MailAddress (recipient.Person.PartyEmail'                              qp.EncodeMailHeaderString (recipient.Person.Name + " (" +                                                         mail.Organization.MailPrefixInherited + ")")'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid officer email address:\r\nperson [" + recipient.Person.Identity +                                       "]' mail [" +                                       recipient.Person.PartyEmail + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                  else                  {                      try                      {                          message.To.Add (new MailAddress (recipient.EmailPerson.Email'                              qp.EncodeMailHeaderString (recipient.EmailPerson.Name)'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                       "]' mail [" +                                       recipient.EmailPerson.Email + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                    string culture = mail.Organization.DefaultCountry.Culture;                    // UGLY UGLY UGLY HACK' NEEDS TO CHANGE ASAP:                  // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be                  // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution.                    // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so'                  // we change the culture to en-US. It's an ugly as all hell hack but it should work as a temporary stopgap.                    if (recipient.Reporter != null)                  {                      MediaCategories categories = recipient.Reporter.MediaCategories;                        foreach (MediaCategory category in categories)                      {                          if (category.Name == "International/English")                          {                              culture = Strings.InternationalCultureCode;                              break;                          }                      }                  }                    if (limitToText)                  {                      // if just text' then just add a plaintext body;                      string text = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                          }                          catch (Exception ex)                          {                              throw new RemoveRecipientException (                                  "TextRendering failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                                  " will not retry.\n"' ex);                          }                      }                      message.BodyEncoding = currentEncoding;                      message.Body = text;                  }                  else                  {                      // otherwise' add a multipart/alternative with text and HTML                      string text = "";                      string html = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      Exception ex = null;                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                              html = mail.RenderHtml (recipient.EmailPerson' culture);                          }                          catch (Exception e)                          {                              ex = e;                          }                      }                      if (text == "")                          throw new RemoveRecipientException (                              "Rendering (text) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                      if (html == "" || ex != null)                          throw new RemoveRecipientException (                              "Rendering (html) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                        ContentType textContentType = new ContentType (MediaTypeNames.Text.Plain);                      textContentType.CharSet = currentEncoding.BodyName;                        ContentType htmlContentType = new ContentType (MediaTypeNames.Text.Html);                      htmlContentType.CharSet = currentEncoding.BodyName;                        AlternateView textView = null;                      AlternateView htmlView = null;                          if (limitToLatin1)                      {                          textView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              textContentType);                          htmlView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              htmlContentType);                      }                      else                      {                          textView = AlternateView.CreateAlternateViewFromString (text' textContentType);                          htmlView = AlternateView.CreateAlternateViewFromString (html' htmlContentType);                      }                        // A fucking stupid Mono bug forces us to transfer-encode in base64: it can't encode qp properly                      // (the "=" is not encoded to "=3D")                        htmlView.TransferEncoding = TransferEncoding.Base64;                      textView.TransferEncoding = TransferEncoding.Base64;                        // Add the views in increasing order of preference                        message.AlternateViews.Add (textView);                      message.AlternateViews.Add (htmlView);                  }                    if (mail.AuthorType == MailAuthorType.PirateWeb)                  {                      message.Subject = mail.Title;                  }                  else if (mail.MailType == 0)                  {                      message.Subject = mail.Organization.MailPrefixInherited + ": " + mail.Title;                  }                  else                  {                      //Title is set up in template processing in OutboundMail rendering.                      message.Subject = mail.Title;                  }                    message.SubjectEncoding = currentEncoding;                    string smtpServer = ConfigurationManager.AppSettings["SmtpServer"];                    if (Debugger.IsAttached)                  {                      Debug.WriteLine ("sending " + message.Subject + " to " + recipient.EmailPerson.Email);                      Thread.Sleep (200); //simulate delay                  }                      if (smtpServer.ToLower() != "none")                  {                      if (smtpServer == null || smtpServer.Length < 2)                      {                          smtpServer = "localhost";                      }                        try                      {                          SmtpClient client = new SmtpClient (smtpServer' 25);                          client.Send (message);                      }                      catch (SmtpException e)                      {                          if (e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4"))                          {                              // Temporary error (SMTP 4xx). Try again.                                Thread.Sleep (2000); // Allow 2 seconds pause to wait for smtp-server to become available                              throw new ReportAndRetryRecipientException ("Temporary smtp error' will retry."' e);                          }                            // Otherwise' bad recipient (assume so). Have the mail removed from the queue.                            List<string> recipients = new List<string>();                          foreach (MailAddress address in message.To)                          {                              recipients.Add (address.Address);                          }                            ExceptionMail.Send (                              new ArgumentException (                                  "Bad Recipients when sending to " + recipient.EmailPerson.Email + ": " +                                  String.Join ("' "' recipients.ToArray())' e));                            if (mail.AuthorType == MailAuthorType.Person)                          {                              try                              {                                  mail.Author.SendOfficerNotice (                                      "Failed recipient(s): " + String.Join ("' "' recipients.ToArray())'                                      "Some recipients failed inexplicably in a mail from you."' 1);                              }                              catch (Exception ex)                              {                                  throw new Exception ("Failed to SendOfficerNotice to :" + mail.AuthorPersonId' ex);                              }                          }                      }                  }                  return recipient; // To pass this object onto the we're-done callback              }              catch (InvalidRecipientException ex)              {                  throw ex;              }              catch (RetryRecipientException ex)              {                  Thread.Sleep (2000);                  // Allow 2 seconds pause to avoid flooding the errorlog too fast in case of a permanent failure                  throw ex;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The following statement contains a magic number: try              {                  // If the mail address in illegal format' do not try to send anything:                  if (!Formatting.ValidateEmailFormat (recipient.EmailPerson.Email.Trim()))                  {                      string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.MailUnreachable)                  {                      string msg = "MailUnreachable email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.NeverMail)                  {                      string msg = "NeverMail email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new IgnoreRecipientException (msg' null);                  }                      // Otherwise' let's start processing                    OutboundMail mail = recipient.OutboundMail;                    bool limitToLatin1 = false;                  bool limitToText = false;                  Encoding currentEncoding = Encoding.UTF8;                    string email = recipient.EmailPerson.Email.ToLower();                      if (mail.MailType == 0 || mail.TemplateName.EndsWith ("Plain"))                      limitToText = true;                    // TEST: Does this user require the use of a text-only message (as opposed to multipart/alternative)?                  if (recipient.Person != null && recipient.Person.LimitMailToText)                  {                      limitToText = true;                  }                    // This is supposedly not a problem anymore                  //if (email.EndsWith("@hotmail.com") || email.EndsWith("@msn.com"))                  //{                  //    limitToLatin1 = true;                  //}                    // TEST: Does this user require the limited use of the Latin-1 charset (as opposed to Unicode?)                  if (recipient.Person != null && recipient.Person.LimitMailToLatin1)                  {                      limitToLatin1 = true;                  }                    // Capability tests end here                    if (limitToLatin1)                      currentEncoding = Encoding.GetEncoding ("ISO-8859-1");                  else                      currentEncoding = Encoding.UTF8;                    QuotedPrintable qp = QuotedPrintableEncoder[currentEncoding];                      MailMessage message = new MailMessage();                    if (mail.AuthorType == MailAuthorType.Person)                  {                      try                      {                          message.From = new MailAddress (mail.Author.PartyEmail'                              qp.EncodeMailHeaderString (mail.Author.Name + " (" + mail.Organization.MailPrefixInherited +                                                         ")")'                              currentEncoding);                            if (mail.Author.Identity == 1)                          {                              //TODO: Create alternative party mail optional data field' or organization chairman (based on roles) differently                              // Ugly hack                              message.From = new MailAddress ("rick.falkvinge@piratpartiet.se"'                                  qp.EncodeMailHeaderString (mail.Author.Name + " (" +                                                             mail.Organization.MailPrefixInherited + ")")'                                  currentEncoding);                          }                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Invalid author address in MailProcessor.TransmitOneMail:" + (mail.AuthorPersonId) + ";" +                              mail.Author.PartyEmail' ex);                      }                  }                  else                  {                      try                      {                          FunctionalMail.AddressItem aItem =                              mail.Organization.GetFunctionalMailAddressInh (mail.AuthorType);                          message.From = new MailAddress (aItem.Email' qp.EncodeMailHeaderString (aItem.Name)'                              currentEncoding);                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Unknown MailAuthorType in MailProcessor.TransmitOneMail:" + ((int) mail.AuthorType)' ex);                      }                  }                      if (recipient.AsOfficer && recipient.Person != null)                  {                      try                      {                          message.To.Add (new MailAddress (recipient.Person.PartyEmail'                              qp.EncodeMailHeaderString (recipient.Person.Name + " (" +                                                         mail.Organization.MailPrefixInherited + ")")'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid officer email address:\r\nperson [" + recipient.Person.Identity +                                       "]' mail [" +                                       recipient.Person.PartyEmail + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                  else                  {                      try                      {                          message.To.Add (new MailAddress (recipient.EmailPerson.Email'                              qp.EncodeMailHeaderString (recipient.EmailPerson.Name)'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                       "]' mail [" +                                       recipient.EmailPerson.Email + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                    string culture = mail.Organization.DefaultCountry.Culture;                    // UGLY UGLY UGLY HACK' NEEDS TO CHANGE ASAP:                  // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be                  // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution.                    // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so'                  // we change the culture to en-US. It's an ugly as all hell hack but it should work as a temporary stopgap.                    if (recipient.Reporter != null)                  {                      MediaCategories categories = recipient.Reporter.MediaCategories;                        foreach (MediaCategory category in categories)                      {                          if (category.Name == "International/English")                          {                              culture = Strings.InternationalCultureCode;                              break;                          }                      }                  }                    if (limitToText)                  {                      // if just text' then just add a plaintext body;                      string text = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                          }                          catch (Exception ex)                          {                              throw new RemoveRecipientException (                                  "TextRendering failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                                  " will not retry.\n"' ex);                          }                      }                      message.BodyEncoding = currentEncoding;                      message.Body = text;                  }                  else                  {                      // otherwise' add a multipart/alternative with text and HTML                      string text = "";                      string html = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      Exception ex = null;                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                              html = mail.RenderHtml (recipient.EmailPerson' culture);                          }                          catch (Exception e)                          {                              ex = e;                          }                      }                      if (text == "")                          throw new RemoveRecipientException (                              "Rendering (text) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                      if (html == "" || ex != null)                          throw new RemoveRecipientException (                              "Rendering (html) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                        ContentType textContentType = new ContentType (MediaTypeNames.Text.Plain);                      textContentType.CharSet = currentEncoding.BodyName;                        ContentType htmlContentType = new ContentType (MediaTypeNames.Text.Html);                      htmlContentType.CharSet = currentEncoding.BodyName;                        AlternateView textView = null;                      AlternateView htmlView = null;                          if (limitToLatin1)                      {                          textView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              textContentType);                          htmlView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              htmlContentType);                      }                      else                      {                          textView = AlternateView.CreateAlternateViewFromString (text' textContentType);                          htmlView = AlternateView.CreateAlternateViewFromString (html' htmlContentType);                      }                        // A fucking stupid Mono bug forces us to transfer-encode in base64: it can't encode qp properly                      // (the "=" is not encoded to "=3D")                        htmlView.TransferEncoding = TransferEncoding.Base64;                      textView.TransferEncoding = TransferEncoding.Base64;                        // Add the views in increasing order of preference                        message.AlternateViews.Add (textView);                      message.AlternateViews.Add (htmlView);                  }                    if (mail.AuthorType == MailAuthorType.PirateWeb)                  {                      message.Subject = mail.Title;                  }                  else if (mail.MailType == 0)                  {                      message.Subject = mail.Organization.MailPrefixInherited + ": " + mail.Title;                  }                  else                  {                      //Title is set up in template processing in OutboundMail rendering.                      message.Subject = mail.Title;                  }                    message.SubjectEncoding = currentEncoding;                    string smtpServer = ConfigurationManager.AppSettings["SmtpServer"];                    if (Debugger.IsAttached)                  {                      Debug.WriteLine ("sending " + message.Subject + " to " + recipient.EmailPerson.Email);                      Thread.Sleep (200); //simulate delay                  }                      if (smtpServer.ToLower() != "none")                  {                      if (smtpServer == null || smtpServer.Length < 2)                      {                          smtpServer = "localhost";                      }                        try                      {                          SmtpClient client = new SmtpClient (smtpServer' 25);                          client.Send (message);                      }                      catch (SmtpException e)                      {                          if (e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4"))                          {                              // Temporary error (SMTP 4xx). Try again.                                Thread.Sleep (2000); // Allow 2 seconds pause to wait for smtp-server to become available                              throw new ReportAndRetryRecipientException ("Temporary smtp error' will retry."' e);                          }                            // Otherwise' bad recipient (assume so). Have the mail removed from the queue.                            List<string> recipients = new List<string>();                          foreach (MailAddress address in message.To)                          {                              recipients.Add (address.Address);                          }                            ExceptionMail.Send (                              new ArgumentException (                                  "Bad Recipients when sending to " + recipient.EmailPerson.Email + ": " +                                  String.Join ("' "' recipients.ToArray())' e));                            if (mail.AuthorType == MailAuthorType.Person)                          {                              try                              {                                  mail.Author.SendOfficerNotice (                                      "Failed recipient(s): " + String.Join ("' "' recipients.ToArray())'                                      "Some recipients failed inexplicably in a mail from you."' 1);                              }                              catch (Exception ex)                              {                                  throw new Exception ("Failed to SendOfficerNotice to :" + mail.AuthorPersonId' ex);                              }                          }                      }                  }                  return recipient; // To pass this object onto the we're-done callback              }              catch (InvalidRecipientException ex)              {                  throw ex;              }              catch (RetryRecipientException ex)              {                  Thread.Sleep (2000);                  // Allow 2 seconds pause to avoid flooding the errorlog too fast in case of a permanent failure                  throw ex;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The following statement contains a magic number: try              {                  // If the mail address in illegal format' do not try to send anything:                  if (!Formatting.ValidateEmailFormat (recipient.EmailPerson.Email.Trim()))                  {                      string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.MailUnreachable)                  {                      string msg = "MailUnreachable email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.NeverMail)                  {                      string msg = "NeverMail email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new IgnoreRecipientException (msg' null);                  }                      // Otherwise' let's start processing                    OutboundMail mail = recipient.OutboundMail;                    bool limitToLatin1 = false;                  bool limitToText = false;                  Encoding currentEncoding = Encoding.UTF8;                    string email = recipient.EmailPerson.Email.ToLower();                      if (mail.MailType == 0 || mail.TemplateName.EndsWith ("Plain"))                      limitToText = true;                    // TEST: Does this user require the use of a text-only message (as opposed to multipart/alternative)?                  if (recipient.Person != null && recipient.Person.LimitMailToText)                  {                      limitToText = true;                  }                    // This is supposedly not a problem anymore                  //if (email.EndsWith("@hotmail.com") || email.EndsWith("@msn.com"))                  //{                  //    limitToLatin1 = true;                  //}                    // TEST: Does this user require the limited use of the Latin-1 charset (as opposed to Unicode?)                  if (recipient.Person != null && recipient.Person.LimitMailToLatin1)                  {                      limitToLatin1 = true;                  }                    // Capability tests end here                    if (limitToLatin1)                      currentEncoding = Encoding.GetEncoding ("ISO-8859-1");                  else                      currentEncoding = Encoding.UTF8;                    QuotedPrintable qp = QuotedPrintableEncoder[currentEncoding];                      MailMessage message = new MailMessage();                    if (mail.AuthorType == MailAuthorType.Person)                  {                      try                      {                          message.From = new MailAddress (mail.Author.PartyEmail'                              qp.EncodeMailHeaderString (mail.Author.Name + " (" + mail.Organization.MailPrefixInherited +                                                         ")")'                              currentEncoding);                            if (mail.Author.Identity == 1)                          {                              //TODO: Create alternative party mail optional data field' or organization chairman (based on roles) differently                              // Ugly hack                              message.From = new MailAddress ("rick.falkvinge@piratpartiet.se"'                                  qp.EncodeMailHeaderString (mail.Author.Name + " (" +                                                             mail.Organization.MailPrefixInherited + ")")'                                  currentEncoding);                          }                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Invalid author address in MailProcessor.TransmitOneMail:" + (mail.AuthorPersonId) + ";" +                              mail.Author.PartyEmail' ex);                      }                  }                  else                  {                      try                      {                          FunctionalMail.AddressItem aItem =                              mail.Organization.GetFunctionalMailAddressInh (mail.AuthorType);                          message.From = new MailAddress (aItem.Email' qp.EncodeMailHeaderString (aItem.Name)'                              currentEncoding);                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Unknown MailAuthorType in MailProcessor.TransmitOneMail:" + ((int) mail.AuthorType)' ex);                      }                  }                      if (recipient.AsOfficer && recipient.Person != null)                  {                      try                      {                          message.To.Add (new MailAddress (recipient.Person.PartyEmail'                              qp.EncodeMailHeaderString (recipient.Person.Name + " (" +                                                         mail.Organization.MailPrefixInherited + ")")'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid officer email address:\r\nperson [" + recipient.Person.Identity +                                       "]' mail [" +                                       recipient.Person.PartyEmail + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                  else                  {                      try                      {                          message.To.Add (new MailAddress (recipient.EmailPerson.Email'                              qp.EncodeMailHeaderString (recipient.EmailPerson.Name)'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                       "]' mail [" +                                       recipient.EmailPerson.Email + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                    string culture = mail.Organization.DefaultCountry.Culture;                    // UGLY UGLY UGLY HACK' NEEDS TO CHANGE ASAP:                  // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be                  // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution.                    // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so'                  // we change the culture to en-US. It's an ugly as all hell hack but it should work as a temporary stopgap.                    if (recipient.Reporter != null)                  {                      MediaCategories categories = recipient.Reporter.MediaCategories;                        foreach (MediaCategory category in categories)                      {                          if (category.Name == "International/English")                          {                              culture = Strings.InternationalCultureCode;                              break;                          }                      }                  }                    if (limitToText)                  {                      // if just text' then just add a plaintext body;                      string text = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                          }                          catch (Exception ex)                          {                              throw new RemoveRecipientException (                                  "TextRendering failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                                  " will not retry.\n"' ex);                          }                      }                      message.BodyEncoding = currentEncoding;                      message.Body = text;                  }                  else                  {                      // otherwise' add a multipart/alternative with text and HTML                      string text = "";                      string html = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      Exception ex = null;                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                              html = mail.RenderHtml (recipient.EmailPerson' culture);                          }                          catch (Exception e)                          {                              ex = e;                          }                      }                      if (text == "")                          throw new RemoveRecipientException (                              "Rendering (text) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                      if (html == "" || ex != null)                          throw new RemoveRecipientException (                              "Rendering (html) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                        ContentType textContentType = new ContentType (MediaTypeNames.Text.Plain);                      textContentType.CharSet = currentEncoding.BodyName;                        ContentType htmlContentType = new ContentType (MediaTypeNames.Text.Html);                      htmlContentType.CharSet = currentEncoding.BodyName;                        AlternateView textView = null;                      AlternateView htmlView = null;                          if (limitToLatin1)                      {                          textView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              textContentType);                          htmlView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              htmlContentType);                      }                      else                      {                          textView = AlternateView.CreateAlternateViewFromString (text' textContentType);                          htmlView = AlternateView.CreateAlternateViewFromString (html' htmlContentType);                      }                        // A fucking stupid Mono bug forces us to transfer-encode in base64: it can't encode qp properly                      // (the "=" is not encoded to "=3D")                        htmlView.TransferEncoding = TransferEncoding.Base64;                      textView.TransferEncoding = TransferEncoding.Base64;                        // Add the views in increasing order of preference                        message.AlternateViews.Add (textView);                      message.AlternateViews.Add (htmlView);                  }                    if (mail.AuthorType == MailAuthorType.PirateWeb)                  {                      message.Subject = mail.Title;                  }                  else if (mail.MailType == 0)                  {                      message.Subject = mail.Organization.MailPrefixInherited + ": " + mail.Title;                  }                  else                  {                      //Title is set up in template processing in OutboundMail rendering.                      message.Subject = mail.Title;                  }                    message.SubjectEncoding = currentEncoding;                    string smtpServer = ConfigurationManager.AppSettings["SmtpServer"];                    if (Debugger.IsAttached)                  {                      Debug.WriteLine ("sending " + message.Subject + " to " + recipient.EmailPerson.Email);                      Thread.Sleep (200); //simulate delay                  }                      if (smtpServer.ToLower() != "none")                  {                      if (smtpServer == null || smtpServer.Length < 2)                      {                          smtpServer = "localhost";                      }                        try                      {                          SmtpClient client = new SmtpClient (smtpServer' 25);                          client.Send (message);                      }                      catch (SmtpException e)                      {                          if (e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4"))                          {                              // Temporary error (SMTP 4xx). Try again.                                Thread.Sleep (2000); // Allow 2 seconds pause to wait for smtp-server to become available                              throw new ReportAndRetryRecipientException ("Temporary smtp error' will retry."' e);                          }                            // Otherwise' bad recipient (assume so). Have the mail removed from the queue.                            List<string> recipients = new List<string>();                          foreach (MailAddress address in message.To)                          {                              recipients.Add (address.Address);                          }                            ExceptionMail.Send (                              new ArgumentException (                                  "Bad Recipients when sending to " + recipient.EmailPerson.Email + ": " +                                  String.Join ("' "' recipients.ToArray())' e));                            if (mail.AuthorType == MailAuthorType.Person)                          {                              try                              {                                  mail.Author.SendOfficerNotice (                                      "Failed recipient(s): " + String.Join ("' "' recipients.ToArray())'                                      "Some recipients failed inexplicably in a mail from you."' 1);                              }                              catch (Exception ex)                              {                                  throw new Exception ("Failed to SendOfficerNotice to :" + mail.AuthorPersonId' ex);                              }                          }                      }                  }                  return recipient; // To pass this object onto the we're-done callback              }              catch (InvalidRecipientException ex)              {                  throw ex;              }              catch (RetryRecipientException ex)              {                  Thread.Sleep (2000);                  // Allow 2 seconds pause to avoid flooding the errorlog too fast in case of a permanent failure                  throw ex;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,Swarmops.Utility.BotCode,MailProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailProcessor.cs,TransmitOneMail,The following statement contains a magic number: try              {                  // If the mail address in illegal format' do not try to send anything:                  if (!Formatting.ValidateEmailFormat (recipient.EmailPerson.Email.Trim()))                  {                      string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.MailUnreachable)                  {                      string msg = "MailUnreachable email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new InvalidRecipientException (msg' null);                  }                    // If the mail address is marked as unreachable' do not try to send anything                  if (recipient.Person != null && recipient.Person.NeverMail)                  {                      string msg = "NeverMail email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                   "]' mail [" +                                   recipient.EmailPerson.Email + "]\r\nwill not send mail:" + recipient.OutboundMail.Title;                      throw new IgnoreRecipientException (msg' null);                  }                      // Otherwise' let's start processing                    OutboundMail mail = recipient.OutboundMail;                    bool limitToLatin1 = false;                  bool limitToText = false;                  Encoding currentEncoding = Encoding.UTF8;                    string email = recipient.EmailPerson.Email.ToLower();                      if (mail.MailType == 0 || mail.TemplateName.EndsWith ("Plain"))                      limitToText = true;                    // TEST: Does this user require the use of a text-only message (as opposed to multipart/alternative)?                  if (recipient.Person != null && recipient.Person.LimitMailToText)                  {                      limitToText = true;                  }                    // This is supposedly not a problem anymore                  //if (email.EndsWith("@hotmail.com") || email.EndsWith("@msn.com"))                  //{                  //    limitToLatin1 = true;                  //}                    // TEST: Does this user require the limited use of the Latin-1 charset (as opposed to Unicode?)                  if (recipient.Person != null && recipient.Person.LimitMailToLatin1)                  {                      limitToLatin1 = true;                  }                    // Capability tests end here                    if (limitToLatin1)                      currentEncoding = Encoding.GetEncoding ("ISO-8859-1");                  else                      currentEncoding = Encoding.UTF8;                    QuotedPrintable qp = QuotedPrintableEncoder[currentEncoding];                      MailMessage message = new MailMessage();                    if (mail.AuthorType == MailAuthorType.Person)                  {                      try                      {                          message.From = new MailAddress (mail.Author.PartyEmail'                              qp.EncodeMailHeaderString (mail.Author.Name + " (" + mail.Organization.MailPrefixInherited +                                                         ")")'                              currentEncoding);                            if (mail.Author.Identity == 1)                          {                              //TODO: Create alternative party mail optional data field' or organization chairman (based on roles) differently                              // Ugly hack                              message.From = new MailAddress ("rick.falkvinge@piratpartiet.se"'                                  qp.EncodeMailHeaderString (mail.Author.Name + " (" +                                                             mail.Organization.MailPrefixInherited + ")")'                                  currentEncoding);                          }                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Invalid author address in MailProcessor.TransmitOneMail:" + (mail.AuthorPersonId) + ";" +                              mail.Author.PartyEmail' ex);                      }                  }                  else                  {                      try                      {                          FunctionalMail.AddressItem aItem =                              mail.Organization.GetFunctionalMailAddressInh (mail.AuthorType);                          message.From = new MailAddress (aItem.Email' qp.EncodeMailHeaderString (aItem.Name)'                              currentEncoding);                      }                      catch (Exception ex)                      {                          throw new InvalidSenderException (                              "Unknown MailAuthorType in MailProcessor.TransmitOneMail:" + ((int) mail.AuthorType)' ex);                      }                  }                      if (recipient.AsOfficer && recipient.Person != null)                  {                      try                      {                          message.To.Add (new MailAddress (recipient.Person.PartyEmail'                              qp.EncodeMailHeaderString (recipient.Person.Name + " (" +                                                         mail.Organization.MailPrefixInherited + ")")'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid officer email address:\r\nperson [" + recipient.Person.Identity +                                       "]' mail [" +                                       recipient.Person.PartyEmail + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                  else                  {                      try                      {                          message.To.Add (new MailAddress (recipient.EmailPerson.Email'                              qp.EncodeMailHeaderString (recipient.EmailPerson.Name)'                              currentEncoding));                      }                      catch (FormatException e)                      {                          string msg = "Invalid email address:\r\nEmailPerson [" + recipient.EmailPerson.Identity +                                       "]' mail [" +                                       recipient.EmailPerson.Email + "]\r\nwill not send mail:" +                                       recipient.OutboundMail.Title;                          throw new InvalidRecipientException (msg' e);                      }                  }                    string culture = mail.Organization.DefaultCountry.Culture;                    // UGLY UGLY UGLY HACK' NEEDS TO CHANGE ASAP:                  // We need to determine the culture of the recipient in order to use the right template. However' this is also dependent on the text body' which needs to be                  // in the same culture. At this point' we don't have the mail/recipient cultures in the schema. This would be the correct solution.                    // The INCORRECT but working solution is to do as we do here and check if a) it's a reporter and b) the reporter has International/English as a category. If so'                  // we change the culture to en-US. It's an ugly as all hell hack but it should work as a temporary stopgap.                    if (recipient.Reporter != null)                  {                      MediaCategories categories = recipient.Reporter.MediaCategories;                        foreach (MediaCategory category in categories)                      {                          if (category.Name == "International/English")                          {                              culture = Strings.InternationalCultureCode;                              break;                          }                      }                  }                    if (limitToText)                  {                      // if just text' then just add a plaintext body;                      string text = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                          }                          catch (Exception ex)                          {                              throw new RemoveRecipientException (                                  "TextRendering failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                                  " will not retry.\n"' ex);                          }                      }                      message.BodyEncoding = currentEncoding;                      message.Body = text;                  }                  else                  {                      // otherwise' add a multipart/alternative with text and HTML                      string text = "";                      string html = "";                        //Cant really see any reson the HtmlAgilityPack shouldn't be thread safe' but what the heck' just in case..                      Exception ex = null;                      lock (lockObject)                      {                          try                          {                              text = mail.RenderText (recipient.EmailPerson' culture);                              html = mail.RenderHtml (recipient.EmailPerson' culture);                          }                          catch (Exception e)                          {                              ex = e;                          }                      }                      if (text == "")                          throw new RemoveRecipientException (                              "Rendering (text) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                      if (html == "" || ex != null)                          throw new RemoveRecipientException (                              "Rendering (html) failed for " + mail.Title + " to " + recipient.EmailPerson.Email +                              " will not retry.\n"' ex);                        ContentType textContentType = new ContentType (MediaTypeNames.Text.Plain);                      textContentType.CharSet = currentEncoding.BodyName;                        ContentType htmlContentType = new ContentType (MediaTypeNames.Text.Html);                      htmlContentType.CharSet = currentEncoding.BodyName;                        AlternateView textView = null;                      AlternateView htmlView = null;                          if (limitToLatin1)                      {                          textView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              textContentType);                          htmlView = new AlternateView (new MemoryStream (currentEncoding.GetBytes (text))'                              htmlContentType);                      }                      else                      {                          textView = AlternateView.CreateAlternateViewFromString (text' textContentType);                          htmlView = AlternateView.CreateAlternateViewFromString (html' htmlContentType);                      }                        // A fucking stupid Mono bug forces us to transfer-encode in base64: it can't encode qp properly                      // (the "=" is not encoded to "=3D")                        htmlView.TransferEncoding = TransferEncoding.Base64;                      textView.TransferEncoding = TransferEncoding.Base64;                        // Add the views in increasing order of preference                        message.AlternateViews.Add (textView);                      message.AlternateViews.Add (htmlView);                  }                    if (mail.AuthorType == MailAuthorType.PirateWeb)                  {                      message.Subject = mail.Title;                  }                  else if (mail.MailType == 0)                  {                      message.Subject = mail.Organization.MailPrefixInherited + ": " + mail.Title;                  }                  else                  {                      //Title is set up in template processing in OutboundMail rendering.                      message.Subject = mail.Title;                  }                    message.SubjectEncoding = currentEncoding;                    string smtpServer = ConfigurationManager.AppSettings["SmtpServer"];                    if (Debugger.IsAttached)                  {                      Debug.WriteLine ("sending " + message.Subject + " to " + recipient.EmailPerson.Email);                      Thread.Sleep (200); //simulate delay                  }                      if (smtpServer.ToLower() != "none")                  {                      if (smtpServer == null || smtpServer.Length < 2)                      {                          smtpServer = "localhost";                      }                        try                      {                          SmtpClient client = new SmtpClient (smtpServer' 25);                          client.Send (message);                      }                      catch (SmtpException e)                      {                          if (e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4"))                          {                              // Temporary error (SMTP 4xx). Try again.                                Thread.Sleep (2000); // Allow 2 seconds pause to wait for smtp-server to become available                              throw new ReportAndRetryRecipientException ("Temporary smtp error' will retry."' e);                          }                            // Otherwise' bad recipient (assume so). Have the mail removed from the queue.                            List<string> recipients = new List<string>();                          foreach (MailAddress address in message.To)                          {                              recipients.Add (address.Address);                          }                            ExceptionMail.Send (                              new ArgumentException (                                  "Bad Recipients when sending to " + recipient.EmailPerson.Email + ": " +                                  String.Join ("' "' recipients.ToArray())' e));                            if (mail.AuthorType == MailAuthorType.Person)                          {                              try                              {                                  mail.Author.SendOfficerNotice (                                      "Failed recipient(s): " + String.Join ("' "' recipients.ToArray())'                                      "Some recipients failed inexplicably in a mail from you."' 1);                              }                              catch (Exception ex)                              {                                  throw new Exception ("Failed to SendOfficerNotice to :" + mail.AuthorPersonId' ex);                              }                          }                      }                  }                  return recipient; // To pass this object onto the we're-done callback              }              catch (InvalidRecipientException ex)              {                  throw ex;              }              catch (RetryRecipientException ex)              {                  Thread.Sleep (2000);                  // Allow 2 seconds pause to avoid flooding the errorlog too fast in case of a permanent failure                  throw ex;              }              catch (Exception ex)              {                  throw ex;              }
Magic Number,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The following statement contains a magic number: foreach (Organization org in orgLine)              {                  foreach (Geography geo in geoLine) // but at the top geography                  {                      AutoMail autoMail = AutoMail.FromTypeOrganizationAndGeography (AutoMailType.Welcome' org' geo);                        if (autoMail == null)                      {                          continue;                      }                        Person lead = null;                      string geoName = geo.Name;                        try                      {                          lead = Roles.GetLocalLead (org' geo);                          orgMailedLookup[org.Identity] = true;                          // Make sure that the chairman doesn't mail at a lower level                      }                      catch (ArgumentException)                      {                      }                        if (lead == null && !orgMailedLookup.ContainsKey (org.Identity))                      {                          // If we get here' there is a mail template at the highest possible geo for this org' but no local lead.                          // That's usually the case with board-centric organizations rather than executive-centric.                          // Try to mail from chairman rather than the local lead.                            try                          {                              orgMailedLookup[org.Identity] = true;                              lead = Roles.GetChairman (org);                              geoName = "Chairman";                          }                          catch (ArgumentException)                          {                          }                      }                        if (lead == null)                      {                          // ok' give up if there isn't a chairman either or if we've already mailed this org from the chairman                          continue;                      }                        // TODO: fetch lead from roles                      WelcomeMail welcomemail = new WelcomeMail();                        welcomemail.pOrgName = org.MailPrefixInherited;                        welcomemail.pGeographyName = "";                      if (geo.Identity != Geography.RootIdentity)                      {                          welcomemail.pGeographyName = geo.Name;                      }                        welcomemail.pBodyContent = autoMail.Body;                      welcomemail.pSubject = autoMail.Title;                        OutboundMail newMail = welcomemail.CreateOutboundMail (lead' OutboundMail.PriorityNormal'                          org' geo' DateTime.Now.AddMinutes (delay));                      newMail.AddRecipient (person.Identity' false);                      newMail.SetRecipientCount (1);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                        result += String.Format (" - {0}/{1} by {2} ("'                          org.NameShort' geoName' lead.Canonical);                      if (delay == 0)                      {                          result += "sent now";                          delay += 37;                      }                      else                      {                          result += "sending at " + DateTime.Now.AddMinutes (delay).ToString ("HH:mm");                          delay += 31 + random.Next (52);                      }                      result += ")\r\n";                  }              }
Magic Number,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The following statement contains a magic number: foreach (Organization org in orgLine)              {                  foreach (Geography geo in geoLine) // but at the top geography                  {                      AutoMail autoMail = AutoMail.FromTypeOrganizationAndGeography (AutoMailType.Welcome' org' geo);                        if (autoMail == null)                      {                          continue;                      }                        Person lead = null;                      string geoName = geo.Name;                        try                      {                          lead = Roles.GetLocalLead (org' geo);                          orgMailedLookup[org.Identity] = true;                          // Make sure that the chairman doesn't mail at a lower level                      }                      catch (ArgumentException)                      {                      }                        if (lead == null && !orgMailedLookup.ContainsKey (org.Identity))                      {                          // If we get here' there is a mail template at the highest possible geo for this org' but no local lead.                          // That's usually the case with board-centric organizations rather than executive-centric.                          // Try to mail from chairman rather than the local lead.                            try                          {                              orgMailedLookup[org.Identity] = true;                              lead = Roles.GetChairman (org);                              geoName = "Chairman";                          }                          catch (ArgumentException)                          {                          }                      }                        if (lead == null)                      {                          // ok' give up if there isn't a chairman either or if we've already mailed this org from the chairman                          continue;                      }                        // TODO: fetch lead from roles                      WelcomeMail welcomemail = new WelcomeMail();                        welcomemail.pOrgName = org.MailPrefixInherited;                        welcomemail.pGeographyName = "";                      if (geo.Identity != Geography.RootIdentity)                      {                          welcomemail.pGeographyName = geo.Name;                      }                        welcomemail.pBodyContent = autoMail.Body;                      welcomemail.pSubject = autoMail.Title;                        OutboundMail newMail = welcomemail.CreateOutboundMail (lead' OutboundMail.PriorityNormal'                          org' geo' DateTime.Now.AddMinutes (delay));                      newMail.AddRecipient (person.Identity' false);                      newMail.SetRecipientCount (1);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                        result += String.Format (" - {0}/{1} by {2} ("'                          org.NameShort' geoName' lead.Canonical);                      if (delay == 0)                      {                          result += "sent now";                          delay += 37;                      }                      else                      {                          result += "sending at " + DateTime.Now.AddMinutes (delay).ToString ("HH:mm");                          delay += 31 + random.Next (52);                      }                      result += ")\r\n";                  }              }
Magic Number,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The following statement contains a magic number: foreach (Organization org in orgLine)              {                  foreach (Geography geo in geoLine) // but at the top geography                  {                      AutoMail autoMail = AutoMail.FromTypeOrganizationAndGeography (AutoMailType.Welcome' org' geo);                        if (autoMail == null)                      {                          continue;                      }                        Person lead = null;                      string geoName = geo.Name;                        try                      {                          lead = Roles.GetLocalLead (org' geo);                          orgMailedLookup[org.Identity] = true;                          // Make sure that the chairman doesn't mail at a lower level                      }                      catch (ArgumentException)                      {                      }                        if (lead == null && !orgMailedLookup.ContainsKey (org.Identity))                      {                          // If we get here' there is a mail template at the highest possible geo for this org' but no local lead.                          // That's usually the case with board-centric organizations rather than executive-centric.                          // Try to mail from chairman rather than the local lead.                            try                          {                              orgMailedLookup[org.Identity] = true;                              lead = Roles.GetChairman (org);                              geoName = "Chairman";                          }                          catch (ArgumentException)                          {                          }                      }                        if (lead == null)                      {                          // ok' give up if there isn't a chairman either or if we've already mailed this org from the chairman                          continue;                      }                        // TODO: fetch lead from roles                      WelcomeMail welcomemail = new WelcomeMail();                        welcomemail.pOrgName = org.MailPrefixInherited;                        welcomemail.pGeographyName = "";                      if (geo.Identity != Geography.RootIdentity)                      {                          welcomemail.pGeographyName = geo.Name;                      }                        welcomemail.pBodyContent = autoMail.Body;                      welcomemail.pSubject = autoMail.Title;                        OutboundMail newMail = welcomemail.CreateOutboundMail (lead' OutboundMail.PriorityNormal'                          org' geo' DateTime.Now.AddMinutes (delay));                      newMail.AddRecipient (person.Identity' false);                      newMail.SetRecipientCount (1);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                        result += String.Format (" - {0}/{1} by {2} ("'                          org.NameShort' geoName' lead.Canonical);                      if (delay == 0)                      {                          result += "sent now";                          delay += 37;                      }                      else                      {                          result += "sending at " + DateTime.Now.AddMinutes (delay).ToString ("HH:mm");                          delay += 31 + random.Next (52);                      }                      result += ")\r\n";                  }              }
Magic Number,Swarmops.Utility.BotCode,MailResolver,C:\repos\Swarmops_Swarmops\Utility\BotCode\MailResolver.cs,CreateWelcomeMail,The following statement contains a magic number: if (result.Length < 4)              {                  result = "none\r\n";              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: if (0 == s)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: if (0 == s)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: if (0 == s)              {                  return Color.FromArgb (a' Convert.ToInt32 (b*255)'                      Convert.ToInt32 (b*255)' Convert.ToInt32 (b*255));              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: if (0.5 < b)              {                  fMax = b - (b*s) + s;                  fMin = b + (b*s) - s;              }              else              {                  fMax = b + (b*s);                  fMin = b - (b*s);              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: if (0 == iSextant%2)              {                  fMid = h*(fMax - fMin) + fMin;              }              else              {                  fMid = fMin - h*(fMax - fMin);              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: iMax = Convert.ToInt32 (fMax*255);
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: iMid = Convert.ToInt32 (fMid*255);
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: iMin = Convert.ToInt32 (fMin*255);
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Utility.BotCode,Mappery,C:\repos\Swarmops_Swarmops\Utility\BotCode\Mappery.cs,ColorFromAhsb,The following statement contains a magic number: switch (iSextant)              {                  case 1:                      return Color.FromArgb (a' iMid' iMax' iMin);                  case 2:                      return Color.FromArgb (a' iMin' iMax' iMid);                  case 3:                      return Color.FromArgb (a' iMin' iMid' iMax);                  case 4:                      return Color.FromArgb (a' iMid' iMin' iMax);                  case 5:                      return Color.FromArgb (a' iMax' iMin' iMid);                  default:                      return Color.FromArgb (a' iMax' iMid' iMin);              }
Magic Number,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,The following statement contains a magic number: try              {                  string highWaterMarkString = Persistence.Key[persistenceKey];                    if (string.IsNullOrEmpty (highWaterMarkString))                  {                      //Initialize highwatermark if never used                      highWaterMark = DateTime.Now;                      Persistence.Key[persistenceKey] = DateTime.Now.ToString();                  }                  else                  {                      try                      {                          highWaterMark = DateTime.Parse (highWaterMarkString);                      }                      catch (Exception ex)                      {                          HeartBeater.Instance.SuggestRestart();                          throw new Exception (                              "Triggered restart. Unable to read/parse old highwater mark from database in PressReleaseChecker.Run()' from key:" +                              persistenceKey + "' loaded string was '" + highWaterMarkString + "' expected format is " +                              DateTime.Now' ex);                      }                  }                  DateTime storedHighWaterMark = highWaterMark;                  reader = new RssReader (readerUrl);                  Rss rss = reader.Read();                    foreach (RssChannelItem item in rss.Channel.Items)                  {                      // Ignore any items older than the highwater mark.                      // Also ignore if older than two days                        if (item.PubDate < highWaterMark || item.PubDate < DateTime.Now.AddDays (-2))                      {                          continue;                      }                        // This is an item we should publish.                        // Set highwater datetime mark. We do this first' BEFORE processing' as a defense against mail floods'                      // if should something go wrong and unexpected exceptions happen.                        // We used to add 70 minutes as a defense against mistakes on DST switch in spring and fall (yes' it has happened)' but have reduced to two.                        if (item.PubDate > storedHighWaterMark)                      {                          Persistence.Key[persistenceKey] = item.PubDate.AddMinutes (2).ToString();                          storedHighWaterMark = item.PubDate.AddMinutes (2);                            // Verify that it was written correctly to database. This is defensive programming to avoid a mail flood'                          // in case we can't write to the database for some reason.                          string newStoredHighWaterString = "";                          try                          {                              newStoredHighWaterString = Persistence.Key[persistenceKey];                              DateTime temp = DateTime.Parse (newStoredHighWaterString);                          }                          catch (Exception ex)                          {                              throw new Exception (                                  "Unable to commit/parse new highwater mark to database in PressReleaseChecker.Run()' loaded string was '" +                                  newStoredHighWaterString + "'"' ex);                          }                            if (DateTime.Parse (Persistence.Key[persistenceKey]) < item.PubDate)                          {                              throw new Exception (                                  "Unable to commit new highwater mark to database in PressReleaseChecker.Run()");                          }                      }                        bool allReporters = false;                      bool international = false;                      MediaCategories categories = new MediaCategories();                        foreach (RssCategory category in item.Categories)                      {                          if (category.Name == "Alla")                          {                              allReporters = true;                          }                          else if (category.Name == "Uncategorized")                          {                          }                          else                          {                              try                              {                                  MediaCategory mediaCategory = MediaCategory.FromName (category.Name);                                  categories.Add (mediaCategory);                                    if (category.Name.StartsWith ("International"))                                  {                                      international = true;                                  }                              }                              catch (Exception)                              {                                  ExceptionMail.Send (                                      new Exception ("Unrecognized media category in press release: " + category.Name));                              }                          }                      }                        string mailText = Blog2Mail (item.Content);                        // Create recipient list of relevant reporters                        Reporters reporters = null;                        if (allReporters)                      {                          reporters = Reporters.GetAll();                      }                      else                      {                          reporters = Reporters.FromMediaCategories (categories);                      }                        // Add officers if not int'l                        People officers = new People();                      Dictionary<int' bool> officerLookup = new Dictionary<int' bool>();                        if (!international)                      {                          int[] officerIds = Roles.GetAllDownwardRoles (1' 1);                          foreach (int officerId in officerIds)                          {                              officerLookup[officerId] = true;                          }                      }                      else                      {                          officerLookup[1] = true;                      }                          // Send press release                        //TODO: hardcoded  geo ... using  World                      Organization org = Organization.FromIdentity (orgIdForTemplate);                      Geography geo = Geography.Root;                      PressReleaseMail pressreleasemail = new PressReleaseMail();                        pressreleasemail.pSubject = item.Title;                      pressreleasemail.pDate = DateTime.Now;                      pressreleasemail.pBodyContent = Blog2Mail (item.Content);                      pressreleasemail.pOrgName = org.MailPrefixInherited;                      if (allReporters)                      {                          pressreleasemail.pPostedToCategories = "Alla"; // TODO: TRANSLATE                      }                      else if (international)                      {                          pressreleasemail.pPostedToCategories = "International/English"; // TODO: THIS IS HARDCODED                      }                      else                      {                          pressreleasemail.pPostedToCategories =                              PressReleaseMail.GetConcatenatedCategoryString (categories);                      }                        OutboundMail newMail = pressreleasemail.CreateFunctionalOutboundMail (MailAuthorType.PressService'                          OutboundMail.PriorityHighest' org' geo);                        int recipientCount = 0;                      foreach (Reporter recipient in reporters)                      {                          if (!Formatting.ValidateEmailFormat (recipient.Email))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient);                      }                      foreach (int key in officerLookup.Keys)                      {                          Person recipient = Person.FromIdentity (key);                          if (!Formatting.ValidateEmailFormat (recipient.Mail))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient' true);                      }                        newMail.SetRecipientCount (recipientCount);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                  }              }              catch (Exception ex)              {                  ExceptionMail.Send (                      new Exception ("PressReleaseChecker failed:" + ex.Message + "\r\nwhen checking " + readerUrl' ex));              }              finally              {                  reader.Close();              }
Magic Number,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,The following statement contains a magic number: try              {                  string highWaterMarkString = Persistence.Key[persistenceKey];                    if (string.IsNullOrEmpty (highWaterMarkString))                  {                      //Initialize highwatermark if never used                      highWaterMark = DateTime.Now;                      Persistence.Key[persistenceKey] = DateTime.Now.ToString();                  }                  else                  {                      try                      {                          highWaterMark = DateTime.Parse (highWaterMarkString);                      }                      catch (Exception ex)                      {                          HeartBeater.Instance.SuggestRestart();                          throw new Exception (                              "Triggered restart. Unable to read/parse old highwater mark from database in PressReleaseChecker.Run()' from key:" +                              persistenceKey + "' loaded string was '" + highWaterMarkString + "' expected format is " +                              DateTime.Now' ex);                      }                  }                  DateTime storedHighWaterMark = highWaterMark;                  reader = new RssReader (readerUrl);                  Rss rss = reader.Read();                    foreach (RssChannelItem item in rss.Channel.Items)                  {                      // Ignore any items older than the highwater mark.                      // Also ignore if older than two days                        if (item.PubDate < highWaterMark || item.PubDate < DateTime.Now.AddDays (-2))                      {                          continue;                      }                        // This is an item we should publish.                        // Set highwater datetime mark. We do this first' BEFORE processing' as a defense against mail floods'                      // if should something go wrong and unexpected exceptions happen.                        // We used to add 70 minutes as a defense against mistakes on DST switch in spring and fall (yes' it has happened)' but have reduced to two.                        if (item.PubDate > storedHighWaterMark)                      {                          Persistence.Key[persistenceKey] = item.PubDate.AddMinutes (2).ToString();                          storedHighWaterMark = item.PubDate.AddMinutes (2);                            // Verify that it was written correctly to database. This is defensive programming to avoid a mail flood'                          // in case we can't write to the database for some reason.                          string newStoredHighWaterString = "";                          try                          {                              newStoredHighWaterString = Persistence.Key[persistenceKey];                              DateTime temp = DateTime.Parse (newStoredHighWaterString);                          }                          catch (Exception ex)                          {                              throw new Exception (                                  "Unable to commit/parse new highwater mark to database in PressReleaseChecker.Run()' loaded string was '" +                                  newStoredHighWaterString + "'"' ex);                          }                            if (DateTime.Parse (Persistence.Key[persistenceKey]) < item.PubDate)                          {                              throw new Exception (                                  "Unable to commit new highwater mark to database in PressReleaseChecker.Run()");                          }                      }                        bool allReporters = false;                      bool international = false;                      MediaCategories categories = new MediaCategories();                        foreach (RssCategory category in item.Categories)                      {                          if (category.Name == "Alla")                          {                              allReporters = true;                          }                          else if (category.Name == "Uncategorized")                          {                          }                          else                          {                              try                              {                                  MediaCategory mediaCategory = MediaCategory.FromName (category.Name);                                  categories.Add (mediaCategory);                                    if (category.Name.StartsWith ("International"))                                  {                                      international = true;                                  }                              }                              catch (Exception)                              {                                  ExceptionMail.Send (                                      new Exception ("Unrecognized media category in press release: " + category.Name));                              }                          }                      }                        string mailText = Blog2Mail (item.Content);                        // Create recipient list of relevant reporters                        Reporters reporters = null;                        if (allReporters)                      {                          reporters = Reporters.GetAll();                      }                      else                      {                          reporters = Reporters.FromMediaCategories (categories);                      }                        // Add officers if not int'l                        People officers = new People();                      Dictionary<int' bool> officerLookup = new Dictionary<int' bool>();                        if (!international)                      {                          int[] officerIds = Roles.GetAllDownwardRoles (1' 1);                          foreach (int officerId in officerIds)                          {                              officerLookup[officerId] = true;                          }                      }                      else                      {                          officerLookup[1] = true;                      }                          // Send press release                        //TODO: hardcoded  geo ... using  World                      Organization org = Organization.FromIdentity (orgIdForTemplate);                      Geography geo = Geography.Root;                      PressReleaseMail pressreleasemail = new PressReleaseMail();                        pressreleasemail.pSubject = item.Title;                      pressreleasemail.pDate = DateTime.Now;                      pressreleasemail.pBodyContent = Blog2Mail (item.Content);                      pressreleasemail.pOrgName = org.MailPrefixInherited;                      if (allReporters)                      {                          pressreleasemail.pPostedToCategories = "Alla"; // TODO: TRANSLATE                      }                      else if (international)                      {                          pressreleasemail.pPostedToCategories = "International/English"; // TODO: THIS IS HARDCODED                      }                      else                      {                          pressreleasemail.pPostedToCategories =                              PressReleaseMail.GetConcatenatedCategoryString (categories);                      }                        OutboundMail newMail = pressreleasemail.CreateFunctionalOutboundMail (MailAuthorType.PressService'                          OutboundMail.PriorityHighest' org' geo);                        int recipientCount = 0;                      foreach (Reporter recipient in reporters)                      {                          if (!Formatting.ValidateEmailFormat (recipient.Email))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient);                      }                      foreach (int key in officerLookup.Keys)                      {                          Person recipient = Person.FromIdentity (key);                          if (!Formatting.ValidateEmailFormat (recipient.Mail))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient' true);                      }                        newMail.SetRecipientCount (recipientCount);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                  }              }              catch (Exception ex)              {                  ExceptionMail.Send (                      new Exception ("PressReleaseChecker failed:" + ex.Message + "\r\nwhen checking " + readerUrl' ex));              }              finally              {                  reader.Close();              }
Magic Number,Swarmops.Utility.BotCode,PressReleaseChecker,C:\repos\Swarmops_Swarmops\Utility\BotCode\PressReleaseChecker.cs,CheckOneFeed,The following statement contains a magic number: try              {                  string highWaterMarkString = Persistence.Key[persistenceKey];                    if (string.IsNullOrEmpty (highWaterMarkString))                  {                      //Initialize highwatermark if never used                      highWaterMark = DateTime.Now;                      Persistence.Key[persistenceKey] = DateTime.Now.ToString();                  }                  else                  {                      try                      {                          highWaterMark = DateTime.Parse (highWaterMarkString);                      }                      catch (Exception ex)                      {                          HeartBeater.Instance.SuggestRestart();                          throw new Exception (                              "Triggered restart. Unable to read/parse old highwater mark from database in PressReleaseChecker.Run()' from key:" +                              persistenceKey + "' loaded string was '" + highWaterMarkString + "' expected format is " +                              DateTime.Now' ex);                      }                  }                  DateTime storedHighWaterMark = highWaterMark;                  reader = new RssReader (readerUrl);                  Rss rss = reader.Read();                    foreach (RssChannelItem item in rss.Channel.Items)                  {                      // Ignore any items older than the highwater mark.                      // Also ignore if older than two days                        if (item.PubDate < highWaterMark || item.PubDate < DateTime.Now.AddDays (-2))                      {                          continue;                      }                        // This is an item we should publish.                        // Set highwater datetime mark. We do this first' BEFORE processing' as a defense against mail floods'                      // if should something go wrong and unexpected exceptions happen.                        // We used to add 70 minutes as a defense against mistakes on DST switch in spring and fall (yes' it has happened)' but have reduced to two.                        if (item.PubDate > storedHighWaterMark)                      {                          Persistence.Key[persistenceKey] = item.PubDate.AddMinutes (2).ToString();                          storedHighWaterMark = item.PubDate.AddMinutes (2);                            // Verify that it was written correctly to database. This is defensive programming to avoid a mail flood'                          // in case we can't write to the database for some reason.                          string newStoredHighWaterString = "";                          try                          {                              newStoredHighWaterString = Persistence.Key[persistenceKey];                              DateTime temp = DateTime.Parse (newStoredHighWaterString);                          }                          catch (Exception ex)                          {                              throw new Exception (                                  "Unable to commit/parse new highwater mark to database in PressReleaseChecker.Run()' loaded string was '" +                                  newStoredHighWaterString + "'"' ex);                          }                            if (DateTime.Parse (Persistence.Key[persistenceKey]) < item.PubDate)                          {                              throw new Exception (                                  "Unable to commit new highwater mark to database in PressReleaseChecker.Run()");                          }                      }                        bool allReporters = false;                      bool international = false;                      MediaCategories categories = new MediaCategories();                        foreach (RssCategory category in item.Categories)                      {                          if (category.Name == "Alla")                          {                              allReporters = true;                          }                          else if (category.Name == "Uncategorized")                          {                          }                          else                          {                              try                              {                                  MediaCategory mediaCategory = MediaCategory.FromName (category.Name);                                  categories.Add (mediaCategory);                                    if (category.Name.StartsWith ("International"))                                  {                                      international = true;                                  }                              }                              catch (Exception)                              {                                  ExceptionMail.Send (                                      new Exception ("Unrecognized media category in press release: " + category.Name));                              }                          }                      }                        string mailText = Blog2Mail (item.Content);                        // Create recipient list of relevant reporters                        Reporters reporters = null;                        if (allReporters)                      {                          reporters = Reporters.GetAll();                      }                      else                      {                          reporters = Reporters.FromMediaCategories (categories);                      }                        // Add officers if not int'l                        People officers = new People();                      Dictionary<int' bool> officerLookup = new Dictionary<int' bool>();                        if (!international)                      {                          int[] officerIds = Roles.GetAllDownwardRoles (1' 1);                          foreach (int officerId in officerIds)                          {                              officerLookup[officerId] = true;                          }                      }                      else                      {                          officerLookup[1] = true;                      }                          // Send press release                        //TODO: hardcoded  geo ... using  World                      Organization org = Organization.FromIdentity (orgIdForTemplate);                      Geography geo = Geography.Root;                      PressReleaseMail pressreleasemail = new PressReleaseMail();                        pressreleasemail.pSubject = item.Title;                      pressreleasemail.pDate = DateTime.Now;                      pressreleasemail.pBodyContent = Blog2Mail (item.Content);                      pressreleasemail.pOrgName = org.MailPrefixInherited;                      if (allReporters)                      {                          pressreleasemail.pPostedToCategories = "Alla"; // TODO: TRANSLATE                      }                      else if (international)                      {                          pressreleasemail.pPostedToCategories = "International/English"; // TODO: THIS IS HARDCODED                      }                      else                      {                          pressreleasemail.pPostedToCategories =                              PressReleaseMail.GetConcatenatedCategoryString (categories);                      }                        OutboundMail newMail = pressreleasemail.CreateFunctionalOutboundMail (MailAuthorType.PressService'                          OutboundMail.PriorityHighest' org' geo);                        int recipientCount = 0;                      foreach (Reporter recipient in reporters)                      {                          if (!Formatting.ValidateEmailFormat (recipient.Email))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient);                      }                      foreach (int key in officerLookup.Keys)                      {                          Person recipient = Person.FromIdentity (key);                          if (!Formatting.ValidateEmailFormat (recipient.Mail))                          {                              continue;                          }                          ++recipientCount;                          newMail.AddRecipient (recipient' true);                      }                        newMail.SetRecipientCount (recipientCount);                      newMail.SetResolved();                      newMail.SetReadyForPickup();                  }              }              catch (Exception ex)              {                  ExceptionMail.Send (                      new Exception ("PressReleaseChecker failed:" + ex.Message + "\r\nwhen checking " + readerUrl' ex));              }              finally              {                  reader.Close();              }
Magic Number,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,RemindExpiriesMail,The following statement contains a magic number: DateTime upperBound = lowerBound.AddDays (31);
Magic Number,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,RemindExpiriesMail,The following statement contains a magic number: foreach (Organization org in orgs)              {                  Participations participations = Participations.GetExpiring (org' lowerBound' upperBound);                    foreach (Participation membership in participations)                  {                      if (membership.OrganizationId%7 != weekDayInteger)                      {                          continue;                      }                        try                      {                          Console.Write ("Reminding " + membership.Person.Canonical + " about " +                                         membership.Organization.Name + ".");                          SendReminderMail (membership);                          Console.Write (".");                          /*PWLog.Write (PWLogItem.Person' membership.PersonId'                              PWLogAction.MembershipRenewReminder'                              "Mail was sent to " + membership.Person.Mail +                              " reminding to renew membership in " + membership.Organization.Name + "."' string.Empty);*/                            Console.Write (".");                            string dateString = membership.Expires.ToString ("yyyy-MM-dd");                          if (!dateLookup.ContainsKey (dateString))                          {                              dateLookup[dateString] = 0;                          }                          dateLookup[dateString]++;                            Console.WriteLine (" done.");                      }                      catch (Exception x)                      {                          string logText = "FAILED sending mail to " + membership.Person.Mail +                                           " for reminder of pending renewal in " + membership.Organization.Name + ".";                          failedReminders.Add (membership.Person.Canonical);                          /*PWLog.Write (PWLogItem.Person' membership.PersonId'                              PWLogAction.MembershipRenewReminder'                              logText' string.Empty);*/                          ExceptionMail.Send (new Exception (logText' x));                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,ChurnExpiredMembers,The following statement contains a magic number: foreach (Organization organization in organizations)              {                  Participations participations = Participations.GetExpired (organization);                  // Mail each expiring member                    foreach (Participation membership in participations)                  {                      //only remove expired memberships                      if (membership.Expires > DateTime.Now.Date)                          continue;                        Person person = membership.Person;                        // TODO: Check for positions that expire with membership                          // Mail                        Participations personParticipations = person.GetParticipations();                      Participations participationsToDelete = new Participations();                      foreach (Participation personMembership in personParticipations)                      {                          if (personMembership.Expires <= DateTime.Now.Date)                          {                              participationsToDelete.Add (personMembership);                          }                      }                          ExpiredMail expiredmail = new ExpiredMail();                      string membershipsIds = "";                        if (participationsToDelete.Count > 1)                      {                          foreach (Participation personMembership in participationsToDelete)                          {                              membershipsIds += "'" + personMembership.MembershipId;                          }                          membershipsIds = membershipsIds.Substring (1);                          string expiredMemberships = "";                          foreach (Participation personMembership in participationsToDelete)                          {                              if (personMembership.OrganizationId != organization.Identity)                              {                                  expiredMemberships += "' " + personMembership.Organization.Name;                              }                          }                          expiredMemberships += ".  ";                          expiredmail.pMemberships = expiredMemberships.Substring (2).Trim();                      }                        //TODO: URL for renewal' recieving end of this is NOT yet implemented...                      // intended to recreate the memberships in MID                      string tokenBase = person.PasswordHash + "-" + membership.Expires.Year;                      string stdLink = "https://pirateweb.net/Pages/Public/SE/People/MemberRenew.aspx?MemberId=" +                                       person.Identity +                                       "&SecHash=" + SHA1.Hash (tokenBase).Replace (" "' "").Substring (0' 8) +                                       "&MID=" + membershipsIds;                        expiredmail.pStdRenewLink = stdLink;                      expiredmail.pOrgName = organization.MailPrefixInherited;                        person.SendNotice (expiredmail' organization.Identity);                        person.DeleteSubscriptionData();                        string orgIdString = string.Empty;                        foreach (Participation personMembership in participationsToDelete)                      {                          if (personMembership.Active)                          {                              orgIdString += " " + personMembership.OrganizationId;                                personMembership.Terminate (EventSource.PirateBot' null' "Member churned in housekeeping.");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,ChurnExpiredMembers,The following statement contains a magic number: foreach (Organization organization in organizations)              {                  Participations participations = Participations.GetExpired (organization);                  // Mail each expiring member                    foreach (Participation membership in participations)                  {                      //only remove expired memberships                      if (membership.Expires > DateTime.Now.Date)                          continue;                        Person person = membership.Person;                        // TODO: Check for positions that expire with membership                          // Mail                        Participations personParticipations = person.GetParticipations();                      Participations participationsToDelete = new Participations();                      foreach (Participation personMembership in personParticipations)                      {                          if (personMembership.Expires <= DateTime.Now.Date)                          {                              participationsToDelete.Add (personMembership);                          }                      }                          ExpiredMail expiredmail = new ExpiredMail();                      string membershipsIds = "";                        if (participationsToDelete.Count > 1)                      {                          foreach (Participation personMembership in participationsToDelete)                          {                              membershipsIds += "'" + personMembership.MembershipId;                          }                          membershipsIds = membershipsIds.Substring (1);                          string expiredMemberships = "";                          foreach (Participation personMembership in participationsToDelete)                          {                              if (personMembership.OrganizationId != organization.Identity)                              {                                  expiredMemberships += "' " + personMembership.Organization.Name;                              }                          }                          expiredMemberships += ".  ";                          expiredmail.pMemberships = expiredMemberships.Substring (2).Trim();                      }                        //TODO: URL for renewal' recieving end of this is NOT yet implemented...                      // intended to recreate the memberships in MID                      string tokenBase = person.PasswordHash + "-" + membership.Expires.Year;                      string stdLink = "https://pirateweb.net/Pages/Public/SE/People/MemberRenew.aspx?MemberId=" +                                       person.Identity +                                       "&SecHash=" + SHA1.Hash (tokenBase).Replace (" "' "").Substring (0' 8) +                                       "&MID=" + membershipsIds;                        expiredmail.pStdRenewLink = stdLink;                      expiredmail.pOrgName = organization.MailPrefixInherited;                        person.SendNotice (expiredmail' organization.Identity);                        person.DeleteSubscriptionData();                        string orgIdString = string.Empty;                        foreach (Participation personMembership in participationsToDelete)                      {                          if (personMembership.Active)                          {                              orgIdString += " " + personMembership.OrganizationId;                                personMembership.Terminate (EventSource.PirateBot' null' "Member churned in housekeeping.");                          }                      }                  }              }
Magic Number,Swarmops.Utility.BotCode,RosterHousekeeping,C:\repos\Swarmops_Swarmops\Utility\BotCode\RosterHousekeeping.cs,TimeoutVolunteers,The following statement contains a magic number: DateTime threshold = DateTime.Today.AddDays (-30);
Magic Number,Swarmops.Utility.BotCode,SalaryProcessor,C:\repos\Swarmops_Swarmops\Utility\BotCode\SalaryProcessor.cs,Run,The following statement contains a magic number: DateTime payday = new DateTime (today.Year' today.Month' 25);
Magic Number,Swarmops.Utility.Communications,CommsTransmitterMail,C:\repos\Swarmops_Swarmops\Utility\Communications\CommsTransmitterMail.cs,Transmit,The following statement contains a magic number: if (now > _cacheReloadTime)              {                  smtpServer = _smtpServerCache = SystemSettings.SmtpHost;                  smtpPort = _smtpPortCache = SystemSettings.SmtpPort;                  smtpUser = _smtpUserCache = SystemSettings.SmtpUser;                  smtpPassword = _smtpPasswordCache = SystemSettings.SmtpPassword;                                    _cacheReloadTime = now.AddMinutes (5);              }
Magic Number,Swarmops.Utility.Communications,CommsTransmitterMail,C:\repos\Swarmops_Swarmops\Utility\Communications\CommsTransmitterMail.cs,Transmit,The following statement contains a magic number: if (string.IsNullOrEmpty (smtpServer))              {                  smtpServer = "localhost";                  smtpPort = 25;                  // For development use only - invalidate cache instead of this' forcing re-reload                  _cacheReloadTime = Constants.DateTimeLow;              }
Magic Number,Swarmops.Utility.Financial,PaymentGroupMapper,C:\repos\Swarmops_Swarmops\Utility\Financial\PaymentGroupMapper.cs,Run,The following statement contains a magic number: foreach (Organization organization in economyEnabledOrgs)              {                  FinancialTransactions unbalancedTransactions = FinancialTransactions.GetUnbalanced (organization);                  PaymentGroups groups = PaymentGroups.ForOrganization (organization);                  FinancialAccount assetsOutboundInvoices = organization.FinancialAccounts.AssetsOutboundInvoices;                    // This is an N^2 search. Don't care. It runs background.                    foreach (PaymentGroup group in groups)                  {                      foreach (FinancialTransaction tx in unbalancedTransactions)                      {                          if (group.Open && tx.Description.EndsWith (group.Tag.Substring (4)) &&                              tx.DateTime.Date == group.DateTime.Date && tx.Rows.AmountCentsTotal == group.AmountCents)                          {                              // Match!                                tx.Dependency = group;                              tx.AddRow (assetsOutboundInvoices' -group.AmountCents' null);                              group.Open = false;                          }                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ImportPayson,The following statement contains a magic number: while (match.Success)              {                  if (match.Groups["currency"].Value != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Int64.Parse (match.Groups["balance"].Value.Replace ("'"' ""))/10000.0;                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' match.Groups["txid"].Value);                      Console.WriteLine ("- Comment:      {0}"' HttpUtility.HtmlDecode (match.Groups["comment2"].Value));                      Console.WriteLine ("- DateTime:     {0}"' match.Groups["datetime"].Value);                      Console.WriteLine ("- AmountGross:  {0}"' match.Groups["gross"].Value);                      Console.WriteLine ("- Fee:          {0}"' match.Groups["fee"].Value);                      Console.WriteLine ("- AmountNet:    {0}"' match.Groups["net"].Value);                  }                    string comment = HttpUtility.HtmlDecode (match.Groups["comment2"].Value.Trim());                  if (String.IsNullOrEmpty (comment))                  {                      comment = match.Groups["comment1"].Value.Trim();                  }                    row.SuppliedTransactionId = "Payson-" + match.Groups["txid"].Value;                  row.Comment = comment;                  row.DateTime = DateTime.Parse (match.Groups["datetime"].Value' CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (match.Groups["gross"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.FeeCents = Int64.Parse (match.Groups["fee"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.AmountCentsNet = Int64.Parse (match.Groups["net"].Value.Replace ("."' "").Replace ("'"' ""))/100;                    rows.Add (row);                    match = match.NextMatch();              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ImportPayson,The following statement contains a magic number: while (match.Success)              {                  if (match.Groups["currency"].Value != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Int64.Parse (match.Groups["balance"].Value.Replace ("'"' ""))/10000.0;                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' match.Groups["txid"].Value);                      Console.WriteLine ("- Comment:      {0}"' HttpUtility.HtmlDecode (match.Groups["comment2"].Value));                      Console.WriteLine ("- DateTime:     {0}"' match.Groups["datetime"].Value);                      Console.WriteLine ("- AmountGross:  {0}"' match.Groups["gross"].Value);                      Console.WriteLine ("- Fee:          {0}"' match.Groups["fee"].Value);                      Console.WriteLine ("- AmountNet:    {0}"' match.Groups["net"].Value);                  }                    string comment = HttpUtility.HtmlDecode (match.Groups["comment2"].Value.Trim());                  if (String.IsNullOrEmpty (comment))                  {                      comment = match.Groups["comment1"].Value.Trim();                  }                    row.SuppliedTransactionId = "Payson-" + match.Groups["txid"].Value;                  row.Comment = comment;                  row.DateTime = DateTime.Parse (match.Groups["datetime"].Value' CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (match.Groups["gross"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.FeeCents = Int64.Parse (match.Groups["fee"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.AmountCentsNet = Int64.Parse (match.Groups["net"].Value.Replace ("."' "").Replace ("'"' ""))/100;                    rows.Add (row);                    match = match.NextMatch();              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ImportPayson,The following statement contains a magic number: while (match.Success)              {                  if (match.Groups["currency"].Value != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Int64.Parse (match.Groups["balance"].Value.Replace ("'"' ""))/10000.0;                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' match.Groups["txid"].Value);                      Console.WriteLine ("- Comment:      {0}"' HttpUtility.HtmlDecode (match.Groups["comment2"].Value));                      Console.WriteLine ("- DateTime:     {0}"' match.Groups["datetime"].Value);                      Console.WriteLine ("- AmountGross:  {0}"' match.Groups["gross"].Value);                      Console.WriteLine ("- Fee:          {0}"' match.Groups["fee"].Value);                      Console.WriteLine ("- AmountNet:    {0}"' match.Groups["net"].Value);                  }                    string comment = HttpUtility.HtmlDecode (match.Groups["comment2"].Value.Trim());                  if (String.IsNullOrEmpty (comment))                  {                      comment = match.Groups["comment1"].Value.Trim();                  }                    row.SuppliedTransactionId = "Payson-" + match.Groups["txid"].Value;                  row.Comment = comment;                  row.DateTime = DateTime.Parse (match.Groups["datetime"].Value' CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (match.Groups["gross"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.FeeCents = Int64.Parse (match.Groups["fee"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.AmountCentsNet = Int64.Parse (match.Groups["net"].Value.Replace ("."' "").Replace ("'"' ""))/100;                    rows.Add (row);                    match = match.NextMatch();              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ImportPayson,The following statement contains a magic number: while (match.Success)              {                  if (match.Groups["currency"].Value != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Int64.Parse (match.Groups["balance"].Value.Replace ("'"' ""))/10000.0;                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' match.Groups["txid"].Value);                      Console.WriteLine ("- Comment:      {0}"' HttpUtility.HtmlDecode (match.Groups["comment2"].Value));                      Console.WriteLine ("- DateTime:     {0}"' match.Groups["datetime"].Value);                      Console.WriteLine ("- AmountGross:  {0}"' match.Groups["gross"].Value);                      Console.WriteLine ("- Fee:          {0}"' match.Groups["fee"].Value);                      Console.WriteLine ("- AmountNet:    {0}"' match.Groups["net"].Value);                  }                    string comment = HttpUtility.HtmlDecode (match.Groups["comment2"].Value.Trim());                  if (String.IsNullOrEmpty (comment))                  {                      comment = match.Groups["comment1"].Value.Trim();                  }                    row.SuppliedTransactionId = "Payson-" + match.Groups["txid"].Value;                  row.Comment = comment;                  row.DateTime = DateTime.Parse (match.Groups["datetime"].Value' CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (match.Groups["gross"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.FeeCents = Int64.Parse (match.Groups["fee"].Value.Replace ("."' "").Replace ("'"' ""))/100;                  row.AmountCentsNet = Int64.Parse (match.Groups["net"].Value.Replace ("."' "").Replace ("'"' ""))/100;                    rows.Add (row);                    match = match.NextMatch();              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: FinancialAccount paysonAccount = FinancialAccount.FromIdentity (99);
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: int autoDepositLimit = 1000;
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaysonImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaysonImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2010' 4' 1))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          paysonAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[paysonAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ImportPaypal,The following statement contains a magic number: foreach (string line in lines)              {                  string[] parts = line.Split ('\t');                    if (parts.Length < 30)                  {                      continue;                  }                    if (StripQuotes (parts[6]) != "SEK")                  {                      continue; // HACK: Need to fix currency support at some time                  }                    // Get current balance from the first line in the file                    if (result.CurrentBalance == 0.0)                  {                      result.CurrentBalance = Double.Parse (StripQuotes (parts[34])' CultureInfo.InvariantCulture);                  }                    ImportedRow row = new ImportedRow();                    // DEBUG -- REMOVE WHEN DEPLOYING                    if (Debugger.IsAttached)                  {                      Console.WriteLine ("New Row -----");                        Console.WriteLine ("- SuppliedTxId: {0}"' parts[12]);                      Console.WriteLine ("- Comment:      {0}"' parts[4]);                      Console.WriteLine ("- DateTime:     {0} {1}"' parts[0]' parts[1]);                      Console.WriteLine ("- AmountGross:  {0}"' parts[7]);                      Console.WriteLine ("- Fee:          {0}"' parts[8]);                      Console.WriteLine ("- AmountNet:    {0}"' parts[9]);                  }                    row.SuppliedTransactionId = StripQuotes (parts[12]);                  row.Comment = StripQuotes (parts[4]);                  row.DateTime = DateTime.Parse (StripQuotes (parts[0]) + " " + StripQuotes (parts[1])'                      CultureInfo.InvariantCulture);                  row.AmountCentsGross = Int64.Parse (StripQuotes (parts[7]).Replace ("."' "").Replace ("'"' ""));                  row.FeeCents = Int64.Parse (StripQuotes (parts[8]).Replace ("."' "").Replace ("'"' ""));                  row.AmountCentsNet = Int64.Parse (StripQuotes (parts[9]).Replace ("."' "").Replace ("'"' ""));                    rows.Add (row);              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: int autoDepositLimit = 1000;
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Financial,PaypalImporter,C:\repos\Swarmops_Swarmops\Utility\Financial\PaypalImporter.cs,ProcessImportedData,The following statement contains a magic number: foreach (ImportedRow row in import.Rows)              {                  // Each row is at least a stub' probably more.                    // If too old' ignore.                    if (row.DateTime < new DateTime (2008' 12' 4))                  {                      continue;                  }                    string importKey = row.SuppliedTransactionId;                    // If importKey is empty' construct a hash from the data fields.                    if (string.IsNullOrEmpty (importKey))                  {                      string hashKey = row.HashBase + row.Comment +                                       (row.AmountCentsNet/100.0).ToString (CultureInfo.InvariantCulture) +                                       row.CurrentBalance.ToString (CultureInfo.InvariantCulture) +                                       row.DateTime.ToString ("yyyy-MM-dd-hh-mm-ss");                        importKey = SHA1.Hash (hashKey).Replace (" "' "");                  }                    if (importKey.Length > 30)                  {                      importKey = importKey.Substring (0' 30);                  }                    Int64 amountCents = row.AmountCentsNet;                    if (amountCents == 0)                  {                      amountCents = row.AmountCentsGross;                  }                    Dictionary<int' long> nominalTransaction = new Dictionary<int' long>();                    FinancialTransaction transaction = null;                    try                  {                      transaction = FinancialTransaction.FromImportKey (organization' importKey);                  }                  catch (Exception)                  {                      // if we get here' that means the transaction did not yet exist                        transaction = FinancialTransaction.ImportWithStub (organization.Identity' row.DateTime'                          payPalAccount.Identity' amountCents'                          row.Comment' importKey'                          importingPerson.Identity);                      result.ImportedTransactionCount++;                        if (transaction == null)                      {                          // No transaction was created. This is an error condition as it should have been created if it didn't                          // exist' and the "exist" case is handled in the FromImportKey attempt above. Abort with error.                          // Throw new exception?                            continue;                      }                  }                    result.ProcessedTransactionCount++;                    nominalTransaction[payPalAccount.Identity] = amountCents;                    // The transaction was created. Examine if the autobook criteria are true.                    if (amountCents < 0)                  {                      if ((-amountCents) < autoWithdrawalLimit*100)                      {                          // Book against autoWithdrawal account.                            nominalTransaction[bankFees.Identity] = -amountCents;                      }                  }                  else if (amountCents > 0)                  {                      if (row.FeeCents < 0)                      {                          // This is always an autodeposit' if there is a fee (which is never > 0.0)                            nominalTransaction[bankFees.Identity] = -row.FeeCents;                          nominalTransaction[donations.Identity] = -row.AmountCentsGross;                      }                      else if (amountCents < autoDepositLimit*100)                      {                          // Book against autoDeposit account.                            nominalTransaction[donations.Identity] = -amountCents;                      }                  }                    if (transaction.Rows.AmountCentsTotal != 0) // If transaction is unbalanced' balance it                  {                      if (transaction.RecalculateTransaction (nominalTransaction' importingPerson))                      {                          result.ModifiedTransactionCount++;                      }                  }              }
Magic Number,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,Send,The following statement contains a magic number: foreach (Person recipient in this.recipients)              {                  try                  {                      MailMessage message = null;                        if (this.toOfficers && recipient.Country.Identity == 1) // HACK until PirateWeb Exchange server up                      {                          if (!Formatting.ValidateEmailFormat (recipient.PartyEmail.Trim()))                          {                              if (recipient.Identity == 13354)                              {                                  // HACK - UP auditor                                    continue;                              }                                Person.FromIdentity (1)                                  .SendOfficerNotice ("PirateBot Warning"'                                      String.Format ("The officer {0} (#{1}) does not have a party email."' recipient.Name'                                          recipient.Identity)' 1);                                continue;                          }                            message =                              new MailMessage (                                  new MailAddress (this.fromAddress' qp8859.EncodeMailHeaderString (this.fromName)'                                      Encoding.Default)'                                  new MailAddress (recipient.PartyEmail'                                      qp8859.EncodeMailHeaderString (recipient.Name + " (Piratpartiet)")'                                      Encoding.Default));                      }                      else                      {                          if (!Formatting.ValidateEmailFormat (recipient.Mail.Trim()))                          {                              continue;                          }                            message =                              new MailMessage (                                  new MailAddress (this.fromAddress' qpUTF8.EncodeMailHeaderString (this.fromName)'                                      Encoding.UTF8)'                                  new MailAddress (recipient.Mail' qpUTF8.EncodeMailHeaderString (recipient.Name)'                                      Encoding.UTF8));                      }                        if (message == null)                          continue;                        message.Subject = this.subject;                      message.Body = this.bodyPlain;                        message.SubjectEncoding = Encoding.UTF8;                      message.BodyEncoding = Encoding.UTF8;                          // Start the transmission process' synchronously                        #region Commented out asynchronous sending                        //lock (lockObject)                      //{                      //    MailTransmissionDelegate asyncTransmitter = new MailTransmissionDelegate(TransmitOneMessage);                      //    outstandingTransmissions++;                      //    sendInProgress.Add(asyncTransmitter.BeginInvoke(message' null' asyncTransmitter));                      //}                      //System.Threading.Thread.Sleep(25); // Allow some time                        #endregion                        TransmitOneMessage (message); // Sending synchronosly                  }                  catch (Exception e)                  {                      Debug.WriteLine (e.ToString());                      ExceptionMail.Send (new Exception ("Excepton in Mailtransmitter.Send:"' e)' true);                  }              }
Magic Number,Swarmops.Utility.Mail,MailTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\MailTransmitter.cs,TransmitOneMessage,The following statement contains a magic number: if (Debugger.IsAttached)              {                  Debug.WriteLine ("sending " + message.Subject);                  Thread.Sleep (500); //simulate delay              }              else              {                  try                  {                      SmtpClient client = new SmtpClient (Config.SmtpHost' Config.SmtpPort);                      client.Credentials = null;                      client.Send (message);                  }                  catch (SmtpFailedRecipientsException e)                  {                      List<string> recipients = new List<string>();                      foreach (MailAddress address in message.To)                      {                          recipients.Add (address.Address);                      }                        throw new ArgumentException (                          "Bad Recipients: " + String.Join ("' "' recipients.ToArray()) + " for mail with subject:" +                          message.Subject' e);                  }                  catch (SmtpFailedRecipientException e)                  {                      throw new ArgumentException (                          "Bad Recipient: " + message.To[0].Address + " for mail with subject:" + message.Subject' e);                  }                  catch (SmtpException e)                  {                      string msg = "Other smtp error:\r\n";                      try                      {                          msg += string.Format (                              "Subject:{0}\r\nSender:{1}"                              ' this.subject' this.fromAddress);                      }                      catch (Exception)                      {                      }                      throw new ArgumentException (msg' e);                  }              }
Magic Number,Swarmops.Utility.Mail,NewsletterTransmitter2,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter.cs,SendViewsToAllRecipients,The following statement contains a magic number: foreach (Person person in this.sendList)              {                  count++;                      if (person.PersonId != 1)                  {                      //continue;                  }                    Console.Write ("{0:D4}/{1:D4} - "' count' countTotal);                    if (person.MailUnreachable)                  {                      Console.WriteLine ("UNREACHABLE");                      continue;                  }                    if (person.Mail.Length < 2)                  {                      Console.WriteLine ("NO EMAIL");                      continue;                  }                      Console.WriteLine (person.Name);                      SmtpClient client = new SmtpClient ("sparrow"' 587);                    MailMessage message = new MailMessage (                      new MailAddress ("rick.falkvinge@piratpartiet.se"' "Rick Falkvinge (Piratpartiet)")'                      new MailAddress (person.Mail' person.Name));                    message.Subject = "Piratpartiet: " + this.title;                    message.AlternateViews.Add (htmlView);                    string personEmail = person.Mail.Trim().ToLower();                    string identifier = String.Format ("{0:X4}"' person.Identity);                  char[] array = identifier.ToCharArray();                  Array.Reverse (array);                    identifier = " [PP" + new string (array) + "]";                    message.Subject += identifier;                    if (personEmail.EndsWith ("hotmail.com") || personEmail.EndsWith ("msn.com"))                  {                      message.AlternateViews.Add (textHotmailView);                      message.Subject += " (anpassat till Hotmail)";                      message.SubjectEncoding = Encoding.Default;                  }                  else                  {                      message.AlternateViews.Add (textUnicodeView);                  }                    // EDIT THE BELOW LINE TO EDIT THE ATTACHMENT                    message.Attachments.Add (                      new Attachment (@"C:\Documents and Settings\rick\Desktop\Piratpartiet Nyhetsbrev 2008-04-25.pdf"));                      client.Send (message);              }
Magic Number,Swarmops.Utility.Mail,NewsletterTransmitter2,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter.cs,SendViewsToAllRecipients,The following statement contains a magic number: foreach (Person person in this.sendList)              {                  count++;                      if (person.PersonId != 1)                  {                      //continue;                  }                    Console.Write ("{0:D4}/{1:D4} - "' count' countTotal);                    if (person.MailUnreachable)                  {                      Console.WriteLine ("UNREACHABLE");                      continue;                  }                    if (person.Mail.Length < 2)                  {                      Console.WriteLine ("NO EMAIL");                      continue;                  }                      Console.WriteLine (person.Name);                      SmtpClient client = new SmtpClient ("sparrow"' 587);                    MailMessage message = new MailMessage (                      new MailAddress ("rick.falkvinge@piratpartiet.se"' "Rick Falkvinge (Piratpartiet)")'                      new MailAddress (person.Mail' person.Name));                    message.Subject = "Piratpartiet: " + this.title;                    message.AlternateViews.Add (htmlView);                    string personEmail = person.Mail.Trim().ToLower();                    string identifier = String.Format ("{0:X4}"' person.Identity);                  char[] array = identifier.ToCharArray();                  Array.Reverse (array);                    identifier = " [PP" + new string (array) + "]";                    message.Subject += identifier;                    if (personEmail.EndsWith ("hotmail.com") || personEmail.EndsWith ("msn.com"))                  {                      message.AlternateViews.Add (textHotmailView);                      message.Subject += " (anpassat till Hotmail)";                      message.SubjectEncoding = Encoding.Default;                  }                  else                  {                      message.AlternateViews.Add (textUnicodeView);                  }                    // EDIT THE BELOW LINE TO EDIT THE ATTACHMENT                    message.Attachments.Add (                      new Attachment (@"C:\Documents and Settings\rick\Desktop\Piratpartiet Nyhetsbrev 2008-04-25.pdf"));                      client.Send (message);              }
Magic Number,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The following statement contains a magic number: foreach (Person recipient in newsletter.Recipients)              {                  //Console.Write (recipient.Name + "(#" + recipient.Identity.ToString() + ")... ");                    if (recipient.Mail.Length < 2)                  {                      //Console.WriteLine("canceled.");                      continue; // no email on file                  }                    if (recipient.NeverMail)                  {                      //Console.WriteLine("canceled.");                      continue; // This person has a total mail block on his or her mail                  }                    try                  {                      SmtpClient client = new SmtpClient (Config.SmtpHost' Config.SmtpPort);                      client.Credentials = null;                        MailMessage message = new MailMessage (                          new MailAddress (newsletter.SenderAddress' qp8859.EncodeMailHeaderString (newsletter.SenderName)'                              Encoding.GetEncoding ("ISO-8859-1"))'                          new MailAddress (recipient.Mail' qp8859.EncodeMailHeaderString (recipient.Name)'                              Encoding.GetEncoding ("ISO-8859-1")));                        message.Subject = "Piratpartiet: Nyhetsbrev " + DateTime.Today.ToString ("yyyy-MM-dd"); // HACK                        message.Body = htmlTemplate;                      message.BodyEncoding = Encoding.ASCII;                      message.IsBodyHtml = true;                        // COMPENSATE FOR MONO BUG -- put logo online instead of attached                        message.Body = message.Body.Replace ("cid:pplogo" + newsletterIdentifier'                          "http://docs.piratpartiet.se/banners/newsletter-banner-pp-logo.png");                        /*                      Attachment attachment = new Attachment(directory + Path.DirectorySeparatorChar + "header-pp-logo.png"' "image/png");                      attachment.ContentId = "pplogo" + newsletterIdentifier;                      attachment.ContentDisposition.Inline = true;                      message.Attachments.Add(attachment);*/                        string personEmail = recipient.Mail.Trim().ToLower();                        string identifier = " [PP" + recipient.HexIdentifier() + "]";                        message.Subject += identifier;                        bool successOrPermanentFail = false;                        while (!successOrPermanentFail)                      {                          try                          {                              client.Send (message);                              successOrPermanentFail = true;                          }                          catch (SmtpException e)                          {                              if (!(e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4")))                              {                                  // This is NOT a temporary error (SMTP 4xx). Fail.                                    successOrPermanentFail = true;                                  throw e;                              }                                // Otherwise' sleep for a while and try again.                                Thread.Sleep (1000);                          }                      }                        //Console.WriteLine("ok");                  }                  catch (Exception e)                  {                      //Console.WriteLine("FAIL! <" + recipient.Email + ">");                      ExceptionMail.Send (                          new Exception (                              "Error sending mail to " + recipient.Name + " (#" + recipient.Identity + ") <" +                              recipient.Mail + ">:"' e));                  }              }
Magic Number,Swarmops.Utility.Mail,NewsletterTransmitter3,C:\repos\Swarmops_Swarmops\Utility\Mail\NewsletterTransmitter3.cs,Send,The following statement contains a magic number: foreach (Person recipient in newsletter.Recipients)              {                  //Console.Write (recipient.Name + "(#" + recipient.Identity.ToString() + ")... ");                    if (recipient.Mail.Length < 2)                  {                      //Console.WriteLine("canceled.");                      continue; // no email on file                  }                    if (recipient.NeverMail)                  {                      //Console.WriteLine("canceled.");                      continue; // This person has a total mail block on his or her mail                  }                    try                  {                      SmtpClient client = new SmtpClient (Config.SmtpHost' Config.SmtpPort);                      client.Credentials = null;                        MailMessage message = new MailMessage (                          new MailAddress (newsletter.SenderAddress' qp8859.EncodeMailHeaderString (newsletter.SenderName)'                              Encoding.GetEncoding ("ISO-8859-1"))'                          new MailAddress (recipient.Mail' qp8859.EncodeMailHeaderString (recipient.Name)'                              Encoding.GetEncoding ("ISO-8859-1")));                        message.Subject = "Piratpartiet: Nyhetsbrev " + DateTime.Today.ToString ("yyyy-MM-dd"); // HACK                        message.Body = htmlTemplate;                      message.BodyEncoding = Encoding.ASCII;                      message.IsBodyHtml = true;                        // COMPENSATE FOR MONO BUG -- put logo online instead of attached                        message.Body = message.Body.Replace ("cid:pplogo" + newsletterIdentifier'                          "http://docs.piratpartiet.se/banners/newsletter-banner-pp-logo.png");                        /*                      Attachment attachment = new Attachment(directory + Path.DirectorySeparatorChar + "header-pp-logo.png"' "image/png");                      attachment.ContentId = "pplogo" + newsletterIdentifier;                      attachment.ContentDisposition.Inline = true;                      message.Attachments.Add(attachment);*/                        string personEmail = recipient.Mail.Trim().ToLower();                        string identifier = " [PP" + recipient.HexIdentifier() + "]";                        message.Subject += identifier;                        bool successOrPermanentFail = false;                        while (!successOrPermanentFail)                      {                          try                          {                              client.Send (message);                              successOrPermanentFail = true;                          }                          catch (SmtpException e)                          {                              if (!(e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4")))                              {                                  // This is NOT a temporary error (SMTP 4xx). Fail.                                    successOrPermanentFail = true;                                  throw e;                              }                                // Otherwise' sleep for a while and try again.                                Thread.Sleep (1000);                          }                      }                        //Console.WriteLine("ok");                  }                  catch (Exception e)                  {                      //Console.WriteLine("FAIL! <" + recipient.Email + ">");                      ExceptionMail.Send (                          new Exception (                              "Error sending mail to " + recipient.Name + " (#" + recipient.Identity + ") <" +                              recipient.Mail + ">:"' e));                  }              }
Magic Number,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The following statement contains a magic number: using (                  StreamReader reader = new StreamReader (directory + Path.DirectorySeparatorChar + "template.html"'                      Encoding.GetEncoding (1252)))              {                  htmlTemplate = reader.ReadToEnd();              }
Magic Number,Swarmops.Utility.Mail,PressReleaseTransmitter,C:\repos\Swarmops_Swarmops\Utility\Mail\PressReleaseTransmitter.cs,Send,The following statement contains a magic number: foreach (Reporter reporter in reporters)              {                  //Console.Write (recipient.Name + "(#" + recipient.Identity.ToString() + ")... ");                    try                  {                      SmtpClient client = new SmtpClient (Config.SmtpHost' Config.SmtpPort);                      client.Credentials = null;                        MailMessage message = new MailMessage (                          new MailAddress ("press@piratpartiet.se"' "Piratpartiet Press")'                          new MailAddress (reporter.Email' reporter.Name' Encoding.UTF8));                        message.Subject = "PP-Press: " + title;                        string individualBody = htmlTemplate;                        individualBody = individualBody.                          Replace ("%reportername%"' HttpUtility.HtmlEncode (reporter.Name)).                          Replace ("%reporteremail%"' HttpUtility.HtmlEncode (reporter.Email)).                          Replace ("%reportercategories%"'                              HttpUtility.HtmlEncode (GetConcatenatedCategoryString (reporter.MediaCategories)));                        message.Body = individualBody;                      message.BodyEncoding = Encoding.ASCII;                      message.IsBodyHtml = true;                        // COMPENSATE FOR MONO BUG -- put logo online instead of attached                        message.Body = message.Body.Replace ("cid:pplogo" + newsletterIdentifier'                          "http://docs.piratpartiet.se/banners/newsletter-banner-pp-logo.png");                        /*                      Attachment attachment = new Attachment(directory + Path.DirectorySeparatorChar + "header-pp-logo.png"' "image/png");                      attachment.ContentId = "pplogo" + newsletterIdentifier;                      attachment.ContentDisposition.Inline = true;                      message.Attachments.Add(attachment);*/                        bool successOrPermanentFail = false;                        while (!successOrPermanentFail)                      {                          try                          {                              client.Send (message);                              successOrPermanentFail = true;                          }                          catch (SmtpException e)                          {                              if (!(e.ToString().StartsWith ("System.Net.Mail.SmtpException: 4")))                              {                                  // This is NOT a temporary error (SMTP 4xx). Fail.                                    successOrPermanentFail = true;                                  throw e;                              }                                // Otherwise' sleep for a while and try again.                                Thread.Sleep (1000);                          }                      }                        //Console.WriteLine("ok");                        //Console.WriteLine("ok");                  }                  catch (Exception e)                  {                      //Console.WriteLine("FAIL! <" + recipient.Email + ">");                      ExceptionMail.Send (                          new Exception ("Error sending press release to " + reporter.Name + " <" + reporter.Email + ">:"'                              e)' true);                  }              }
Magic Number,Swarmops.Utility.Migrations,PeopleOptionalData,C:\repos\Swarmops_Swarmops\Utility\Migrations\PeopleOptionalData.cs,Migrate,The following statement contains a magic number: using (DbConnection connection = db.GetSqlServerDbConnection())              {                  connection.Open();                    DbCommand command = connection.CreateCommand();                  command.CommandText =                      "SELECT PeopleOptionalData.PersonId' PersonOptionalDataTypes.Name AS PersonOptionalDataType' " +                      "PeopleOptionalData.Data FROM PeopleOptionalData'PersonOptionalDataTypes " +                      "WHERE PeopleOptionalData.PersonOptionalDataTypeId=PersonOptionalDataTypes.PersonOptionalDataTypeId ORDER BY PersonId";                    using (DbDataReader reader = command.ExecuteReader())                  {                      int lastPersonId = 0;                        while (reader.Read())                      {                          int personId = reader.GetInt32 (0);                          string personOptionalDataTypeString = reader.GetString (1);                          string data = reader.GetString (2);                            string displayData = data;                          if (displayData.Length > 40)                          {                              displayData = displayData.Substring (0' 40);                          }                            displayData = displayData.Replace ("\r\n"' "#");                            PersonOptionalDataKey key =                              (PersonOptionalDataKey)                                  Enum.Parse (typeof (PersonOptionalDataKey)' personOptionalDataTypeString);                            // Display                            Person person = null;                            try                          {                              person = Person.FromIdentity (personId);                          }                          catch (Exception)                          {                              Console.WriteLine ("PERSON #{0} IS NOT IN DATABASE"' personId);                          }                            if (person != null)                          {                              if (personId != lastPersonId)                              {                                  Console.WriteLine (person.Canonical + " -- ");                                  lastPersonId = personId;                              }                                ObjectOptionalDataType dataType =                                  (ObjectOptionalDataType)                                      Enum.Parse (typeof (ObjectOptionalDataType)' personOptionalDataTypeString);                                Console.WriteLine (" -- {0'-20} {1}"' dataType' displayData);                                if (data.Trim().Length > 0)                              {                                  db.SetObjectOptionalData (person' dataType' data);                              }                          }                      }                  }              }
Magic Number,Swarmops.Utility.Migrations,PeopleOptionalData,C:\repos\Swarmops_Swarmops\Utility\Migrations\PeopleOptionalData.cs,Migrate,The following statement contains a magic number: using (DbConnection connection = db.GetSqlServerDbConnection())              {                  connection.Open();                    DbCommand command = connection.CreateCommand();                  command.CommandText =                      "SELECT PeopleOptionalData.PersonId' PersonOptionalDataTypes.Name AS PersonOptionalDataType' " +                      "PeopleOptionalData.Data FROM PeopleOptionalData'PersonOptionalDataTypes " +                      "WHERE PeopleOptionalData.PersonOptionalDataTypeId=PersonOptionalDataTypes.PersonOptionalDataTypeId ORDER BY PersonId";                    using (DbDataReader reader = command.ExecuteReader())                  {                      int lastPersonId = 0;                        while (reader.Read())                      {                          int personId = reader.GetInt32 (0);                          string personOptionalDataTypeString = reader.GetString (1);                          string data = reader.GetString (2);                            string displayData = data;                          if (displayData.Length > 40)                          {                              displayData = displayData.Substring (0' 40);                          }                            displayData = displayData.Replace ("\r\n"' "#");                            PersonOptionalDataKey key =                              (PersonOptionalDataKey)                                  Enum.Parse (typeof (PersonOptionalDataKey)' personOptionalDataTypeString);                            // Display                            Person person = null;                            try                          {                              person = Person.FromIdentity (personId);                          }                          catch (Exception)                          {                              Console.WriteLine ("PERSON #{0} IS NOT IN DATABASE"' personId);                          }                            if (person != null)                          {                              if (personId != lastPersonId)                              {                                  Console.WriteLine (person.Canonical + " -- ");                                  lastPersonId = personId;                              }                                ObjectOptionalDataType dataType =                                  (ObjectOptionalDataType)                                      Enum.Parse (typeof (ObjectOptionalDataType)' personOptionalDataTypeString);                                Console.WriteLine (" -- {0'-20} {1}"' dataType' displayData);                                if (data.Trim().Length > 0)                              {                                  db.SetObjectOptionalData (person' dataType' data);                              }                          }                      }                  }              }
Magic Number,Swarmops.Utility.Migrations,PeopleOptionalData,C:\repos\Swarmops_Swarmops\Utility\Migrations\PeopleOptionalData.cs,Migrate,The following statement contains a magic number: using (DbConnection connection = db.GetSqlServerDbConnection())              {                  connection.Open();                    DbCommand command = connection.CreateCommand();                  command.CommandText =                      "SELECT PeopleOptionalData.PersonId' PersonOptionalDataTypes.Name AS PersonOptionalDataType' " +                      "PeopleOptionalData.Data FROM PeopleOptionalData'PersonOptionalDataTypes " +                      "WHERE PeopleOptionalData.PersonOptionalDataTypeId=PersonOptionalDataTypes.PersonOptionalDataTypeId ORDER BY PersonId";                    using (DbDataReader reader = command.ExecuteReader())                  {                      int lastPersonId = 0;                        while (reader.Read())                      {                          int personId = reader.GetInt32 (0);                          string personOptionalDataTypeString = reader.GetString (1);                          string data = reader.GetString (2);                            string displayData = data;                          if (displayData.Length > 40)                          {                              displayData = displayData.Substring (0' 40);                          }                            displayData = displayData.Replace ("\r\n"' "#");                            PersonOptionalDataKey key =                              (PersonOptionalDataKey)                                  Enum.Parse (typeof (PersonOptionalDataKey)' personOptionalDataTypeString);                            // Display                            Person person = null;                            try                          {                              person = Person.FromIdentity (personId);                          }                          catch (Exception)                          {                              Console.WriteLine ("PERSON #{0} IS NOT IN DATABASE"' personId);                          }                            if (person != null)                          {                              if (personId != lastPersonId)                              {                                  Console.WriteLine (person.Canonical + " -- ");                                  lastPersonId = personId;                              }                                ObjectOptionalDataType dataType =                                  (ObjectOptionalDataType)                                      Enum.Parse (typeof (ObjectOptionalDataType)' personOptionalDataTypeString);                                Console.WriteLine (" -- {0'-20} {1}"' dataType' displayData);                                if (data.Trim().Length > 0)                              {                                  db.SetObjectOptionalData (person' dataType' data);                              }                          }                      }                  }              }
Magic Number,Swarmops.Utility.Special.Sweden,SupportMailReview,C:\repos\Swarmops_Swarmops\Utility\Special\Sweden\SupportMailReview.cs,Run,The following statement contains a magic number: int lastIndex = 110000;
