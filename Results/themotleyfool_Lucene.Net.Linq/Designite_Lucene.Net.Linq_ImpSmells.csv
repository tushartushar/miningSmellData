Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Lucene.Net.Linq.Transformation.TreeVisitors,RangeQueryMergeExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\RangeQueryMergeExpressionTreeVisitor.cs,VisitBinaryExpression,Cyclomatic complexity of the method is 12
Complex Method,Lucene.Net.Linq.Transformation.TreeVisitors,BinaryToQueryExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\BinaryToQueryExpressionTreeVisitor.cs,VisitBinaryExpression,Cyclomatic complexity of the method is 8
Complex Method,Lucene.Net.Linq.Util,NumericRangeUtils,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\NumericUtils.cs,CreateNumericRangeQuery,Cyclomatic complexity of the method is 9
Long Parameter List,Lucene.Net.Linq,LuceneQueryStatistics,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryStatistics.cs,LuceneQueryStatistics,The method has 9 parameters. Parameters: query' filter' sort' elapsedPreparationTime' elapsedSearchTime' elapsedRetrievalTime' totalHits' skippedHits' retrievedDocuments
Long Parameter List,Lucene.Net.Linq,LuceneDataProvider,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneDataProvider.cs,LuceneDataProvider,The method has 5 parameters. Parameters: directory' externalAnalyzer' version' externalWriter' transactionLock
Long Parameter List,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,RaiseStatisticsCallback,The method has 7 parameters. Parameters: luceneQueryModel' executionContext' elapsedPreparationTime' elapsedSearchTime' elapsedRetrievalTime' skipResults' retrievedDocuments
Long Parameter List,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,EnumerateHits,The method has 7 parameters. Parameters: hits' executionContext' searcher' tracker' itemHolder' skipResults' projector
Long Parameter List,Lucene.Net.Linq,LuceneSession<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneSession.cs,LuceneSession,The method has 5 parameters. Parameters: mapper' detector' writer' context' queryable
Long Parameter List,Lucene.Net.Linq.Clauses.Expressions,LuceneRangeQueryExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneRangeQueryExpression.cs,LuceneRangeQueryExpression,The method has 5 parameters. Parameters: field' lower' lowerQueryType' upper' upperQueryType
Long Parameter List,Lucene.Net.Linq.Clauses.Expressions,LuceneRangeQueryExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneRangeQueryExpression.cs,LuceneRangeQueryExpression,The method has 6 parameters. Parameters: field' lower' lowerQueryType' upper' upperQueryType' occur
Long Parameter List,Lucene.Net.Linq.Mapping,NumericReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\NumericReflectionFieldMapper.cs,NumericReflectionFieldMapper,The method has 7 parameters. Parameters: propertyInfo' store' typeToValueTypeConverter' valueTypeToStringConverter' field' precisionStep' boost
Long Parameter List,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,ReflectionFieldMapper,The method has 8 parameters. Parameters: propertyInfo' store' index' termVector' converter' fieldName' caseSensitive' analyzer
Long Parameter List,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,ReflectionFieldMapper,The method has 9 parameters. Parameters: propertyInfo' store' index' termVector' converter' fieldName' caseSensitive' analyzer' boost
Long Parameter List,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,ReflectionFieldMapper,The method has 11 parameters. Parameters: propertyInfo' store' index' termVector' converter' fieldName' defaultParserOperator' caseSensitive' analyzer' boost' nativeSort
Long Parameter List,Lucene.Net.Linq.Mapping,FieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\FieldMappingInfoBuilder.cs,BuildPrimitive,The method has 5 parameters. Parameters: p' type' metadata' version' externalAnalyzer
Long Parameter List,Lucene.Net.Linq.Util,NumericRangeUtils,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\NumericUtils.cs,CreateNumericRangeQuery,The method has 5 parameters. Parameters: fieldName' lowerBound' upperBound' lowerRange' upperRange
Long Parameter List,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,CreateRangeQuery,The method has 5 parameters. Parameters: mapping' lowerQueryType' lowerBoundExpression' upperQueryType' upperBoundExpression
Long Statement,Lucene.Net.Linq.Analysis,PerFieldAnalyzer,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Analysis\PerFieldAnalyzer.cs,AddAnalyzer,The length of the statement  "                    throw new InvalidOperationException(string.Format("Attempt to replace analyzer for field {0} with analyzer of type {1}. Analyzer type {2} is already in use."' fieldName' previous.GetType()' analyzer.GetType())); " is 211.
Long Statement,Lucene.Net.Linq,AnalyzerExtensions,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\AnalyzerExtensions.cs,AddAnalyzer,The length of the statement  "                throw new ArgumentException("Field name must be specified as a lambda to a member property' ex. doc => doc.FirstName"' ex); " is 123.
Long Statement,Lucene.Net.Linq,LuceneDataProvider,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneDataProvider.cs,CreateQueryParser,The length of the statement  "            return new FieldMappingQueryParser<T>(version' mapper) { DefaultSearchProperty = mapper.KeyProperties.FirstOrDefault() ?? mapper.IndexedProperties.FirstOrDefault()}; " is 165.
Long Statement,Lucene.Net.Linq,LuceneDataProvider,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneDataProvider.cs,OpenSession,The length of the statement  "                    string.Format("The type {0} must implement {1} or else a separate implementation of {1} must be provided using an alternate overload."' " is 135.
Long Statement,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,ExecuteScalar,The length of the statement  "                RaiseStatisticsCallback(luceneQueryModel' executionContext' elapsedPreparationTime' elapsedSearchTime' elapsedRetrievalTime' 0' 0); " is 131.
Long Statement,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,ExecuteCollection,The length of the statement  "            queryModel.TransformExpressions(e => ReferenceReplacingExpressionTreeVisitor.ReplaceClauseReferences(e' mapping' throwOnUnmappedReferences: true)); " is 147.
Long Statement,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,ExecuteCollection,The length of the statement  "                var hits = searcher.Search(executionContext.Query' executionContext.Filter' maxResults + skipResults' luceneQueryModel.Sort); " is 125.
Long Statement,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,ExecuteCollection,The length of the statement  "                RaiseStatisticsCallback(luceneQueryModel' executionContext' elapsedPreparationTime' elapsedSearchTime' elapsedRetrievalTime' skipResults' retrievedDocuments); " is 158.
Long Statement,Lucene.Net.Linq,LuceneQueryExecutorBase<TDocument>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\LuceneQueryExecutor.cs,GetProjector,The length of the statement  "            return Expression.Lambda<Func<TDocument' T>>(queryModel.SelectClause.Selector' Expression.Parameter(typeof(TDocument))); " is 120.
Long Statement,Lucene.Net.Linq.Clauses.Expressions,LuceneQueryPredicateExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneQueryPredicateExpression.cs,VisitChildren,The length of the statement  "            return (newPattern == QueryPattern && newField == QueryField) ? this : new LuceneQueryPredicateExpression(newField' newPattern' Occur) { AllowSpecialCharacters = AllowSpecialCharacters }; " is 187.
Long Statement,Lucene.Net.Linq.Clauses.Expressions,LuceneQueryPredicateExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneQueryPredicateExpression.cs,ToString,The length of the statement  "            return string.Format("LuceneQuery[{0}]({1}{2}:{3}){4}{5}"' QueryType' Occur' QueryField.FieldName' pattern' Boost - 1.0f < 0.01f ? "" : "^" + Boost' AllowSpecialCharacters ? ".AllowSpecialCharacters()" : ""); " is 208.
Long Statement,Lucene.Net.Linq.Mapping,DocumentMapperBase<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\DocumentMapperBase.cs,ValidateKey,The length of the statement  "            var message = string.Format("Cannot create key for document of type '{0}' with null value(s) for properties {1} which are marked as Key=true."' " is 143.
Long Statement,Lucene.Net.Linq.Mapping,NumericFieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\NumericFieldMappingInfoBuilder.cs,BuildNumeric,The length of the statement  "            return new NumericReflectionFieldMapper<T>(p' metadata.Store' typeToValueTypeConverter' valueTypeToStringConverter' fieldName' " is 126.
Long Statement,Lucene.Net.Linq.Mapping,NumericFieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\NumericFieldMappingInfoBuilder.cs,GetScalarToStringConverter,The length of the statement  "            throw new NotSupportedException("TypeConverter of type " + typeToValueTypeConverter.GetType() + " does not convert values to any of long' int' double or float."); " is 162.
Long Statement,Lucene.Net.Linq.Mapping,NumericReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\NumericReflectionFieldMapper.cs,CreateRangeQuery,The length of the statement  "            return NumericRangeUtils.CreateNumericRangeQuery(fieldName' (ValueType)lowerBound' (ValueType)upperBound' lowerRange' upperRange); " is 130.
Long Statement,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,CreatePropertyGetter,The length of the statement  "            var method = Expression.Lambda<Func<T' object>>(Expression.Convert(Expression.Property(source' name)' typeof (object))' source).Compile(); " is 138.
Long Statement,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,CreatePropertySetter,The length of the statement  "            var method = Expression.Lambda<Action<T' object>> (Expression.Assign (propExp' castToObject)' sourceType' argument).Compile (); " is 127.
Long Statement,Lucene.Net.Linq.Mapping,ReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\ReflectionFieldMapper.cs,CreateSortField,The length of the statement  "                throw new NotSupportedException(string.Format("The type {0} does not implement IComparable or IComparable<T>. To use alphanumeric sorting' specify NativeSort=true on the mapping."' " is 180.
Long Statement,Lucene.Net.Linq.Mapping,FieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\FieldMappingInfoBuilder.cs,BuildPrimitive,The length of the statement  "            return new ReflectionFieldMapper<T>(p' store' index' termVectorMode' converter' fieldName' defaultParserOperator' caseSensitive' analyzer' boost' nativeSort); " is 158.
Long Statement,Lucene.Net.Linq.Mapping,FieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\FieldMappingInfoBuilder.cs,GetConverter,The length of the statement  "                throw new NotSupportedException("Property " + p.Name + " of type " + p.PropertyType + " cannot be converted from " + typeof(string)); " is 133.
Long Statement,Lucene.Net.Linq.Mapping,FieldMappingInfoBuilder,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\FieldMappingInfoBuilder.cs,CreateAnalyzer,The length of the statement  "            throw new InvalidOperationException("The analyzer type " + analyzer + " must have a public default constructor or public constructor that accepts " + typeof(Version)); " is 167.
Long Statement,Lucene.Net.Linq.Transformation,AllowSpecialCharactersExpressionTransformer,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\AllowSpecialCharactersExpressionTransformer.cs,Transform,The length of the statement  "            if (expression.Method.Name != ReflectionUtility.GetMethod(() => LuceneMethods.AllowSpecialCharacters<object>(null)).Name) " is 121.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,BooleanBinaryToQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\BooleanBinaryToQueryPredicateExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "            return new LuceneQueryPredicateExpression(predicate.QueryField' predicate.QueryPattern' Occur.MUST_NOT' predicate.QueryType) " is 124.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,AggressiveSubQueryFromClauseFlattener,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\AggressiveSubQueryFromClauseFlattener.cs,CheckFlattenable,The length of the statement  "                throw new NotSupportedException(first.GetType() + " is not supported in sub-queries. Sub-queries may only use SequenceTypePreservingResultOperatorBase subclasses."); " is 165.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,AggressiveSubQueryFromClauseFlattener,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\AggressiveSubQueryFromClauseFlattener.cs,MoveResultOperatorsToParent,The length of the statement  "            foreach (var resultOperator in subQueryModel.ResultOperators.OfType<SequenceTypePreservingResultOperatorBase>().Reverse().ToList()) " is 131.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,FuzzyMethodCallTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\FuzzyMethodCallTreeVisitor.cs,VisitSupportedMethodCallExpression,The length of the statement  "                throw new NotSupportedException("Fuzzy is only supported after predicate expressions. Example: (x.Field == \"term\").Fuzzy(0.6f)"); " is 131.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,RangeQueryMergeExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\RangeQueryMergeExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "                    return new LuceneRangeQueryExpression(left.QueryField' left.QueryPattern' Invert(left.QueryType)' right.QueryPattern' Invert(right.QueryType)' Occur.MUST_NOT); " is 159.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,RangeQueryMergeExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\RangeQueryMergeExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "                    return new LuceneRangeQueryExpression(right.QueryField' right.QueryPattern' Invert(right.QueryType)' left.QueryPattern' Invert(left.QueryType)' Occur.MUST_NOT); " is 160.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,RangeQueryMergeExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\RangeQueryMergeExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "                return new LuceneRangeQueryExpression(left.QueryField' left.QueryPattern' left.QueryType' right.QueryPattern' right.QueryType); " is 127.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,CompareCallToLuceneQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\CompareCallToBinaryExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "            if (!compareTypes.Contains(expression.NodeType) || !IsCompareMethod(expression.Left) || !expression.Right.IsZeroConstant()) " is 123.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,CompareCallToLuceneQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\CompareCallToBinaryExpressionTreeVisitor.cs,VisitBinaryExpression,The length of the statement  "            return ConvertToQueryExpression(expression.NodeType' (MethodCallExpression) expression.Left) ?? base.VisitBinaryExpression(expression); " is 135.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,CompareCallToLuceneQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\CompareCallToBinaryExpressionTreeVisitor.cs,ConvertToQueryExpression,The length of the statement  "                return new LuceneQueryPredicateExpression((LuceneQueryFieldExpression) expression.Arguments[0]' expression.Arguments[1]' Occur.MUST' compareType.ToQueryType()); " is 160.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,CompareCallToLuceneQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\CompareCallToBinaryExpressionTreeVisitor.cs,ConvertToQueryExpression,The length of the statement  "                return new LuceneQueryPredicateExpression((LuceneQueryFieldExpression)expression.Arguments[1]' expression.Arguments[0]' Occur.MUST' compareType.ToQueryType()); " is 159.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,ConcatToCompositeOrderingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\ConcatToCompositeOrderingExpressionTreeVisitor.cs,VisitMethodCallExpression,The length of the statement  "                var fields = new[] { (LuceneQueryFieldExpression)expression.Arguments[0]' (LuceneQueryFieldExpression)expression.Arguments[1] }; " is 128.
Long Statement,Lucene.Net.Linq.Transformation.TreeVisitors,QuerySourceReferencePropertyTransformingTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\QuerySourceReferencePropertyTransformingTreeVisitor.cs,VisitQuerySourceReferenceExpression,The length of the statement  "                throw new NotSupportedException("Only MemberExpression of type PropertyInfo may be used on QuerySourceReferenceExpression."); " is 125.
Long Statement,Lucene.Net.Linq.Util,ExpressionExtensions,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\ExpressionExtensions.cs,IsTrueConstant,The length of the statement  "            return expression.Type == typeof(bool) && expression is ConstantExpression && Convert.ToBoolean(((ConstantExpression)expression).Value); " is 136.
Long Statement,Lucene.Net.Linq.Util,ExpressionExtensions,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\ExpressionExtensions.cs,IsFalseConstant,The length of the statement  "            return expression.Type == typeof(bool) && expression is ConstantExpression && !Convert.ToBoolean(((ConstantExpression)expression).Value); " is 137.
Long Statement,Lucene.Net.Linq.Util,NumericRangeUtils,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\NumericUtils.cs,CreateNumericRangeQuery,The length of the statement  "                throw new ArgumentException("Cannot compare different value types " + lowerBound.GetType() + " and " + upperBound.GetType()); " is 125.
Long Statement,Lucene.Net.Linq.Util,NumericRangeUtils,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Util\NumericUtils.cs,ForceDisableOmitNorms,The length of the statement  "                throw new InvalidOperationException(string.Format("Type {0} does not have a non-public field named {1}."' typeof(AbstractField)' fieldName)); " is 141.
Long Statement,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,VisitLuceneRangeQueryExpression,The length of the statement  "            var query = CreateRangeQuery(mapping' expression.LowerQueryType' expression.Lower' expression.UpperQueryType' expression.Upper); " is 128.
Long Statement,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,AddMultiFieldQuery,The length of the statement  "            query.Add(new BooleanClause(fieldMappingInfoProvider.CreateMultiFieldQuery(GetPattern(expression' null))' expression.Occur)); " is 125.
Long Statement,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,CreateRangeQuery,The length of the statement  "            var lowerRange = (lowerQueryType == QueryType.LessThan || lowerQueryType == QueryType.GreaterThan) ? RangeType.Exclusive : RangeType.Inclusive; " is 143.
Long Statement,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,CreateRangeQuery,The length of the statement  "            var upperRange = (upperQueryType == QueryType.LessThan || upperQueryType == QueryType.GreaterThan) ? RangeType.Exclusive : RangeType.Inclusive; " is 143.
Complex Conditional,Lucene.Net.Linq.Transformation.TreeVisitors,BooleanBinaryToQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\BooleanBinaryToQueryPredicateExpressionTreeVisitor.cs,VisitBinaryExpression,The conditional expression  "(expression.NodeType == ExpressionType.Equal && constant) ||                  (expression.NodeType == ExpressionType.NotEqual && !constant)"  is complex.
Magic Number,Lucene.Net.Linq.Clauses.Expressions,LuceneQueryFieldExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneQueryFieldExpression.cs,ToString,The following statement contains a magic number: Math.Abs(Boost - 1.0f) > 0.01f
Magic Number,Lucene.Net.Linq.Clauses.Expressions,LuceneQueryPredicateExpression,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Clauses\Expressions\LuceneQueryPredicateExpression.cs,ToString,The following statement contains a magic number: return string.Format("LuceneQuery[{0}]({1}{2}:{3}){4}{5}"' QueryType' Occur' QueryField.FieldName' pattern' Boost - 1.0f < 0.01f ? "" : "^" + Boost' AllowSpecialCharacters ? ".AllowSpecialCharacters()" : "");
Magic Number,Lucene.Net.Linq.Mapping,NumericReflectionFieldMapper<T>,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Mapping\NumericReflectionFieldMapper.cs,SetBoostIfNotDefault,The following statement contains a magic number: const float threshold = 0.002f;
Magic Number,Lucene.Net.Linq.Converters,FormatConverter,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Converters\FormatConverter.cs,ConvertFrom,The following statement contains a magic number: parseMethod.GetParameters().Length == 4
Magic Number,Lucene.Net.Linq.Transformation.TreeVisitors,CompareCallToLuceneQueryPredicateExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\CompareCallToBinaryExpressionTreeVisitor.cs,IsCompareMethod,The following statement contains a magic number: return mc.Method.Name == "Compare" && mc.Arguments.Count == 2;
Magic Number,Lucene.Net.Linq.Transformation.TreeVisitors,ConcatToCompositeOrderingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\ConcatToCompositeOrderingExpressionTreeVisitor.cs,VisitMethodCallExpression,The following statement contains a magic number: expression.Method.Name == "Concat" && expression.Arguments.Count == 2
Missing Default,Lucene.Net.Linq.Transformation.TreeVisitors,RangeQueryMergeExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\RangeQueryMergeExpressionTreeVisitor.cs,Invert,The following switch statement is missing a default case: switch (queryType)              {                  case QueryType.GreaterThan:                      return QueryType.LessThanOrEqual;                  case QueryType.GreaterThanOrEqual:                      return QueryType.LessThan;                  case QueryType.LessThan:                      return QueryType.GreaterThanOrEqual;                  case QueryType.LessThanOrEqual:                      return QueryType.GreaterThan;              }
Missing Default,Lucene.Net.Linq.Transformation.TreeVisitors,BinaryToQueryExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Transformation\TreeVisitors\BinaryToQueryExpressionTreeVisitor.cs,VisitBinaryExpression,The following switch statement is missing a default case: switch(queryType)                  {                      case QueryType.GreaterThan:                          queryType = QueryType.LessThan;                          break;                      case QueryType.LessThan:                          queryType = QueryType.GreaterThan;                          break;                      case QueryType.GreaterThanOrEqual:                          queryType = QueryType.LessThanOrEqual;                          break;                      case QueryType.LessThanOrEqual:                          queryType = QueryType.GreaterThanOrEqual;                          break;                  }
Missing Default,Lucene.Net.Linq.Translation.TreeVisitors,QueryBuildingExpressionTreeVisitor,D:\research\architectureSmells\repos1\themotleyfool_Lucene.Net.Linq\source\Lucene.Net.Linq\Translation\TreeVisitors\QueryBuildingExpressionTreeVisitor.cs,GetPattern,The following switch statement is missing a default case: switch (expression.QueryType)              {                  case QueryType.Prefix:                      pattern += "*";                      break;                  case QueryType.Wildcard:                      pattern = "*" + pattern + "*";                      break;                  case QueryType.Suffix:                      pattern = "*" + pattern;                      break;              }
