Implementation smell,Namespace,Class,File,Method,Description
Long Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has 302 lines of code.
Long Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The method has 101 lines of code.
Long Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The method has 113 lines of code.
Long Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has 419 lines of code.
Long Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has 296 lines of code.
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,BulkInsertFromCSV,Cyclomatic complexity of the method is 11
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckTableExists,Cyclomatic complexity of the method is 8
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,Cyclomatic complexity of the method is 8
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,Cyclomatic complexity of the method is 60
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,Cyclomatic complexity of the method is 27
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,Cyclomatic complexity of the method is 27
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,Cyclomatic complexity of the method is 9
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,Cyclomatic complexity of the method is 28
Complex Method,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,Cyclomatic complexity of the method is 28
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForChildWindow,Cyclomatic complexity of the method is 12
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForAnyChildWindow,Cyclomatic complexity of the method is 12
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,Cyclomatic complexity of the method is 9
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForAppWindow,Cyclomatic complexity of the method is 8
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,Cyclomatic complexity of the method is 10
Complex Method,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,LaunchApp,Cyclomatic complexity of the method is 8
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,Cyclomatic complexity of the method is 10
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,Cyclomatic complexity of the method is 9
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,Cyclomatic complexity of the method is 18
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,Cyclomatic complexity of the method is 10
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,Cyclomatic complexity of the method is 71
Complex Method,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,Cyclomatic complexity of the method is 54
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,EditComment,The method has 5 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteComment,The method has 5 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The method has 5 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has 10 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The method has 6 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The method has 9 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The method has 7 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The method has 6 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The method has 6 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The method has 6 parameters.
Long Parameter List,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectMenu,The method has 5 parameters.
Long Parameter List,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectMenu,The method has 6 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The method has 8 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has 15 parameters.
Long Parameter List,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has 5 parameters.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckTableExists,The length of the statement  "			throw new InvalidOperationException ("TableExists requires an open and available Connection. The connection's current state is " + connection.State); " is 149.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,OpenSavedCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports")' "Display..."); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,OpenSavedCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' commentedReportTitle' int.Parse (Sync_Timeout)); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "				//    TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow(qbWindow' "Replace Your Commented Report?"); " is 164.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' "Saved Successfully"' int.Parse (Sync_Timeout)); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "			savedsuccessfullyWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Saved Successfully"); " is 121.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "			saveCommentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Your Commented Report"); " is 131.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (saveCommentedReportWindow' "12402"' saveReportName); " is 122.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Your Commented Report")' "OK"); " is 177.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' "Saved Successfully"' int.Parse (Sync_Timeout)); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The length of the statement  "			savedsuccessfullyWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Saved Successfully"); " is 121.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window commentedReportListWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports"); " is 165.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete This Commented Report?")' "Yes"); " is 181.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The length of the statement  "					Logger.logMessage ("DeleteCommentedReport -> Specified commented report " + reportNameToDelete + " was deleted successfully "); " is 127.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RenameCommentedReport,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window commentedReportListWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports"); " is 165.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RenameCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Your Commented Report")' "12402"' newReportName); " is 198.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RenameCommentedReport,The length of the statement  "				TestStack.White.UIItems.WindowItems.Window renameWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Replace Your Commented Report?"); " is 165.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RenameCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Your Commented Report")' "OK"); " is 177.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RenameCommentedReport,The length of the statement  "			Logger.logMessage ("RenameCommentedReport :  " + currentReportName + " has been Successfully renamed to " + newReportName); " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,GetTotalCommentCount,The length of the statement  "				totalCount = Int32.Parse (header.Substring (header.IndexOf ('(') + 1' header.IndexOf (')') - header.IndexOf ('(') - 1)); " is 120.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,EditComment,The length of the statement  "				TestStack.White.UIItems.WindowItems.Window commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle); " is 162.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,EditComment,The length of the statement  "						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited"); " is 129.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,EditComment,The length of the statement  "				bool res = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckElementExistsByName (commentedReportWindow' "Comment-Edited"); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteComment,The length of the statement  "				TestStack.White.UIItems.WindowItems.Window commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle); " is 162.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteComment,The length of the statement  "						TestStack.White.UIItems.WindowItems.Window deleteCommentwindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete This Comment?"); " is 162.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteComment,The length of the statement  "				savedsuccessfullyWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Saved Successfully"); " is 121.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckWhetherVisualCueExists,The length of the statement  "		var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window w = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle); " is 142.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextOnElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save document as PDF")' "File name:"' exportDataPath + commentedReportName + ".pdf"); " is 230.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save document as PDF")' "Save"); " is 173.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Confirm Save As")' "Yes"); " is 167.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' commentedReportTitle' int.Parse (Sync_Timeout)); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "		Logger.logMessage ("SaveCommentedReportDataAsPDF : -> Failed to save " + commentedReportName + ".pdf" + " in " + exportDataPath); " is 129.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The length of the statement  "		Logger.logMessage ("SaveCommentedReportDataAsPDF : -> Failed to save " + commentedReportName + ".pdf" + " in " + exportDataPath); " is 129.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "		TestStack.White.UIItems.WindowItems.Window preferencesWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Preferences"); " is 151.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (preferencesWindow' "Bring back all one time messages"); " is 122.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "		//FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName(preferencesWindow' "Turn off pop-up messages for products and services"); " is 141.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window saveChangesWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Changes"); " is 152.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window saveChangesWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Save Changes"); " is 152.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ResetQBPrefForCommentedReports,The length of the statement  "		//FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName(preferencesWindow' "Collapse TransFrameworkLibraries.ActionLibs.WhiteAPI.Actions"); " is 151.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window modifyReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Modify Report: Custom"); " is 162.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]); " is 133.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Collapsing and Expanding Transactions")) { " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Collapsing and Expanding Transactions"); " is 166.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Balance Sheet by class report"); " is 158.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Warning"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Update Item Percent Complete"); " is 157.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Price Level"); " is 147.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Filter Report by Job"); " is 149.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report"); " is 142.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Forecast Report"); " is 144.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Missing Checks"); " is 143.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Reconciliation Discrepancy Report"); " is 162.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Select Previous Reconciliation Report")) { " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Previous Reconciliation Report"); " is 166.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout)); " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout)); " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout)); " is 123.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Report"); " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultCommentedReportTitle' int.Parse (Sync_Timeout)); " is 132.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The length of the statement  "		commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' defaultCommentedReportTitle); " is 126.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The length of the statement  "					var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The length of the statement  "						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The length of the statement  "					Logger.logMessage ("AddCommentsToCommentedReport : -> Successfully Added add comments for the Commented report" + commentedReportName); " is 135.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The length of the statement  "		Logger.logMessage ("AddCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName); " is 126.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,InsertRecordsIntoCommentedReportsTable,The length of the statement  "		Logger.logMessage ("InsertRecordsIntoCommentedReportsTable : -> Successfully inserted records into the table " + tableName); " is 124.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The length of the statement  "			res = Reports.CreateCommentedReport (qbApp' qbWindow' reportName' accesspoint' defaultReportTitle' fromDate' toDate' type' commentedReportName' defaultCommentedReportTitle); " is 173.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The length of the statement  "			res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName' 5); " is 130.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The length of the statement  "			res = Reports.SaveCommentedReportDataAsPDF (qbApp' qbWindow' commentedReportName' commentedReportTitle' exportDataPath); " is 120.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToAllTheVisualCues,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToAllTheVisualCues,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,GetTotalVisualCueCount,The length of the statement  "		var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add99Comments,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add99Comments,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "		string TwoThousandCharsCommentText = "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"; " is 2040.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "		res = Reports.Add2000CharsCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount' TwoThousandCharsCommentText); " is 214.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "		if (Reports.OpenSavedCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle)) { " is 122.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' reportData.commentedReportTitle); " is 173.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharactersComment,The length of the statement  "					string text = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetTextByAutomationID (commentedReportWindow' "CommentTextBox"); " is 125.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The length of the statement  "					var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The length of the statement  "						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' TwoThousandCharsCommentText); " is 140.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The length of the statement  "					Logger.logMessage ("AddCommentsToCommentedReport : -> Successfully Added add comments for the Commented report" + commentedReportName); " is 135.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The length of the statement  "		Logger.logMessage ("Add2000CharsCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName); " is 135.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedCommentedReport,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' accessPoint' memorizedReportName' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 236.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedCommentedReport,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultReportTitle' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultReportTitle' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "		TestStack.White.UIItems.WindowItems.Window modifyReportWindow = Actions.GetChildWindow (qbWindow' "Modify Report: Profit  Loss"); " is 129.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultReportTitle' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (memorizeReportWindow' "15501"' memorizedReportName); " is 122.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' memorizedReportName' int.Parse (Sync_Timeout)); " is 124.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The length of the statement  "		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete Memorized Report")' "OK"); " is 174.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The length of the statement  "				Logger.logMessage ("Delete Memorized Report -> Specified memorized report " + memorizedReportName + " was deleted successfully "); " is 130.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckMemorizedReportExists,The length of the statement  "		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' "Memorized Reports"' "Memorized Report List"); " is 133.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextOnElementByAutomationID (reportCenterWindow' "textBox"' "CR2095"); " is 120.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForElementVisible (reportCenterWindow' "Search Results"' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultReportTitle' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultReportTitle' int.Parse (Sync_Timeout)); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' reportData.defaultReportTitle)' "Comment on Report"); " is 154.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' reportData.defaultCommentedReportTitle' int.Parse (Sync_Timeout)); " is 143.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "		TestStack.White.UIItems.WindowItems.Window commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' reportData.defaultCommentedReportTitle); " is 180.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The length of the statement  "		Logger.logMessage ("CreateCommentedReport : -> Successfully created contributed Commented report  " + reportData.commentedReportName); " is 134.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportWithExistingName,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportWithExistingName,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' newName' reportData.defaultCommentedReportTitle); " is 234.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportWithExistingNameOfADeletedReport,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportWithExistingNameOfADeletedReport,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ScrollCommentedReportWindow,The length of the statement  "                 res = Reports.CreateCommentedReport(qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);" is 256.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ScrollCommentedReportWindow,The length of the statement  "                 QuickBooks.ResetQBWindows(qbApp' qbWindow' false);*/OpenSavedCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle); " is 160.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,OpeningMultipleInstancesOfSameCommentedReport,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentWithNoText,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentWithNoText,The length of the statement  "		res = Reports.DoNotAddAnyComment (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 166.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The length of the statement  "					var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The length of the statement  "					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The length of the statement  "					Logger.logMessage ("AddCommentsToCommentedReport : -> Successfully Added add comments for the Commented report" + commentedReportName); " is 135.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The length of the statement  "		Logger.logMessage ("AddCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName); " is 126.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,TrackUserIdentityForComments,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,TrackUserIdentityForComments,The length of the statement  "		res = Reports.CheckCommentsCreatedByModifiedByValues (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 186.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "					var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml"; " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "					TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid)); " is 178.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "							FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited"); " is 129.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "					lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid)); " is 145.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The length of the statement  "		Logger.logMessage ("AddCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName); " is 126.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedRepertWhichIsInUse,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedRepertWhichIsInUse,The length of the statement  "		TestStack.White.UIItems.WindowItems.Window commentedReportListWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports"); " is 165.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedRepertWhichIsInUse,The length of the statement  "		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete This Commented Report?")' "Yes"); " is 181.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInQBMFile,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInQBMFile,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInQBBFile,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInQBBFile,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInCIndexFile,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReportInCIndexFile,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInAsciiFormat,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInAsciiFormat,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInAsciiFormat,The length of the statement  "		string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss"); " is 132.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInAsciiFormat,The length of the statement  "		PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "A"' fileName); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInCSVFormat,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInCSVFormat,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInCSVFormat,The length of the statement  "		string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss"); " is 132.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInCSVFormat,The length of the statement  "		PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "C"' fileName); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInTabDelimitedFormat,The length of the statement  "		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle); " is 257.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInTabDelimitedFormat,The length of the statement  "		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount); " is 176.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInTabDelimitedFormat,The length of the statement  "		string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss"); " is 132.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInTabDelimitedFormat,The length of the statement  "		PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "T"' fileName); " is 136.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window w = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle); " is 142.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The length of the statement  "			TestStack.White.UIItems.WindowItems.Window printwindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Print Reports"); " is 147.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The length of the statement  "			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextOnElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Create Disk File")' "File name:"' fileName); " is 189.
Long Statement,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The length of the statement  "				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' commentedReportTitle' int.Parse (Sync_Timeout)); " is 125.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,ClickButtonByOrientation,The length of the statement  "				if (element.Name.Equals (identifier) || element.Id.Equals (identifier) || element.PrimaryIdentification.Equals (identifier)) { " is 126.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,ClickButtonByAutomationID,The length of the statement  "		TestStack.White.UIItems.Button b = (TestStack.White.UIItems.Button)win.Get (SearchCriteria.ByAutomationId (automationID)); " is 122.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,ClickMenuItemByName,The length of the statement  "		TestStack.White.UIItems.MenuItems.Menu b = (TestStack.White.UIItems.MenuItems.Menu)win.Get (SearchCriteria.ByNativeProperty (p' name)); " is 135.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SetTextByAutomationID,The length of the statement  "		TestStack.White.UIItems.TextBox t = (TestStack.White.UIItems.TextBox)win.Get (SearchCriteria.ByAutomationId (automationID)); " is 124.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetTextByAutomationID,The length of the statement  "		TestStack.White.UIItems.TextBox t = (TestStack.White.UIItems.TextBox)win.Get (SearchCriteria.ByAutomationId (automationID)); " is 124.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SetTextByName,The length of the statement  "		TestStack.White.UIItems.TextBox t = (TestStack.White.UIItems.TextBox)win.Get (SearchCriteria.ByNativeProperty (p' name)); " is 121.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectListBoxItemByText,The length of the statement  "		TestStack.White.UIItems.ListBoxItems.ListBox l = win.Get<TestStack.White.UIItems.ListBoxItems.ListBox> (SearchCriteria.ByAutomationId (listBoxElementAutoID)); " is 158.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectListBoxItemByText,The length of the statement  "		Logger.logMessage ("SelectListBoxItemByText " + win + "->" + listBoxElementAutoID + "->" + matchText + " - Successful"); " is 120.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SetTextByName,The length of the statement  "		Logger.logMessage ("UIA_SetTextByName " + uiaWindow + "->" + window + "->" + name + "->" + value + "->" + " - Successful"); " is 123.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SelectCheckBoxByName,The length of the statement  "		PropertyCondition checkBoxCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.CheckBox); " is 122.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SelectCheckBoxByName,The length of the statement  "		Logger.logMessage ("UIA_SelectCheckBoxByName " + uiaWindow + "->" + window + "->" + name + "->" + "state" + " - Successful"); " is 125.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SelectCheckBoxByName,The length of the statement  "		Logger.logMessage ("UIA_SelectCheckBoxByName " + uiaWindow + "->" + window + "->" + name + "->" + "state" + " - Failed"); " is 121.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SetTextByAutomationID,The length of the statement  "		Logger.logMessage ("UIA_SetTextByAutomationID " + uiaWindow + "->" + window + "->" + automationID + "->" + value + "->" + " - Successful"); " is 139.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_SetTextByAutomationID,The length of the statement  "		Logger.logMessage ("UIA_SetTextByAutomationID " + uiaWindow + "->" + window + "->" + automationID + "->" + value + "->" + " - Failed"); " is 135.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_GetAppWindow,The length of the statement  "		PropertyCondition windowTypeCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Window); " is 122.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_GetChildWindow,The length of the statement  "		PropertyCondition windowTypeCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Window); " is 122.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForAnyChildWindow,The length of the statement  "	Logger.logMessage ("                 WaitForAnyChildWindow " + mainWindow + "->" + currentWindowName + " - Begin Sync"); " is 120.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The length of the statement  "	Logger.logMessage ("                 WaitForElementEnabledOrTransformed " + window + "->" + elementName + "->" + transformName + " - Begin Sync"); " is 146.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The length of the statement  "					Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Do not close applications. (A reboot will be required.)"); " is 141.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The length of the statement  "		Logger.logMessage ("                 WaitForElementEnabledOrTransformed " + window + "->" + elementName + "->" + transformName + " - End Sync"); " is 144.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The length of the statement  "		Logger.logMessage ("                 WaitForElementEnabledOrTransformed " + window + "->" + elementName + "->" + transformName + " - Terminated"); " is 146.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectComboBoxItemByText,The length of the statement  "		TestStack.White.UIItems.ListBoxItems.ComboBox c = win.Get<TestStack.White.UIItems.ListBoxItems.ComboBox> (SearchCriteria.ByAutomationId (comboBoxAutoID)); " is 154.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectCheckBox,The length of the statement  "		TestStack.White.UIItems.CheckBox c = win.Get<TestStack.White.UIItems.CheckBox> (SearchCriteria.ByAutomationId (checkBoxAutoID)); " is 128.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectCheckBoxByName,The length of the statement  "		TestStack.White.UIItems.CheckBox c = win.Get<TestStack.White.UIItems.CheckBox> (SearchCriteria.ByNativeProperty (p' checkBoxName)); " is 131.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectRadioButtonByName,The length of the statement  "		TestStack.White.UIItems.RadioButton r = win.Get<TestStack.White.UIItems.RadioButton> (SearchCriteria.ByNativeProperty (p' radioButtonName)); " is 140.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SelectRadioButton,The length of the statement  "		TestStack.White.UIItems.RadioButton r = win.Get<TestStack.White.UIItems.RadioButton> (SearchCriteria.ByAutomationId (radioButtonAutoID)); " is 137.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,UIA_ClickMenuItem,The length of the statement  "		TestStack.White.UIItems.MenuItems.Menu p = new TestStack.White.UIItems.MenuItems.Menu (menuItem' window.ActionListener); " is 120.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetApp,The length of the statement  "					if (p.ProcessName.Contains (processName) || p.ProcessName.Contains (processName.ToUpper ()) || p.ProcessName.Contains (processName.ToLower ())) { " is 145.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetTableInsideAPaneByIndex,The length of the statement  "		TestStack.White.UIItems.TableItems.Table table = new TestStack.White.UIItems.TableItems.Table (tableElements [index]' window.ActionListener); " is 141.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableTextElements,The length of the statement  "		PropertyCondition tableElementsCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Text); " is 123.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableTextElements,The length of the statement  "		AutomationElementCollection allTableElements = table.AutomationElement.FindAll (TreeScope.Descendants' tableElementsCondition); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableEditBoxElements,The length of the statement  "		PropertyCondition tableElementsCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit); " is 123.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableEditBoxElements,The length of the statement  "		AutomationElementCollection allTableElements = table.AutomationElement.FindAll (TreeScope.Descendants' tableElementsCondition); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableButtonElements,The length of the statement  "		PropertyCondition tableElementsCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Button); " is 125.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableButtonElements,The length of the statement  "		AutomationElementCollection allTableElements = table.AutomationElement.FindAll (TreeScope.Descendants' tableElementsCondition); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableCheckBoxElements,The length of the statement  "		PropertyCondition tableElementsCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.CheckBox); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetAllTableCheckBoxElements,The length of the statement  "		AutomationElementCollection allTableElements = table.AutomationElement.FindAll (TreeScope.Descendants' tableElementsCondition); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetTableRowNumberByMatchingText,The length of the statement  "		PropertyCondition tableElementsCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Text); " is 123.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,GetTableRowNumberByMatchingText,The length of the statement  "		AutomationElementCollection allTableElements = table.AutomationElement.FindAll (TreeScope.Descendants' tableElementsCondition); " is 127.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,LaunchApp,The length of the statement  "					if (p.ProcessName.Contains (appName) || p.ProcessName.Contains (appName.ToUpper ()) || p.ProcessName.Contains (appName.ToLower ())) { " is 133.
Long Statement,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,LaunchApp,The length of the statement  "			if (p.ProcessName.Contains (appName) || p.ProcessName.Contains (appName.ToUpper ()) || p.ProcessName.Contains (appName.ToLower ())) { " is 133.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,The length of the statement  "					if (p.ProcessName.Contains (appProcessName.ToUpper ()) || p.ProcessName.Contains (appProcessName.ToLower ()) || p.ProcessName.Contains (appProcessName)) { " is 154.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,The length of the statement  "			if (p.ProcessName.Contains (appProcessName.ToUpper ()) || p.ProcessName.Contains (appProcessName.ToLower ()) || p.ProcessName.Contains (appProcessName)) { " is 154.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "			Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("Programs and Features")' qbVersion' int.Parse (Sync_Timeout)); " is 120.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "			Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("Programs and Features")' "Uninstall/Change"' int.Parse (Sync_Timeout)); " is 129.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "			Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' int.Parse (Sync_Timeout)); " is 121.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "				Actions.WaitForElementEnabledOrTransformed (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' "Finish"' int.Parse (Sync_Timeout)); " is 144.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "				Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Do not close applications. (A reboot will be required.)"); " is 141.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The length of the statement  "				Actions.WaitForElementEnabledOrTransformed (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' "Finish"' int.Parse (Sync_Timeout)); " is 144.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The length of the statement  "			Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' int.Parse (Sync_Timeout)); " is 121.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The length of the statement  "		Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "I accept the terms of the license agreement"); " is 129.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The length of the statement  "			Actions.WaitForElementVisible (Actions.GetDesktopWindow ("QuickBooks Installation")' "Finish"' int.Parse (Sync_Timeout)); " is 121.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The length of the statement  "		Window invoiceWindow = Actions.GetWindow (qbWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Invoice.Objects.CreateInvoice_Window_Name); " is 136.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The length of the statement  "			Actions.ClickElementByAutomationID (invoiceWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Invoice.Objects.MaximizeWindow_Button_AutoID); " is 138.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The length of the statement  "			Actions.ClickButtonByAutomationID (invoiceWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Invoice.Objects.MarkPending_Button_AutoID); " is 134.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The length of the statement  "		Actions.ClickElementByName (invoiceWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Invoice.Objects.SaveClsoe_Button_Name); " is 123.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The length of the statement  "				Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5)); " is 145.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The length of the statement  "				Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath); " is 128.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The length of the statement  "				Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5)); " is 145.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The length of the statement  "					else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) { " is 131.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The length of the statement  "							Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks."); " is 122.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Window QBSetupWindow = Actions.GetChildWindow (qbWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.QBSetup_Window_Name); " is 134.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.ClickElementByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.ExpressStart_Button_AutoID); " is 135.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SetTextByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.BusinessName_TxtField_AutoID' businessName); " is 146.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SetTextByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.IndustryList_TxtField_AutoID' "Information"); " is 147.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SelectComboBoxItemByText (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.TaxStructure_CmbBox_AutoID' "Corporation"); " is 148.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SetTextByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.TaxID_TxtField_AutoID' "123-45-6789"); " is 140.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SelectComboBoxItemByText (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.HaveEmployees_CmbBox_AutoID' "No"); " is 140.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.ClickElementByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.Continue_Button_AutoID); " is 131.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SelectComboBoxItemByText (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.StateName_CmbBox_AutoID' "DE"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SetTextByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.ZipCode_TxtField_AutoID' "DE123"); " is 136.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.SetTextByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.Phone_TxtField_AutoID' "6104567890"); " is 139.
Long Statement,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The length of the statement  "		Actions.ClickElementByAutomationID (QBSetupWindow' FrameworkLibraries.ObjMaps.QBDT.WhiteAPI.Common.Objects.CreateCompany_Button_AutoID); " is 136.
Long Statement,FrameworkLibraries.Utils,FileOperations,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\FileOperations.cs,CopyCompanyFilesToDirectory,The length of the statement  "			if (s.Contains (".qbw") || s.Contains (".QBW") || s.Contains (".QBB") || s.Contains (".qbb") || s.Contains (".QBM") || s.Contains (".qbm")) { " is 141.
Long Statement,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The length of the statement  "		if ((!String.IsNullOrEmpty (line)) && (!line.StartsWith (";")) && (!line.StartsWith ("#")) && (!line.StartsWith ("'")) && (line.Contains ('='))) { " is 146.
Complex Conditional,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The conditional expression  "(!fromDate.Equals (null) || !fromDate.Equals ("")) || (!toDate.Equals (null) || !toDate.Equals (""))"  is complex.
Complex Conditional,FrameworkLibraries.Utils,FileOperations,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\FileOperations.cs,CopyCompanyFilesToDirectory,The conditional expression  "s.Contains (".qbw") || s.Contains (".QBW") || s.Contains (".QBB") || s.Contains (".qbb") || s.Contains (".QBM") || s.Contains (".qbm")"  is complex.
Complex Conditional,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The conditional expression  "(!String.IsNullOrEmpty (line)) && (!line.StartsWith (";")) && (!line.StartsWith ("#")) && (!line.StartsWith ("'")) && (line.Contains ('='))"  is complex.
Complex Conditional,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The conditional expression  "(value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))"  is complex.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,BulkInsertFromCSV,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentedReportExists,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,OpenSavedCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,OpenSavedCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,SaveCommentedReportDataAsPDF,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateContributedCommentedReport,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,ScrollCommentedReportWindow,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedRepertWhichIsInUse,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintCommentedReportInSpecifiedFormat,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,HighLightWindowElements,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckElementExistsByAutomationID,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckElementExistsByName,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,FileOutAutomationIDs,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CloseAllChildWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CloseAllChildWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForChildWindow,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForChildWindow,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForAnyChildWindow,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForAnyChildWindow,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,WaitForElementEnabledOrTransformed,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,QBCrashHandler,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,Initialize,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,RepairOrUnInstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateInvoice,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,CreateCompany,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.Utils,FileOperations,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\FileOperations.cs,DeleteAllFilesInDirectory,The method has an empty catch block.
Empty Catch Block,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The method has an empty catch block.
Magic Number,FrameworkLibraries.ActionLibs.Silk4NetAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\Silk4NetAPI\Actions.cs,ScrollBarPageDownToLast,The following statement contains a magic number: try {  	desktop.VerticalScrollBar (element).Scroll (1000);  	for (int i = 0; i <= 5; i++) {  		desktop.VerticalScrollBar (element).PageDown ();  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	return true;  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.Silk4NetAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\Silk4NetAPI\Actions.cs,ScrollBarPageDownToLast,The following statement contains a magic number: try {  	desktop.VerticalScrollBar (element).Scroll (1000);  	for (int i = 0; i <= 5; i++) {  		desktop.VerticalScrollBar (element).PageDown ();  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	return true;  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.Silk4NetAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\Silk4NetAPI\Actions.cs,ScrollBarPageDownToLast,The following statement contains a magic number: desktop.VerticalScrollBar (element).Scroll (1000);  
Magic Number,FrameworkLibraries.ActionLibs.Silk4NetAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\Silk4NetAPI\Actions.cs,ScrollBarPageDownToLast,The following statement contains a magic number: for (int i = 0; i <= 5; i++) {  	desktop.VerticalScrollBar (element).PageDown ();  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The following statement contains a magic number: try {  	//check if the report to be deleted exists  	bool reportExist = Reports.CheckCommentedReportExists (qbApp' qbWindow' reportNameToDelete);  	if (reportExist) {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' "Commented Reports");  		Thread.Sleep (int.Parse (Execution_Speed));  		qbAppWindowForSilk = _desktop.Window ("/Window");  		qbAppWindowForSilk.SetActive ();  		commentedReportListWindowForSilk = qbAppWindowForSilk.Window ("@caption='Commented Reports'");  		commentedReportListWindowForSilk.Maximize ();  		commentedReportListWindowForSilk.TextClick (reportNameToDelete' 1' ClickType.Left);  		TestStack.White.UIItems.WindowItems.Window commentedReportListWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports");  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportListWindow' "Commented Reports");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.DesktopInstance_ClickElementByName ("Delete Commented Report");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete This Commented Report?")' "Yes");  		Thread.Sleep (3000);  		try {  			bool deletedReportExist = Reports.CheckCommentedReportExists (qbApp' qbWindow' reportNameToDelete);  			if (!deletedReportExist) {  				Logger.logMessage ("DeleteCommentedReport -> Specified commented report " + reportNameToDelete + " was deleted successfully ");  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  			else {  				Logger.logMessage ("DeleteCommentedReport -> Failed to delete " + reportNameToDelete);  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  		}  		catch (Exception e) {  		}  	}  	Logger.logMessage ("SaveCommentedReport " + " -> Save commented report for " + reportNameToDelete + " successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("SaveCommentedReport " + " -> Save commented report for " + reportNameToDelete + " failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The following statement contains a magic number: if (reportExist) {  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' "Commented Reports");  	Thread.Sleep (int.Parse (Execution_Speed));  	qbAppWindowForSilk = _desktop.Window ("/Window");  	qbAppWindowForSilk.SetActive ();  	commentedReportListWindowForSilk = qbAppWindowForSilk.Window ("@caption='Commented Reports'");  	commentedReportListWindowForSilk.Maximize ();  	commentedReportListWindowForSilk.TextClick (reportNameToDelete' 1' ClickType.Left);  	TestStack.White.UIItems.WindowItems.Window commentedReportListWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Reports");  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportListWindow' "Commented Reports");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.DesktopInstance_ClickElementByName ("Delete Commented Report");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete This Commented Report?")' "Yes");  	Thread.Sleep (3000);  	try {  		bool deletedReportExist = Reports.CheckCommentedReportExists (qbApp' qbWindow' reportNameToDelete);  		if (!deletedReportExist) {  			Logger.logMessage ("DeleteCommentedReport -> Specified commented report " + reportNameToDelete + " was deleted successfully ");  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  		else {  			Logger.logMessage ("DeleteCommentedReport -> Failed to delete " + reportNameToDelete);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  	}  	catch (Exception e) {  	}  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteCommentedReport,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The following statement contains a magic number: try {  	//Delete if a commented report exists with the same name  	bool reportExist = Reports.CheckCommentedReportExists (qbApp' qbWindow' commentedReportName);  	if (reportExist) {  		Reports.DeleteCommentedReport (qbApp' qbWindow' commentedReportName);  	}  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	//Handle custom reports separately  	if (type.ToUpper ().Equals ("CUSTOM")) {  		try {  			string[] reportAccessPoint = Regex.Split (accesspoint' "->");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  		}  		catch {  			Logger.logMessage ("Cannot open the report : ->  " + reportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  		Thread.Sleep (int.Parse (Execution_Speed));  		TestStack.White.UIItems.WindowItems.Window modifyReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Modify Report: Custom");  		//set date filters  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (modifyReportWindow);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (modifyReportWindow' fromDate);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (modifyReportWindow);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (modifyReportWindow' toDate);  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  		try {  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (modifyReportWindow' "OK");  		}  		catch {  		}  	}  	else {  		try {  			string[] reportAccessPoint = Regex.Split (accesspoint' "->");  			if (reportAccessPoint [1].Equals ("Inventory") || reportAccessPoint [1].Equals ("Banking")) {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]);  			}  			else {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  			}  		}  		catch (Exception e) {  		}  		//      Logger.logMessage("Cannot open the report : ->  " + reportName);  		//      Logger.logMessage("------------------------------------------------------------------------------");  		//    return false;  		//}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Collapsing and Expanding Transactions")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Collapsing and Expanding Transactions");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Balance Sheet by class report")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Balance Sheet by class report");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Warning")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Warning");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Run Report");  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Update Item Percent Complete")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Update Item Percent Complete");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Select Price Level")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Price Level");  				try {  					if (qbWindow.Title.Contains ("COSMETICS")) {  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (window' "Beauty");  					}  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Filter Report by Job")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Filter Report by Job");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Cancel");  				}  				catch {  				}  				try {  					if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Warning")) {  						window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Warning");  						try {  							FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  						}  						catch {  						}  					}  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  					window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  					try {  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  					if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  						window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  						try {  							FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Finish");  						}  						catch {  						}  					}  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Forecast Report")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Forecast Report");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Forecast Report")) {  					window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Forecast Report");  					try {  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Finish");  					}  					catch {  					}  				}  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Missing Checks")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Missing Checks");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Reconciliation Discrepancy Report")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Reconciliation Discrepancy Report");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  		}  		catch {  		}  		try {  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Select Previous Reconciliation Report")) {  				TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Previous Reconciliation Report");  				if (qbWindow.Title.Contains ("COSMETICS")) {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextOnElementByAutomationID (window' "4404"' "Bank Of America 1171");  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (qbWindow);  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Display");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				try {  					if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Reconciliation Report")) {  						window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Reconciliation Report");  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  				}  				catch {  				}  			}  		}  		catch {  		}  		try {  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout));  		}  		catch {  		}  		//Thread.Sleep(int.Parse(Execution_Speed));  	}  	reportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' defaultReportTitle);  	//Maximize the report  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (reportWindow' "Maximize");  	}  	catch {  	}  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout));  	}  	catch {  	}  	if ((!fromDate.Equals (null) || !fromDate.Equals ("")) || (!toDate.Equals (null) || !toDate.Equals (""))) {  		if (!type.ToUpper ().Equals ("LIST") && !type.ToUpper ().Equals ("INVENTORYVALUATIONSUMMARY")) {  			//set date filters  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (reportWindow);  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (reportWindow);  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (reportWindow' fromDate);  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (reportWindow);  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (reportWindow);  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (reportWindow' toDate);  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (reportWindow);  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout));  			}  			catch {  			}  		}  	}  	//create commented report out of it  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (reportWindow' "Comment on Report");  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Commented Report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Commented Report");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Yes");  		}  	}  	catch {  	}  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultCommentedReportTitle' int.Parse (Sync_Timeout));  	}  	catch {  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' defaultCommentedReportTitle);  	// Save the commented report  	Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  	Logger.logMessage ("CreateCommentedReport : -> Successfully created Commented report for " + reportName);  	Logger.logMessage ("------------------------------------------------------------------------------");  	//check if the commented report window is created  	bool res = CheckCommentedReportExists (qbApp' qbWindow' commentedReportName);  	Assert.AreEqual (true' res' "Cannot find the created commented report");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("CreateCommentedReport : -> Failed to create Commented report for " + reportName);  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The following statement contains a magic number: if (type.ToUpper ().Equals ("CUSTOM")) {  	try {  		string[] reportAccessPoint = Regex.Split (accesspoint' "->");  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  	}  	catch {  		Logger.logMessage ("Cannot open the report : ->  " + reportName);  		Logger.logMessage ("------------------------------------------------------------------------------");  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	TestStack.White.UIItems.WindowItems.Window modifyReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Modify Report: Custom");  	//set date filters  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (modifyReportWindow);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (modifyReportWindow' fromDate);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendBCKSPACEToWindow (modifyReportWindow);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (modifyReportWindow' toDate);  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (modifyReportWindow);  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (modifyReportWindow' "OK");  	}  	catch {  	}  }  else {  	try {  		string[] reportAccessPoint = Regex.Split (accesspoint' "->");  		if (reportAccessPoint [1].Equals ("Inventory") || reportAccessPoint [1].Equals ("Banking")) {  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]);  		}  		else {  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  		}  	}  	catch (Exception e) {  	}  	//      Logger.logMessage("Cannot open the report : ->  " + reportName);  	//      Logger.logMessage("------------------------------------------------------------------------------");  	//    return false;  	//}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Collapsing and Expanding Transactions")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Collapsing and Expanding Transactions");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Balance Sheet by class report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Balance Sheet by class report");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Warning")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Warning");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Run Report");  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Update Item Percent Complete")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Update Item Percent Complete");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Select Price Level")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Price Level");  			try {  				if (qbWindow.Title.Contains ("COSMETICS")) {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendKeysToWindow (window' "Beauty");  				}  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Filter Report by Job")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Filter Report by Job");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Cancel");  			}  			catch {  			}  			try {  				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Warning")) {  					window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Warning");  					try {  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  					}  					catch {  					}  				}  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  				window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Budget Report")) {  					window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Budget Report");  					try {  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Finish");  					}  					catch {  					}  				}  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Forecast Report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Forecast Report");  			try {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Next");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  			if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Forecast Report")) {  				window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Forecast Report");  				try {  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Finish");  				}  				catch {  				}  			}  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Missing Checks")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Missing Checks");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Reconciliation Discrepancy Report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Reconciliation Discrepancy Report");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  	}  	catch {  	}  	try {  		if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Select Previous Reconciliation Report")) {  			TestStack.White.UIItems.WindowItems.Window window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Select Previous Reconciliation Report");  			if (qbWindow.Title.Contains ("COSMETICS")) {  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextOnElementByAutomationID (window' "4404"' "Bank Of America 1171");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SendTABToWindow (qbWindow);  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "Display");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			try {  				if (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.CheckWindowExists (qbWindow' "Reconciliation Report")) {  					window = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Reconciliation Report");  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (window' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  			}  			catch {  			}  		}  	}  	catch {  	}  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.WaitForChildWindow (qbWindow' defaultReportTitle' int.Parse (Sync_Timeout));  	}  	catch {  	}  	//Thread.Sleep(int.Parse(Execution_Speed));  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The following statement contains a magic number: try {  	string[] reportAccessPoint = Regex.Split (accesspoint' "->");  	if (reportAccessPoint [1].Equals ("Inventory") || reportAccessPoint [1].Equals ("Banking")) {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]);  	}  	else {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  	}  }  catch (Exception e) {  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The following statement contains a magic number: if (reportAccessPoint [1].Equals ("Inventory") || reportAccessPoint [1].Equals ("Banking")) {  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]);  }  else {  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' reportAccessPoint);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateCommentedReport,The following statement contains a magic number: FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SelectMenu (qbApp' qbWindow' "Reports"' reportAccessPoint [1]' reportAccessPoint [2]);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,InitQB,The following statement contains a magic number: SilkTest.Ntf.Agent.SetOption (Options.ApplicationReadyTimeout' 10000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,InitQB,The following statement contains a magic number: SilkTest.Ntf.Agent.SetOption (Options.SyncTimeout' 10000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,InitQB,The following statement contains a magic number: SilkTest.Ntf.Agent.SetOption (Options.ObjectResolveTimeout' 5000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,InitQB,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The following statement contains a magic number: try {  	testName = rd.testName;  	reportName = rd.reportName;  	accesspoint = rd.accesspoint;  	defaultReportTitle = rd.defaultReportTitle;  	fromDate = rd.fromDate;  	toDate = rd.toDate;  	defaultCommentedReportTitle = rd.defaultCommentedReportTitle;  	xyCoordinatesFileName = rd.xyCoordinatesFileName;  	commentedReportName = rd.commentedReportName;  	commentedReportTitle = rd.commentedReportTitle;  	newNameForCommentedReport = rd.newNameForCommentedReport;  	type = rd.type;  	status = rd.status;  	if (!(status.ToString ().Equals ("Pass")) && !status.ToString ().Equals ("DoNotRun")) {  		bool res = false;  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.CreateCommentedReport (qbApp' qbWindow' reportName' accesspoint' defaultReportTitle' fromDate' toDate' type' commentedReportName' defaultCommentedReportTitle);  		Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName' 5);  		Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.EditComment (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName);  		Assert.AreEqual (true' res' "Edit comments to " + reportName + "failed");  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.DeleteComment (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName);  		Assert.AreEqual (true' res' "Delete comments to " + reportName + "failed");  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.SaveCommentedReportDataAsPDF (qbApp' qbWindow' commentedReportName' commentedReportTitle' exportDataPath);  		Assert.AreEqual (true' res' "Save as PDF failed for " + reportName);  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.RenameCommentedReport (qbApp' qbWindow' commentedReportName' newNameForCommentedReport);  		Assert.AreEqual (true' res' "Renaming commented report " + reportName + "failed");  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		res = Reports.DeleteCommentedReport (qbApp' qbWindow' newNameForCommentedReport);  		Assert.AreEqual (true' res' "Delete commented report " + reportName + "failed");  		QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  		conn = new SqlCeConnection (connectionString);  		conn.Open ();  		if (Reports.CheckTableExists (conn' testDataTableName)) {  			cmd = conn.CreateCommand ();  			cmd.CommandText = "update " + testDataTableName + " set TestStatus ='Pass' where ReportName='" + reportName + "'";  			cmd.ExecuteNonQuery ();  			Logger.logMessage ("Test execution for report " + reportName + " completed successfully");  		}  		conn.Close ();  	}  }  catch (Exception e) {  	conn = new SqlCeConnection (connectionString);  	conn.Open ();  	if (Reports.CheckTableExists (conn' testDataTableName)) {  		cmd = conn.CreateCommand ();  		cmd.CommandText = "update " + testDataTableName + " set TestStatus ='Fail' where ReportName='" + reportName + "'";  		cmd.ExecuteNonQuery ();  		Logger.logMessage ("Test execution for report " + reportName + " failed");  	}  	Logger.logMessage (e.Message);  	conn.Close ();  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The following statement contains a magic number: if (!(status.ToString ().Equals ("Pass")) && !status.ToString ().Equals ("DoNotRun")) {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportName' accesspoint' defaultReportTitle' fromDate' toDate' type' commentedReportName' defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName' 5);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.EditComment (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName);  	Assert.AreEqual (true' res' "Edit comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.DeleteComment (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName);  	Assert.AreEqual (true' res' "Delete comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.SaveCommentedReportDataAsPDF (qbApp' qbWindow' commentedReportName' commentedReportTitle' exportDataPath);  	Assert.AreEqual (true' res' "Save as PDF failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.RenameCommentedReport (qbApp' qbWindow' commentedReportName' newNameForCommentedReport);  	Assert.AreEqual (true' res' "Renaming commented report " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.DeleteCommentedReport (qbApp' qbWindow' newNameForCommentedReport);  	Assert.AreEqual (true' res' "Delete commented report " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	conn = new SqlCeConnection (connectionString);  	conn.Open ();  	if (Reports.CheckTableExists (conn' testDataTableName)) {  		cmd = conn.CreateCommand ();  		cmd.CommandText = "update " + testDataTableName + " set TestStatus ='Pass' where ReportName='" + reportName + "'";  		cmd.ExecuteNonQuery ();  		Logger.logMessage ("Test execution for report " + reportName + " completed successfully");  	}  	conn.Close ();  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,RunCommentedReportTests,The following statement contains a magic number: res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle' xyCoordinatesFileName' 5);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add99Comments,The following statement contains a magic number: try {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	int visualCueCount = 99;  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	Logger.logMessage ("AddCommentsToAllTheVisualCues : -> Failed");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("AddCommentsToAllTheVisualCues : -> Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CreateMemorizedCommentedReport,The following statement contains a magic number: try {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	string accessPoint = "Reports->Memorized Reports->Accountant->" + memorizedReportName;  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' accessPoint' memorizedReportName' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	int visualCueCount = 2;  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	Logger.logMessage ("AddCommentsToAllTheVisualCues : -> Failed");  	Logger.logMessage ("------------------------------------------------------------------------------");  	//return true;  }  catch (Exception e) {  	Logger.logMessage ("AddCommentsToAllTheVisualCues : -> Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The following statement contains a magic number: try {  	Actions.SelectMenu (qbApp' qbWindow' "Reports"' "Memorized Reports"' "Memorized Report List");  	TestStack.White.UIItems.WindowItems.Window w = Actions.GetChildWindow (qbWindow' "Memorized Report List");  	//Maximize the window  	try {  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (w' "Maximize");  	}  	catch {  	}  	SilkTest.Ntf.Window memorizedListWindowForSilk = _desktop.Window ("@caption='Memorized Report List'");  	try {  		memorizedListWindowForSilk.TextClick (memorizedReportName' 1' ClickType.Left);  	}  	catch (Exception e) {  		return false;  	}  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (w' "Memorized Report");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.DesktopInstance_ClickElementByName ("Delete Memorized Report");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' "Delete Memorized Report")' "OK");  	Thread.Sleep (3000);  	try {  		bool deletedReportExist = Reports.CheckMemorizedReportExists (qbApp' qbWindow' memorizedReportName);  		if (!deletedReportExist) {  			Logger.logMessage ("Delete Memorized Report -> Specified memorized report " + memorizedReportName + " was deleted successfully ");  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  		else {  			Logger.logMessage ("Delete Memorized Report -> Failed to delete " + memorizedReportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  	}  	catch (Exception e) {  	}  	return true;  }  catch (Exception e) {  	Logger.logMessage ("Delete Memorized Report " + " -> " + memorizedReportName + " does not exist");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	throw new Exception (e.Message);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DeleteMemorizedReport,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: try {  	bool status = Reports.OpenSavedCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle);  	if (status) {  		try {  			if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  				//Read from XML file  				XmlDocument doc = new XmlDocument ();  				int counter = 0;  				var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  				var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  				doc.Load (path);  				XmlNode root = doc.DocumentElement;  				List<VisualCue> myVisualCueList = new List<VisualCue> ();  				foreach (XmlNode node in doc.DocumentElement) {  					//Add comments only for the first few visual cues  					if (counter >= visualCueCount)  						break;  					else {  						if (node.Name.Equals ("VisualCue")) {  							VisualCue cue = new VisualCue ();  							foreach (XmlNode childNode in node.ChildNodes) {  								switch (childNode.Name) {  								case "row":  									cue.row = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "col":  									cue.col = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "X1":  									cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "Y1":  									cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "X2":  									cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "Y2":  									cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								}  							}  							myVisualCueList.Add (cue);  							++counter;  						}  					}  				}  				TestStack.White.InputDevices.Mouse mouse = null;  				commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  				VisualCue temp = myVisualCueList.First ();  				commentedReportWindow.Focus ();  				mouse = TestStack.White.InputDevices.Mouse.Instance;  				var point = new System.Windows.Point (temp.x1' temp.y1);  				mouse.Location = point;  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  				var a = commentedReportWindow.Items;  				TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  				string id = lv.Rows [0].Cells [3].Text;  				Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  				// Edit the first comment  				List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  				bool isEdited = false;  				TestStack.White.UIItems.Button x = null;  				foreach (IUIItem button in buttons) {  					if (isEdited == false && button.Id.Contains ("Edit")) {  						x = (TestStack.White.UIItems.Button)button;  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  						Thread.Sleep (int.Parse (Execution_Speed));  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  						Thread.Sleep (int.Parse (Execution_Speed));  						isEdited = true;  						break;  					}  				}  				a = commentedReportWindow.Items;  				lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  				id = lv.Rows [0].Cells [3].Text;  				Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  				Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  			else {  				commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  				//Save the commented report and log that the report does not have any data to comment  				Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  				Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  		}  		catch {  		}  	}  	return true;  }  catch (Exception e) {  	Logger.logMessage ("AddCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName);  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: try {  	bool status = Reports.OpenSavedCommentedReport (qbApp' qbWindow' commentedReportName' commentedReportTitle);  	if (status) {  		try {  			if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  				//Read from XML file  				XmlDocument doc = new XmlDocument ();  				int counter = 0;  				var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  				var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  				doc.Load (path);  				XmlNode root = doc.DocumentElement;  				List<VisualCue> myVisualCueList = new List<VisualCue> ();  				foreach (XmlNode node in doc.DocumentElement) {  					//Add comments only for the first few visual cues  					if (counter >= visualCueCount)  						break;  					else {  						if (node.Name.Equals ("VisualCue")) {  							VisualCue cue = new VisualCue ();  							foreach (XmlNode childNode in node.ChildNodes) {  								switch (childNode.Name) {  								case "row":  									cue.row = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "col":  									cue.col = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "X1":  									cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "Y1":  									cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "X2":  									cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								case "Y2":  									cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  									break;  								}  							}  							myVisualCueList.Add (cue);  							++counter;  						}  					}  				}  				TestStack.White.InputDevices.Mouse mouse = null;  				commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  				VisualCue temp = myVisualCueList.First ();  				commentedReportWindow.Focus ();  				mouse = TestStack.White.InputDevices.Mouse.Instance;  				var point = new System.Windows.Point (temp.x1' temp.y1);  				mouse.Location = point;  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  				var a = commentedReportWindow.Items;  				TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  				string id = lv.Rows [0].Cells [3].Text;  				Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  				// Edit the first comment  				List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  				bool isEdited = false;  				TestStack.White.UIItems.Button x = null;  				foreach (IUIItem button in buttons) {  					if (isEdited == false && button.Id.Contains ("Edit")) {  						x = (TestStack.White.UIItems.Button)button;  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  						Thread.Sleep (int.Parse (Execution_Speed));  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  						FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  						Thread.Sleep (int.Parse (Execution_Speed));  						isEdited = true;  						break;  					}  				}  				a = commentedReportWindow.Items;  				lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  				id = lv.Rows [0].Cells [3].Text;  				Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  				Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  			else {  				commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  				//Save the commented report and log that the report does not have any data to comment  				Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  				Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  				Logger.logMessage ("------------------------------------------------------------------------------");  			}  		}  		catch {  		}  	}  	return true;  }  catch (Exception e) {  	Logger.logMessage ("AddCommentsToCommentedReport : -> Failed to add comments for the Commented report" + commentedReportName);  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: if (status) {  	try {  		if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  			//Read from XML file  			XmlDocument doc = new XmlDocument ();  			int counter = 0;  			var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  			var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  			doc.Load (path);  			XmlNode root = doc.DocumentElement;  			List<VisualCue> myVisualCueList = new List<VisualCue> ();  			foreach (XmlNode node in doc.DocumentElement) {  				//Add comments only for the first few visual cues  				if (counter >= visualCueCount)  					break;  				else {  					if (node.Name.Equals ("VisualCue")) {  						VisualCue cue = new VisualCue ();  						foreach (XmlNode childNode in node.ChildNodes) {  							switch (childNode.Name) {  							case "row":  								cue.row = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "col":  								cue.col = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "X1":  								cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "Y1":  								cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "X2":  								cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "Y2":  								cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							}  						}  						myVisualCueList.Add (cue);  						++counter;  					}  				}  			}  			TestStack.White.InputDevices.Mouse mouse = null;  			commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  			VisualCue temp = myVisualCueList.First ();  			commentedReportWindow.Focus ();  			mouse = TestStack.White.InputDevices.Mouse.Instance;  			var point = new System.Windows.Point (temp.x1' temp.y1);  			mouse.Location = point;  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  			var a = commentedReportWindow.Items;  			TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  			string id = lv.Rows [0].Cells [3].Text;  			Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  			// Edit the first comment  			List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  			bool isEdited = false;  			TestStack.White.UIItems.Button x = null;  			foreach (IUIItem button in buttons) {  				if (isEdited == false && button.Id.Contains ("Edit")) {  					x = (TestStack.White.UIItems.Button)button;  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  					Thread.Sleep (int.Parse (Execution_Speed));  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  					Thread.Sleep (int.Parse (Execution_Speed));  					isEdited = true;  					break;  				}  			}  			a = commentedReportWindow.Items;  			lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  			id = lv.Rows [0].Cells [3].Text;  			Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  			Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  		else {  			commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  			//Save the commented report and log that the report does not have any data to comment  			Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  			Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  	}  	catch {  	}  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: if (status) {  	try {  		if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  			//Read from XML file  			XmlDocument doc = new XmlDocument ();  			int counter = 0;  			var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  			var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  			doc.Load (path);  			XmlNode root = doc.DocumentElement;  			List<VisualCue> myVisualCueList = new List<VisualCue> ();  			foreach (XmlNode node in doc.DocumentElement) {  				//Add comments only for the first few visual cues  				if (counter >= visualCueCount)  					break;  				else {  					if (node.Name.Equals ("VisualCue")) {  						VisualCue cue = new VisualCue ();  						foreach (XmlNode childNode in node.ChildNodes) {  							switch (childNode.Name) {  							case "row":  								cue.row = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "col":  								cue.col = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "X1":  								cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "Y1":  								cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "X2":  								cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							case "Y2":  								cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  								break;  							}  						}  						myVisualCueList.Add (cue);  						++counter;  					}  				}  			}  			TestStack.White.InputDevices.Mouse mouse = null;  			commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  			VisualCue temp = myVisualCueList.First ();  			commentedReportWindow.Focus ();  			mouse = TestStack.White.InputDevices.Mouse.Instance;  			var point = new System.Windows.Point (temp.x1' temp.y1);  			mouse.Location = point;  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  			var a = commentedReportWindow.Items;  			TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  			string id = lv.Rows [0].Cells [3].Text;  			Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  			// Edit the first comment  			List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  			bool isEdited = false;  			TestStack.White.UIItems.Button x = null;  			foreach (IUIItem button in buttons) {  				if (isEdited == false && button.Id.Contains ("Edit")) {  					x = (TestStack.White.UIItems.Button)button;  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  					Thread.Sleep (int.Parse (Execution_Speed));  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  					FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  					Thread.Sleep (int.Parse (Execution_Speed));  					isEdited = true;  					break;  				}  			}  			a = commentedReportWindow.Items;  			lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  			id = lv.Rows [0].Cells [3].Text;  			Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  			Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  		else {  			commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  			//Save the commented report and log that the report does not have any data to comment  			Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  			Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  			Logger.logMessage ("------------------------------------------------------------------------------");  		}  	}  	catch {  	}  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: try {  	if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  		//Read from XML file  		XmlDocument doc = new XmlDocument ();  		int counter = 0;  		var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  		var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  		doc.Load (path);  		XmlNode root = doc.DocumentElement;  		List<VisualCue> myVisualCueList = new List<VisualCue> ();  		foreach (XmlNode node in doc.DocumentElement) {  			//Add comments only for the first few visual cues  			if (counter >= visualCueCount)  				break;  			else {  				if (node.Name.Equals ("VisualCue")) {  					VisualCue cue = new VisualCue ();  					foreach (XmlNode childNode in node.ChildNodes) {  						switch (childNode.Name) {  						case "row":  							cue.row = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "col":  							cue.col = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "X1":  							cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "Y1":  							cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "X2":  							cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "Y2":  							cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						}  					}  					myVisualCueList.Add (cue);  					++counter;  				}  			}  		}  		TestStack.White.InputDevices.Mouse mouse = null;  		commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  		VisualCue temp = myVisualCueList.First ();  		commentedReportWindow.Focus ();  		mouse = TestStack.White.InputDevices.Mouse.Instance;  		var point = new System.Windows.Point (temp.x1' temp.y1);  		mouse.Location = point;  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  		var a = commentedReportWindow.Items;  		TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  		string id = lv.Rows [0].Cells [3].Text;  		Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  		// Edit the first comment  		List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  		bool isEdited = false;  		TestStack.White.UIItems.Button x = null;  		foreach (IUIItem button in buttons) {  			if (isEdited == false && button.Id.Contains ("Edit")) {  				x = (TestStack.White.UIItems.Button)button;  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  				Thread.Sleep (int.Parse (Execution_Speed));  				isEdited = true;  				break;  			}  		}  		a = commentedReportWindow.Items;  		lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  		id = lv.Rows [0].Cells [3].Text;  		Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  		Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  		Logger.logMessage ("------------------------------------------------------------------------------");  	}  	else {  		commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  		//Save the commented report and log that the report does not have any data to comment  		Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  		Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  		Logger.logMessage ("------------------------------------------------------------------------------");  	}  }  catch {  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: try {  	if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  		//Read from XML file  		XmlDocument doc = new XmlDocument ();  		int counter = 0;  		var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  		var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  		doc.Load (path);  		XmlNode root = doc.DocumentElement;  		List<VisualCue> myVisualCueList = new List<VisualCue> ();  		foreach (XmlNode node in doc.DocumentElement) {  			//Add comments only for the first few visual cues  			if (counter >= visualCueCount)  				break;  			else {  				if (node.Name.Equals ("VisualCue")) {  					VisualCue cue = new VisualCue ();  					foreach (XmlNode childNode in node.ChildNodes) {  						switch (childNode.Name) {  						case "row":  							cue.row = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "col":  							cue.col = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "X1":  							cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "Y1":  							cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "X2":  							cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						case "Y2":  							cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  							break;  						}  					}  					myVisualCueList.Add (cue);  					++counter;  				}  			}  		}  		TestStack.White.InputDevices.Mouse mouse = null;  		commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  		VisualCue temp = myVisualCueList.First ();  		commentedReportWindow.Focus ();  		mouse = TestStack.White.InputDevices.Mouse.Instance;  		var point = new System.Windows.Point (temp.x1' temp.y1);  		mouse.Location = point;  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  		Thread.Sleep (int.Parse (Execution_Speed));  		FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  		var a = commentedReportWindow.Items;  		TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  		string id = lv.Rows [0].Cells [3].Text;  		Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  		// Edit the first comment  		List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  		bool isEdited = false;  		TestStack.White.UIItems.Button x = null;  		foreach (IUIItem button in buttons) {  			if (isEdited == false && button.Id.Contains ("Edit")) {  				x = (TestStack.White.UIItems.Button)button;  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  				Thread.Sleep (int.Parse (Execution_Speed));  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  				FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  				Thread.Sleep (int.Parse (Execution_Speed));  				isEdited = true;  				break;  			}  		}  		a = commentedReportWindow.Items;  		lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  		id = lv.Rows [0].Cells [3].Text;  		Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  		Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  		Logger.logMessage ("------------------------------------------------------------------------------");  	}  	else {  		commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  		//Save the commented report and log that the report does not have any data to comment  		Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  		Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  		Logger.logMessage ("------------------------------------------------------------------------------");  	}  }  catch {  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  	//Read from XML file  	XmlDocument doc = new XmlDocument ();  	int counter = 0;  	var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  	var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  	doc.Load (path);  	XmlNode root = doc.DocumentElement;  	List<VisualCue> myVisualCueList = new List<VisualCue> ();  	foreach (XmlNode node in doc.DocumentElement) {  		//Add comments only for the first few visual cues  		if (counter >= visualCueCount)  			break;  		else {  			if (node.Name.Equals ("VisualCue")) {  				VisualCue cue = new VisualCue ();  				foreach (XmlNode childNode in node.ChildNodes) {  					switch (childNode.Name) {  					case "row":  						cue.row = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "col":  						cue.col = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "X1":  						cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "Y1":  						cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "X2":  						cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "Y2":  						cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					}  				}  				myVisualCueList.Add (cue);  				++counter;  			}  		}  	}  	TestStack.White.InputDevices.Mouse mouse = null;  	commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  	VisualCue temp = myVisualCueList.First ();  	commentedReportWindow.Focus ();  	mouse = TestStack.White.InputDevices.Mouse.Instance;  	var point = new System.Windows.Point (temp.x1' temp.y1);  	mouse.Location = point;  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  	var a = commentedReportWindow.Items;  	TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  	string id = lv.Rows [0].Cells [3].Text;  	Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  	// Edit the first comment  	List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  	bool isEdited = false;  	TestStack.White.UIItems.Button x = null;  	foreach (IUIItem button in buttons) {  		if (isEdited == false && button.Id.Contains ("Edit")) {  			x = (TestStack.White.UIItems.Button)button;  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  			Thread.Sleep (int.Parse (Execution_Speed));  			isEdited = true;  			break;  		}  	}  	a = commentedReportWindow.Items;  	lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  	id = lv.Rows [0].Cells [3].Text;  	Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  	Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  	Logger.logMessage ("------------------------------------------------------------------------------");  }  else {  	commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  	//Save the commented report and log that the report does not have any data to comment  	Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  	Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  	Logger.logMessage ("------------------------------------------------------------------------------");  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: if (CheckWhetherVisualCueExists (xyCoordinatesFileName)) {  	//Read from XML file  	XmlDocument doc = new XmlDocument ();  	int counter = 0;  	var pathWithEnv = @"%USERPROFILE%\AppData\Local\Intuit\QuickBooks\Log\15.0\Comments\" + xyCoordinatesFileName + "_VisualCue_XandY_Positions.xml";  	var path = Environment.ExpandEnvironmentVariables (pathWithEnv).ToString ();  	doc.Load (path);  	XmlNode root = doc.DocumentElement;  	List<VisualCue> myVisualCueList = new List<VisualCue> ();  	foreach (XmlNode node in doc.DocumentElement) {  		//Add comments only for the first few visual cues  		if (counter >= visualCueCount)  			break;  		else {  			if (node.Name.Equals ("VisualCue")) {  				VisualCue cue = new VisualCue ();  				foreach (XmlNode childNode in node.ChildNodes) {  					switch (childNode.Name) {  					case "row":  						cue.row = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "col":  						cue.col = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "X1":  						cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "Y1":  						cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "X2":  						cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					case "Y2":  						cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  						break;  					}  				}  				myVisualCueList.Add (cue);  				++counter;  			}  		}  	}  	TestStack.White.InputDevices.Mouse mouse = null;  	commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  	VisualCue temp = myVisualCueList.First ();  	commentedReportWindow.Focus ();  	mouse = TestStack.White.InputDevices.Mouse.Instance;  	var point = new System.Windows.Point (temp.x1' temp.y1);  	mouse.Location = point;  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByAutomationID (commentedReportWindow' "12502");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment from WhiteAPI");  	Thread.Sleep (int.Parse (Execution_Speed));  	FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  	var a = commentedReportWindow.Items;  	TestStack.White.UIItems.ListView lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  	string id = lv.Rows [0].Cells [3].Text;  	Assert.AreEqual ("Created by Admin"' id' "Invalid user identity for the comment");  	// Edit the first comment  	List<IUIItem> buttons = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetAllButtons (commentedReportWindow.Items);  	bool isEdited = false;  	TestStack.White.UIItems.Button x = null;  	foreach (IUIItem button in buttons) {  		if (isEdited == false && button.Id.Contains ("Edit")) {  			x = (TestStack.White.UIItems.Button)button;  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickButtonByAutomationID (commentedReportWindow' button.Id);  			Thread.Sleep (int.Parse (Execution_Speed));  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.SetTextByAutomationID (commentedReportWindow' "CommentTextBox"' "Comment-Edited");  			FrameworkLibraries.ActionLibs.WhiteAPI.Actions.ClickElementByName (commentedReportWindow' "Save");  			Thread.Sleep (int.Parse (Execution_Speed));  			isEdited = true;  			break;  		}  	}  	a = commentedReportWindow.Items;  	lv = (TestStack.White.UIItems.ListView)commentedReportWindow.Get (SearchCriteria.ByControlType (System.Windows.Automation.ControlType.DataGrid));  	id = lv.Rows [0].Cells [3].Text;  	Assert.AreEqual ("Modified by Admin"' id' "Invalid user identity for the comment");  	Logger.logMessage ("CheckCommentsCreatedByModifiedByValues : " + commentedReportName);  	Logger.logMessage ("------------------------------------------------------------------------------");  }  else {  	commentedReportWindow = FrameworkLibraries.ActionLibs.WhiteAPI.Actions.GetChildWindow (qbWindow' commentedReportTitle);  	//Save the commented report and log that the report does not have any data to comment  	Reports.SaveCommentedReport (qbApp' qbWindow' commentedReportWindow' commentedReportName);  	Logger.logMessage ("CheckCommentsCreatedByModifiedByValues" + commentedReportName);  	Logger.logMessage ("------------------------------------------------------------------------------");  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following statement contains a magic number: id = lv.Rows [0].Cells [3].Text;  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInAsciiFormat,The following statement contains a magic number: try {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	int visualCueCount = 2;  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	//Print commented report into specified format  	string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss");  	PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "A"' fileName);  	Assert.AreEqual (true' File.Exists (fileName + ".txt")' "Print report to specified file format failed");  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInCSVFormat,The following statement contains a magic number: try {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	int visualCueCount = 2;  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	//Print commented report into specified format  	string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss");  	PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "C"' fileName);  	Assert.AreEqual (true' File.Exists (fileName + ".csv")' "Print report to specified file format failed");  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,PrintToSaveCommentedreportInTabDelimitedFormat,The following statement contains a magic number: try {  	bool res = false;  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	res = Reports.CreateCommentedReport (qbApp' qbWindow' reportData.reportName' reportData.accesspoint' reportData.defaultReportTitle' reportData.fromDate' reportData.toDate' "noncustom"' reportData.commentedReportName' reportData.defaultCommentedReportTitle);  	Assert.AreEqual (true' res' "Create commented report failed for " + reportName);  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	int visualCueCount = 2;  	res = Reports.AddCommentsToCommentedReport (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' reportData.xyCoordinatesFileName' visualCueCount);  	Assert.AreEqual (true' res' "Add comments to " + reportName + "failed");  	QuickBooks.ResetQBWindows (qbApp' qbWindow' false);  	//Print commented report into specified format  	string fileName = conf.get ("LogDirectory").Replace ("\\\\"' "\\") + commentedReportName + DateTime.Now.ToString ("ddMMyyyyhhmmss");  	PrintCommentedReportInSpecifiedFormat (qbApp' qbWindow' reportData.commentedReportName' reportData.commentedReportTitle' "T"' fileName);  	Assert.AreEqual (true' File.Exists (fileName + ".txt")' "Print report to specified file format failed");  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return true;  }  catch (Exception e) {  	Logger.logMessage ("CreateCommentedReportInCIndexFile : -> Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendKeysToWindow,The following statement contains a magic number: try {  	TestStack.White.InputDevices.AttachedKeyboard kb = window.Keyboard;  	foreach (char c in key) {  		kb.Enter (c.ToString ());  		Thread.Sleep (25);  	}  	Thread.Sleep (200);  	Logger.logMessage ("SendKeysToWindow " + window + "->" + key + " - Successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("SendKeysToWindow " + window + "->" + key + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendKeysToWindow,The following statement contains a magic number: try {  	TestStack.White.InputDevices.AttachedKeyboard kb = window.Keyboard;  	foreach (char c in key) {  		kb.Enter (c.ToString ());  		Thread.Sleep (25);  	}  	Thread.Sleep (200);  	Logger.logMessage ("SendKeysToWindow " + window + "->" + key + " - Successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("SendKeysToWindow " + window + "->" + key + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendKeysToWindow,The following statement contains a magic number: foreach (char c in key) {  	kb.Enter (c.ToString ());  	Thread.Sleep (25);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendKeysToWindow,The following statement contains a magic number: Thread.Sleep (25);  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendKeysToWindow,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendSHIFT_ENDToWindow,The following statement contains a magic number: try {  	TestStack.White.InputDevices.AttachedKeyboard kb = window.Keyboard;  	kb.HoldKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.SHIFT);  	kb.PressSpecialKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.END);  	kb.LeaveKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.SHIFT);  	Thread.Sleep (200);  	Logger.logMessage ("SendSHIFT_ENDToWindow " + window + " - Successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("SendSHIFT_ENDToWindow " + window + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendSHIFT_ENDToWindow,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,The following statement contains a magic number: try {  	do {  		iteration = iteration + 1;  		if (iteration > 10)  			break;  		allChildWindows = Desktop.Instance.Windows ();  		foreach (Window w in allChildWindows) {  			if (w.Name.Equals (alertWindowName) || w.Name.Contains (alertWindowName)) {  				var elements = w.Items;  				foreach (var item in elements) {  					if (item.GetType ().Name.Equals ("Label")) {  						alertText = item.Name;  					}  				}  				Logger.logMessage (alertText);  				Logger.logMessage ("------------------------------------------------------------------------------");  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (w' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					w.Close ();  					Actions.ClickElementByName (w' "No");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch (Exception) {  				}  			}  		}  	}  	while (!allChildWindows.Contains (Actions.GetAlertWindow ("Alert")));  	Logger.logMessage ("CheckForAlertAndClose - Successful");  }  catch (Exception e) {  	Logger.logMessage ("CheckForAlertAndClose - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,The following statement contains a magic number: do {  	iteration = iteration + 1;  	if (iteration > 10)  		break;  	allChildWindows = Desktop.Instance.Windows ();  	foreach (Window w in allChildWindows) {  		if (w.Name.Equals (alertWindowName) || w.Name.Contains (alertWindowName)) {  			var elements = w.Items;  			foreach (var item in elements) {  				if (item.GetType ().Name.Equals ("Label")) {  					alertText = item.Name;  				}  			}  			Logger.logMessage (alertText);  			Logger.logMessage ("------------------------------------------------------------------------------");  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (w' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				w.Close ();  				Actions.ClickElementByName (w' "No");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch (Exception) {  			}  		}  	}  }  while (!allChildWindows.Contains (Actions.GetAlertWindow ("Alert")));  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,CheckForAlertAndClose,The following statement contains a magic number: if (iteration > 10)  	break;  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendALT_KeyToWindow,The following statement contains a magic number: try {  	TestStack.White.InputDevices.AttachedKeyboard kb = window.Keyboard;  	kb.HoldKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.ALT);  	kb.Enter (key);  	kb.LeaveKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.ALT);  	Thread.Sleep (200);  	Logger.logMessage ("SendALT_KeyToWindow " + window + " - Successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("SendALT_KeyToWindow " + window + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendALT_KeyToWindow,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendCTRL_KeyToWindow,The following statement contains a magic number: try {  	TestStack.White.InputDevices.AttachedKeyboard kb = window.Keyboard;  	kb.HoldKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.CONTROL);  	kb.Enter (key);  	kb.LeaveKey (TestStack.White.WindowsAPI.KeyboardInput.SpecialKeys.CONTROL);  	Thread.Sleep (200);  	Logger.logMessage ("SendCTRL_KeyToWindow " + window + " - Successful");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("SendCTRL_KeyToWindow " + window + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,SendCTRL_KeyToWindow,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,LaunchApp,The following statement contains a magic number: try {  	List<Window> allWin = Desktop.Instance.Windows ();  	foreach (Window item in allWin) {  		if (item.Name.Contains (appName)) {  			foreach (Process p in Process.GetProcesses (".")) {  				if (p.ProcessName.Contains (appName) || p.ProcessName.Contains (appName.ToUpper ()) || p.ProcessName.Contains (appName.ToLower ())) {  					processID = p.Id;  					app = TestStack.White.Application.Attach (processID);  					app.WaitWhileBusy ();  					Actions.WaitForAppWindow (appName' int.Parse (Sync_Timeout));  					Logger.logMessage ("Existing App instance found..!!");  					return app;  				}  			}  		}  	}  	Logger.logMessage ("No existing App instance' so launching - " + exePath);  	Process proc = new Process ();  	proc.StartInfo.FileName = exePath;  	proc.Start ();  	Thread.Sleep (7500);  	foreach (Process p in Process.GetProcesses (".")) {  		if (p.ProcessName.Contains (appName) || p.ProcessName.Contains (appName.ToUpper ()) || p.ProcessName.Contains (appName.ToLower ())) {  			processID = p.Id;  		}  	}  	app = TestStack.White.Application.Attach (processID);  	app.WaitWhileBusy ();  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("Initialize " + exePath + " - Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return app;  }  catch (Exception e) {  	Logger.logMessage ("Initialize " + exePath + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.ActionLibs.WhiteAPI,Actions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\ActionLibs\WhiteAPI\Actions.cs,LaunchApp,The following statement contains a magic number: Thread.Sleep (7500);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: try {  	Logger.logMessage ("---------------------------------------------------------------------------------");  	var paymentPanel = Actions.GetPaneByName (paymentWin' "Quickbooks Payments: Process Credit Card");  	PropertyCondition editCondition = new PropertyCondition (AutomationElement.ControlTypeProperty' ControlType.Edit);  	AutomationElementCollection editElements = paymentPanel.AutomationElement.FindAll (TreeScope.Children' editCondition);  	int count = 0;  	foreach (AutomationElement item in editElements) {  		count = count + 1;  		TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  		if (count == 1)  			t.Text = ccNumber;  		if (count == 2)  			t.Text = expMonth;  		if (count == 3)  			t.Text = expYear;  		if (count == 4)  			t.Text = nameOnCard;  		if (count == 5)  			t.Text = secCode;  		if (count == 6)  			t.Text = billingAddr;  		if (count == 7)  			t.Text = zipCode;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("---------------------------------------------------------------------------------");  }  catch (Exception e) {  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: foreach (AutomationElement item in editElements) {  	count = count + 1;  	TestStack.White.UIItems.TextBox t = new TestStack.White.UIItems.TextBox (item' paymentWin.ActionListener);  	if (count == 1)  		t.Text = ccNumber;  	if (count == 2)  		t.Text = expMonth;  	if (count == 3)  		t.Text = expYear;  	if (count == 4)  		t.Text = nameOnCard;  	if (count == 5)  		t.Text = secCode;  	if (count == 6)  		t.Text = billingAddr;  	if (count == 7)  		t.Text = zipCode;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 2)  	t.Text = expMonth;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 3)  	t.Text = expYear;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 4)  	t.Text = nameOnCard;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 5)  	t.Text = secCode;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 6)  	t.Text = billingAddr;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,Payments,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\Payments.cs,SetValuesOnProcessCreditCardPaymentWindow,The following statement contains a magic number: if (count == 7)  	t.Text = zipCode;  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,The following statement contains a magic number: try {  	List<Window> allWin = Desktop.Instance.Windows ();  	foreach (Window item in allWin) {  		if (item.Name.Contains (appMainWindowName)) {  			foreach (Process p in Process.GetProcesses (".")) {  				if (p.ProcessName.Contains (appProcessName.ToUpper ()) || p.ProcessName.Contains (appProcessName.ToLower ()) || p.ProcessName.Contains (appProcessName)) {  					processID = p.Id;  					app = TestStack.White.Application.Attach (processID);  					app.WaitWhileBusy ();  					Actions.WaitForAppWindow ("QuickBooks Point of Sale"' int.Parse (Sync_Timeout));  					Logger.logMessage ("Existing POS instance found..!!");  					return app;  				}  			}  		}  	}  	Logger.logMessage ("No existing POS instance' so launching - " + exePath);  	Process proc = new Process ();  	proc.StartInfo.FileName = exePath;  	proc.Start ();  	Thread.Sleep (7500);  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.WaitForAppWindow ("QuickBooks Point of Sale"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	foreach (Process p in Process.GetProcesses (".")) {  		if (p.ProcessName.Contains (appProcessName.ToUpper ()) || p.ProcessName.Contains (appProcessName.ToLower ()) || p.ProcessName.Contains (appProcessName)) {  			processID = p.Id;  		}  	}  	app = TestStack.White.Application.Attach (processID);  	app.WaitWhileBusy ();  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("Initialize " + exePath + " - Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return app;  }  catch (Exception e) {  	Logger.logMessage ("Initialize " + exePath + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,POS,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\POS.cs,InitializeApp,The following statement contains a magic number: Thread.Sleep (7500);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,Initialize,The following statement contains a magic number: try {  	List<Window> allWin = Desktop.Instance.Windows ();  	foreach (Window item in allWin) {  		if (item.Name.Contains ("QuickBooks")) {  			foreach (Process p in Process.GetProcesses (".")) {  				if (p.ProcessName.Contains ("QBW32") || p.ProcessName.Contains ("qbw32")) {  					processID = p.Id;  					app = TestStack.White.Application.Attach (processID);  					app.WaitWhileBusy ();  					Actions.WaitForAppWindow ("QuickBooks"' int.Parse (Sync_Timeout));  					Logger.logMessage ("Existing QB instance found..!!");  					return app;  				}  			}  		}  	}  	Logger.logMessage ("No existing QB instance' so launching - " + exePath);  	Process proc = new Process ();  	proc.StartInfo.FileName = exePath;  	proc.Start ();  	Thread.Sleep (7500);  	//Alert window handler  	if (Actions.CheckDesktopWindowExists ("Alert"))  		Actions.CheckForAlertAndClose ("Alert");  	//Crash handler  	if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error"))  		Actions.QBCrashHandler ();  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.WaitForAppWindow ("QuickBooks"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	Thread.Sleep (int.Parse (Execution_Speed));  	foreach (Process p in Process.GetProcesses (".")) {  		if (p.ProcessName.Contains ("QBW32") || p.ProcessName.Contains ("qbw32")) {  			processID = p.Id;  		}  	}  	app = TestStack.White.Application.Attach (processID);  	app.WaitWhileBusy ();  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("Initialize " + exePath + " - Sucessful");  	Logger.logMessage ("------------------------------------------------------------------------------");  	return app;  }  catch (Exception e) {  	Logger.logMessage ("Initialize " + exePath + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,Initialize,The following statement contains a magic number: Thread.Sleep (7500);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The following statement contains a magic number: try {  	OSOperations.InvokeInstaller (installDir' exeName);  	try {  		Actions.WaitForWindow ("QuickBooks Installation"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	try {  		Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "I accept the terms of the license agreement");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Express (recommended)");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	var license = StringFunctions.SplitString (licenseNumber);  	var product = StringFunctions.SplitString (productNumber);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1054"' license [0]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1055"' license [1]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1056"' license [2]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1057"' license [3]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1059"' product [0]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1060"' product [1]);  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1");  	try {  		Actions.WaitForElementVisible (Actions.GetDesktopWindow ("QuickBooks Installation")' "Finish"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Finish");  	try {  		if (Actions.DesktopInstance_CheckElementExistsByAutomationID ("1"))  			Actions.DesktopInstance_ClickElementByAutomationID ("1");  	}  	catch {  	}  	Logger.logMessage ("InstallQB " + installDir + " - Successful");  }  catch (Exception e) {  	Logger.logMessage ("InstallQB " + installDir + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The following statement contains a magic number: try {  	OSOperations.InvokeInstaller (installDir' exeName);  	try {  		Actions.WaitForWindow ("QuickBooks Installation"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	try {  		Actions.WaitForElementEnabled (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "I accept the terms of the license agreement");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Express (recommended)");  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	var license = StringFunctions.SplitString (licenseNumber);  	var product = StringFunctions.SplitString (productNumber);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1054"' license [0]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1055"' license [1]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1056"' license [2]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1057"' license [3]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1059"' product [0]);  	Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1060"' product [1]);  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Next >");  	Actions.ClickElementByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1");  	try {  		Actions.WaitForElementVisible (Actions.GetDesktopWindow ("QuickBooks Installation")' "Finish"' int.Parse (Sync_Timeout));  	}  	catch {  	}  	Actions.ClickElementByName (Actions.GetDesktopWindow ("QuickBooks Installation")' "Finish");  	try {  		if (Actions.DesktopInstance_CheckElementExistsByAutomationID ("1"))  			Actions.DesktopInstance_ClickElementByAutomationID ("1");  	}  	catch {  	}  	Logger.logMessage ("InstallQB " + installDir + " - Successful");  }  catch (Exception e) {  	Logger.logMessage ("InstallQB " + installDir + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The following statement contains a magic number: Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1056"' license [2]);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,InstallQB,The following statement contains a magic number: Actions.SetTextByAutomationID (Actions.GetDesktopWindow ("QuickBooks Installation")' "1057"' license [3]);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: try {  	Thread.Sleep (int.Parse (Execution_Speed));  	Actions.SelectMenu (qbApp' qbWindow' "File"' "Open or Restore Company...");  	Thread.Sleep (int.Parse (Execution_Speed));  	if (backupcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a backup copy");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Local backup");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else if (portalcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  		Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  	}  	List<Window> modalWin = null;  	int iteration = 0;  	do {  		modalWin = qbWindow.ModalWindows ();  		iteration = iteration + 1;  		if (iteration <= 7) {  			foreach (Window item in modalWin) {  				//QB Login window handler  				if (item.Name.Contains ("QuickBooks Login")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetFocusOnWindow (item);  						Actions.SendBCKSPACEToWindow (item);  						Actions.SetTextByAutomationID (item' "15922"' UserName);  						Actions.SendTABToWindow (item);  						Actions.SendKeysToWindow (item' Password);  						Actions.ClickElementByAutomationID (item' "51");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Login"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Register quickbooks window handler  				else if (item.Name.Contains ("Register QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Remind Me Later");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Update to new version window handler - I agree  				else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks.");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Update Now");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Backup  				else if (item.Name.Contains ("QuickBooks Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup Incompatible")' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup incompatible window handler  				else if (item.Name.Contains ("Backup Incompatible")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  				}  				//Sync company file window handler  				else if (item.Name.Contains ("Sync Company File")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Sync Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Information window handler  				else if (item.Name.Contains ("QuickBooks Information")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Information"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Create backup copy window handler  				else if (item.Name.Contains ("Create Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Next");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup options window handler - file path  				else if (item.Name.Equals ("Backup Options")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetTextByAutomationID (item' "2002"' TestDataLocalDirectory + "Test");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Quickbooks use this location window handler  				else if (item.Name.Contains ("QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Save backup copy window handler  				else if (item.Name.Contains ("Save Backup Copy")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Update Company")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Update company window handler  				else if (item.Name.Contains ("Update Company")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Enter email address window handler  				else if (item.Name.Contains ("Enter your email address")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Encountered a Problem")' "Skip");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  					}  					catch (Exception) {  					}  				}  				else if (item.Name.Contains ("Encountered a Problem")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Skip");  					}  					catch (Exception) {  					}  				}  				//Warning window handler  				else if (item.Name.Contains ("Warning")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Now"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Start");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks File Doctor")' "Continue");  					}  					catch (Exception) {  					}  				}  				//QuickBooks File Doctor window handler  				else if (item.Name.Contains ("QuickBooks File Doctor")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks File Doctor"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Home window handler  				else if (item.Name.Contains ("Home")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Enter All Later");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Insights works on accural basis window handler  				else if (item.Name.Contains ("Insights works on the accrual basis only")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Alert window handler  				else {  					//Alert window handler  					if (Actions.CheckDesktopWindowExists ("Alert"))  						Actions.CheckForAlertAndClose ("Alert");  					//Crash handler  					if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  						Actions.QBCrashHandler ();  						break;  					}  				}  			}  		}  		else {  			ResetQBWindows (qbApp' qbWindow' false);  			break;  		}  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	while (modalWin.Count != 0);  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - End");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: try {  	Thread.Sleep (int.Parse (Execution_Speed));  	Actions.SelectMenu (qbApp' qbWindow' "File"' "Open or Restore Company...");  	Thread.Sleep (int.Parse (Execution_Speed));  	if (backupcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a backup copy");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Local backup");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else if (portalcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  		Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  	}  	List<Window> modalWin = null;  	int iteration = 0;  	do {  		modalWin = qbWindow.ModalWindows ();  		iteration = iteration + 1;  		if (iteration <= 7) {  			foreach (Window item in modalWin) {  				//QB Login window handler  				if (item.Name.Contains ("QuickBooks Login")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetFocusOnWindow (item);  						Actions.SendBCKSPACEToWindow (item);  						Actions.SetTextByAutomationID (item' "15922"' UserName);  						Actions.SendTABToWindow (item);  						Actions.SendKeysToWindow (item' Password);  						Actions.ClickElementByAutomationID (item' "51");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Login"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Register quickbooks window handler  				else if (item.Name.Contains ("Register QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Remind Me Later");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Update to new version window handler - I agree  				else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks.");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Update Now");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Backup  				else if (item.Name.Contains ("QuickBooks Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup Incompatible")' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup incompatible window handler  				else if (item.Name.Contains ("Backup Incompatible")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  				}  				//Sync company file window handler  				else if (item.Name.Contains ("Sync Company File")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Sync Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Information window handler  				else if (item.Name.Contains ("QuickBooks Information")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Information"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Create backup copy window handler  				else if (item.Name.Contains ("Create Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Next");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup options window handler - file path  				else if (item.Name.Equals ("Backup Options")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetTextByAutomationID (item' "2002"' TestDataLocalDirectory + "Test");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Quickbooks use this location window handler  				else if (item.Name.Contains ("QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Save backup copy window handler  				else if (item.Name.Contains ("Save Backup Copy")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Update Company")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Update company window handler  				else if (item.Name.Contains ("Update Company")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Enter email address window handler  				else if (item.Name.Contains ("Enter your email address")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Encountered a Problem")' "Skip");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  					}  					catch (Exception) {  					}  				}  				else if (item.Name.Contains ("Encountered a Problem")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Skip");  					}  					catch (Exception) {  					}  				}  				//Warning window handler  				else if (item.Name.Contains ("Warning")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Now"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Start");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks File Doctor")' "Continue");  					}  					catch (Exception) {  					}  				}  				//QuickBooks File Doctor window handler  				else if (item.Name.Contains ("QuickBooks File Doctor")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks File Doctor"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Home window handler  				else if (item.Name.Contains ("Home")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Enter All Later");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Insights works on accural basis window handler  				else if (item.Name.Contains ("Insights works on the accrual basis only")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Alert window handler  				else {  					//Alert window handler  					if (Actions.CheckDesktopWindowExists ("Alert"))  						Actions.CheckForAlertAndClose ("Alert");  					//Crash handler  					if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  						Actions.QBCrashHandler ();  						break;  					}  				}  			}  		}  		else {  			ResetQBWindows (qbApp' qbWindow' false);  			break;  		}  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	while (modalWin.Count != 0);  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - End");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: try {  	Thread.Sleep (int.Parse (Execution_Speed));  	Actions.SelectMenu (qbApp' qbWindow' "File"' "Open or Restore Company...");  	Thread.Sleep (int.Parse (Execution_Speed));  	if (backupcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a backup copy");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Local backup");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else if (portalcopy) {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  			Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		catch (Exception) {  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  			Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  			Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  		}  		catch (Exception) {  		}  	}  	else {  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  		Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  	}  	List<Window> modalWin = null;  	int iteration = 0;  	do {  		modalWin = qbWindow.ModalWindows ();  		iteration = iteration + 1;  		if (iteration <= 7) {  			foreach (Window item in modalWin) {  				//QB Login window handler  				if (item.Name.Contains ("QuickBooks Login")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetFocusOnWindow (item);  						Actions.SendBCKSPACEToWindow (item);  						Actions.SetTextByAutomationID (item' "15922"' UserName);  						Actions.SendTABToWindow (item);  						Actions.SendKeysToWindow (item' Password);  						Actions.ClickElementByAutomationID (item' "51");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Login"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Register quickbooks window handler  				else if (item.Name.Contains ("Register QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Remind Me Later");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Update to new version window handler - I agree  				else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks.");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Update Now");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Backup  				else if (item.Name.Contains ("QuickBooks Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup Incompatible")' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup incompatible window handler  				else if (item.Name.Contains ("Backup Incompatible")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  				}  				//Sync company file window handler  				else if (item.Name.Contains ("Sync Company File")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Sync Company File"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//QB Information window handler  				else if (item.Name.Contains ("QuickBooks Information")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Information"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Create backup copy window handler  				else if (item.Name.Contains ("Create Backup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Next");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Backup options window handler - file path  				else if (item.Name.Equals ("Backup Options")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.SetTextByAutomationID (item' "2002"' TestDataLocalDirectory + "Test");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Quickbooks use this location window handler  				else if (item.Name.Contains ("QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Save backup copy window handler  				else if (item.Name.Contains ("Save Backup Copy")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  						Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Update Company")' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Update company window handler  				else if (item.Name.Contains ("Update Company")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Enter email address window handler  				else if (item.Name.Contains ("Enter your email address")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Encountered a Problem")' "Skip");  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  					}  					catch (Exception) {  					}  				}  				else if (item.Name.Contains ("Encountered a Problem")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Skip");  					}  					catch (Exception) {  					}  				}  				//Warning window handler  				else if (item.Name.Contains ("Warning")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Update Now"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Start");  						Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks File Doctor")' "Continue");  					}  					catch (Exception) {  					}  				}  				//QuickBooks File Doctor window handler  				else if (item.Name.Contains ("QuickBooks File Doctor")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks File Doctor"' int.Parse (Sync_Timeout));  					}  					catch (Exception) {  					}  				}  				//Home window handler  				else if (item.Name.Contains ("Home")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch (Exception) {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Enter All Later");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Enter memorized transaction window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Insights works on accural basis window handler  				else if (item.Name.Contains ("Insights works on the accrual basis only")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Alert window handler  				else {  					//Alert window handler  					if (Actions.CheckDesktopWindowExists ("Alert"))  						Actions.CheckForAlertAndClose ("Alert");  					//Crash handler  					if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  						Actions.QBCrashHandler ();  						break;  					}  				}  			}  		}  		else {  			ResetQBWindows (qbApp' qbWindow' false);  			break;  		}  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	while (modalWin.Count != 0);  	Thread.Sleep (int.Parse (Execution_Speed));  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - End");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("OpenOrUpgradeCompanyFile " + companyFilePath + "->" + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: if (backupcopy) {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a backup copy");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Thread.Sleep (int.Parse (Execution_Speed));  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Local backup");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "Open");  		Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  		Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  }  else if (portalcopy) {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  		Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  		Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  }  else {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  	Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: if (backupcopy) {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a backup copy");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Thread.Sleep (int.Parse (Execution_Speed));  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Local backup");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Backup Copy")' "Open");  		Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  		Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  }  else if (portalcopy) {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  		Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  		Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  }  else {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  	Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: try {  	Logger.logMessage ("---------------Try-Catch Block------------------------");  	Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  	Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  }  catch (Exception) {  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: if (portalcopy) {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Restore a portable file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "File name:"' companyFilePath);  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open Portable Company File")' "Open");  		Actions.WaitForChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	catch (Exception) {  	}  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  		Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  		Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  	}  	catch (Exception) {  	}  }  else {  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Open a company file");  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open or Restore Company")' "Next");  	Actions.WaitForAnyChildWindow (qbWindow' "Open or Restore Company"' int.Parse (Sync_Timeout));  	Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "File name:"' companyFilePath);  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Open a Company")' "Open");  	Actions.WaitForAnyChildWindow (qbWindow' "Open a Company"' int.Parse (Sync_Timeout));  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: try {  	Logger.logMessage ("---------------Try-Catch Block------------------------");  	Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  	Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "Save");  	Actions.WaitForAnyChildWindow (qbWindow' "Save Company File as"' int.Parse (Sync_Timeout));  }  catch (Exception) {  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: Actions.SetTextOnElementByName (Actions.GetChildWindow (qbWindow' "Save Company File as")' "File name:"' Utils.StringFunctions.RandomString (5));  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: do {  	modalWin = qbWindow.ModalWindows ();  	iteration = iteration + 1;  	if (iteration <= 7) {  		foreach (Window item in modalWin) {  			//QB Login window handler  			if (item.Name.Contains ("QuickBooks Login")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.SetFocusOnWindow (item);  					Actions.SendBCKSPACEToWindow (item);  					Actions.SetTextByAutomationID (item' "15922"' UserName);  					Actions.SendTABToWindow (item);  					Actions.SendKeysToWindow (item' Password);  					Actions.ClickElementByAutomationID (item' "51");  					Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Login"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Register quickbooks window handler  			else if (item.Name.Contains ("Register QuickBooks")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Remind Me Later");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Update to new version window handler - I agree  			else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks.");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Update Now");  					Actions.WaitForAnyChildWindow (qbWindow' "Update Company File"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//QB Backup  			else if (item.Name.Contains ("QuickBooks Backup")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Actions.WaitForChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup")' "Yes");  					Actions.WaitForAnyChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup Incompatible")' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch (Exception) {  				}  			}  			//Backup incompatible window handler  			else if (item.Name.Contains ("Backup Incompatible")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  				}  				catch (Exception) {  				}  			}  			//Sync company file window handler  			else if (item.Name.Contains ("Sync Company File")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Continue");  					Actions.WaitForAnyChildWindow (qbWindow' "Sync Company File"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//QB Information window handler  			else if (item.Name.Contains ("QuickBooks Information")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Information"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Create backup copy window handler  			else if (item.Name.Contains ("Create Backup")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Next");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch (Exception) {  				}  			}  			//Backup options window handler - file path  			else if (item.Name.Equals ("Backup Options")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.SetTextByAutomationID (item' "2002"' TestDataLocalDirectory + "Test");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Yes");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  					Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Quickbooks use this location window handler  			else if (item.Name.Contains ("QuickBooks")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  					Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Save backup copy window handler  			else if (item.Name.Contains ("Save Backup Copy")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  					Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Update Company")' "Yes");  					Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Update company window handler  			else if (item.Name.Contains ("Update Company")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Yes");  					Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Continue");  					Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Enter email address window handler  			else if (item.Name.Contains ("Enter your email address")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Encountered a Problem")' "Skip");  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Close");  				}  				catch (Exception) {  				}  			}  			else if (item.Name.Contains ("Encountered a Problem")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Skip");  				}  				catch (Exception) {  				}  			}  			//Warning window handler  			else if (item.Name.Contains ("Warning")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Actions.WaitForAnyChildWindow (qbWindow' "Update Now"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Continue");  					Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Cancel");  					Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Start");  					Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks File Doctor")' "Continue");  				}  				catch (Exception) {  				}  			}  			//QuickBooks File Doctor window handler  			else if (item.Name.Contains ("QuickBooks File Doctor")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Continue");  					Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks File Doctor"' int.Parse (Sync_Timeout));  				}  				catch (Exception) {  				}  			}  			//Home window handler  			else if (item.Name.Contains ("Home")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Close");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch (Exception) {  				}  			}  			//Enter memorized transaction window handler  			else if (item.Name.Contains ("Enter Memorized Transactions")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Enter All Later");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  			}  			//Enter memorized transaction window handler  			else if (item.Name.Contains ("Enter Memorized Transactions")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  			}  			//Insights works on accural basis window handler  			else if (item.Name.Contains ("Insights works on the accrual basis only")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  			}  			//Alert window handler  			else {  				//Alert window handler  				if (Actions.CheckDesktopWindowExists ("Alert"))  					Actions.CheckForAlertAndClose ("Alert");  				//Crash handler  				if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  					Actions.QBCrashHandler ();  					break;  				}  			}  		}  	}  	else {  		ResetQBWindows (qbApp' qbWindow' false);  		break;  	}  	Thread.Sleep (int.Parse (Execution_Speed));  }  while (modalWin.Count != 0);  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The following statement contains a magic number: if (iteration <= 7) {  	foreach (Window item in modalWin) {  		//QB Login window handler  		if (item.Name.Contains ("QuickBooks Login")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.SetFocusOnWindow (item);  				Actions.SendBCKSPACEToWindow (item);  				Actions.SetTextByAutomationID (item' "15922"' UserName);  				Actions.SendTABToWindow (item);  				Actions.SendKeysToWindow (item' Password);  				Actions.ClickElementByAutomationID (item' "51");  				Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Login"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Register quickbooks window handler  		else if (item.Name.Contains ("Register QuickBooks")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Remind Me Later");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Update to new version window handler - I agree  		else if (item.Name.Contains ("Update Company File for New Version") || item.Name.Contains ("Update Company File to New Version")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "I understand that my company file will be updated to this new version of QuickBooks.");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Update Now");  				Actions.WaitForAnyChildWindow (qbWindow' "Update Company File"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//QB Backup  		else if (item.Name.Contains ("QuickBooks Backup")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Actions.WaitForChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup")' "Yes");  				Actions.WaitForAnyChildWindow (qbWindow' "Backup"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Backup Incompatible")' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch (Exception) {  			}  		}  		//Backup incompatible window handler  		else if (item.Name.Contains ("Backup Incompatible")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  			}  			catch (Exception) {  			}  		}  		//Sync company file window handler  		else if (item.Name.Contains ("Sync Company File")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Continue");  				Actions.WaitForAnyChildWindow (qbWindow' "Sync Company File"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//QB Information window handler  		else if (item.Name.Contains ("QuickBooks Information")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks Information"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Create backup copy window handler  		else if (item.Name.Contains ("Create Backup")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Next");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch (Exception) {  			}  		}  		//Backup options window handler - file path  		else if (item.Name.Equals ("Backup Options")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.SetTextByAutomationID (item' "2002"' TestDataLocalDirectory + "Test");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Yes");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  				Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Quickbooks use this location window handler  		else if (item.Name.Contains ("QuickBooks")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks")' "Use this Location");  				Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Save backup copy window handler  		else if (item.Name.Contains ("Save Backup Copy")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Save Backup Copy")' "Save");  				Actions.WaitForAnyChildWindow (qbWindow' "Save Backup Copy"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Update Company")' "Yes");  				Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Update company window handler  		else if (item.Name.Contains ("Update Company")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Yes");  				Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Continue");  				Actions.WaitForAnyChildWindow (qbWindow' "Update Company"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Enter email address window handler  		else if (item.Name.Contains ("Enter your email address")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "Encountered a Problem")' "Skip");  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Close");  			}  			catch (Exception) {  			}  		}  		else if (item.Name.Contains ("Encountered a Problem")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Skip");  			}  			catch (Exception) {  			}  		}  		//Warning window handler  		else if (item.Name.Contains ("Warning")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Actions.WaitForAnyChildWindow (qbWindow' "Update Now"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Continue");  				Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Cancel");  				Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Start");  				Actions.WaitForAnyChildWindow (qbWindow' "Warning"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWindow' "QuickBooks File Doctor")' "Continue");  			}  			catch (Exception) {  			}  		}  		//QuickBooks File Doctor window handler  		else if (item.Name.Contains ("QuickBooks File Doctor")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Continue");  				Actions.WaitForAnyChildWindow (qbWindow' "QuickBooks File Doctor"' int.Parse (Sync_Timeout));  			}  			catch (Exception) {  			}  		}  		//Home window handler  		else if (item.Name.Contains ("Home")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Close");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch (Exception) {  			}  		}  		//Enter memorized transaction window handler  		else if (item.Name.Contains ("Enter Memorized Transactions")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Enter All Later");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  		}  		//Enter memorized transaction window handler  		else if (item.Name.Contains ("Enter Memorized Transactions")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  		}  		//Insights works on accural basis window handler  		else if (item.Name.Contains ("Insights works on the accrual basis only")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  		}  		//Alert window handler  		else {  			//Alert window handler  			if (Actions.CheckDesktopWindowExists ("Alert"))  				Actions.CheckForAlertAndClose ("Alert");  			//Crash handler  			if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  				Actions.QBCrashHandler ();  				break;  			}  		}  	}  }  else {  	ResetQBWindows (qbApp' qbWindow' false);  	break;  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The following statement contains a magic number: try {  	do {  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			Actions.SelectMenu (qbApp' qbWin' "Window"' "Close All");  		}  		catch (Exception) {  		}  		do {  			//Alert window handler  			if (Actions.CheckDesktopWindowExists ("Alert"))  				Actions.CheckForAlertAndClose ("Alert");  			//Crash handler  			if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  				Actions.QBCrashHandler ();  				break;  			}  			if (iteration <= 10) {  				iteration = iteration + 1;  				modalWin = qbWin.ModalWindows ();  				foreach (Window item in modalWin) {  					//Alert window handler  					if (Actions.CheckDesktopWindowExists ("Alert"))  						Actions.CheckForAlertAndClose ("Alert");  					//Crash handler  					if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  						Actions.QBCrashHandler ();  						break;  					}  					//Enter memorize report window handler  					else if (item.Name.Contains ("Memorize Report")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "No");  							Thread.Sleep (int.Parse (Execution_Speed));  						}  						catch {  						}  					}  					//Handle Save commented report popup  					else if (item.Name.Contains ("Save Your Commented Report?")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "No");  							Thread.Sleep (int.Parse (Execution_Speed));  						}  						catch {  						}  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						if (Actions.CheckMenuEnabled (qbApp' qbWin' "File")) {  							menuEnabled = true;  							break;  						}  					}  					catch (Exception) {  					}  					//Register QB window handler  					if (item.Name.Contains ("Register QuickBooks")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Remind Me Later");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Admin permission needed window handler  					if (item.Name.Contains ("Administrator Permissions Needed")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Continue");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//No company window handler  					else if (item.Name.Contains ("No") && openFileOnNoCompany.Equals (true)) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							QuickBooks.OpenOrUpgradeCompanyFile (PathBuilder.GetPath ("DefaultCompanyFile.qbw")' qbApp' qbWin' false' false);  						}  						catch {  						}  					}  					//Update quickbooks window handler  					else if (item.Name.Contains ("Update QuickBooks")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Close");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Payroll update window handler  					else if (item.Name.Equals ("Payroll Update")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Cancel");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Intuit payroll services window hadler  					else if (item.Name.Contains ("Intuit Payroll Services")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Employer services window handler  					else if (item.Name.Contains ("Employer Services")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Cancel");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Insights works on the accrual basis window handler  					else if (item.Name.Equals ("Insights works on the accrual basis only")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Insights works on the accrual basis window handler  					else if (item.Name.Contains ("Insights")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Enter memorized transactions window handler  					else if (item.Name.Contains ("Enter Memorized Transactions")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "Enter All Later");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Recording transaction window handler  					else if (item.Name.Contains ("Recording Transaction")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "No");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  					//Login window handler  					else if (item.Name.Equals ("QuickBooks Login")) {  						Actions.SetFocusOnWindow (item);  						Actions.SendBCKSPACEToWindow (item);  						Actions.SetTextByAutomationID (item' "15922"' UserName);  						Actions.SendTABToWindow (item);  						Actions.SendKeysToWindow (item' Password);  						Actions.ClickElementByAutomationID (item' "51");  						Actions.WaitForAnyChildWindow (qbWin' "QuickBooks Login"' int.Parse (Sync_Timeout));  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					//Error window handler  					else if (item.Name.Contains ("Error")) {  						Actions.ClickElementByName (item' "Don't Send");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					//QB Setup window handler  					else if (item.Name.Contains ("Setup")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Close");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch (Exception) {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Yes");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch (Exception) {  						}  					}  					//Warning window handler  					else if (item.Name.Contains ("Warning")) {  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch (Exception) {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Cancel");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch (Exception) {  						}  					}  					else {  						item.Focus ();  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Recording Transaction")' "No");  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "Close");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "No");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							item.Close ();  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  						try {  							Logger.logMessage ("---------------Try-Catch Block------------------------");  							Actions.ClickElementByName (item' "OK");  							Thread.Sleep (int.Parse (ResetWindow_Timeout));  						}  						catch {  						}  					}  				}  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			else {  				break;  			}  		}  		while (modalWin.Count != 0 && menuEnabled.Equals (false));  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	while (!Actions.CheckMenuEnabled (qbApp' qbWin' "File"));  	Logger.logMessage ("                 ResetQBWindows " + " - End");  	Logger.logMessage ("------------------------------------------------------------------------------");  }  catch (Exception e) {  	Logger.logMessage ("ResetQBWindows " + " - Failed");  	Logger.logMessage (e.Message);  	Logger.logMessage ("------------------------------------------------------------------------------");  	String sMessage = e.Message;  	LastException.SetLastError (sMessage);  	throw new Exception (sMessage);  }  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The following statement contains a magic number: do {  	try {  		Logger.logMessage ("---------------Try-Catch Block------------------------");  		Actions.SelectMenu (qbApp' qbWin' "Window"' "Close All");  	}  	catch (Exception) {  	}  	do {  		//Alert window handler  		if (Actions.CheckDesktopWindowExists ("Alert"))  			Actions.CheckForAlertAndClose ("Alert");  		//Crash handler  		if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  			Actions.QBCrashHandler ();  			break;  		}  		if (iteration <= 10) {  			iteration = iteration + 1;  			modalWin = qbWin.ModalWindows ();  			foreach (Window item in modalWin) {  				//Alert window handler  				if (Actions.CheckDesktopWindowExists ("Alert"))  					Actions.CheckForAlertAndClose ("Alert");  				//Crash handler  				if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  					Actions.QBCrashHandler ();  					break;  				}  				//Enter memorize report window handler  				else if (item.Name.Contains ("Memorize Report")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "No");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				//Handle Save commented report popup  				else if (item.Name.Contains ("Save Your Commented Report?")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "No");  						Thread.Sleep (int.Parse (Execution_Speed));  					}  					catch {  					}  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					if (Actions.CheckMenuEnabled (qbApp' qbWin' "File")) {  						menuEnabled = true;  						break;  					}  				}  				catch (Exception) {  				}  				//Register QB window handler  				if (item.Name.Contains ("Register QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Remind Me Later");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Admin permission needed window handler  				if (item.Name.Contains ("Administrator Permissions Needed")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Continue");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//No company window handler  				else if (item.Name.Contains ("No") && openFileOnNoCompany.Equals (true)) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						QuickBooks.OpenOrUpgradeCompanyFile (PathBuilder.GetPath ("DefaultCompanyFile.qbw")' qbApp' qbWin' false' false);  					}  					catch {  					}  				}  				//Update quickbooks window handler  				else if (item.Name.Contains ("Update QuickBooks")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Payroll update window handler  				else if (item.Name.Equals ("Payroll Update")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Intuit payroll services window hadler  				else if (item.Name.Contains ("Intuit Payroll Services")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Employer services window handler  				else if (item.Name.Contains ("Employer Services")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Insights works on the accrual basis window handler  				else if (item.Name.Equals ("Insights works on the accrual basis only")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Insights works on the accrual basis window handler  				else if (item.Name.Contains ("Insights")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Enter memorized transactions window handler  				else if (item.Name.Contains ("Enter Memorized Transactions")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "Enter All Later");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Recording transaction window handler  				else if (item.Name.Contains ("Recording Transaction")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "No");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  				//Login window handler  				else if (item.Name.Equals ("QuickBooks Login")) {  					Actions.SetFocusOnWindow (item);  					Actions.SendBCKSPACEToWindow (item);  					Actions.SetTextByAutomationID (item' "15922"' UserName);  					Actions.SendTABToWindow (item);  					Actions.SendKeysToWindow (item' Password);  					Actions.ClickElementByAutomationID (item' "51");  					Actions.WaitForAnyChildWindow (qbWin' "QuickBooks Login"' int.Parse (Sync_Timeout));  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				//Error window handler  				else if (item.Name.Contains ("Error")) {  					Actions.ClickElementByName (item' "Don't Send");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				//QB Setup window handler  				else if (item.Name.Contains ("Setup")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Yes");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch (Exception) {  					}  				}  				//Warning window handler  				else if (item.Name.Contains ("Warning")) {  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch (Exception) {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Cancel");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch (Exception) {  					}  				}  				else {  					item.Focus ();  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Recording Transaction")' "No");  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "Close");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "No");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						item.Close ();  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  					try {  						Logger.logMessage ("---------------Try-Catch Block------------------------");  						Actions.ClickElementByName (item' "OK");  						Thread.Sleep (int.Parse (ResetWindow_Timeout));  					}  					catch {  					}  				}  			}  			Thread.Sleep (int.Parse (Execution_Speed));  		}  		else {  			break;  		}  	}  	while (modalWin.Count != 0 && menuEnabled.Equals (false));  	Thread.Sleep (int.Parse (Execution_Speed));  }  while (!Actions.CheckMenuEnabled (qbApp' qbWin' "File"));  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The following statement contains a magic number: do {  	//Alert window handler  	if (Actions.CheckDesktopWindowExists ("Alert"))  		Actions.CheckForAlertAndClose ("Alert");  	//Crash handler  	if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  		Actions.QBCrashHandler ();  		break;  	}  	if (iteration <= 10) {  		iteration = iteration + 1;  		modalWin = qbWin.ModalWindows ();  		foreach (Window item in modalWin) {  			//Alert window handler  			if (Actions.CheckDesktopWindowExists ("Alert"))  				Actions.CheckForAlertAndClose ("Alert");  			//Crash handler  			if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  				Actions.QBCrashHandler ();  				break;  			}  			//Enter memorize report window handler  			else if (item.Name.Contains ("Memorize Report")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "No");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  			}  			//Handle Save commented report popup  			else if (item.Name.Contains ("Save Your Commented Report?")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "No");  					Thread.Sleep (int.Parse (Execution_Speed));  				}  				catch {  				}  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				if (Actions.CheckMenuEnabled (qbApp' qbWin' "File")) {  					menuEnabled = true;  					break;  				}  			}  			catch (Exception) {  			}  			//Register QB window handler  			if (item.Name.Contains ("Register QuickBooks")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Remind Me Later");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Admin permission needed window handler  			if (item.Name.Contains ("Administrator Permissions Needed")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Continue");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//No company window handler  			else if (item.Name.Contains ("No") && openFileOnNoCompany.Equals (true)) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					QuickBooks.OpenOrUpgradeCompanyFile (PathBuilder.GetPath ("DefaultCompanyFile.qbw")' qbApp' qbWin' false' false);  				}  				catch {  				}  			}  			//Update quickbooks window handler  			else if (item.Name.Contains ("Update QuickBooks")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Close");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Payroll update window handler  			else if (item.Name.Equals ("Payroll Update")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Cancel");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Intuit payroll services window hadler  			else if (item.Name.Contains ("Intuit Payroll Services")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Employer services window handler  			else if (item.Name.Contains ("Employer Services")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Cancel");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Insights works on the accrual basis window handler  			else if (item.Name.Equals ("Insights works on the accrual basis only")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Insights works on the accrual basis window handler  			else if (item.Name.Contains ("Insights")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Enter memorized transactions window handler  			else if (item.Name.Contains ("Enter Memorized Transactions")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "Enter All Later");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Recording transaction window handler  			else if (item.Name.Contains ("Recording Transaction")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "No");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  			//Login window handler  			else if (item.Name.Equals ("QuickBooks Login")) {  				Actions.SetFocusOnWindow (item);  				Actions.SendBCKSPACEToWindow (item);  				Actions.SetTextByAutomationID (item' "15922"' UserName);  				Actions.SendTABToWindow (item);  				Actions.SendKeysToWindow (item' Password);  				Actions.ClickElementByAutomationID (item' "51");  				Actions.WaitForAnyChildWindow (qbWin' "QuickBooks Login"' int.Parse (Sync_Timeout));  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			//Error window handler  			else if (item.Name.Contains ("Error")) {  				Actions.ClickElementByName (item' "Don't Send");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			//QB Setup window handler  			else if (item.Name.Contains ("Setup")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Close");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Yes");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch (Exception) {  				}  			}  			//Warning window handler  			else if (item.Name.Contains ("Warning")) {  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch (Exception) {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Cancel");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch (Exception) {  				}  			}  			else {  				item.Focus ();  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Recording Transaction")' "No");  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "Close");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "No");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					item.Close ();  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  				try {  					Logger.logMessage ("---------------Try-Catch Block------------------------");  					Actions.ClickElementByName (item' "OK");  					Thread.Sleep (int.Parse (ResetWindow_Timeout));  				}  				catch {  				}  			}  		}  		Thread.Sleep (int.Parse (Execution_Speed));  	}  	else {  		break;  	}  }  while (modalWin.Count != 0 && menuEnabled.Equals (false));  
Magic Number,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,ResetQBWindows,The following statement contains a magic number: if (iteration <= 10) {  	iteration = iteration + 1;  	modalWin = qbWin.ModalWindows ();  	foreach (Window item in modalWin) {  		//Alert window handler  		if (Actions.CheckDesktopWindowExists ("Alert"))  			Actions.CheckForAlertAndClose ("Alert");  		//Crash handler  		if (Actions.CheckDesktopWindowExists ("QuickBooks - Unrecoverable Error")) {  			Actions.QBCrashHandler ();  			break;  		}  		//Enter memorize report window handler  		else if (item.Name.Contains ("Memorize Report")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "No");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  		}  		//Handle Save commented report popup  		else if (item.Name.Contains ("Save Your Commented Report?")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "No");  				Thread.Sleep (int.Parse (Execution_Speed));  			}  			catch {  			}  		}  		try {  			Logger.logMessage ("---------------Try-Catch Block------------------------");  			if (Actions.CheckMenuEnabled (qbApp' qbWin' "File")) {  				menuEnabled = true;  				break;  			}  		}  		catch (Exception) {  		}  		//Register QB window handler  		if (item.Name.Contains ("Register QuickBooks")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Remind Me Later");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Admin permission needed window handler  		if (item.Name.Contains ("Administrator Permissions Needed")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Continue");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//No company window handler  		else if (item.Name.Contains ("No") && openFileOnNoCompany.Equals (true)) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				QuickBooks.OpenOrUpgradeCompanyFile (PathBuilder.GetPath ("DefaultCompanyFile.qbw")' qbApp' qbWin' false' false);  			}  			catch {  			}  		}  		//Update quickbooks window handler  		else if (item.Name.Contains ("Update QuickBooks")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Close");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Payroll update window handler  		else if (item.Name.Equals ("Payroll Update")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Cancel");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Intuit payroll services window hadler  		else if (item.Name.Contains ("Intuit Payroll Services")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Employer services window handler  		else if (item.Name.Contains ("Employer Services")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Cancel");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Insights works on the accrual basis window handler  		else if (item.Name.Equals ("Insights works on the accrual basis only")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Insights works on the accrual basis window handler  		else if (item.Name.Contains ("Insights")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Enter memorized transactions window handler  		else if (item.Name.Contains ("Enter Memorized Transactions")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "Enter All Later");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Enter Memorized Transactions")' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Recording transaction window handler  		else if (item.Name.Contains ("Recording Transaction")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "No");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  		//Login window handler  		else if (item.Name.Equals ("QuickBooks Login")) {  			Actions.SetFocusOnWindow (item);  			Actions.SendBCKSPACEToWindow (item);  			Actions.SetTextByAutomationID (item' "15922"' UserName);  			Actions.SendTABToWindow (item);  			Actions.SendKeysToWindow (item' Password);  			Actions.ClickElementByAutomationID (item' "51");  			Actions.WaitForAnyChildWindow (qbWin' "QuickBooks Login"' int.Parse (Sync_Timeout));  			Thread.Sleep (int.Parse (ResetWindow_Timeout));  		}  		//Error window handler  		else if (item.Name.Contains ("Error")) {  			Actions.ClickElementByName (item' "Don't Send");  			Thread.Sleep (int.Parse (ResetWindow_Timeout));  		}  		//QB Setup window handler  		else if (item.Name.Contains ("Setup")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Close");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Yes");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch (Exception) {  			}  		}  		//Warning window handler  		else if (item.Name.Contains ("Warning")) {  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch (Exception) {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Cancel");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch (Exception) {  			}  		}  		else {  			item.Focus ();  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (Actions.GetChildWindow (qbWin' "Recording Transaction")' "No");  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "Close");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "No");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				item.Close ();  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  			try {  				Logger.logMessage ("---------------Try-Catch Block------------------------");  				Actions.ClickElementByName (item' "OK");  				Thread.Sleep (int.Parse (ResetWindow_Timeout));  			}  			catch {  			}  		}  	}  	Thread.Sleep (int.Parse (Execution_Speed));  }  else {  	break;  }  
Magic Number,FrameworkLibraries.Utils,KeyStrokeSimulator,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\KeyStrokeSimulator.cs,SendKeysAsCharacters,The following statement contains a magic number: foreach (char c in input) {  	SendKeys.SendWait (c.ToString ());  	Thread.Sleep (100);  }  
Magic Number,FrameworkLibraries.Utils,KeyStrokeSimulator,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\KeyStrokeSimulator.cs,SendKeysAsCharacters,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,FrameworkLibraries.Utils,KeyStrokeSimulator,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\KeyStrokeSimulator.cs,SendKey,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,FrameworkLibraries.Utils,KeyStrokeSimulator,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\KeyStrokeSimulator.cs,SendKeysAsNumeric,The following statement contains a magic number: foreach (char c in input) {  	SendKeys.SendWait ("{" + c + "}");  	Thread.Sleep (100);  }  
Magic Number,FrameworkLibraries.Utils,KeyStrokeSimulator,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\KeyStrokeSimulator.cs,SendKeysAsNumeric,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The following statement contains a magic number: foreach (String line in System.IO.File.ReadAllLines (file)) {  	if ((!String.IsNullOrEmpty (line)) && (!line.StartsWith (";")) && (!line.StartsWith ("#")) && (!line.StartsWith ("'")) && (line.Contains ('='))) {  		int index = line.IndexOf ('=');  		String key = line.Substring (0' index).Trim ();  		String value = line.Substring (index + 1).Trim ();  		if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {  			value = value.Substring (1' value.Length - 2);  		}  		try {  			//ignore dublicates  			list.Add (key' value);  		}  		catch {  		}  	}  }  
Magic Number,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The following statement contains a magic number: if ((!String.IsNullOrEmpty (line)) && (!line.StartsWith (";")) && (!line.StartsWith ("#")) && (!line.StartsWith ("'")) && (line.Contains ('='))) {  	int index = line.IndexOf ('=');  	String key = line.Substring (0' index).Trim ();  	String value = line.Substring (index + 1).Trim ();  	if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {  		value = value.Substring (1' value.Length - 2);  	}  	try {  		//ignore dublicates  		list.Add (key' value);  	}  	catch {  	}  }  
Magic Number,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The following statement contains a magic number: if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {  	value = value.Substring (1' value.Length - 2);  }  
Magic Number,FrameworkLibraries.Utils,Property,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\Properties.cs,loadFromFile,The following statement contains a magic number: value = value.Substring (1' value.Length - 2);  
Magic Number,FrameworkLibraries.Utils,StringFunctions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\StringFunctions.cs,RandomString,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,FrameworkLibraries.Utils,StringFunctions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\StringFunctions.cs,RandomString,The following statement contains a magic number: for (int i = 0; i < size; i++) {  	ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  	builder.Append (ch);  }  
Magic Number,FrameworkLibraries.Utils,StringFunctions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\StringFunctions.cs,RandomString,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  
Magic Number,FrameworkLibraries.Utils,StringFunctions,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\Utils\StringFunctions.cs,RandomString,The following statement contains a magic number: ch = Convert.ToChar (Convert.ToInt32 (Math.Floor (26 * random.NextDouble () + 65)));  
Duplicate Code,FrameworkLibraries.AppLibs.WhiteAPI,QuickBooks,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\WhiteAPI\QuickBooks.cs,OpenOrUpgradeCompanyFile,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 37)' (46' 65))
Missing Default,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,AddCommentsToCommentedReport,The following switch statement is missing a default case: switch (childNode.Name) {  case "row":  	cue.row = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "col":  	cue.col = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X1":  	cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y1":  	cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X2":  	cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y2":  	cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  }  
Missing Default,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,Add2000CharsCommentsToCommentedReport,The following switch statement is missing a default case: switch (childNode.Name) {  case "row":  	cue.row = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "col":  	cue.col = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X1":  	cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y1":  	cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X2":  	cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y2":  	cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  }  
Missing Default,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,DoNotAddAnyComment,The following switch statement is missing a default case: switch (childNode.Name) {  case "row":  	cue.row = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "col":  	cue.col = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X1":  	cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y1":  	cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X2":  	cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y2":  	cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  }  
Missing Default,FrameworkLibraries.AppLibs.Silk4NetAPI,Reports,C:\repos\ashokkn_QBSilk4NetWhiteFramework\FrameworkLibraries\AppLibs\Silk4NetAPI\Reports.cs,CheckCommentsCreatedByModifiedByValues,The following switch statement is missing a default case: switch (childNode.Name) {  case "row":  	cue.row = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "col":  	cue.col = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X1":  	cue.x1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y1":  	cue.y1 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "X2":  	cue.x2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  case "Y2":  	cue.y2 = Int32.Parse (childNode.InnerText.Trim ());  	break;  }  
