Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,CombineFiles,Cyclomatic complexity of the method is 8
Long Statement,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,CombineFiles,The length of the statement  "            var basePath = string.IsNullOrWhiteSpace(_config.CdnPath) ? VirtualPathUtility.ToAbsolute("~/") : _config.CdnPath.TrimEnd('/'' '\\') + VirtualPathUtility.ToAbsolute("~/"); " is 171.
Long Statement,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,GetCssLiveScript,The length of the statement  "            return _cssLiveScript ?? (_cssLiveScript = ScriptFinder.GetScript("NodeAssets.AspNet.Scripts.cssLive.js").Replace("{0}"' VirtualPathUtility.ToAbsolute("~/").TrimStart('/') + _config.Namespace)); " is 194.
Long Statement,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,CssOnFileUpdated,The length of the statement  "                var basePath = string.IsNullOrWhiteSpace(_config.CdnPath) ? VirtualPathUtility.ToAbsolute("~/") : _config.CdnPath.TrimEnd('/'' '\\') + VirtualPathUtility.ToAbsolute("~/"); " is 171.
Long Statement,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,CssOnFileUpdated,The length of the statement  "                var id = (VirtualPathUtility.ToAbsolute("~/") + FindFilePath(_cssPile' fileChangedEvent.Pile' fileChangedEvent.File' true)).Replace("/"' "-").Trim('-'); " is 152.
Long Statement,NodeAssets.AspNet.Routes,DefaultHandler,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\DefaultHandler.cs,Execute,The length of the statement  "                bool has304Header = context.Request.Headers.ContainsKey("If-None-Match") || context.Request.Headers.ContainsKey("If-Modified-Since"); " is 133.
Long Statement,NodeAssets.AspNet.Routes,DefaultHandler,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\DefaultHandler.cs,Execute,The length of the statement  "                    && (!context.Request.Headers.ContainsKey("If-Modified-Since") || (DateTime.TryParse(context.Request.Headers["If-Modified-Since"]' out modifiedSince) && modifiedSince.ToUniversalTime() >= asset.LastModified))) " is 208.
Long Statement,CSharpVitamins,QValueList,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\QValue.cs,Find,The length of the statement  "			Predicate<QValue> criteria = delegate(QValue item) { return item.Name.Equals(name' StringComparison.OrdinalIgnoreCase); }; " is 122.
Complex Conditional,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,FindJsAssets,The conditional expression  "includeGlobal && _config.IsLiveCss && _cssManager != null && _cssPile != null"  is complex.
Complex Conditional,NodeAssets.AspNet.Routes,DefaultHandler,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\DefaultHandler.cs,Execute,The conditional expression  "has304Header                      && (!context.Request.Headers.ContainsKey("If-None-Match") || context.Request.Headers["If-None-Match"] == asset.Hash)                      && (!context.Request.Headers.ContainsKey("If-Modified-Since") || (DateTime.TryParse(context.Request.Headers["If-Modified-Since"]' out modifiedSince) && modifiedSince.ToUniversalTime() >= asset.LastModified))"  is complex.
Empty Catch Block,NodeAssets,Assets,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Assets.cs,CssOnFileUpdated,The method has an empty catch block.
Magic Number,NodeAssets.AspNet.Routes,DefaultHandler,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\DefaultHandler.cs,Execute,The following statement contains a magic number: if (asset != null)              {                  response.ContentType = asset.ContentType;                    // If caching we set the cache for a year (the recommended 'forever' cache amount)                  if (_config.UseCache)                  {                      response.Headers.Add("Cache-Control"' new [] { "max-age=31556926" });                  }                    // CORS headers                  if (_config.CORSEnabled && asset.ShouldEnableCORS)                  {                      string corsValue = null;                      if (_config.CORSWildcard)                      {                          corsValue = "*";                      }                      else                      {                          if(_config.CORSDomains.Count == 1)                          {                              corsValue = _config.CORSDomains[0];                          }                          else                          {                              // If we have multiple domains' need to react to the origin value                              var origin = context.Request.Headers.Get("Origin");                              if (!string.IsNullOrEmpty(origin) && _config.CORSDomains.Contains(origin))                              {                                  corsValue = origin;                                  if (_config.CORSVaryOriginHeader)                                  {                                      response.Headers.Add("Vary"' new[] { "Origin" });                                  }                              }                          }                      }                        if (corsValue != null)                      {                          response.Headers.Add("Access-Control-Allow-Origin"' new[] { corsValue });                          response.Headers.Add("Access-Control-Allow-Methods"' new[] { "GET" }); // Only allow get for scripts etc                      }                  }                    // We can safely use ETags/LastModified                  context.Response.Headers.Add("ETag"' new[] { asset.Hash });                  context.Response.Headers.Add("Last-Modified"' new[] { asset.LastModified.ToString("R") });                    DateTime modifiedSince;                  bool has304Header = context.Request.Headers.ContainsKey("If-None-Match") || context.Request.Headers.ContainsKey("If-Modified-Since");                  if (has304Header                      && (!context.Request.Headers.ContainsKey("If-None-Match") || context.Request.Headers["If-None-Match"] == asset.Hash)                      && (!context.Request.Headers.ContainsKey("If-Modified-Since") || (DateTime.TryParse(context.Request.Headers["If-Modified-Since"]' out modifiedSince) && modifiedSince.ToUniversalTime() >= asset.LastModified)))                  {                      // Not modified response                      context.Response.StatusCode = 304;                  }                  else                  {                      // If we are compressing make sure to add the zip header                      // Only compress if they allow gzip encoding                      if (_config.UseCompress)                      {                          await AddCompressionFilter(context.Request' response' asset).ConfigureAwait(false);                      }                      else                      {                          response.ContentLength = asset.Data.Length;                          await context.Response.WriteAsync(asset.Data).ConfigureAwait(false);                      }                  }              }              else              {                  response.StatusCode = (int)HttpStatusCode.NotFound;              }
Magic Number,CSharpVitamins,QValue,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\QValue.cs,ParseInternal,The following statement contains a magic number: string[] parts = value.Split(delimiters' 3);
Magic Number,CSharpVitamins,QValue,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\QValue.cs,ParseInternal,The following statement contains a magic number: if (parts.Length == 3)  			{  				float.TryParse(parts[2]' out target._weight);  			}
Magic Number,CSharpVitamins,QValue,C:\repos\ajorkowski_NodeAssets\NodeAssets.AspNet\Routes\QValue.cs,ParseInternal,The following statement contains a magic number: if (parts.Length == 3)  			{  				float.TryParse(parts[2]' out target._weight);  			}
