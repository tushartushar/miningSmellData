Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_PreparePlayerList,Cyclomatic complexity of the method is 22
Complex Method,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleInput,Cyclomatic complexity of the method is 22
Complex Method,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleMouse,Cyclomatic complexity of the method is 23
Complex Method,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_BuildWinnerPossibilities,Cyclomatic complexity of the method is 10
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeSongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeSongs.cs,_SetAllowedOptions,The length of the statement  "            AllowedSongModes = new EGameMode[] { EGameMode.TR_GAMEMODE_NORMAL' EGameMode.TR_GAMEMODE_SHORTSONG' EGameMode.TR_GAMEMODE_MEDLEY }; " is 131.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,SetDefaults,The length of the statement  "            if (CBase.Config.GetTabs() == EOffOn.TR_CONFIG_ON && _ScreenSongOptions.Sorting.SongSorting != ESongSorting.TR_CONFIG_NONE) " is 123.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,UpdateSongList,The length of the statement  "                    GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(GameData.GameMode)).Select(song => song.ID)); " is 124.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,UpdateSongList,The length of the statement  "                    CBase.Songs.SortSongs(GameData.Sorting' EOffOn.TR_CONFIG_ON' CBase.Config.GetIgnoreArticles()' ""' EDuetOptions.All' -1); " is 121.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,UpdateSongList,The length of the statement  "                    GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(GameData.GameMode)).Select(song => song.ID)); " is 124.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,Init,The length of the statement  "                {_TextPopupReallyExit' _TextTeamChoosing' _TextFinishMessage' _TextNextPlayerT1' _TextNextPlayerT2' _TextNextPlayerNameT1' _TextNextPlayerNameT2}; " is 146.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,Init,The length of the statement  "                    _ButtonNextRound' _ButtonBack' _ButtonExit' _ButtonPopupYes' _ButtonPopupNo' _ButtonField' _ButtonJokerRandomT1' _ButtonJokerRandomT2' _ButtonJokerRetryT1' " is 155.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleInput,The length of the statement  "                            if (_Buttons[_ButtonExit].Selected && (_PartyMode.GameData.CurrentRoundNr > 1 || _Status == EStatus.FieldSelected) && _Status != EStatus.None) " is 142.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,OnShow,The length of the statement  "                    _Texts[_TextFinishMessage].Text = CBase.Language.Translate("TR_SCREENMAIN_WINNER"' PartyModeID) + " " + CBase.Language.Translate("TR_TEAM"' PartyModeID) + " " + " is 160.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_FieldSelected,The length of the statement  "            int[] songIDs = new int[_PartyMode.GameData.GameMode == EGameMode.TR_GAMEMODE_MEDLEY ? _PartyMode.GameData.NumMedleySongs : 1]; " is 127.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_FieldSelectedAgain,The length of the statement  "            _PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam1 = _PartyMode.GameData.Rounds[_OldSelectedField].SingerTeam1; " is 128.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_FieldSelectedAgain,The length of the statement  "            _PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam2 = _PartyMode.GameData.Rounds[_OldSelectedField].SingerTeam2; " is 128.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdatePlayerInformation,The length of the statement  "                CBase.Profiles.GetPlayerName(_PartyMode.GameData.ProfileIDsTeam1[_PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam1]); " is 135.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdatePlayerInformation,The length of the statement  "                CBase.Profiles.GetPlayerName(_PartyMode.GameData.ProfileIDsTeam2[_PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam2]); " is 135.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdatePlayerInformation,The length of the statement  "            _Statics[_StaticAvatarT1].Texture = CBase.Profiles.GetAvatar(_PartyMode.GameData.ProfileIDsTeam1[_PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam1]); " is 167.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdatePlayerInformation,The length of the statement  "            _Statics[_StaticAvatarT2].Texture = CBase.Profiles.GetAvatar(_PartyMode.GameData.ProfileIDsTeam2[_PartyMode.GameData.Rounds[_PartyMode.GameData.FieldNr].SingerTeam2]); " is 167.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateTeamChoosingMessage,The length of the statement  "            _Texts[_TextTeamChoosing].Text = CBase.Language.Translate("TR_TEAM"' PartyModeID) + " " + (_PartyMode.GameData.Team + 1) + "! " + " is 129.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateJokerButtons,The length of the statement  "            _Buttons[_ButtonJokerRetryT1].Selectable = _PartyMode.GameData.NumJokerRetry[0] > 0 && _PartyMode.GameData.CurrentRoundNr > 1; " is 126.
Long Statement,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateJokerButtons,The length of the statement  "            _Buttons[_ButtonJokerRetryT2].Selectable = _PartyMode.GameData.NumJokerRetry[1] > 0 && _PartyMode.GameData.CurrentRoundNr > 1; " is 126.
Complex Conditional,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleInput,The conditional expression  "_Buttons[_ButtonExit].Selected && (_PartyMode.GameData.CurrentRoundNr > 1 || _Status == EStatus.FieldSelected) && _Status != EStatus.None"  is complex.
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: _ScreenSongOptions.Selection.NumJokers = new int[] {5' 5};
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: _ScreenSongOptions.Selection.NumJokers = new int[] {5' 5};
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,CPartyModeTicTacToe,The following statement contains a magic number: GameData = new SData                  {                      NumPlayerTeam1 = 2'                      NumPlayerTeam2 = 2'                      NumFields = 9'                      ProfileIDsTeam1 = new List<Guid>()'                      ProfileIDsTeam2 = new List<Guid>()'                      PlayerTeam1 = new List<int>()'                      PlayerTeam2 = new List<int>()'                      CurrentRoundNr = 0'                      FieldNr = 0'                      Sorting = CBase.Config.GetSongSorting()'                      SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                      PlaylistID = 0'                      CategoryIndex = 0'                      GameMode = EGameMode.TR_GAMEMODE_NORMAL'                      NumMedleySongs = 5'                      Rounds = new List<CRound>()'                      Songs = new List<int>()'                      NumJokerRandom = new int[2]'                      NumJokerRetry = new int[2]'                      RefillJokers = EOffOn.TR_CONFIG_OFF                  };
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,Next,The following statement contains a magic number: switch (_Stage)              {                  case EStage.Config:                      _Stage = EStage.Songs;                      break;                  case EStage.Songs:                      _Stage = EStage.Names;                      break;                  case EStage.Names:                      _Stage = EStage.Main;                      GameData.Team = CBase.Game.GetRandom(100) < 50 ? 0 : 1;                      CBase.Songs.ResetSongSung();                      GameData.CurrentRoundNr = 1;                      _CreateRounds();                      _SetNumJokers();                      _PreparePlayerList(0);                      break;                  case EStage.Main:                      _Stage = EStage.Singing;                      _StartRound(GameData.FieldNr);                      break;                  case EStage.Singing:                      _Stage = EStage.Main;                      GameData.Team = GameData.Team == 1 ? 0 : 1;                      _UpdatePlayerList();                      if (GameData.RefillJokers == EOffOn.TR_CONFIG_ON)                          _SetNumJokers();                      break;                  default:                      throw new ArgumentException("Invalid stage: " + _Stage);              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,Next,The following statement contains a magic number: switch (_Stage)              {                  case EStage.Config:                      _Stage = EStage.Songs;                      break;                  case EStage.Songs:                      _Stage = EStage.Names;                      break;                  case EStage.Names:                      _Stage = EStage.Main;                      GameData.Team = CBase.Game.GetRandom(100) < 50 ? 0 : 1;                      CBase.Songs.ResetSongSung();                      GameData.CurrentRoundNr = 1;                      _CreateRounds();                      _SetNumJokers();                      _PreparePlayerList(0);                      break;                  case EStage.Main:                      _Stage = EStage.Singing;                      _StartRound(GameData.FieldNr);                      break;                  case EStage.Singing:                      _Stage = EStage.Main;                      GameData.Team = GameData.Team == 1 ? 0 : 1;                      _UpdatePlayerList();                      if (GameData.RefillJokers == EOffOn.TR_CONFIG_ON)                          _SetNumJokers();                      break;                  default:                      throw new ArgumentException("Invalid stage: " + _Stage);              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_PreparePlayerList,The following statement contains a magic number: switch (team)              {                  case 0:                      {                          GameData.PlayerTeam1 = new List<int>();                          GameData.PlayerTeam2 = new List<int>();                            //Prepare Player-IDs                          var ids1 = new List<int>();                          var ids2 = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0] &&                                 GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                          {                              if (ids1.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam1; i++)                                      ids1.Add(i);                              }                              if (ids2.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam2; i++)                                      ids2.Add(i);                              }                              int num;                              if (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0])                              {                                  num = CBase.Game.GetRandom(ids1.Count);                                  if (num >= ids1.Count)                                      num = ids1.Count - 1;                                  GameData.PlayerTeam1.Add(ids1[num]);                                  ids1.RemoveAt(num);                              }                              if (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                              {                                  num = CBase.Game.GetRandom(ids2.Count);                                  if (num >= ids2.Count)                                      num = ids2.Count - 1;                                  GameData.PlayerTeam2.Add(ids2[num]);                                  ids2.RemoveAt(num);                              }                          }                      }                      break;                  case 1:                      {                          //Prepare Player-IDs                          var ids = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0] && ids.Count == 0)                          {                              if (ids.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam1; i++)                                      ids.Add(i);                              }                              if (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0])                              {                                  int num = CBase.Game.GetRandom(ids.Count);                                  if (num >= ids.Count)                                      num = ids.Count - 1;                                  GameData.PlayerTeam1.Add(ids[num]);                                  ids.RemoveAt(num);                              }                          }                      }                      break;                  case 2:                      {                          //Prepare Player-IDs                          var ids = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1] && ids.Count == 0)                          {                              if (ids.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam2; i++)                                      ids.Add(i);                              }                              if (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                              {                                  int num = CBase.Game.GetRandom(ids.Count);                                  if (num >= ids.Count)                                      num = ids.Count - 1;                                  GameData.PlayerTeam2.Add(ids[num]);                                  ids.RemoveAt(num);                              }                          }                      }                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdatePlayerList,The following statement contains a magic number: _PreparePlayerList(2);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_StartRound,The following statement contains a magic number: CBase.Game.SetNumPlayer(2);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_StartRound,The following statement contains a magic number: players.Length < 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_StartRound,The following statement contains a magic number: i < 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following statement contains a magic number: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,The following statement contains a magic number: results == null || results.Length < 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,The following statement contains a magic number: SPlayer[] player = points.GetPlayer(r' 2);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,The following statement contains a magic number: i < 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,The following statement contains a magic number: i < 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_UpdateScores,The following statement contains a magic number: GameData.Rounds[GameData.FieldNr].Winner = 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeConfig.cs,OnShow,The following statement contains a magic number: Debug.Assert(CBase.Config.GetMaxNumMics() >= 2);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeConfig.cs,_FillSlides,The following statement contains a magic number: _SelectSlides[_SelectSlideNumFields].AddValue(9);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeConfig.cs,_FillSlides,The following statement contains a magic number: _SelectSlides[_SelectSlideNumFields].AddValue(16);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeConfig.cs,_FillSlides,The following statement contains a magic number: _SelectSlides[_SelectSlideNumFields].AddValue(25);
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_CreateFields,The following statement contains a magic number: i < 25
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: float fieldSizeY = ((float)CBase.Settings.GetRenderH() - 150 - numOneRow * _FieldSpace) / numOneRow;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: float fieldSizeX = ((float)CBase.Settings.GetRenderW() - 300 - numOneRow * _FieldSpace) / numOneRow;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstX = (float)CBase.Settings.GetRenderW() / 2 - (numOneRow * _FieldSize + (numOneRow - 1) * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstX = (float)CBase.Settings.GetRenderW() / 2 - (numOneRow * _FieldSize + (numOneRow - 1) * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstY = 140 + (CBase.Settings.GetRenderH() - 140) / 2 - (numOneRow * _FieldSize + numOneRow * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstY = 140 + (CBase.Settings.GetRenderH() - 140) / 2 - (numOneRow * _FieldSize + numOneRow * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstY = 140 + (CBase.Settings.GetRenderH() - 140) / 2 - (numOneRow * _FieldSize + numOneRow * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UpdateFields,The following statement contains a magic number: _FieldFirstY = 140 + (CBase.Settings.GetRenderH() - 140) / 2 - (numOneRow * _FieldSize + numOneRow * _FieldSpace) / 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_BuildWinnerPossibilities,The following statement contains a magic number: _Possibilities = new int[(numOneRow * 2) + 2'numOneRow];
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_BuildWinnerPossibilities,The following statement contains a magic number: _Possibilities = new int[(numOneRow * 2) + 2'numOneRow];
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_GetWinner,The following statement contains a magic number: check.Contains(1) && !check.Contains(2)
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_GetWinner,The following statement contains a magic number: return 2;
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_GetWinner,The following statement contains a magic number: check.Contains(2) && !check.Contains(1)
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeNames.cs,OnShow,The following statement contains a magic number: SetPartyModeData(2' _PartyMode.GameData.NumPlayerTeam1 + _PartyMode.GameData.NumPlayerTeam2'                               new int[] {_PartyMode.GameData.NumPlayerTeam1' _PartyMode.GameData.NumPlayerTeam2});
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeNames.cs,Back,The following statement contains a magic number: _TeamList.Length == 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeNames.cs,Back,The following statement contains a magic number: _NumPlayerTeams.Length == 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeNames.cs,Next,The following statement contains a magic number: _TeamList.Length == 2
Magic Number,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeNames.cs,Next,The following statement contains a magic number: _NumPlayerTeams.Length == 2
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_PreparePlayerList,The following switch statement is missing a default case: switch (team)              {                  case 0:                      {                          GameData.PlayerTeam1 = new List<int>();                          GameData.PlayerTeam2 = new List<int>();                            //Prepare Player-IDs                          var ids1 = new List<int>();                          var ids2 = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0] &&                                 GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                          {                              if (ids1.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam1; i++)                                      ids1.Add(i);                              }                              if (ids2.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam2; i++)                                      ids2.Add(i);                              }                              int num;                              if (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0])                              {                                  num = CBase.Game.GetRandom(ids1.Count);                                  if (num >= ids1.Count)                                      num = ids1.Count - 1;                                  GameData.PlayerTeam1.Add(ids1[num]);                                  ids1.RemoveAt(num);                              }                              if (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                              {                                  num = CBase.Game.GetRandom(ids2.Count);                                  if (num >= ids2.Count)                                      num = ids2.Count - 1;                                  GameData.PlayerTeam2.Add(ids2[num]);                                  ids2.RemoveAt(num);                              }                          }                      }                      break;                  case 1:                      {                          //Prepare Player-IDs                          var ids = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0] && ids.Count == 0)                          {                              if (ids.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam1; i++)                                      ids.Add(i);                              }                              if (GameData.PlayerTeam1.Count < GameData.NumFields + GameData.NumJokerRetry[0])                              {                                  int num = CBase.Game.GetRandom(ids.Count);                                  if (num >= ids.Count)                                      num = ids.Count - 1;                                  GameData.PlayerTeam1.Add(ids[num]);                                  ids.RemoveAt(num);                              }                          }                      }                      break;                  case 2:                      {                          //Prepare Player-IDs                          var ids = new List<int>();                          //Add IDs to team-list                          while (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1] && ids.Count == 0)                          {                              if (ids.Count == 0)                              {                                  for (int i = 0; i < GameData.NumPlayerTeam2; i++)                                      ids.Add(i);                              }                              if (GameData.PlayerTeam2.Count < GameData.NumFields + GameData.NumJokerRetry[1])                              {                                  int num = CBase.Game.GetRandom(ids.Count);                                  if (num >= ids.Count)                                      num = ids.Count - 1;                                  GameData.PlayerTeam2.Add(ids[num]);                                  ids.RemoveAt(num);                              }                          }                      }                      break;              }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,UpdateSongList,The following switch statement is missing a default case: switch (GameData.SongSource)              {                  case ESongSource.TR_SONGSOURCE_PLAYLIST:                      for (int i = 0; i < CBase.Playlist.GetSongCount(GameData.PlaylistID); i++)                      {                          int id = CBase.Playlist.GetSong(GameData.PlaylistID' i).SongID;                          if (CBase.Songs.GetSongByID(id).AvailableGameModes.Contains(GameData.GameMode))                              GameData.Songs.Add(id);                      }                      break;                    case ESongSource.TR_SONGSOURCE_ALLSONGS:                      ReadOnlyCollection<CSong> avSongs = CBase.Songs.GetSongs();                      GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(GameData.GameMode)).Select(song => song.ID));                      break;                    case ESongSource.TR_SONGSOURCE_CATEGORY:                      CBase.Songs.SortSongs(GameData.Sorting' EOffOn.TR_CONFIG_ON' CBase.Config.GetIgnoreArticles()' ""' EDuetOptions.All' -1);                      CBase.Songs.SetCategory(GameData.CategoryIndex);                      avSongs = CBase.Songs.GetVisibleSongs();                      GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(GameData.GameMode)).Select(song => song.ID));                        CBase.Songs.SetCategory(-1);                      break;              }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyModeTicTacToe,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyModeTicTacToe.cs,_SetNumJokers,The following switch statement is missing a default case: switch (GameData.NumFields)              {                  case 9:                      GameData.NumJokerRandom[0] = 1;                      GameData.NumJokerRandom[1] = 1;                      GameData.NumJokerRetry[0] = 0;                      GameData.NumJokerRetry[1] = 0;                      break;                    case 16:                      GameData.NumJokerRandom[0] = 2;                      GameData.NumJokerRandom[1] = 2;                      GameData.NumJokerRetry[0] = 1;                      GameData.NumJokerRetry[1] = 1;                      break;                    case 25:                      GameData.NumJokerRandom[0] = 3;                      GameData.NumJokerRandom[1] = 3;                      GameData.NumJokerRetry[0] = 2;                      GameData.NumJokerRetry[1] = 2;                      break;              }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeConfig.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          _PartyMode.Back();                          break;                        case Keys.Enter:                          _UpdateSlides();                            if (_Buttons[_ButtonBack].Selected)                              _PartyMode.Back();                            if (_Buttons[_ButtonNext].Selected)                              _PartyMode.Next();                          break;                        case Keys.Left:                          _UpdateSlides();                          break;                        case Keys.Right:                          _UpdateSlides();                          break;                  }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          if (!_ExitPopupVisible)                          {                              if (_PartyMode.GameData.CurrentRoundNr == 1 && _Status != EStatus.FieldSelected)                                  _Back();                              else if (_Status == EStatus.None)                                  _EndParty();                              else                                  _ShowPopup(true);                          }                          else                              _ShowPopup(false);                          break;                        case Keys.Enter:                          if (!_ExitPopupVisible)                          {                              if (_Buttons[_ButtonNextRound].Selected)                                  _NextRound();                              if (_Buttons[_ButtonBack].Selected && _PartyMode.GameData.CurrentRoundNr == 1 && _Status != EStatus.FieldSelected)                                  _Back();                              if (_Buttons[_ButtonExit].Selected && (_PartyMode.GameData.CurrentRoundNr > 1 || _Status == EStatus.FieldSelected) && _Status != EStatus.None)                                  _ShowPopup(true);                              else if (_Status == EStatus.None)                                  _EndParty();                              for (int i = 0; i < _PartyMode.GameData.NumFields; i++)                              {                                  switch (_Status)                                  {                                      case EStatus.FieldChoosing:                                          if (_Fields[i].Selected)                                          {                                              _PartyMode.GameData.FieldNr = i;                                              _FieldSelected();                                          }                                          break;                                        case EStatus.JokerRetry:                                          if (_Fields[i].Selected)                                          {                                              _PartyMode.GameData.FieldNr = i;                                              _FieldSelectedAgain();                                          }                                          break;                                  }                              }                              if (_Status == EStatus.FieldSelected)                              {                                  if (_Buttons[_ButtonJokerRandomT1].Selected)                                      _UseJoker(0' 0);                                  if (_Buttons[_ButtonJokerRandomT2].Selected)                                      _UseJoker(1' 0);                                  if (_Buttons[_ButtonJokerRetryT1].Selected)                                      _UseJoker(0' 1);                                  if (_Buttons[_ButtonJokerRetryT2].Selected)                                      _UseJoker(1' 1);                              }                          }                          else                          {                              if (_Buttons[_ButtonPopupYes].Selected)                                  _EndParty();                              if (_Buttons[_ButtonPopupNo].Selected)                                  _ShowPopup(false);                          }                          break;                  }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleInput,The following switch statement is missing a default case: switch (_Status)                                  {                                      case EStatus.FieldChoosing:                                          if (_Fields[i].Selected)                                          {                                              _PartyMode.GameData.FieldNr = i;                                              _FieldSelected();                                          }                                          break;                                        case EStatus.JokerRetry:                                          if (_Fields[i].Selected)                                          {                                              _PartyMode.GameData.FieldNr = i;                                              _FieldSelectedAgain();                                          }                                          break;                                  }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,HandleMouse,The following switch statement is missing a default case: switch (_Status)                          {                              case EStatus.FieldChoosing:                                  if (_Fields[i].Selected)                                  {                                      _PartyMode.GameData.FieldNr = i;                                      _FieldSelected();                                  }                                  break;                                case EStatus.JokerRetry:                                  if (_Fields[i].Selected)                                  {                                      _PartyMode.GameData.FieldNr = i;                                      _FieldSelectedAgain();                                  }                                  break;                          }
Missing Default,VocaluxeLib.PartyModes.TicTacToe,CPartyScreenTicTacToeMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeTicTacToe\CPartyScreenTicTacToeMain.cs,_UseJoker,The following switch statement is missing a default case: switch (jokerNum)              {                      //Random-Joker                  case 0:                      if (_PartyMode.GameData.NumJokerRandom[teamNr] > 0)                      {                          _PartyMode.GameData.NumJokerRandom[teamNr]--;                          _FieldSelected(true);                      }                      break;                        //Retry-Joker                  case 1:                      if (_PartyMode.GameData.NumJokerRetry[teamNr] > 0 && _PartyMode.GameData.CurrentRoundNr > 1)                      {                          _PartyMode.GameData.NumJokerRetry[teamNr]--;                          _PartyMode.GameData.Team = teamNr;                          _Status = EStatus.JokerRetry;                          _OldSelectedField = _PartyMode.GameData.FieldNr;                          _PartyMode.GameData.FieldNr = -1;                          _UpdateFieldContents();                          _Buttons[_ButtonNextRound].Visible = false;                      }                      break;              }
