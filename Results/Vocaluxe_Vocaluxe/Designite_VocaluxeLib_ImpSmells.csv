Implementation smell,Namespace,Class,File,Method,Description
Long Method,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The method has 202 lines of code.
Long Method,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleMouse,The method has 151 lines of code.
Long Method,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The method has 100 lines of code.
Long Method,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The method has 103 lines of code.
Long Method,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleInput,The method has 281 lines of code.
Long Method,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,The method has 223 lines of code.
Long Method,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetValue,The method has 105 lines of code.
Long Method,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,The method has 103 lines of code.
Long Method,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleInput,The method has 101 lines of code.
Long Method,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleInput,The method has 101 lines of code.
Long Method,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The method has 336 lines of code.
Long Method,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The method has 226 lines of code.
Complex Method,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,_DrawSlideShow,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Menu,CEqualizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CEqualizer.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,VocaluxeLib.Menu,CMenu,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenu.cs,LoadTheme,Cyclomatic complexity of the method is 18
Complex Method,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,Cyclomatic complexity of the method is 55
Complex Method,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleMouse,Cyclomatic complexity of the method is 38
Complex Method,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,HandleInput,Cyclomatic complexity of the method is 16
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleInput,Cyclomatic complexity of the method is 11
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleInputThemeEditor,Cyclomatic complexity of the method is 12
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetElement,Cyclomatic complexity of the method is 13
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_NextElement,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetNextElement,Cyclomatic complexity of the method is 15
Complex Method,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,Cyclomatic complexity of the method is 21
Complex Method,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,Cyclomatic complexity of the method is 14
Complex Method,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleInput,Cyclomatic complexity of the method is 63
Complex Method,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,Cyclomatic complexity of the method is 43
Complex Method,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,_UpdateRect,Cyclomatic complexity of the method is 21
Complex Method,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,Draw,Cyclomatic complexity of the method is 9
Complex Method,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,ResizeElement,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,Cyclomatic complexity of the method is 14
Complex Method,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressLeft,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu,CStatic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CStatic.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,Draw,Cyclomatic complexity of the method is 16
Complex Method,VocaluxeLib.Menu.SingNotes,CSingNotes,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CSingNotes.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,Cyclomatic complexity of the method is 11
Complex Method,VocaluxeLib.Xml,CTypeExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CTypeExtensions.cs,_FillInfo,Cyclomatic complexity of the method is 17
Complex Method,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetValue,Cyclomatic complexity of the method is 26
Complex Method,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,Cyclomatic complexity of the method is 23
Complex Method,VocaluxeLib.Xml,CXmlSerializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlSerializer.cs,_WriteValue,Cyclomatic complexity of the method is 18
Complex Method,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleInput,Cyclomatic complexity of the method is 24
Complex Method,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleMouse,Cyclomatic complexity of the method is 15
Complex Method,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,Draw,Cyclomatic complexity of the method is 9
Complex Method,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleInput,Cyclomatic complexity of the method is 24
Complex Method,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleMouse,Cyclomatic complexity of the method is 15
Complex Method,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_GetSeries,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_CalcMedley,Cyclomatic complexity of the method is 11
Complex Method,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_FindShortEnd,Cyclomatic complexity of the method is 8
Complex Method,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeader,Cyclomatic complexity of the method is 13
Complex Method,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteNotes,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,Cyclomatic complexity of the method is 10
Complex Method,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,Cyclomatic complexity of the method is 82
Complex Method,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,Cyclomatic complexity of the method is 39
Long Parameter List,VocaluxeLib,IDrawing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,VocaluxeLib,IDrawing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' reflectionSpace' reflectionHeight' allMonitors
Long Parameter List,VocaluxeLib,IFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,DrawText,The method has 7 parameters. Parameters: text' font' x' y' z' color' allMonitors
Long Parameter List,VocaluxeLib,IFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,DrawTextReflection,The method has 8 parameters. Parameters: text' font' x' y' z' color' reflectionSpace' reflectionHeight
Long Parameter List,VocaluxeLib,IFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,DrawText,The method has 8 parameters. Parameters: text' font' x' y' z' color' begin' end
Long Parameter List,VocaluxeLib,ISongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,SortSongs,The method has 6 parameters. Parameters: sorting' tabs' ignoreArticles' searchString' duetOptions' playlistID
Long Parameter List,VocaluxeLib,IDataBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\IBasic.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,VocaluxeLib,CBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CBasic.cs,Assign,The method has 18 parameters. Parameters: config' settings' themes' backgroundMusic' draw' graphics' fonts' language' game' profiles' record' songs' video' sound' cover' dataBase' controller' playlist
Long Parameter List,VocaluxeLib,SRectF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SRectF,The method has 5 parameters. Parameters: x' y' w' h' z
Long Parameter List,VocaluxeLib,SKeyEvent,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SKeyEvent,The method has 7 parameters. Parameters: sender' alt' shift' ctrl' pressed' unicode' key
Long Parameter List,VocaluxeLib,SMouseEvent,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SMouseEvent,The method has 12 parameters. Parameters: sender' mod' x' y' lb' ld' rb' wheel' lbh' rbh' mb' mbh
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Init,The method has 7 parameters. Parameters: logFolder' fileNameMainLog' fileNameSongInfoLog' fileNameCrashMarker' currentVersion' showReporterFunc' logLevel
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The method has 5 parameters. Parameters: messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The method has 6 parameters. Parameters: messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The method has 6 parameters. Parameters: exception' messageTemplate' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The method has 7 parameters. Parameters: exception' messageTemplate' propertyValues' show' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Verbose,The method has 5 parameters. Parameters: messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Verbose,The method has 5 parameters. Parameters: exception' messageTemplate' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Verbose,The method has 6 parameters. Parameters: exception' messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Debug,The method has 5 parameters. Parameters: messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Debug,The method has 5 parameters. Parameters: exception' messageTemplate' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Debug,The method has 6 parameters. Parameters: exception' messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Information,The method has 5 parameters. Parameters: messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Information,The method has 5 parameters. Parameters: exception' messageTemplate' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Information,The method has 6 parameters. Parameters: exception' messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Warning,The method has 5 parameters. Parameters: messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Warning,The method has 5 parameters. Parameters: exception' messageTemplate' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Warning,The method has 6 parameters. Parameters: exception' messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Error,The method has 5 parameters. Parameters: messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Error,The method has 5 parameters. Parameters: exception' messageTemplate' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Error,The method has 6 parameters. Parameters: exception' messageTemplate' propertyValues' callerMethodeName' callerFilePath' callerLineNumer
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Write,The method has 5 parameters. Parameters: level' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Write,The method has 5 parameters. Parameters: level' exception' messageTemplate' propertyValue0' propertyValue1
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Write,The method has 6 parameters. Parameters: level' exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Verbose,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Debug,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Information,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Warning,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Error,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Log.Serilog,CSilentLogger,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Serilog\CSilentLogger.cs,Fatal,The method has 5 parameters. Parameters: exception' messageTemplate' propertyValue0' propertyValue1' propertyValue2
Long Parameter List,VocaluxeLib.Menu,CMenu,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenu.cs,GetNewText,The method has 10 parameters. Parameters: x' y' z' h' mw' align' style' font' col' text
Long Parameter List,VocaluxeLib.Menu,CMenu,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenu.cs,GetNewParticleEffect,The method has 6 parameters. Parameters: maxNumber' color' area' texture' size' type
Long Parameter List,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,CParticle,The method has 13 parameters. Parameters: partyModeID' textureName' color' x' y' size' maxage' z' vx' vy' vr' vsize' type
Long Parameter List,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,CParticle,The method has 13 parameters. Parameters: partyModeID' texture' color' x' y' size' maxage' z' vx' vy' vr' vsize' type
Long Parameter List,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,CParticleEffect,The method has 7 parameters. Parameters: partyModeID' maxNumber' color' rect' skin' size' type
Long Parameter List,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,CParticleEffect,The method has 7 parameters. Parameters: partyModeID' maxNumber' color' rect' texture' size' type
Long Parameter List,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,CText,The method has 13 parameters. Parameters: x' y' z' h' mw' align' style' fontFamily' col' text' partyModeID' rheight' rspace
Long Parameter List,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,DrawRelative,The method has 5 parameters. Parameters: rx' ry' reflectionHeight' reflectionSpace' rectHeight
Long Parameter List,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The method has 6 parameters. Parameters: rect' color' noteBegin' noteMiddle' noteEnd' factor
Long Parameter List,VocaluxeLib.Xml,CXmlSerializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlSerializer.cs,_WriteValue,The method has 7 parameters. Parameters: writer' name' type' value' isAttribute' arrayItemName' nameAttribute
Long Parameter List,VocaluxeLib.Songs,CSongNote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongNote.cs,CSongNote,The method has 5 parameters. Parameters: startBeat' duration' tone' text' noteType
Long Parameter List,VocaluxeLib.Songs,CSungNote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSungNote.cs,CSungNote,The method has 5 parameters. Parameters: startBeat' duration' tone' hitNote' points
Long Statement,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,ListFiles,The length of the statement  "                files = Directory.EnumerateFiles(dir.FullName' searchPattern' recursive ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly); " is 135.
Long Statement,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,TryParse,The length of the statement  "            return Single.TryParse(value' NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign' NumberFormatInfo.InvariantInfo' out result); " is 138.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,ShowLogAssistant,The length of the statement  "            _ShowReporterFunc(crash: crash' showContinue: showContinue' vocaluxeVersionTag: _CurrentVersion' log: _MainLogStringBuilder.ToString()' lastError: _FormatMessageTemplate(messageTemplate' propertyValues)); " is 204.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Verbose,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Debug,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Information,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Warning,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Error,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Fatal,The length of the statement  "                int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Verbose,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Verbose,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Debug,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Debug,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Information,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Information,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Warning,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Warning,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Error,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CSongLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLogFunctions.cs,Error,The length of the statement  "                    int usedPropertiesCount = _PropertiesRegex.Matches(messageTemplate).Cast<Match>().Select(m => m.Value).Distinct().Count(); " is 122.
Long Statement,VocaluxeLib.Log,CBenchmark,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CBenchmark.cs,Stop,The length of the statement  "                CLog.Information("Finished {StartedOperation} successfully in {Duration:#'##0.00}ms"' CLog.Params(_OperationName' duration)); " is 125.
Long Statement,VocaluxeLib.Log.Rolling,CLogFileRoller,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Rolling\CLogFileRoller.cs,_DeleteOldLogs,The length of the statement  "            Regex r = new Regex($"{Regex.Escape(Path.GetDirectoryName(mainLogFile)??"")}\\{Path.DirectorySeparatorChar}{Regex.Escape(Path.GetFileNameWithoutExtension(mainLogFile)??"")}_([0-9]+){Path.GetExtension(mainLogFile)}"' RegexOptions.IgnoreCase); " is 241.
Long Statement,VocaluxeLib.Log.Rolling,CLogFileRoller,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Rolling\CLogFileRoller.cs,_DeleteOldLogs,The length of the statement  "            IEnumerable<string> logFiles = Directory.EnumerateFiles($"{Path.GetDirectoryName(mainLogFile)}"' $"{Path.GetFileNameWithoutExtension(mainLogFile)}*{Path.GetExtension(mainLogFile)}"); " is 182.
Long Statement,VocaluxeLib.Log.Rolling,CLogFileRoller,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\Rolling\CLogFileRoller.cs,_GenerateRollLogFileName,The length of the statement  "            return $"{ Path.GetDirectoryName(mainLogFile) }{ Path.DirectorySeparatorChar }{ Path.GetFileNameWithoutExtension(mainLogFile) }_{ number }{ Path.GetExtension(mainLogFile) }"; " is 174.
Long Statement,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,Draw,The length of the statement  "                if (CBase.Config.GetVideosToBackground() == EOffOn.TR_CONFIG_ON && CBase.BackgroundMusic.IsPlaying() && CBase.BackgroundMusic.SongHasVideo() && " is 143.
Long Statement,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,AddSlideShowTexture,The length of the statement  "                CTextureRef texture = _SlideShowTextures.Count == 0 ? CBase.Drawing.AddTexture(image) : CBase.Drawing.EnqueueTexture(image); " is 124.
Long Statement,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,_DrawSlideShow,The length of the statement  "                if (_SlideShowTimer.ElapsedMilliseconds >= (CBase.Settings.GetSlideShowFadeTime() + CBase.Settings.GetSlideShowImageTime())) " is 124.
Long Statement,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,_DrawSlideShow,The length of the statement  "                        color.A = (_SlideShowTimer.ElapsedMilliseconds - CBase.Settings.GetSlideShowImageTime()) / CBase.Settings.GetSlideShowFadeTime(); " is 129.
Long Statement,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomOrJump,The length of the statement  "            // Draw the highlighted note after all others because we want it to be above those! (transparency won't work well otherwhise) " is 125.
Long Statement,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,Init,The length of the statement  "            _ThemeButtons = new string[] {_ButtonBack' _ButtonNext' _ButtonRandom' _ButtonIncreaseTeams' _ButtonDecreaseTeams' _ButtonIncreasePlayer' _ButtonDecreasePlayer}; " is 161.
Long Statement,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The length of the statement  "                    if (_ChangeTeamNumDynamic && numPressed < _PartyMode.MaxTeams && numPressed > _SelectSlides[_SelectSlideTeams].NumValues) " is 121.
Long Statement,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleMouse,The length of the statement  "                if (_SelectSlides[_SelectSlidePlayer].Selected && _TeamList[_CurrentTeam].Count > _SelectSlides[_SelectSlidePlayer].Selection) " is 126.
Long Statement,VocaluxeLib.Menu,CMenuPartySongSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartySongSelection.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] { _SelectSlideSongMode' _SelectSlideSource' _SelectSlidePlaylist' _SelectSlideSorting' _SelectSlideCategory' _SelectSlideNumMedleySongs }; " is 172.
Long Statement,VocaluxeLib.Menu,CMenuPartySongSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartySongSelection.cs,_FillSlides,The length of the statement  "                string value = playlists[i] + " (" + CBase.Playlist.GetSongCount(i) + " " + CBase.Language.Translate("TR_SONGS"' PartyModeID) + ")"; " is 132.
Long Statement,VocaluxeLib.Menu,CMenuPartySongSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartySongSelection.cs,_FillCategorySlide,The length of the statement  "                string value = cat.Name + " (" + cat.GetNumSongsNotSung() + " " + CBase.Language.Translate("TR_SONGS"' PartyModeID) + ")"; " is 122.
Long Statement,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Init,The length of the statement  "            _PlayerSelector = new CStatic(_PartyModeID' _TextureTileSelected' new SColorF()' new SRectF(0' 0' _Theme.Tiles.W + 6' _Theme.Tiles.H + 6' Rect.Z - 0.5f)) " is 153.
Long Statement,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,_PrepareTiles,The length of the statement  "                    var rect = new SRectF(MaxRect.X + j * (_Theme.Tiles.W + _Theme.Tiles.SpaceW)' MaxRect.Y + i * (_Theme.Tiles.H + _Theme.Tiles.SpaceH)' " is 133.
Long Statement,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,_PrepareTiles,The length of the statement  "                    var tileText = new CText(rect.X + rect.W / 2' rect.Y + rect.H + _Theme.Tiles.Name.Space' rect.Z' _Theme.Tiles.Name.Height' rect.W' EAlignment.Center' " is 149.
Long Statement,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistanceDirect,The length of the statement  "                    if (!other.X.IsInRange(current.X' current.Right) && !other.Right.IsInRange(current.X' current.Right) && !current.X.IsInRange(other.X' other.Right)) " is 147.
Long Statement,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistanceDirect,The length of the statement  "                    if (!other.Y.IsInRange(current.Y' current.Bottom) && !other.Bottom.IsInRange(current.Y' current.Bottom) && !current.Y.IsInRange(other.Y' other.Bottom)) " is 151.
Long Statement,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Draw,The length of the statement  "                CBase.Drawing.DrawTexture(CBase.Themes.GetSkinTexture(_TextureName' _PartyModeID)' _Rect' new SColorF(_Color.R' _Color.G' _Color.B' _Color.A * Alpha2 * _Alpha)' allMonitors); " is 174.
Long Statement,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Draw,The length of the statement  "                CBase.Drawing.DrawTexture(_Texture' _Rect' new SColorF(_Color.R' _Color.G' _Color.B' _Color.A * Alpha2 * _Alpha)' allMonitors); " is 127.
Long Statement,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The length of the statement  "            if (_Theme.Type == EParticleType.Flare || _Theme.Type == EParticleType.PerfNoteStar || _Theme.Type == EParticleType.Twinkle) " is 124.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleInput,The length of the statement  "                                _PlaylistElementContents[_CurrentPlaylistElement + _Offset].Modes[_PlaylistElements[_CurrentPlaylistElement].SelectSlide.Selection]; " is 132.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleInput,The length of the statement  "                                _PlaylistElementContents[_CurrentPlaylistElement + _Offset].Modes[_PlaylistElements[_CurrentPlaylistElement].SelectSlide.Selection]; " is 132.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,The length of the statement  "                    if (CHelper.IsInBounds(_PlaylistElements[i].Background.Rect' mouseEvent) && mouseEvent.RB && _PlaylistElements[i].Content != -1) " is 128.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,The length of the statement  "                                    _PlaylistElementContents[_CurrentPlaylistElement + _Offset].Modes[_PlaylistElements[_CurrentPlaylistElement].SelectSlide.Selection]; " is 132.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,_StartPlaylistSongs,The length of the statement  "                    CBase.Game.AddSong(CBase.Playlist.GetSong(ActivePlaylistID' i).SongID' CBase.Playlist.GetSong(ActivePlaylistID' i).GameMode); " is 125.
Long Statement,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,_StartPlaylistSong,The length of the statement  "            CBase.Game.AddSong(CBase.Playlist.GetSong(ActivePlaylistID' selected).SongID' CBase.Playlist.GetSong(ActivePlaylistID' selected).GameMode); " is 139.
Long Statement,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The length of the statement  "                        Text = new CText(0' 0' 0' _TextH' _MaxW' EAlignment.Center' _Theme.TextStyle' _Theme.TextFont' _TextColor' "T"' _PartyModeID)' " is 126.
Long Statement,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The length of the statement  "                    _VisibleElements[i].Bounds = new SRectF(text.X - textBounds.Width / 2f' text.Y' textBounds.Width' textBounds.Height' Rect.Z); " is 125.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                        CBase.Drawing.DrawTextureReflection(_TextureBackground' Rect' color' Rect' ReflectionSpace' ReflectionHeight' AllMonitors); " is 123.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                color = new SColorF(_ColorProgressCurrent.R' _ColorProgressCurrent.G' _ColorProgressCurrent.B' _ColorProgressCurrent.A * Alpha); " is 128.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                        CBase.Drawing.DrawTextureReflection(_TextureProgressBegin' _RectProgressBegin' color' _RectProgressBegin' ReflectionSpace' ReflectionHeight' AllMonitors); " is 154.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                        CBase.Drawing.DrawTextureReflection(_TextureProgressMid' _RectProgressMid' color' _RectProgressMid' ReflectionSpace' ReflectionHeight' AllMonitors); " is 148.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                        CBase.Drawing.DrawTextureReflection(_TextureProgressEnd' _RectProgressEnd' color' _RectProgressEnd' ReflectionSpace' ReflectionHeight' AllMonitors); " is 148.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The length of the statement  "                        CBase.Drawing.DrawTextureReflection(_TextureForeground' Rect' color' Rect' ReflectionSpace' ReflectionHeight' AllMonitors); " is 123.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_CheckAnimation,The length of the statement  "                _ProgressCurrent = _ProgressLast + (_AnimTimer.ElapsedMilliseconds / _AnimDuration).Clamp(0' 1) * (_ProgressTarget - _ProgressLast); " is 132.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressLeft,The length of the statement  "                        _RectProgressBegin = new SRectF(Rect.X' Rect.Y + Rect.H - Rect.W * _TextureProgressBegin.OrigAspect' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z); " is 160.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressLeft,The length of the statement  "                        _RectProgressBegin = new SRectF(Rect.X + Rect.W - Rect.H * _TextureProgressBegin.OrigAspect' Rect.Y' Rect.H *_TextureProgressBegin.OrigAspect' Rect.H' Rect.Z); " is 159.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The length of the statement  "                    _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z); " is 155.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The length of the statement  "                    _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z); " is 155.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,The length of the statement  "                        _RectProgressEnd = new SRectF(_RectProgressMid.X + _RectProgressMid.W' Rect.Y' Rect.H * _TextureProgressBegin.OrigAspect' Rect.H' Rect.Z); " is 138.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,The length of the statement  "                        _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + Rect.W' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z); " is 126.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,The length of the statement  "                        _RectProgressEnd = new SRectF(_RectProgressMid.X - Rect.H' Rect.Y' Rect.H * _TextureProgressBegin.OrigAspect' Rect.H' Rect.Z); " is 126.
Long Statement,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,The length of the statement  "                        _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + _RectProgressMid.H' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z); " is 138.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_GetNoteRect,The length of the statement  "                Rect.Y + (CBase.Settings.GetNumNoteLines() - 1 - (note.Tone - line.BaseLine) / 2f) * _NoteLineHeight - _AddNoteHeight / 2' " is 122.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The length of the statement  "                CBase.Drawing.DrawTexture(noteMiddle' new SRectF(middleRect.X + (i * midW)' noteRect.Y' midW' noteRect.H' noteRect.Z)' color' false); " is 133.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The length of the statement  "            SRectF lastMidRect = new SRectF(middleRect.X + midCount * midW' noteRect.Y' middleRect.W - (midCount * midW)' noteRect.H' noteRect.Z); " is 134.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The length of the statement  "            CBase.Drawing.DrawTexture(noteMiddle' new SRectF(middleRect.X + (midCount * midW)' middleRect.Y' midW' middleRect.H' middleRect.Z)' color' lastMidRect' false' false); " is 166.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The length of the statement  "            CBase.Drawing.DrawTexture(noteEnd' new SRectF(noteRect.X + noteRect.W - endsW' noteRect.Y' endsW' noteRect.H' noteRect.Z)' color' false); " is 137.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddGoldenNote,The length of the statement  "            var stars = new CParticleEffect(_PartyModeID' numstars' new SColorF(Color.Yellow)' noteRect' _Theme.SkinGoldenStar' 20' EParticleType.Star); " is 140.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddFlare,The length of the statement  "            var flares = new CParticleEffect(_PartyModeID' 15' new SColorF(Color.White)' rect' _Theme.SkinGoldenStar' 20' EParticleType.Flare); " is 131.
Long Statement,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The length of the statement  "            var stars = new CParticleEffect(_PartyModeID' CBase.Game.GetRandom(2) + 1' new SColorF(Color.White)' r' _Theme.SkinPerfectNoteStart' 35' " is 136.
Long Statement,VocaluxeLib.Xml,CTypeExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CTypeExtensions.cs,_FillInfo,The length of the statement  "                Debug.Assert(info.Type == typeof(float) || (info.IsNullable && info.SubType == typeof(float))' "Only floats can be normalized"); " is 128.
Long Statement,VocaluxeLib.Xml,CTypeExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CTypeExtensions.cs,GetFieldInfos,The length of the statement  "                if (property.HasAttribute<XmlIgnoreAttribute>() || property.Name.EndsWith("Specified") || !property.CanRead || !property.CanWrite) " is 130.
Long Statement,VocaluxeLib.Xml,CXmlException,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_FindElementIndex,The length of the statement  "                XmlNode[] siblings = parent.ChildNodes.Cast<XmlNode>().Where(candidate => candidate is XmlElement && candidate.Name == element.Name).ToArray(); " is 143.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetValue,The length of the statement  "                            _ErrorHandler.HandleError(new CXmlException("Invalid list entry '" + subNode.Name + "' in %n; Expected: " + subName' node)); " is 124.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetValue,The length of the statement  "                                _ErrorHandler.HandleError(new CXmlException("Invalid dictionary entry '" + subNode.Name + "' in %n; Expected: " + subName' node)); " is 130.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetPrimitiveValue,The length of the statement  "                    _ErrorHandler.HandleError(new CXmlInvalidValueException("German number format converted to English in %n"' node' nodeVal' false)); " is 130.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetPrimitiveValue,The length of the statement  "                _ErrorHandler.HandleError(new CXmlInvalidValueException("Invalid format in %n: '%v' (" + e.Message + ")"' node' nodeVal)); " is 122.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_CreateList,The length of the statement  "            object list = type.IsArray ? Array.CreateInstance(type.GetElementType()' values.Count) : Activator.CreateInstance(type' new object[] {values.Count}); " is 149.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,The length of the statement  "                Dictionary<string' Tuple<SFieldInfo' List<object>>> embLists = new Dictionary<string' Tuple<SFieldInfo' List<object>>>(); " is 121.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,The length of the statement  "                        if (field.Name == node.Name || field.AltName == node.Name || (field.IsEmbeddedList && node.Name.StartsWith(field.Name))) " is 120.
Long Statement,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,The length of the statement  "                        if (field.Ranged != null && value != null && !field.Ranged.IsValid(field.IsNullable ? field.SubType : field.Type' value)) " is 121.
Long Statement,VocaluxeLib.Xml,CXmlSerializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlSerializer.cs,_WriteValue,The length of the statement  "                    throw new XmlException("Cannot convert value of type " + type.Name + " to string in node " + name + " (" + e.Message + ")"); " is 124.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_InitTiles,The length of the statement  "                var textRect = new SRectF(MaxRect.X + 2 * (_TileW + _SpaceW)' Rect.Y + i * (_TileH + _SpaceH)' _ListTextWidth' _TileH' Rect.Z); " is 127.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_InitTiles,The length of the statement  "                text.MaxRect = new SRectF(text.MaxRect.X' text.MaxRect.Y' MaxRect.W + MaxRect.X - text.Rect.X - 5f' text.MaxRect.H' text.MaxRect.Z); " is 132.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,OnShow,The length of the statement  "                if ((CBase.Songs.GetTabs() == EOffOn.TR_CONFIG_OFF && CBase.Songs.GetNumCategories() > 0) || CBase.Songs.GetNumCategories() == 1) " is 129.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleInput,The length of the statement  "            bool moveAllowed = !options.Selection.RandomOnly || (options.Selection.CategoryChangeAllowed && !CBase.Songs.IsInCategory()); " is 125.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,Draw,The length of the statement  "                CBase.Drawing.DrawTextureReflection(vidtex' rect' vidtex.Color' _CoverBig.Rect' _CoverBig.ReflectionSpace' _CoverBig.ReflectionHeight); " is 135.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,OnHide,The length of the statement  "            else if (CBase.Graphics.GetNextScreenType() != EScreen.Names || CBase.Config.GetBackgroundMusicStatus() == EBackgroundMusicOffOn.TR_CONFIG_OFF) " is 143.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,_ResetPreview,The length of the statement  "            //(e.g. leave a category with one song and set preview to 0 --> previewOld=previewNew=0 --> No change --> Old data shown " is 120.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,_InitTiles,The length of the statement  "                    var rect = new SRectF(Rect.X + j * (_TileW + _Theme.SongMenuTileBoard.SpaceW)' Rect.Y + i * (_TileH + _Theme.SongMenuTileBoard.SpaceH)' _TileW' _TileH' Rect.Z); " is 160.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,OnShow,The length of the statement  "                if ((CBase.Songs.GetTabs() == EOffOn.TR_CONFIG_OFF && CBase.Songs.GetNumCategories() > 0) || CBase.Songs.GetNumCategories() == 1) " is 129.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleInput,The length of the statement  "            bool moveAllowed = !options.Selection.RandomOnly || (options.Selection.CategoryChangeAllowed && !CBase.Songs.IsInCategory()); " is 125.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,Draw,The length of the statement  "                CBase.Drawing.DrawTextureReflection(vidtex' rect' vidtex.Color' _CoverBig.Rect' _CoverBig.ReflectionSpace' _CoverBig.ReflectionHeight); " is 135.
Long Statement,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,_UpdateList,The length of the statement  "                    _Tiles[i].Texture = isInCategory ? CBase.Songs.GetVisibleSong(i + offset).CoverTextureSmall : CBase.Songs.GetCategory(i + offset).CoverTextureSmall; " is 148.
Long Statement,VocaluxeLib.Profile,CProfile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Profile\CProfile.cs,SaveProfile,The length of the statement  "                FilePath = CHelper.GetUniqueFileName(Path.Combine(CBase.Settings.GetDataPath()' CBase.Settings.GetFolderProfiles())' filename + ".xml"); " is 136.
Long Statement,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_CalcMedley,The length of the statement  "                bool foundEnd = CBase.Game.GetTimeFromBeats(Medley.EndBeat' BPM) - CBase.Game.GetTimeFromBeats(Medley.StartBeat' BPM) < CBase.Settings.GetMedleyMinDuration(); " is 158.
Long Statement,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_CalcMedley,The length of the statement  "                        if (CBase.Game.GetTimeFromBeats(voice.Lines[i].LastNoteBeat' BPM) - CBase.Game.GetTimeFromBeats(Medley.StartBeat' BPM) < " is 120.
Long Statement,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_FindShortEnd,The length of the statement  "            int stop = (voice.Lines[voice.Lines.Length - 1].LastNoteBeat - voice.Lines[0].FirstNote.StartBeat) / 2 + voice.Lines[0].FirstNote.StartBeat; " is 140.
Long Statement,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_FindShortEnd,The length of the statement  "                    if (stop < (voice.Lines[series[i].Start].FirstNoteBeat + ((voice.Lines[series[i].End].LastNoteBeat - voice.Lines[series[i].Start].FirstNoteBeat) / 2))) " is 151.
Long Statement,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeader,The length of the statement  "                    _WriteHeaderEntry("ENDSHORT"' (int)(CBase.Game.GetTimeFromBeats(_Song.ShortEnd.EndBeat' _Song.BPM) + _Song.Gap) * 1000); " is 120.
Long Statement,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,AddNote,The length of the statement  "            if (lineIndex + 1 < _Lines.Count && _Lines[lineIndex + 1].FirstNoteBeat < note.EndBeat) //First note in next line starts before this one ends " is 141.
Long Statement,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The length of the statement  "            _Lines[_Lines.Count - 1].EndBeat = Math.Max(_Lines[_Lines.Count - 1].LastNoteBeat' _Lines[_Lines.Count - 1].StartBeat); //Use note or (when not set) start beat " is 159.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value))); " is 139.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value))); " is 143.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value))); " is 148.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value))); " is 143.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                            CLog.CSongLog.Error("[{SongFileName}] MedleyStartBeat is bigger than MedleyEndBeat in file: {StartBeat} > {EndBeat}"' CLog.Params(_Song.FileName' _Song.Medley.StartBeat > _Song.Medley.EndBeat)); " is 194.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                        _Song.Preview.StartTime = (headerFlags & EHeaderFlags.MedleyStartBeat) != 0 ? CBase.Game.GetTimeFromBeats(_Song.Medley.StartBeat' _Song.BPM) : 0f; " is 146.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                    CLog.CSongLog.Error(e' "[{SongFileName}] Error reading txt header with Message: {ExceptionMessage}"' CLog.Params(e.Message' _Song.FileName)); " is 141.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The length of the statement  "                CBase.DataBase.GetDataBaseSongInfos(_Song.Artist' _Song.Title' out _Song.NumPlayed' out _Song.DateAdded' out _Song.DataBaseSongID); " is 131.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 133.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                        CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 125.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData)); " is 138.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone)) " is 123.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData)); " is 159.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 125.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt) " is 144.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                        CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt)); " is 172.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 128.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                                    CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt)); " is 165.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                            CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr)); " is 198.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData)); " is 164.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData)); " is 174.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                        CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData)); " is 156.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 149.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                    CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr)); " is 142.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                                            CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr)); " is 188.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                            CLog.CSongLog.Warning("[{SongFileName}] Removed {NumEmptyLines} empty lines from P .This often indicates a problem with the line breaks in the file"' CLog.Params(_Song.FileName' emptyLines)); " is 191.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                    CLog.CSongLog.Error(e' "[{SongFileName}] An unhandled exception occured: {ExceptionMessage}"' CLog.Params(_Song.FileName' e.Message)); " is 134.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                    CLog.CSongLog.Error(e' "[{SongFileName}] An unhandled exception occured: {ExceptionMessage}"' CLog.Params(_Song.FileName' e.Message)); " is 134.
Long Statement,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The length of the statement  "                    CLog.Warning("Automatic changes have been made to {FilePath} Please check result!\r\n{ChangesMade}" ' CLog.Params(filePath' changesMade)); " is 138.
Long Statement,VocaluxeLib.Songs,CAutoChanges,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ToString,The length of the statement  "                        result += "Skipped " + skippedNotesCt + " notes (0-Length: " + ZeroLengthNoteCt + "' Overlapping: " + OverlapNoteCt + "' No text: " + NoTextNoteCt + ")\r\n"; " is 157.
Long Statement,VocaluxeLib.Songs,CAutoChanges,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ToString,The length of the statement  "                        result += "Adjusted " + adjustedBreakCt + " line breaks (Overlapping previous note: " + AjustedBreakCt + "' No length: " + NoLengthBreakCt + ")\r\n"; " is 149.
Complex Conditional,VocaluxeLib.Menu,CBackground,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CBackground.cs,Draw,The conditional expression  "CBase.Config.GetVideosToBackground() == EOffOn.TR_CONFIG_ON && CBase.BackgroundMusic.IsPlaying() && CBase.BackgroundMusic.SongHasVideo() &&                      CBase.BackgroundMusic.VideoEnabled()"  is complex.
Complex Conditional,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,The conditional expression  "mouseEvent.LBH && _CurrentPlaylistElement != -1 && _PlaylistElementContents.Count > 0 && DragAndDropSongID == -1"  is complex.
Complex Conditional,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,WriteSamples,The conditional expression  "!_IsWritable || channel < 0 || channel > NumChannels || BitsPerSample != 8"  is complex.
Complex Conditional,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Write16BitSamples,The conditional expression  "!_IsWritable || channel < 0 || channel > NumChannels || BitsPerSample != 16"  is complex.
Complex Conditional,VocaluxeLib.Xml,CTypeExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CTypeExtensions.cs,GetFieldInfos,The conditional expression  "property.HasAttribute<XmlIgnoreAttribute>() || property.Name.EndsWith("Specified") || !property.CanRead || !property.CanWrite"  is complex.
Complex Conditional,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_ReadChildNodes,The conditional expression  "field.Name == node.Name || field.AltName == node.Name || (field.IsEmbeddedList && node.Name.StartsWith(field.Name))"  is complex.
Complex Conditional,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleMouse,The conditional expression  "CBase.Songs.IsInCategory() && CBase.Songs.GetNumCategories() > 0 && CBase.Songs.GetTabs() == EOffOn.TR_CONFIG_ON &&                      songOptions.Selection.CategoryChangeAllowed"  is complex.
Complex Conditional,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleMouse,The conditional expression  "CBase.Songs.IsInCategory() && CBase.Songs.GetNumCategories() > 0 && CBase.Songs.GetTabs() == EOffOn.TR_CONFIG_ON &&                      songOptions.Selection.CategoryChangeAllowed"  is complex.
Empty Catch Block,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,ListFiles,The method has an empty catch block.
Empty Catch Block,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,TryParse,The method has an empty catch block.
Magic Number,VocaluxeLib,CEncoding,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CEncoding.cs,GetEncoding,The following statement contains a magic number: switch (encodingName)              {                  case "AUTO":                      return Encoding.Default;                  case "CP1250":                      return Encoding.GetEncoding(1250);                  case "CP1252":                      return Encoding.GetEncoding(1252);                  case "LOCALE":                      return Encoding.Default;                  case "UTF8":                      return Encoding.UTF8;                  default:                      return Encoding.Default;              }
Magic Number,VocaluxeLib,CEncoding,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CEncoding.cs,GetEncoding,The following statement contains a magic number: switch (encodingName)              {                  case "AUTO":                      return Encoding.Default;                  case "CP1250":                      return Encoding.GetEncoding(1250);                  case "CP1252":                      return Encoding.GetEncoding(1252);                  case "LOCALE":                      return Encoding.Default;                  case "UTF8":                      return Encoding.UTF8;                  default:                      return Encoding.Default;              }
Magic Number,VocaluxeLib,CEncoding,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CEncoding.cs,GetEncodingName,The following statement contains a magic number: enc.CodePage == 1250
Magic Number,VocaluxeLib,CEncoding,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CEncoding.cs,GetEncodingName,The following statement contains a magic number: enc.CodePage == 1252
Magic Number,VocaluxeLib,CFading,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CFading.cs,CFading,The following statement contains a magic number: _Duration = duration * 1000f;
Magic Number,VocaluxeLib,CFont,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CFont.cs,CFont,The following statement contains a magic number: _Height = 25f;
Magic Number,VocaluxeLib,CExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Extensions.cs,Scale,The following statement contains a magic number: return new SRectF(                  rect.X - rect.W * (scale - 1f)'                  rect.Y - rect.H * (scale - 1f)'                  rect.W + 2 * rect.W * (scale - 1f)'                  rect.H + 2 * rect.H * (scale - 1f)'                  rect.Z);
Magic Number,VocaluxeLib,CExtensions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Extensions.cs,Scale,The following statement contains a magic number: return new SRectF(                  rect.X - rect.W * (scale - 1f)'                  rect.Y - rect.H * (scale - 1f)'                  rect.W + 2 * rect.W * (scale - 1f)'                  rect.H + 2 * rect.H * (scale - 1f)'                  rect.Z);
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,CombinationCount,The following statement contains a magic number: k * 2 > n
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: switch (aspect)              {                  case EAspect.Crop:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  case EAspect.Zoom1:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.33f;                          scaledHeight = bounds.W * 1.33f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.33f;                          scaledWidth = bounds.H / 1.33f * aspectRatio;                      }                      break;                  case EAspect.Zoom2:                      if (boundsAspectRatio >= aspectRatio)                      {                          scaledWidth = bounds.W * 1.17f;                          scaledHeight = bounds.W * 1.17f / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H / 1.17f;                          scaledWidth = bounds.H / 1.17f * aspectRatio;                      }                      break;                  case EAspect.LetterBox:                      if (boundsAspectRatio <= aspectRatio)                      {                          scaledWidth = bounds.W;                          scaledHeight = bounds.W / aspectRatio;                      }                      else                      {                          scaledHeight = bounds.H;                          scaledWidth = bounds.H * aspectRatio;                      }                      break;                  default:                      return bounds;              }
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: float left = (bounds.W - scaledWidth) / 2 + bounds.X;
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,FitInBounds,The following statement contains a magic number: float top = (bounds.H - scaledHeight) / 2 + bounds.Y;
Magic Number,VocaluxeLib,CHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\CHelper.cs,Sum,The following statement contains a magic number: return (n * n + n) / 2;
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SColorF,The following statement contains a magic number: R = color.R / 255f;
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SColorF,The following statement contains a magic number: G = color.G / 255f;
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SColorF,The following statement contains a magic number: B = color.B / 255f;
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,SColorF,The following statement contains a magic number: A = color.A / 255f;
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,AsColor,The following statement contains a magic number: return Color.FromArgb((int)(A * 255)' (int)(R * 255)' (int)(G * 255)' (int)(B * 255));
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,AsColor,The following statement contains a magic number: return Color.FromArgb((int)(A * 255)' (int)(R * 255)' (int)(G * 255)' (int)(B * 255));
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,AsColor,The following statement contains a magic number: return Color.FromArgb((int)(A * 255)' (int)(R * 255)' (int)(G * 255)' (int)(B * 255));
Magic Number,VocaluxeLib,SColorF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Structs.cs,AsColor,The following statement contains a magic number: return Color.FromArgb((int)(A * 255)' (int)(R * 255)' (int)(G * 255)' (int)(B * 255));
Magic Number,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Init,The following statement contains a magic number: CLogFileRoller.RollLogs(mainLogFilePath' 2);
Magic Number,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Init,The following statement contains a magic number: CLogFileRoller.RollLogs(songLogFilePath' 2);
Magic Number,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Init,The following statement contains a magic number: _MainLog = new LoggerConfiguration()                  .MinimumLevel.Is(logLevel.ToSerilogLogLevel())                  .Enrich.WithThreadId()                  .Enrich.FromLogContext()                  .Enrich.WithTimeStampFromStart()                  .WriteTo.TextWriter(_MainLogStringWriter'                      outputTemplate: _MainLogTemplate)                  // Json can be activated by adding "new CompactJsonFormatter()" as first argument                  .WriteTo.File(mainLogFilePath'                      flushToDiskInterval: TimeSpan.FromSeconds(30)'                      outputTemplate: _MainLogTemplate)  #if DEBUG                  .WriteTo.Console(outputTemplate: _MainLogTemplate)  #endif                  .CreateLogger();
Magic Number,VocaluxeLib.Log,CLog,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CLog.cs,Init,The following statement contains a magic number: _SongLog = new LoggerConfiguration()                  .MinimumLevel.Is(logLevel.ToSerilogLogLevel())                  .WriteTo.File(songLogFilePath'                       flushToDiskInterval: TimeSpan.FromSeconds(60)'                      outputTemplate: _SongLogTemplate)  #if DEBUG                  .WriteTo.Console(outputTemplate: "[SongInfo] " + _SongLogTemplate)  #endif                  .CreateLogger();
Magic Number,VocaluxeLib.Log,CBenchmark,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CBenchmark.cs,_GetElapsedTime,The following statement contains a magic number: return (float)((_NanosecPerTick * watch.ElapsedTicks) / (1000.0 * 1000.0));
Magic Number,VocaluxeLib.Log,CBenchmark,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Log\CBenchmark.cs,_GetElapsedTime,The following statement contains a magic number: return (float)((_NanosecPerTick * watch.ElapsedTicks) / (1000.0 * 1000.0));
Magic Number,VocaluxeLib.Menu,CEqualizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CEqualizer.cs,Update,The following statement contains a magic number: volume < 0.001
Magic Number,VocaluxeLib.Menu,CEqualizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CEqualizer.cs,Update,The following statement contains a magic number: float maxVal = -99f;
Magic Number,VocaluxeLib.Menu,CEqualizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CEqualizer.cs,Draw,The following statement contains a magic number: float scaleVal = (_Bars[_MaxBar] < 0.00001f) ? 0f : 1 / _Bars[_MaxBar];
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,GetCurrentLyricPosX,The following statement contains a magic number: return X - _Width / 2;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawSlide,The following statement contains a magic number: float x = X - _Width / 2;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawFill,The following statement contains a magic number: float x = X - _Width / 2;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomedNote,The following statement contains a magic number: _Text.Font.Height *= 1f + p * 0.4f;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomedNote,The following statement contains a magic number: _Text.X -= (_Text.Rect.W - normalRect.W) / 2f;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomedNote,The following statement contains a magic number: _Text.Y -= (_Text.Rect.H - normalRect.H) / 2f;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomedNote,The following statement contains a magic number: _Text.Z -= 0.1f;
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawJumpingNode,The following statement contains a magic number: p < 0.001
Magic Number,VocaluxeLib.Menu,CLyric,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CLyric.cs,_DrawZoomOrJump,The following statement contains a magic number: float x = X - _Width / 2;
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Init,The following statement contains a magic number: _PlayerSelector = new CStatic(_PartyModeID' _TextureTileSelected' new SColorF()' new SRectF(0' 0' _Theme.Tiles.W + 6' _Theme.Tiles.H + 6' Rect.Z - 0.5f))                  {                      Visible = false                  };
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Init,The following statement contains a magic number: _PlayerSelector = new CStatic(_PartyModeID' _TextureTileSelected' new SColorF()' new SRectF(0' 0' _Theme.Tiles.W + 6' _Theme.Tiles.H + 6' Rect.Z - 0.5f))                  {                      Visible = false                  };
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Init,The following statement contains a magic number: _PlayerSelector = new CStatic(_PartyModeID' _TextureTileSelected' new SColorF()' new SRectF(0' 0' _Theme.Tiles.W + 6' _Theme.Tiles.H + 6' Rect.Z - 0.5f))                  {                      Visible = false                  };
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Draw,The following statement contains a magic number: _PlayerSelector.X = tile.Avatar.Rect.X - 3;
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,Draw,The following statement contains a magic number: _PlayerSelector.Y = tile.Avatar.Rect.Y - 3;
Magic Number,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,_PrepareTiles,The following statement contains a magic number: var tileText = new CText(rect.X + rect.W / 2' rect.Y + rect.H + _Theme.Tiles.Name.Space' rect.Z' _Theme.Tiles.Name.Height' rect.W' EAlignment.Center'                                               _Theme.Tiles.Name.Style' _Theme.Tiles.Name.Font' _ColorNameTile' "");
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleInputThemeEditor,The following statement contains a magic number: dx *= 5;
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleInputThemeEditor,The following statement contains a magic number: dy *= 5;
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleMouseThemeEditor,The following statement contains a magic number: mouse.X = (int)(Math.Round((double)mouse.X / 5) * 5);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleMouseThemeEditor,The following statement contains a magic number: mouse.X = (int)(Math.Round((double)mouse.X / 5) * 5);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleMouseThemeEditor,The following statement contains a magic number: mouse.Y = (int)(Math.Round((double)mouse.Y / 5) * 5);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,HandleMouseThemeEditor,The following statement contains a magic number: mouse.Y = (int)(Math.Round((double)mouse.Y / 5) * 5);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,The following statement contains a magic number: var source = new PointF(current.X + current.W / 2f' current.Y + current.H / 2f);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,The following statement contains a magic number: var source = new PointF(current.X + current.W / 2f' current.Y + current.H / 2f);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,The following statement contains a magic number: var dest = new PointF(other.X + other.W / 2f' other.Y + other.H / 2f);
Magic Number,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,The following statement contains a magic number: var dest = new PointF(other.X + other.W / 2f' other.Y + other.H / 2f);
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,CParticle,The following statement contains a magic number: _Rotation = (float)(CBase.Game.GetRandomDouble() * 360.0);
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,CParticle,The following statement contains a magic number: _Rotation = (float)(CBase.Game.GetRandomDouble() * 360.0);
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: float currentTime = _Timer.ElapsedMilliseconds / 1000f;
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Star:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Snow:                          _Alpha = (float)Math.Sqrt((Math.Sin(_Age / _MaxAge * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.PerfNoteStar:                          _Alpha = 1f - _Age / _MaxAge;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Star:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Snow:                          _Alpha = (float)Math.Sqrt((Math.Sin(_Age / _MaxAge * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.PerfNoteStar:                          _Alpha = 1f - _Age / _MaxAge;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Star:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Snow:                          _Alpha = (float)Math.Sqrt((Math.Sin(_Age / _MaxAge * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.PerfNoteStar:                          _Alpha = 1f - _Age / _MaxAge;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)              {                  case EParticleType.Twinkle:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Star:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Snow:                      var maxy = (int)Math.Round(CBase.Settings.GetRenderH() - _Size * 0.4f);                        if (Math.Round(Y) < maxy)                      {                          float vdx = 0f;                          if (Math.Abs(_Vx) > float.Epsilon)                              vdx = (float)Math.Sin(currentTime / _Vx * Math.PI);                            X += _Vx * timediff * (0.5f + vdx);                            Y += _Vy * timediff * (vdx * vdx / 2f + 0.5f);                          if (Y >= maxy)                              Y = maxy;                      }                      break;                    case EParticleType.Flare:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.PerfNoteStar:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;              }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)              {                  case EParticleType.Twinkle:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Star:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Snow:                      var maxy = (int)Math.Round(CBase.Settings.GetRenderH() - _Size * 0.4f);                        if (Math.Round(Y) < maxy)                      {                          float vdx = 0f;                          if (Math.Abs(_Vx) > float.Epsilon)                              vdx = (float)Math.Sin(currentTime / _Vx * Math.PI);                            X += _Vx * timediff * (0.5f + vdx);                            Y += _Vy * timediff * (vdx * vdx / 2f + 0.5f);                          if (Y >= maxy)                              Y = maxy;                      }                      break;                    case EParticleType.Flare:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.PerfNoteStar:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;              }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)              {                  case EParticleType.Twinkle:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Star:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Snow:                      var maxy = (int)Math.Round(CBase.Settings.GetRenderH() - _Size * 0.4f);                        if (Math.Round(Y) < maxy)                      {                          float vdx = 0f;                          if (Math.Abs(_Vx) > float.Epsilon)                              vdx = (float)Math.Sin(currentTime / _Vx * Math.PI);                            X += _Vx * timediff * (0.5f + vdx);                            Y += _Vy * timediff * (vdx * vdx / 2f + 0.5f);                          if (Y >= maxy)                              Y = maxy;                      }                      break;                    case EParticleType.Flare:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.PerfNoteStar:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;              }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)              {                  case EParticleType.Twinkle:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Star:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Snow:                      var maxy = (int)Math.Round(CBase.Settings.GetRenderH() - _Size * 0.4f);                        if (Math.Round(Y) < maxy)                      {                          float vdx = 0f;                          if (Math.Abs(_Vx) > float.Epsilon)                              vdx = (float)Math.Sin(currentTime / _Vx * Math.PI);                            X += _Vx * timediff * (0.5f + vdx);                            Y += _Vy * timediff * (vdx * vdx / 2f + 0.5f);                          if (Y >= maxy)                              Y = maxy;                      }                      break;                    case EParticleType.Flare:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.PerfNoteStar:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;              }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Star:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Snow:                          size = _Size * (float)Math.Sqrt((Math.Sin(currentTime / _Vsize * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.PerfNoteStar:                          size = _Size * (1f - currentTime / _Vsize);                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Star:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Snow:                          size = _Size * (float)Math.Sqrt((Math.Sin(currentTime / _Vsize * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.PerfNoteStar:                          size = _Size * (1f - currentTime / _Vsize);                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: switch (_Type)                  {                      case EParticleType.Twinkle:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Star:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Snow:                          size = _Size * (float)Math.Sqrt((Math.Sin(currentTime / _Vsize * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.PerfNoteStar:                          size = _Size * (1f - currentTime / _Vsize);                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: _Rect.X += (_Rect.W - size) / 2f;
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: _Rect.Y += (_Rect.H - size) / 2f;
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: float r = currentTime * _Vr / 60f;
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: _Angle = _Rotation + 360f * (r - (float)Math.Floor(r));
Magic Number,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following statement contains a magic number: Math.Abs(_Vr) > 0.01
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: _SpawnTimer.ElapsedMilliseconds / 1000f > _NextSpawnTime && _NextSpawnTime >= 0f
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: float size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: float size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: var w = (int)(Rect.W - size / 4f);
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: var h = (int)(Rect.H - size / 4f);
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: star = new CParticle(_PartyModeID' _Theme.Skin' Color'                                           CBase.Game.GetRandom(w) + Rect.X - size / 4f'                                           CBase.Game.GetRandom(h) + Rect.Y - size / 4f'                                           size' lifetime' Rect.Z' vx' vy' vr' vsize' _Theme.Type);
Magic Number,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following statement contains a magic number: star = new CParticle(_PartyModeID' _Theme.Skin' Color'                                           CBase.Game.GetRandom(w) + Rect.X - size / 4f'                                           CBase.Game.GetRandom(h) + Rect.Y - size / 4f'                                           size' lifetime' Rect.Z' vx' vy' vr' vsize' _Theme.Type);
Magic Number,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_GetCurOffset,The following statement contains a magic number: int offset = _Selection - _NumVisible / 2;
Magic Number,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The following statement contains a magic number: float elWidth = (Rect.W - _TextRelativeX * 2) / numvis;
Magic Number,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The following statement contains a magic number: float xStart = Rect.X + _TextRelativeX + elWidth / 2f;
Magic Number,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The following statement contains a magic number: text.Y = Rect.Y + (Rect.H - textBounds.Height) / 2 - _TextRelativeY;
Magic Number,VocaluxeLib.Menu,CSelectSlide,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CSelectSlide.cs,_Revalidate,The following statement contains a magic number: _VisibleElements[i].Bounds = new SRectF(text.X - textBounds.Width / 2f' text.Y' textBounds.Width' textBounds.Height' Rect.Z);
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(1f' 1f' 1f' 0.5f)' Rect);
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_CheckAnimation,The following statement contains a magic number: _AnimDuration = Math.Max(100f' (Rect.W * 0.015f * 1000) * Math.Abs(_ProgressTarget - _ProgressCurrent));
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_CheckAnimation,The following statement contains a magic number: _AnimDuration = Math.Max(100f' (Rect.W * 0.015f * 1000) * Math.Abs(_ProgressTarget - _ProgressCurrent));
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_CheckAnimation,The following statement contains a magic number: _AnimDuration = Math.Max(100f' (Rect.W * 0.015f * 1000) * Math.Abs(_ProgressTarget - _ProgressCurrent));
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The following statement contains a magic number: switch (_Direction)              {                  case EDirection.Right:                      _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      float newHeight = (Rect.H - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y - newHeight' Rect.W' newHeight' Rect.Z);                      break;                    case EDirection.Left:                      float newWidth = (Rect.W - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(_RectProgressBegin.X - newWidth' Rect.Y' newWidth' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z);                      break;              }
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The following statement contains a magic number: switch (_Direction)              {                  case EDirection.Right:                      _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      float newHeight = (Rect.H - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y - newHeight' Rect.W' newHeight' Rect.Z);                      break;                    case EDirection.Left:                      float newWidth = (Rect.W - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(_RectProgressBegin.X - newWidth' Rect.Y' newWidth' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z);                      break;              }
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The following statement contains a magic number: switch (_Direction)              {                  case EDirection.Right:                      _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      float newHeight = (Rect.H - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y - newHeight' Rect.W' newHeight' Rect.Z);                      break;                    case EDirection.Left:                      float newWidth = (Rect.W - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(_RectProgressBegin.X - newWidth' Rect.Y' newWidth' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z);                      break;              }
Magic Number,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The following statement contains a magic number: switch (_Direction)              {                  case EDirection.Right:                      _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      float newHeight = (Rect.H - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y - newHeight' Rect.W' newHeight' Rect.Z);                      break;                    case EDirection.Left:                      float newWidth = (Rect.W - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(_RectProgressBegin.X - newWidth' Rect.Y' newWidth' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z);                      break;              }
Magic Number,VocaluxeLib.Menu,CStatic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CStatic.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(1f' 1f' 1f' 0.5f)' rect);
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(Rect.X' Rect.Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(Rect.X' Rect.Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(Rect.X' Rect.Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(X' Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(X' Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawRect(new SColorF(0.5f' 1f' 0.5f' 0.5f)' new SRectF(X' Y' Rect.W' Rect.H' Z));
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,DrawRelative,The following statement contains a magic number: _ReflectionSpace = (rectHeight - Rect.Y - Rect.H) * 2 + reflectionSpace;
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following statement contains a magic number: switch (ResizeAlign)                  {                      case EHAlignment.Top:                          y += step * 0.25f;                          break;                      case EHAlignment.Center:                          y += step * 0.50f;                          break;                      case EHAlignment.Bottom:                          y += step * 0.75f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following statement contains a magic number: switch (ResizeAlign)                  {                      case EHAlignment.Top:                          y += step * 0.25f;                          break;                      case EHAlignment.Center:                          y += step * 0.50f;                          break;                      case EHAlignment.Bottom:                          y += step * 0.75f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following statement contains a magic number: switch (ResizeAlign)                  {                      case EHAlignment.Top:                          y += step * 0.25f;                          break;                      case EHAlignment.Center:                          y += step * 0.50f;                          break;                      case EHAlignment.Bottom:                          y += step * 0.75f;                          break;                  }
Magic Number,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following statement contains a magic number: switch (Align)              {                  case EAlignment.Center:                      x = X - bounds.Width / 2;                      break;                  case EAlignment.Right:                      x = X - bounds.Width;                      break;              }
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,CNoteBars,The following statement contains a magic number: _NoteLinesColor = new SColorF(Color.Gray' 0.5f);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,CNoteBars,The following statement contains a magic number: _AddNoteHeight = _NoteLineHeight / 2f * (2f - (int)CBase.Profiles.GetDifficulty(playerData.ProfileID));
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,CNoteBars,The following statement contains a magic number: _AddNoteHeight = _NoteLineHeight / 2f * (2f - (int)CBase.Profiles.GetDifficulty(playerData.ProfileID));
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,Draw,The following statement contains a magic number: float factor = (note.Hit) ? 1f : 0.6f;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_GetNoteRect,The following statement contains a magic number: var noteRect = new SRectF(                  Rect.X + (note.StartBeat - line.FirstNoteBeat) * Rect.W / beats'                  Rect.Y + (CBase.Settings.GetNumNoteLines() - 1 - (note.Tone - line.BaseLine) / 2f) * _NoteLineHeight - _AddNoteHeight / 2'                  width'                  _NoteLineHeight + _AddNoteHeight'                  Rect.Z                  );
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_GetNoteRect,The following statement contains a magic number: var noteRect = new SRectF(                  Rect.X + (note.StartBeat - line.FirstNoteBeat) * Rect.W / beats'                  Rect.Y + (CBase.Settings.GetNumNoteLines() - 1 - (note.Tone - line.BaseLine) / 2f) * _NoteLineHeight - _AddNoteHeight / 2'                  width'                  _NoteLineHeight + _AddNoteHeight'                  Rect.Z                  );
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteLines,The following statement contains a magic number: lineRect.H = 1.5f;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteLines,The following statement contains a magic number: lineRect.Y = (Rect.Y + Rect.H / CBase.Settings.GetNumNoteLines() * (i + 1)) - (lineRect.H / 2);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawToneHelper,The following statement contains a magic number: tonePlayer += 12;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawToneHelper,The following statement contains a magic number: tonePlayer -= 12;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawToneHelper,The following statement contains a magic number: tonePlayer - baseLine > 12
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawToneHelper,The following statement contains a magic number: var drawRect = new SRectF(                  Rect.X - _NoteLineHeight + offsetX'                  Rect.Y + _NoteLineHeight * (CBase.Settings.GetNumNoteLines() - 1 - (tonePlayer - baseLine) / 2f)'                  _NoteLineHeight'                  _NoteLineHeight'                  Rect.Z                  );
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: int dh = (int)((1f - factor) * rect.H / 2);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: int dw = (int)Math.Min(dh' rect.W / 2);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: var noteRect = new SRectF(rect.X + dw' rect.Y + dh' rect.W - 2 * dw' rect.H - 2 * dh' rect.Z);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: var noteRect = new SRectF(rect.X + dw' rect.Y + dh' rect.W - 2 * dw' rect.H - 2 * dh' rect.Z);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: int endsW = (int)Math.Min(noteRect.H * noteBegin.OrigAspect' noteRect.W / 2);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNote,The following statement contains a magic number: SRectF middleRect = new SRectF(noteRect.X + endsW' noteRect.Y' noteRect.W - 2 * endsW' noteRect.H' noteRect.Z);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteBG,The following statement contains a magic number: const float period = 1500;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteBG,The following statement contains a magic number: float alpha = (float)(Math.Cos(_Timer.ElapsedMilliseconds / period * Math.PI * 2) + 1) / 4 + 0.5f;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteBG,The following statement contains a magic number: float alpha = (float)(Math.Cos(_Timer.ElapsedMilliseconds / period * Math.PI * 2) + 1) / 4 + 0.5f;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_DrawNoteBG,The following statement contains a magic number: float alpha = (float)(Math.Cos(_Timer.ElapsedMilliseconds / period * Math.PI * 2) + 1) / 4 + 0.5f;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddGoldenNote,The following statement contains a magic number: var numstars = (int)(noteRect.W * 0.25f);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddGoldenNote,The following statement contains a magic number: var stars = new CParticleEffect(_PartyModeID' numstars' new SColorF(Color.Yellow)' noteRect' _Theme.SkinGoldenStar' 20' EParticleType.Star);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddFlare,The following statement contains a magic number: var flares = new CParticleEffect(_PartyModeID' 15' new SColorF(Color.White)' rect' _Theme.SkinGoldenStar' 20' EParticleType.Flare);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddFlare,The following statement contains a magic number: var flares = new CParticleEffect(_PartyModeID' 15' new SColorF(Color.White)' rect' _Theme.SkinGoldenStar' 20' EParticleType.Flare);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: dx = noteRect.W / 2;
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: 2 * dx > noteRect.W
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: SRectF r = new SRectF(noteRect.Right - dx' noteRect.Y' dx * 0.5f' dx * 0.2f' noteRect.Z);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: SRectF r = new SRectF(noteRect.Right - dx' noteRect.Y' dx * 0.5f' dx * 0.2f' noteRect.Z);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: var stars = new CParticleEffect(_PartyModeID' CBase.Game.GetRandom(2) + 1' new SColorF(Color.White)' r' _Theme.SkinPerfectNoteStart' 35'                                              EParticleType.PerfNoteStar);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectNote,The following statement contains a magic number: var stars = new CParticleEffect(_PartyModeID' CBase.Game.GetRandom(2) + 1' new SColorF(Color.White)' r' _Theme.SkinPerfectNoteStart' 35'                                              EParticleType.PerfNoteStar);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectLine,The following statement contains a magic number: var twinkle = new CParticleEffect(_PartyModeID' 200' _Color' Rect' _Theme.SkinGoldenStar' 25' EParticleType.Twinkle);
Magic Number,VocaluxeLib.Menu.SingNotes,CNoteBars,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CNoteBars.cs,_AddPerfectLine,The following statement contains a magic number: var twinkle = new CParticleEffect(_PartyModeID' 200' _Color' Rect' _Theme.SkinGoldenStar' 25' EParticleType.Twinkle);
Magic Number,VocaluxeLib.Menu.SingNotes,CSingNotes,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SingNotes\CSingNotes.cs,LoadSkin,The following statement contains a magic number: int n = Int32.Parse(bp.Name.Substring(3' 1)) - 1;
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Close,The following statement contains a magic number: writer.Seek(4' SeekOrigin.Begin);
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Close,The following statement contains a magic number: writer.Write((int)_File.Length - 8);
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Close,The following statement contains a magic number: writer.Seek(_DataPos - 4' SeekOrigin.Begin);
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,The following statement contains a magic number: Encoding.ASCII.GetString(reader.ReadBytes(4)) != "RIFF"
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,The following statement contains a magic number: Encoding.ASCII.GetString(reader.ReadBytes(4)) != "WAVE"
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,The following statement contains a magic number: BitsPerSample != 8 && BitsPerSample != 16
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,The following statement contains a magic number: BitsPerSample != 8 && BitsPerSample != 16
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Open,The following statement contains a magic number: blockAlign != NumChannels * (BitsPerSample / 8)
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,GetNextSamples8Bit,The following statement contains a magic number: channel < 0 || channel > NumChannels || BitsPerSample != 8
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,GetNextSamples16Bit,The following statement contains a magic number: channel < 0 || channel > NumChannels || BitsPerSample != 16
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,GetNextSamples16BitAsBytes,The following statement contains a magic number: byte[] samplesByte = new byte[samples.Length * 2];
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,WriteSamples,The following statement contains a magic number: !_IsWritable || channel < 0 || channel > NumChannels || BitsPerSample != 8
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Write16BitSamples,The following statement contains a magic number: !_IsWritable || channel < 0 || channel > NumChannels || BitsPerSample != 16
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Write16BitSamples,The following statement contains a magic number: DataSize += samples.Length * 2;
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,Write16BitSamples,The following statement contains a magic number: short[] samplesShort = new short[samples.Length / 2];
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,_WriteHeader,The following statement contains a magic number: writer.Write(16);
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,_WriteHeader,The following statement contains a magic number: writer.Write(SampleRate * NumChannels * (BitsPerSample / 8));
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,_WriteHeader,The following statement contains a magic number: writer.Write((short)((BitsPerSample / 8) * NumChannels));
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,_WriteHeader,The following statement contains a magic number: writer.Seek(4' SeekOrigin.Begin);
Magic Number,VocaluxeLib.Utils,CWavFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\CWavFile.cs,_SeekTo,The following statement contains a magic number: string curChunkId = Encoding.ASCII.GetString(reader.ReadBytes(4));
Magic Number,VocaluxeLib.Xml,CXmlDeserializer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Xml\CXmlDeserializer.cs,_GetPrimitiveValue,The following statement contains a magic number: p > 0 && p >= nodeVal.Length - 3
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_InitTiles,The following statement contains a magic number: var textRect = new SRectF(MaxRect.X + 2 * (_TileW + _SpaceW)' Rect.Y + i * (_TileH + _SpaceH)' _ListTextWidth' _TileH' Rect.Z);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_InitTiles,The following statement contains a magic number: text.MaxRect = new SRectF(text.MaxRect.X' text.MaxRect.Y' MaxRect.W + MaxRect.X - text.Rect.X - 5f' text.MaxRect.H' text.MaxRect.Z);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_UpdateLength,The following statement contains a magic number: Math.Abs(song.Finish) > 0.001
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_UpdateLength,The following statement contains a magic number: var min = (int)Math.Floor(time / 60f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,_UpdateLength,The following statement contains a magic number: var sec = (int)(time - min * 60f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleMouse,The following statement contains a magic number: CBase.Controller.SetRumble(0.050f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,Draw,The following statement contains a magic number: tile.Draw(EAspect.Crop' SelectedTileZoomFactor' -0.1f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawTexture(CBase.BackgroundMusic.GetVideoTexture()' new SRectF(0' 0' 1280' 720' 0));
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,Draw,The following statement contains a magic number: CBase.Drawing.DrawTexture(CBase.BackgroundMusic.GetVideoTexture()' new SRectF(0' 0' 1280' 720' 0));
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,ResizeElement,The following statement contains a magic number: W = 100;
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,ResizeElement,The following statement contains a magic number: W < 100
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,ResizeElement,The following statement contains a magic number: H = 100;
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuFramework,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFramework.cs,ResizeElement,The following statement contains a magic number: H < 100
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,_UpdateLength,The following statement contains a magic number: Math.Abs(song.Finish) > 0.001
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,_UpdateLength,The following statement contains a magic number: var min = (int)Math.Floor(time / 60f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,_UpdateLength,The following statement contains a magic number: var sec = (int)(time - min * 60f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleMouse,The following statement contains a magic number: CBase.Controller.SetRumble(0.050f);
Magic Number,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,Draw,The following statement contains a magic number: tile.Draw(EAspect.Crop' SelectedTileZoomFactor' -0.1f);
Magic Number,VocaluxeLib.Songs,CLineBase<T>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CLineBase.cs,FindPreviousNote,The following statement contains a magic number: int mid = (start + end) / 2;
Magic Number,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_FindShortEnd,The following statement contains a magic number: int stop = (voice.Lines[voice.Lines.Length - 1].LastNoteBeat - voice.Lines[0].FirstNote.StartBeat) / 2 + voice.Lines[0].FirstNote.StartBeat;
Magic Number,VocaluxeLib.Songs,CSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSong.cs,_FindShortEnd,The following statement contains a magic number: stop < (voice.Lines[series[i].Start].FirstNoteBeat + ((voice.Lines[series[i].End].LastNoteBeat - voice.Lines[series[i].Start].FirstNoteBeat) / 2))
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeaderEntry,The following statement contains a magic number: Math.Abs(value - def) > 0.0001
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeader,The following statement contains a magic number: _WriteHeaderEntry("GAP"' (int)(_Song.Gap * 1000f));
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeader,The following statement contains a magic number: _WriteHeaderEntry("END"' (int)(_Song.Finish * 1000f));
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteHeader,The following statement contains a magic number: _WriteHeaderEntry("ENDSHORT"' (int)(CBase.Game.GetTimeFromBeats(_Song.ShortEnd.EndBeat' _Song.BPM) + _Song.Gap) * 1000);
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_GetBreakBeat,The following statement contains a magic number: breakBeat = firstPossibleBeat + (int)CBase.Game.GetBeatFromTime(2f' _Song.BPM' 0f);
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_GetBreakBeat,The following statement contains a magic number: timeDiff > 4f
Magic Number,VocaluxeLib.Songs,CSongWriter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongWriter.cs,_WriteNotes,The following statement contains a magic number: _Tw.WriteLine("P" + Math.Pow(2' i));
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,FindPreviousLine,The following statement contains a magic number: int mid = (start + end) / 2;
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The following statement contains a magic number: _Lines[0].StartBeat = -10000;
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The following statement contains a magic number: switch (max - min)                      {                          case 0:                              s = max;                              break;                          case 1:                              s = max;                              break;                          case 2:                              s = max - 1;                              break;                          case 3:                              s = max - 2;                              break;                          default:                              s = min + 2;                              break;                      }
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The following statement contains a magic number: switch (max - min)                      {                          case 0:                              s = max;                              break;                          case 1:                              s = max;                              break;                          case 2:                              s = max - 1;                              break;                          case 3:                              s = max - 2;                              break;                          default:                              s = min + 2;                              break;                      }
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The following statement contains a magic number: switch (max - min)                      {                          case 0:                              s = max;                              break;                          case 1:                              s = max;                              break;                          case 2:                              s = max - 1;                              break;                          case 3:                              s = max - 2;                              break;                          default:                              s = min + 2;                              break;                      }
Magic Number,VocaluxeLib.Songs,CVoice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CVoice.cs,UpdateTimings,The following statement contains a magic number: switch (max - min)                      {                          case 0:                              s = max;                              break;                          case 1:                              s = max;                              break;                          case 2:                              s = max - 1;                              break;                          case 3:                              s = max - 2;                              break;                          default:                              s = min + 2;                              break;                      }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadHeader,The following statement contains a magic number: switch (identifier)                          {                              case "ENCODING":                                  Encoding newEncoding = value.GetEncoding();                                  _Song.ManualEncoding = true;                                  if (!newEncoding.Equals(sr.CurrentEncoding))                                  {                                      if (useSetEncoding)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Duplicate encoding ignored"'  CLog.Params(_Song.FileName));                                          continue;                                      }                                      sr.Dispose();                                      sr = null;                                      _Song.Encoding = newEncoding;                                      return ReadHeader(true);                                  }                                  break;                              case "TITLE":                                  _Song.Title = value;                                  headerFlags |= EHeaderFlags.Title;                                  break;                              case "ARTIST":                                  _Song.Artist = value;                                  headerFlags |= EHeaderFlags.Artist;                                  break;                              case "TITLE-ON-SORTING":                                  _Song.TitleSorting = value;                                  break;                              case "ARTIST-ON-SORTING":                                  _Song.ArtistSorting = value;                                  break;                              case "CREATOR":                              case "AUTHOR":                              case "AUTOR":                                  _Song.Creator = value;                                  break;                              case "VERSION":                                  _Song.Version = value;                                  break;                              case "SOURCE":                              case "YOUTUBE":                                  _Song.Source = value;                                  break;                              case "LENGTH":                                  _Song.Length = value;                                  break;                              case "MP3":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                  {                                      _Song.MP3FileName = value;                                      headerFlags |= EHeaderFlags.MP3;                                  }                                  else                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Can't find audio file: {AudioFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                      return false;                                  }                                  break;                              case "BPM":                                  if (CHelper.TryParse(value' out _Song.BPM))                                  {                                      _Song.BPM *= _BPMFactor;                                      headerFlags |= EHeaderFlags.BPM;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid BPM value: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "EDITION":                                  if (value.Length > 1)                                      _Song.Editions.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid edition: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "GENRE":                                  if (value.Length > 1)                                      _Song.Genres.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid genre: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ALBUM":                                  _Song.Album = value;                                  break;                              case "YEAR":                                  int num;                                  if (value.Length == 4 && int.TryParse(value' out num) && num > 0)                                      _Song.Year = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid year: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "LANGUAGE":                                  if (value.Length > 1)                                      _Song.Languages.Add(_UnifyLanguage(value));                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid language: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COMMENT":                                  if (!String.IsNullOrEmpty(_Song._Comment))                                      _Song._Comment += "\r\n";                                  _Song._Comment += value;                                  break;                              case "GAP":                                  if (CHelper.TryParse(value' out _Song.Gap))                                      _Song.Gap /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid gap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "COVER":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.CoverFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find cover file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "BACKGROUND":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.BackgroundFileNames.Add(value);                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find background file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEO":                                  if (File.Exists(Path.Combine(_Song.Folder' value)))                                      _Song.VideoFileName = value;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Can't find video file: {MissingFile}"' CLog.Params(_Song.FileName' Path.Combine(_Song.Folder' value)));                                  break;                              case "VIDEOGAP":                                  if (!CHelper.TryParse(value' out _Song.VideoGap))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videogap: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "VIDEOASPECT":                                  if (!CHelper.TryParse(value' out _Song.VideoAspect' true))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid videoaspect: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "START":                                  if (!CHelper.TryParse(value' out _Song.Start))                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid start: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "END":                                  if (CHelper.TryParse(value' out _Song.Finish))                                      _Song.Finish /= 1000f;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid end: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEWSTART":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                      _Song.Preview.Source = EDataSource.Tag;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "PREVIEW":                                  if (CHelper.TryParse(value' out _Song.Preview.StartTime) && _Song.Preview.StartTime >= 0f)                                  {                                      //This is stored in ms not like PREVIEWSTART!                                      _Song.Preview.StartTime /= 1000f;                                      _Song.Preview.Source = EDataSource.Tag;                                  }                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid previewstart: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYSTARTBEAT":                                  if (int.TryParse(value' out _Song.Medley.StartBeat))                                      headerFlags |= EHeaderFlags.MedleyStartBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleystartbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "MEDLEYENDBEAT":                                  if (int.TryParse(value' out _Song.Medley.EndBeat))                                      headerFlags |= EHeaderFlags.MedleyEndBeat;                                  else                                      CLog.CSongLog.Warning("[{SongFileName}] Invalid medleyendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  break;                              case "ENDSHORT":                                  if ((headerFlags & EHeaderFlags.BPM) != 0)                                  {                                      int endTime;                                      if (int.TryParse(value' out endTime) || endTime < 0)                                      {                                          _Song.ShortEnd.EndBeat = (int)CBase.Game.GetBeatFromTime(endTime / 1000f' _Song.BPM' _Song.Gap);                                          _Song.ShortEnd.Source = EDataSource.Tag;                                      }                                      else                                          CLog.CSongLog.Warning("[{SongFileName}] Invalid shortendbeat: {Value}"' CLog.Params(_Song.FileName' value));                                  }                                  break;                              case "CALCMEDLEY":                                  if (value.ToUpper() == "OFF")                                      _Song._CalculateMedley = false;                                  break;                              case "RELATIVE":                                  if (value.ToUpper() == "YES")                                      _Song.Relative = true;                                  break;                              case "RESOLUTION":                              case "NOTESGAP":                                  //Outdated/not used                                  _Song.UnknownTags.Add(line);                                  break;                              default:                                  if (identifier.StartsWith("DUETSINGER"))                                  {                                      identifier = identifier.Substring(10);                                      if (!identifier.StartsWith("P")) // fix for missing "P"                                          identifier = "P" + identifier;                                  }                                  if (identifier.StartsWith("P"))                                  {                                      int player;                                      if (int.TryParse(identifier.Substring(1).Trim()' out player))                                      {                                          foreach (int curPlayer in player.GetSetBits())                                              _Song.Notes.VoiceNames[curPlayer] = value;                                      }                                  }                                  else                                  {                                      _Song.UnknownTags.Add(line);                                      CLog.CSongLog.Warning("[{SongFileName}] Unknown tag: #{Identifier}"' CLog.Params(_Song.FileName' identifier));                                  }                                    break;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: line = (line.Length >= 2 && line[1] == ' ') ? line.Substring(2) : line.Substring(1);
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: line = (line.Length >= 2 && line[1] == ' ') ? line.Substring(2) : line.Substring(1);
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,ReadNotes,The following statement contains a magic number: switch (tag)                          {                              case '#':                                  continue;                              case 'E':                                  endFound = true;                                  break;                              case 'P':                                  line = line.Trim(trimChars);                                    if (!int.TryParse(line' out player))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Wrong or missing number after \"P\" (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      return false;                                  }                                  currentBeat = 0;                                  lastNote = null;                                  break;                              case ':':                              case '*':                              case 'F':                                  string[] noteData = line.Split(splitChars' 4);                                  if (noteData.Length < 4)                                  {                                      if (noteData.Length == 3)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                          changesMade.NoTextNoteCt++;                                          continue;                                      }                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  int tone;                                  if (!int.TryParse(noteData[0]' out beat) || !int.TryParse(noteData[1]' out length) || !int.TryParse(noteData[2]' out tone))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid note found (non-numeric values) (in line {LineNr}): {noteData}"' CLog.Params(_Song.FileName' _LineNr' noteData));                                      sr.Dispose();                                      return false;                                  }                                  string text = noteData[3].TrimMultipleWs();                                  if (text == "")                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note without text (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.NoTextNoteCt++;                                      continue;                                  }                                  if (_CurrentReadMode == ENoteReadMode.ZeroBased)                                      length++;                                  if (length < 1)                                  {                                      changesMade.ZeroLengthNoteCt++;                                      if (_CurrentReadMode == ENoteReadMode.Normal && changesMade.ZeroLengthNoteCt > _MaxZeroNoteCt && changesMade.OverlapNoteCt <= _MaxOverlapNoteCt)                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxZeroNoteCt} notes with length < 1. Trying alternative read mode."' CLog.Params(_Song.FileName' _MaxZeroNoteCt));                                          _CurrentReadMode = ENoteReadMode.ZeroBased;                                          sr.Dispose();                                          return ReadNotes(true);                                      }                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored note with length < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                  }                                  else                                  {                                      ENoteType noteType;                                        if (tag.Equals('*'))                                          noteType = ENoteType.Golden;                                      else if (tag.Equals('F'))                                          noteType = ENoteType.Freestyle;                                      else                                          noteType = ENoteType.Normal;                                        if (_Song.Relative)                                          beat += currentBeat;                                        bool ignored = false;                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          //Create the note here as we want independent instances in the lines. Otherwhise we can't modify them later                                          lastNote = new CSongNote(beat' length' tone' text' noteType);                                          if (!_AddNote(curPlayer' lastNote))                                          {                                              if (!ignored)                                              {                                                  ignored = true;                                                  changesMade.OverlapNoteCt++;                                                  if (changesMade.OverlapNoteCt > _MaxOverlapNoteCt && _CurrentReadMode == ENoteReadMode.ZeroBased)                                                  {                                                      CLog.CSongLog.Warning("[{SongFileName}] Found more than {MaxOverlapNoteCt} overlapping notes. Using standard mode."' CLog.Params(_Song.FileName' _MaxOverlapNoteCt));                                                      _CurrentReadMode = ENoteReadMode.OneBased;                                                      sr.Dispose();                                                      return ReadNotes(true);                                                  }                                              }                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored note for player {CurrentPlayerNumber} because it overlaps with other note (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1)' _LineNr));                                          }                                      }                                  }                                  break;                              case '-':                                  string[] lineBreakData = line.Split(splitChars);                                  if (lineBreakData.Length < 1)                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (No beat) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                  if (!int.TryParse(lineBreakData[0]' out beat))                                  {                                      CLog.CSongLog.Error("[{SongFileName}] Invalid line break found (Non-numeric value) (in line {LineNr}): {LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                      sr.Dispose();                                      return false;                                  }                                    if (_Song.Relative)                                  {                                      beat += currentBeat;                                      if (lineBreakData.Length < 2 || !int.TryParse(lineBreakData[1]' out length))                                      {                                          CLog.CSongLog.Warning("[{SongFileName}] Missing line break length (in line {LineNr}):{LineBreakData}"' CLog.Params(_Song.FileName' _LineNr' lineBreakData));                                          changesMade.NoLengthBreakCt++;                                          currentBeat = beat;                                      }                                      else                                          currentBeat += length;                                  }                                    if (lastNote != null && beat <= lastNote.EndBeat)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Line break is before previous note end. Adjusted. (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                                                            changesMade.AjustedBreakCt++;                                      if (_Song.Relative)                                          currentBeat += lastNote.EndBeat - beat + 1;                                      beat = lastNote.EndBeat + 1;                                  }                                    if (beat < 1)                                  {                                      CLog.CSongLog.Warning("[{SongFileName}] Ignored line break because position is < 1 (in line {LineNr})"' CLog.Params(_Song.FileName' _LineNr));                                      changesMade.InvalidPosBreakCt++;                                  }                                  else                                  {                                      foreach (int curPlayer in player.GetSetBits())                                      {                                          if (!_NewSentence(curPlayer' beat))                                              CLog.CSongLog.Warning("[{SongFileName}] Ignored line break for player {CurPlayerNr} (Overlapping or duplicate) (in line {LineNr})"' CLog.Params(_Song.FileName' (curPlayer + 1) ' _LineNr));                                      }                                  }                                  break;                              default:                                  CLog.CSongLog.Error("[{SongFileName}] Unexpected or missing character ({Tag})"' CLog.Params(_Song.FileName' tag));                                  return false;                          }
Magic Number,VocaluxeLib.Utils.Player,CSongPlayer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\Player\CSongPlayer.cs,_LoadVideo,The following statement contains a magic number: _VideoFading = new CFading(0f' 1f' 3f);
Magic Number,VocaluxeLib.Utils.Player,CSoundPlayer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Utils\Player\CSoundPlayer.cs,Play,The following statement contains a magic number: CBase.Sound.Fade(_StreamID' 100' _FadeTime);
Duplicate Code,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The method contains a code clone-set at the following line numbers (starting from the method definition): ((37' 82)' (160' 205))
Missing Default,VocaluxeLib.Menu,CMenu,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenu.cs,HandleInputThemeEditor,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.S:                          CBase.Graphics.SaveTheme();                          return true;                      case Keys.R:                          _ReloadThemeEditMode();                          return true;                  }
Missing Default,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CBase.Profiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _AddPlayer(_CurrentTeam' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (!_ChangePlayerNumDynamic && _TeamList[_CurrentTeam].Count == _NumPlayerTeams[_CurrentTeam])                                  resetSelection = true;                              else if (_TeamList[_CurrentTeam].Count == _PartyMode.MaxPlayersPerTeam)                                  resetSelection = true;                          }                          else if (!_SelectingFast)                              resetSelection = true;                          break;                        case Keys.Escape:                      case Keys.Back:                          resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                  }
Missing Default,VocaluxeLib.Menu,CMenuPartyNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartyNameSelection.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          Back();                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonBack].Selected)                              Back();                            if (_Buttons[_ButtonNext].Selected)                              Next();                            if (_Buttons[_ButtonRandom].Selected)                              _SelectRandom();                            if (_Buttons[_ButtonIncreaseTeams].Selected)                              IncreaseTeamNum();                            if (_Buttons[_ButtonDecreaseTeams].Selected)                              DecreaseTeamNum();                            if (_Buttons[_ButtonIncreasePlayer].Selected)                              IncreasePlayerNum(_CurrentTeam);                            if (_Buttons[_ButtonDecreasePlayer].Selected)                              DecreasePlayerNum(_CurrentTeam);                            break;                        case Keys.Delete:                          if (_SelectSlides[_SelectSlidePlayer].Selected && _SelectSlides[_SelectSlidePlayer].NumValues > 0)                          {                              int index = _SelectSlides[_SelectSlidePlayer].Selection;                              _RemovePlayerByIndex(_CurrentTeam' index);                              _UpdatePlayerSlide();                          }                          break;                        case Keys.Left:                      case Keys.Right:                          if (_SelectSlides[_SelectSlideTeams].Selected)                              _OnChangeTeamSlide();                          break;                        case Keys.P:                          if (!_SelectingKeyboardActive)                          {                              _SelectingFastPlayerNr = (_CurrentTeam + 1);                              _SelectingFast = true;                              //_ResetPlayerSelections();                          }                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numPressed = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          numPressed = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          numPressed = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          numPressed = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          numPressed = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          numPressed = 6;                          break;                        case Keys.D7:                      case Keys.NumPad7:                          numPressed = 7;                          break;                        case Keys.D8:                      case Keys.NumPad8:                          numPressed = 8;                          break;                        case Keys.D9:                      case Keys.NumPad9:                          numPressed = 9;                          break;                        case Keys.Subtract:                          if (_SelectSlides[_SelectSlideTeams].Selected)                              DecreaseTeamNum();                          else if (_SelectSlides[_SelectSlidePlayer].Selected)                              DecreasePlayerNum(_CurrentTeam);                          break;                        case Keys.Add:                          if (_SelectSlides[_SelectSlideTeams].Selected)                              IncreaseTeamNum();                          else if (_SelectSlides[_SelectSlidePlayer].Selected)                              IncreasePlayerNum(_CurrentTeam);                          break;                  }
Missing Default,VocaluxeLib.Menu,CMenuPartySongSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CMenuPartySongSelection.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Back:                  case Keys.Escape:                      Back();                      break;                  case Keys.Enter:                      if (_Buttons[_ButtonNext].Selected)                          Next();                      else if (_Buttons[_ButtonBack].Selected)                          Back();                      break;                    case Keys.Left:                  case Keys.Right:                      _GetSelectedOptions();                      _UpdateSelectSlideVisibility();                      break;              }
Missing Default,VocaluxeLib.Menu,CNameSelection,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CNameSelection.cs,HandleInput,The following switch statement is missing a default case: switch (kevent.Key)              {                  case Keys.Right:                      if (_ActualSelection + 1 < _Tiles.Count)                      {                          if (_Tiles[_ActualSelection + 1].ProfileID != Guid.Empty)                              _ActualSelection++;                      }                      else                      {                          int offset = Offset;                          UpdateList(Offset + 1);                          if (offset != Offset)                              _ActualSelection -= _Theme.Tiles.NumW - 1;                      }                      break;                    case Keys.Left:                      if (_ActualSelection - 1 > -1)                          _ActualSelection--;                      else if (Offset > 0)                      {                          UpdateList(Offset - 1);                          _ActualSelection += _Theme.Tiles.NumW - 1;                      }                      break;                    case Keys.Up:                      if (_ActualSelection - _Theme.Tiles.NumW > -1)                          _ActualSelection -= _Theme.Tiles.NumW;                      else if (Offset > 0)                      {                          UpdateList(Offset - 1);                      }                      break;                    case Keys.Down:                      if (_ActualSelection + _Theme.Tiles.NumW < _Tiles.Count)                      {                          if (_Tiles[_ActualSelection + _Theme.Tiles.NumW].ProfileID != Guid.Empty)                              _ActualSelection += _Theme.Tiles.NumW;                      }                      else                      {                          int offset = Offset;                          UpdateList(Offset + 1);                      }                      if (_Tiles[_ActualSelection].ProfileID == Guid.Empty)                      {                          _ActualSelection = _Tiles.Count - _Theme.Tiles.NumW;                          while(_Tiles[_ActualSelection + 1].ProfileID != Guid.Empty)                          {                              _ActualSelection++;                          }                      }                      break;              }
Missing Default,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetElement,The following switch statement is missing a default case: switch (element.Type)              {                  case EType.Background:                      return _Backgrounds[element.Num];                  case EType.Button:                      return _Buttons[element.Num];                  case EType.SelectSlide:                      return _SelectSlides[element.Num];                  case EType.Text:                      return _Texts[element.Num];                  case EType.Static:                      return _Statics[element.Num];                  case EType.SongMenu:                      return _SongMenus[element.Num];                  case EType.Lyric:                      return _Lyrics[element.Num];                  case EType.SingNote:                      return _SingNotes[element.Num];                  case EType.NameSelection:                      return _NameSelections[element.Num];                  case EType.Equalizer:                      return _Equalizers[element.Num];                  case EType.Playlist:                      return _Playlists[element.Num];                  case EType.ParticleEffect:                      return _ParticleEffects[element.Num];                  case EType.ProgressBar:                      return _ProgressBars[element.Num];              }
Missing Default,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetNextElement,The following switch statement is missing a default case: switch (direction)              {                  case EDirection.Up:                      currentRect = new SRectF(currentRect.X' CBase.Settings.GetRenderH()' 1' 1' currentRect.Z);                      break;                  case EDirection.Down:                      currentRect = new SRectF(currentRect.X' 0' 1' 1' currentRect.Z);                      break;                  case EDirection.Left:                      currentRect = new SRectF(CBase.Settings.GetRenderW()' currentRect.Y' 1' 1' currentRect.Z);                      break;                  case EDirection.Right:                      currentRect = new SRectF(0' currentRect.Y' 1' 1' currentRect.Z);                      break;              }
Missing Default,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistanceDirect,The following switch statement is missing a default case: switch (direction)              {                  case EDirection.Up:                  case EDirection.Down:                      if (!other.X.IsInRange(current.X' current.Right) && !other.Right.IsInRange(current.X' current.Right) && !current.X.IsInRange(other.X' other.Right))                          return float.MaxValue;                      break;                    case EDirection.Left:                  case EDirection.Right:                      if (!other.Y.IsInRange(current.Y' current.Bottom) && !other.Bottom.IsInRange(current.Y' current.Bottom) && !current.Y.IsInRange(other.Y' other.Bottom))                          return float.MaxValue;                      break;              }
Missing Default,VocaluxeLib.Menu,CObjectInteractions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CObjectInteractions.cs,_GetDistance180,The following switch statement is missing a default case: switch (direction)              {                  case EDirection.Up:                      if (vector.Y < 0f)                          return distance;                      break;                    case EDirection.Down:                      if (vector.Y > 0f)                          return distance;                      break;                    case EDirection.Left:                      if (vector.X < 0f)                          return distance;                      break;                    case EDirection.Right:                      if (vector.X > 0f)                          return distance;                      break;              }
Missing Default,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following switch statement is missing a default case: switch (_Type)                  {                      case EParticleType.Twinkle:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Star:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.Snow:                          _Alpha = (float)Math.Sqrt((Math.Sin(_Age / _MaxAge * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          _Alpha = 1f - _Age / _MaxAge;                          break;                        case EParticleType.PerfNoteStar:                          _Alpha = 1f - _Age / _MaxAge;                          break;                  }
Missing Default,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following switch statement is missing a default case: switch (_Type)              {                  case EParticleType.Twinkle:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Star:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.Snow:                      var maxy = (int)Math.Round(CBase.Settings.GetRenderH() - _Size * 0.4f);                        if (Math.Round(Y) < maxy)                      {                          float vdx = 0f;                          if (Math.Abs(_Vx) > float.Epsilon)                              vdx = (float)Math.Sin(currentTime / _Vx * Math.PI);                            X += _Vx * timediff * (0.5f + vdx);                            Y += _Vy * timediff * (vdx * vdx / 2f + 0.5f);                          if (Y >= maxy)                              Y = maxy;                      }                      break;                    case EParticleType.Flare:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;                    case EParticleType.PerfNoteStar:                      X += _Vx * timediff;                      Y += _Vy * timediff;                      break;              }
Missing Default,VocaluxeLib.Menu,CParticle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticle.cs,Update,The following switch statement is missing a default case: switch (_Type)                  {                      case EParticleType.Twinkle:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Star:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.Snow:                          size = _Size * (float)Math.Sqrt((Math.Sin(currentTime / _Vsize * Math.PI * 2 - 0.5 * Math.PI) + 1) / 2);                          break;                        case EParticleType.Flare:                          size = _Size * (1f - currentTime / _Vsize);                          break;                        case EParticleType.PerfNoteStar:                          size = _Size * (1f - currentTime / _Vsize);                          break;                  }
Missing Default,VocaluxeLib.Menu,CParticleEffect,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CParticleEffect.cs,Update,The following switch statement is missing a default case: switch (_Theme.Type)                  {                      case EParticleType.Twinkle:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.5f;                          vx = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vy = -CBase.Game.GetRandom(10000) / 50f + 100f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Star:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 0.2f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vr = -CBase.Game.GetRandom(500) / 100f + 2.5f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.Snow:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(5000) / 50f + 10f;                          vx = -CBase.Game.GetRandom(1000) / 50f + 10f;                          vy = CBase.Game.GetRandom(1000) / 50f + Math.Abs(vx) + 10f;                          vr = -CBase.Game.GetRandom(200) / 50f + 2f;                          vsize = lifetime * 2f;                            _NextSpawnTime = lifetime / _Theme.MaxNumber;                          doSpawn = false;                          break;                        case EParticleType.Flare:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(500) / 1000f + 0.1f;                          vx = -CBase.Game.GetRandom(2000) / 50f;                          vy = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vr = -CBase.Game.GetRandom(2000) / 50f + 20f;                          vsize = lifetime * 2f;                          break;                        case EParticleType.PerfNoteStar:                          size = CBase.Game.GetRandom((int)_Theme.Size / 2) + _Theme.Size / 2;                          lifetime = CBase.Game.GetRandom(1000) / 500f + 1.2f;                          vx = 0f;                          vy = 0f;                          vr = CBase.Game.GetRandom(500) / 50f + 10f;                          vsize = lifetime * 2f;                          break;                  }
Missing Default,VocaluxeLib.Menu,CPlaylist,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CPlaylist.cs,HandleMouse,The following switch statement is missing a default case: switch (_EditMode)                  {                          //Normal mode                      case EEditMode.None:                            //LB actions                          if (mouseEvent.LB)                          {                              if (_CurrentPlaylistElement != -1)                              {                                  CBase.Playlist.GetSong(ActivePlaylistID' _CurrentPlaylistElement + _Offset).GameMode =                                      _PlaylistElementContents[_CurrentPlaylistElement + _Offset].Modes[_PlaylistElements[_CurrentPlaylistElement].SelectSlide.Selection];                                  UpdatePlaylist();                              }                              if (_ButtonPlaylistClose.Selected)                              {                                  ClosePlaylist();                                  return true;                              }                              if (_ButtonPlaylistSing.Selected)                              {                                  _StartPlaylistSongs();                                  return true;                              }                              if (_ButtonPlaylistSave.Selected)                              {                                  CBase.Playlist.Save(ActivePlaylistID);                                  return true;                              }                              if (_ButtonPlaylistDelete.Selected)                              {                                  CBase.Playlist.Delete(ActivePlaylistID);                                  ClosePlaylist();                                  return true;                              }                              if (_ButtonPlaylistName.Selected)                              {                                  _EditMode = EEditMode.PlaylistName;                                  _ButtonPlaylistName.EditMode = true;                                  return true;                              }                          }                            //Start selected song with double click                          if (mouseEvent.LD && _CurrentPlaylistElement != -1)                              _StartPlaylistSong(_CurrentPlaylistElement);                            //Change order with holding LB                          if (mouseEvent.LBH && _CurrentPlaylistElement != -1 && _PlaylistElementContents.Count > 0 && DragAndDropSongID == -1)                          {                              _ChangeOrderSource = _CurrentPlaylistElement + _Offset;                                //Update of Drag/Drop-Texture                              if (_ChangeOrderSource >= _PlaylistElementContents.Count)                                  return true;                                _ChangeOrderElement = new CPlaylistElement(_PlaylistElements[_CurrentPlaylistElement])                                  {                                      Background = {Z = CBase.Settings.GetZNear()}'                                      Cover = {Z = CBase.Settings.GetZNear()}'                                      SelectSlide = {Z = CBase.Settings.GetZNear()}'                                      Text1 = {Z = CBase.Settings.GetZNear()}                                  };                                _ChangeOrderElement.Background.Texture = CBase.Themes.GetSkinTexture(_Theme.SkinBackground' _PartyModeID);                              _ChangeOrderElement.Background.Color = _BackgroundColor;                                _OldMousePosX = mouseEvent.X;                              _OldMousePosY = mouseEvent.Y;                                _EditMode = EEditMode.ChangeOrder;                          }                            if (!mouseEvent.LBH && DragAndDropSongID != -1)                          {                              CSong song = CBase.Songs.GetSongByID(DragAndDropSongID);                                if (song != null)                              {                                  var gm = EGameMode.TR_GAMEMODE_NORMAL;                                  if (song.IsDuet)                                      gm = EGameMode.TR_GAMEMODE_DUET;                                    if (_CurrentPlaylistElement != -1)                                  {                                      CBase.Playlist.InsertSong(ActivePlaylistID' _CurrentPlaylistElement + _Offset' DragAndDropSongID' gm);                                      UpdatePlaylist();                                  }                                  else                                  {                                      if (mouseEvent.Y < _PlaylistElements[0].Background.Rect.Y && _Offset == 0)                                      {                                          CBase.Playlist.InsertSong(ActivePlaylistID' 0' DragAndDropSongID' gm);                                          UpdatePlaylist();                                      }                                      else                                      {                                          if (_PlaylistElements.Count + _Offset >= _PlaylistElementContents.Count)                                          {                                              float min = 0f;                                              for (int i = _PlaylistElements.Count - 1; i >= 0; i--)                                              {                                                  if (_PlaylistElements[i].SelectSlide.Visible)                                                  {                                                      min = _PlaylistElements[i].SelectSlide.Rect.Y + _PlaylistElements[i].SelectSlide.Rect.H;                                                      break;                                                  }                                              }                                                if (mouseEvent.Y > min)                                              {                                                  CBase.Playlist.AddSong(ActivePlaylistID' DragAndDropSongID' gm);                                                  UpdatePlaylist();                                                  ScrollToBottom();                                              }                                          }                                      }                                      DragAndDropSongID = -1;                                      UpdatePlaylist();                                  }                              }                          }                            break;                        case EEditMode.PlaylistName:                          _SelectElement(_ButtonPlaylistName);                          _CurrentPlaylistElement = -1;                          if (mouseEvent.LB)                          {                              if (_ButtonPlaylistName.Selected)                              {                                  CBase.Playlist.SetName(ActivePlaylistID' _ButtonPlaylistName.Text.Text);                                  CBase.Playlist.Save(ActivePlaylistID);                                  _EditMode = EEditMode.None;                                  return true;                              }                          }                          else if (mouseEvent.RB)                          {                              if (_ButtonPlaylistName.Selected)                              {                                  _ButtonPlaylistName.Text.Text = CBase.Playlist.GetName(ActivePlaylistID);                                  _EditMode = EEditMode.None;                                  _ButtonPlaylistName.EditMode = false;                                  return true;                              }                          }                          break;                        case EEditMode.ChangeOrder:                          //Actions according to playlist-element                            //Update coords for Drag/Drop-Texture                          _ChangeOrderElement.MouseMove(mouseEvent.X' mouseEvent.Y' _OldMousePosX' _OldMousePosY);                          _OldMousePosX = mouseEvent.X;                          _OldMousePosY = mouseEvent.Y;                            if (!mouseEvent.LBH)                          {                              if (_CurrentPlaylistElement != -1 && _CurrentPlaylistElement + _Offset != _ChangeOrderSource)                              {                                  CBase.Playlist.MoveSong(ActivePlaylistID' _ChangeOrderSource' _CurrentPlaylistElement + _Offset);                                  UpdatePlaylist();                              }                              else if (_CurrentPlaylistElement == -1)                              {                                  if (mouseEvent.Y < _PlaylistElements[0].Background.Rect.Y && _Offset == 0)                                      CBase.Playlist.MoveSong(ActivePlaylistID' _ChangeOrderSource' 0);                                  else                                  {                                      if (_PlaylistElements.Count + _Offset >= _PlaylistElementContents.Count)                                      {                                          float min = 0f;                                          for (int i = _PlaylistElements.Count - 1; i >= 0; i--)                                          {                                              if (_PlaylistElements[i].SelectSlide.Visible)                                              {                                                  min = _PlaylistElements[i].SelectSlide.Rect.Y + _PlaylistElements[i].SelectSlide.Rect.H;                                                  break;                                              }                                          }                                            if (mouseEvent.Y > min)                                              CBase.Playlist.MoveSong(ActivePlaylistID' _ChangeOrderSource' _PlaylistElementContents.Count - 1);                                      }                                  }                                    UpdatePlaylist();                              }                              _EditMode = EEditMode.None;                              _ChangeOrderElement = null;                          }                          break;                  }
Missing Default,VocaluxeLib.Menu,CScreenSetting,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CScreenSetting.cs,GetValue,The following switch statement is missing a default case: switch (_Theme.Type)              {                  case ESettingType.Int:                      return _GetIntValue();                    case ESettingType.String:                      return _Theme.Value;                    case ESettingType.Color:                      return _GetColorValue();                    case ESettingType.Texture:                      return _GetTextureValue();              }
Missing Default,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressLeft,The following switch statement is missing a default case: switch (_Direction)              {                  case EDirection.Right:                      _TextureProgressBegin = TextureProgressLeft;                      if (_TextureProgressBegin == null)                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y' 0' 0' Rect.Z);                      else                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y' Rect.H * _TextureProgressBegin.OrigAspect' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      _TextureProgressBegin = TextureProgressRight;                      if (_TextureProgressBegin == null)                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y + Rect.H' 0' 0' Rect.Z);                      else                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y + Rect.H - Rect.W * _TextureProgressBegin.OrigAspect' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z);                      break;                    case EDirection.Left:                      _TextureProgressBegin = TextureProgressRight;                      if (_TextureProgressBegin == null)                          _RectProgressBegin = new SRectF(Rect.X + Rect.W' Rect.Y' 0' 0' Rect.Z);                      else                          _RectProgressBegin = new SRectF(Rect.X + Rect.W - Rect.H * _TextureProgressBegin.OrigAspect' Rect.Y' Rect.H *_TextureProgressBegin.OrigAspect' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _TextureProgressBegin = TextureProgressLeft;                      if (_TextureProgressBegin == null)                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y' 0' 0' Rect.Z);                      else                          _RectProgressBegin = new SRectF(Rect.X' Rect.Y' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z);                      break;              }
Missing Default,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressMid,The following switch statement is missing a default case: switch (_Direction)              {                  case EDirection.Right:                      _RectProgressMid = new SRectF(_RectProgressBegin.X + _RectProgressBegin.W' Rect.Y' (Rect.W - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      float newHeight = (Rect.H - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y - newHeight' Rect.W' newHeight' Rect.Z);                      break;                    case EDirection.Left:                      float newWidth = (Rect.W - 2 * _RectProgressBegin.H) * _ProgressCurrent;                      _RectProgressMid = new SRectF(_RectProgressBegin.X - newWidth' Rect.Y' newWidth' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _RectProgressMid = new SRectF(Rect.X' _RectProgressBegin.Y + _RectProgressBegin.H' (Rect.H - 2 * _RectProgressBegin.W) * _ProgressCurrent' Rect.W' Rect.Z);                      break;              }
Missing Default,VocaluxeLib.Menu,CProgressBar,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CProgressBar.cs,_UpdateProgressRight,The following switch statement is missing a default case: switch (_Direction)              {                  case EDirection.Right:                      _TextureProgressEnd = _TextureProgressRight;                      if (_TextureProgressEnd == null)                          _RectProgressEnd = new SRectF(_RectProgressMid.X + _RectProgressMid.W' Rect.Y' 0' 0' Rect.Z);                      else                          _RectProgressEnd = new SRectF(_RectProgressMid.X + _RectProgressMid.W' Rect.Y' Rect.H * _TextureProgressBegin.OrigAspect' Rect.H' Rect.Z);                      break;                    case EDirection.Up:                      _TextureProgressEnd = _TextureProgressLeft;                      if (_TextureProgressEnd == null)                          _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + Rect.W' 0' 0' Rect.Z);                      else                          _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + Rect.W' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z);                      break;                    case EDirection.Left:                      _TextureProgressEnd = _TextureProgressLeft;                      if (_TextureProgressEnd == null)                          _RectProgressEnd = new SRectF(_RectProgressMid.X - Rect.H' Rect.Y' 0' 0' Rect.Z);                      else                          _RectProgressEnd = new SRectF(_RectProgressMid.X - Rect.H' Rect.Y' Rect.H * _TextureProgressBegin.OrigAspect' Rect.H' Rect.Z);                      break;                    case EDirection.Down:                      _TextureProgressEnd = _TextureProgressRight;                      if (_TextureProgressEnd == null)                          _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + _RectProgressMid.H' 0' 0' Rect.Z);                      else                          _RectProgressEnd = new SRectF(Rect.X' _RectProgressMid.Y + _RectProgressMid.H' Rect.W' Rect.W * _TextureProgressBegin.OrigAspect' Rect.Z);                      break;              }
Missing Default,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following switch statement is missing a default case: switch (ResizeAlign)                  {                      case EHAlignment.Top:                          y += step * 0.25f;                          break;                      case EHAlignment.Center:                          y += step * 0.50f;                          break;                      case EHAlignment.Bottom:                          y += step * 0.75f;                          break;                  }
Missing Default,VocaluxeLib.Menu,CText,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\CText.cs,_UpdateTextPosition,The following switch statement is missing a default case: switch (Align)              {                  case EAlignment.Center:                      x = X - bounds.Width / 2;                      break;                  case EAlignment.Right:                      x = X - bounds.Width;                      break;              }
Missing Default,VocaluxeLib.Menu.SongMenu,CSongMenuList,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuList.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Enter:                      if (CBase.Songs.IsInCategory())                      {                          if (_SelectionNr >= 0 && _PreviewNr != _SelectionNr)                          {                              _PreviewSelectedSong();                              keyEvent.Handled = true;                          }                      }                      else                      {                          _EnterCategory(_PreviewNr);                          keyEvent.Handled = true;                      }                      break;                    case Keys.Escape:                  case Keys.Back:                      if (CBase.Songs.IsInCategory() && catChangePossible)                      {                          _LeaveCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.PageUp:                      if (catChangePossible)                      {                          _PrevCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.PageDown:                      if (catChangePossible)                      {                          _NextCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Left:                      //Check for >0 so we do not allow selection of nothing (-1)                      if (_SelectionNr > 0 && moveAllowed)                      {                          _SelectionNr--;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Right:                      if (moveAllowed)                      {                          _SelectionNr++;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Up:                      if (keyEvent.ModShift)                      {                          if (catChangePossible)                          {                              _PrevCategory();                              keyEvent.Handled = true;                          }                      }                      else if (_SelectionNr >= 1 && moveAllowed)                      {                          _SelectionNr -= 1;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Down:                      if (keyEvent.ModShift)                      {                          if (catChangePossible)                          {                              _NextCategory();                              keyEvent.Handled = true;                          }                      }                      else if (moveAllowed)                      {                          _SelectionNr += 1;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;              }
Missing Default,VocaluxeLib.Menu.SongMenu,CSongMenuFactory,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuFactory.cs,CreateSongMenu,The following switch statement is missing a default case: switch (CBase.Config.GetSongMenuType())              {                  case ESongMenu.TR_CONFIG_LIST:                      return new CSongMenuList(theme' partyModeID);                        //case ESongMenu.TR_CONFIG_DREIDEL:                      //    _SongMenu = new CSongMenuDreidel();                      //    break;                  case ESongMenu.TR_CONFIG_TILE_BOARD:                      return new CSongMenuTileBoard(theme' partyModeID);                        //case ESongMenu.TR_CONFIG_BOOK:                      //    _SongMenu = new CSongMenuBook();                      //    break;              }
Missing Default,VocaluxeLib.Menu.SongMenu,CSongMenuTileBoard,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Menu\SongMenu\CSongMenuTileBoard.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Enter:                      if (CBase.Songs.IsInCategory())                      {                          if (_SelectionNr >= 0 && _PreviewNr != _SelectionNr)                          {                              _PreviewSelectedSong();                              keyEvent.Handled = true;                          }                      }                      else                      {                          _EnterCategory(_PreviewNr);                          keyEvent.Handled = true;                      }                      break;                    case Keys.Escape:                  case Keys.Back:                      if (CBase.Songs.IsInCategory() && catChangePossible)                      {                          _LeaveCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.PageUp:                      if (catChangePossible)                      {                          _PrevCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.PageDown:                      if (catChangePossible)                      {                          _NextCategory();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Left:                      //Check for >0 so we do not allow selection of nothing (-1)                      if (_SelectionNr > 0 && moveAllowed)                      {                          _SelectionNr--;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Right:                      if (moveAllowed)                      {                          _SelectionNr++;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Up:                      if (keyEvent.ModShift)                      {                          if (catChangePossible)                          {                              _PrevCategory();                              keyEvent.Handled = true;                          }                      }                      else if (_SelectionNr >= _NumW && moveAllowed)                      {                          _SelectionNr -= _NumW;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;                    case Keys.Down:                      if (keyEvent.ModShift)                      {                          if (catChangePossible)                          {                              _NextCategory();                              keyEvent.Handled = true;                          }                      }                      else if (moveAllowed)                      {                          _SelectionNr += _NumW;                          _AutoplayPreviewIfEnabled();                          keyEvent.Handled = true;                      }                      break;              }
Missing Default,VocaluxeLib.Songs,CSongLoader,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\VocaluxeLib\Songs\CSongLoader.cs,_UnifyLanguage,The following switch statement is missing a default case: switch (lang)                      {                          case "Englisch":                              lang = "English";                              break;                          case "Deutsch":                              lang = "German";                              break;                          case "Spanisch":                              lang = "Spanish";                              break;                      }
