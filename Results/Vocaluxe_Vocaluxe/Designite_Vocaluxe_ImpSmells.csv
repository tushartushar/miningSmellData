Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The method has 131 lines of code.
Long Method,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The method has 131 lines of code.
Long Method,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The method has 175 lines of code.
Long Method,Vocaluxe,CMainProgram,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_Run,The method has 147 lines of code.
Long Method,Vocaluxe,CMainProgram,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_CloseProgram,The method has 114 lines of code.
Long Method,Vocaluxe.Lib.Database,CCoverDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The method has 102 lines of code.
Long Method,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The method has 129 lines of code.
Long Method,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,Open,The method has 109 lines of code.
Long Method,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The method has 106 lines of code.
Long Method,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The method has 203 lines of code.
Long Method,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleMouse,The method has 187 lines of code.
Long Method,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The method has 214 lines of code.
Long Method,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The method has 203 lines of code.
Complex Method,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,Cyclomatic complexity of the method is 25
Complex Method,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetToTime,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,_GetNoteTimeBeforeBeat,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CLanguage,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_LoadProfiles,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_LoadAvatars,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,Cyclomatic complexity of the method is 28
Complex Method,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendProfileData,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe,CMainProgram,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_Run,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,Cyclomatic complexity of the method is 17
Complex Method,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,Open,Cyclomatic complexity of the method is 15
Complex Method,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,_DoFree,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,_DoFree,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Lib.Sound.Record,CDelayTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_GetFontIndex,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,_GetRealBounds,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CPopupScreenPlayerControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,HandleMouse,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,Cyclomatic complexity of the method is 17
Complex Method,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleMouse,Cyclomatic complexity of the method is 22
Complex Method,Vocaluxe.Screens,CScreenOptions,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,HandleMouse,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,HandleMouse,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,Cyclomatic complexity of the method is 16
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,Cyclomatic complexity of the method is 28
Complex Method,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_UpdatePartyModeOptions,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,Cyclomatic complexity of the method is 12
Long Parameter List,Vocaluxe.Base,CDataBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDataBase.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Base,CDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 5 parameters. Parameters: textureRef' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTextureReflection,The method has 7 parameters. Parameters: textureRef' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Base,CBdraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CBdraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' reflectionSpace' reflectionHeight' allMonitors
Long Parameter List,Vocaluxe.Base,CBfonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawText,The method has 7 parameters. Parameters: text' font' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base,CBfonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTextReflection,The method has 8 parameters. Parameters: text' font' x' y' z' color' reflectionSpace' reflectionHeight
Long Parameter List,Vocaluxe.Base,CBfonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawText,The method has 8 parameters. Parameters: text' font' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base,CBsongs,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,SortSongs,The method has 6 parameters. Parameters: sorting' tabs' ignoreArticles' searchString' duetOptions' playlistID
Long Parameter List,Vocaluxe.Base,CBdataBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Base,CKeys,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has 6 parameters. Parameters: alt' shift' ctrl' pressed' unicode' key
Long Parameter List,Vocaluxe.Base,CMouse,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has 10 parameters. Parameters: x' y' lb' ld' rb' wheel' lbh' rbh' mb' mbh
Long Parameter List,Vocaluxe.Base,CSongs,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,Sort,The method has 6 parameters. Parameters: sorting' tabs' ignoreArticles' searchString' duetOptions' playlistID
Long Parameter List,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,DoTask,The method has 5 parameters. Parameters: action' parameter1' parameter2' parameter3' parameter4
Long Parameter List,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,DoTaskWithoutReturn,The method has 5 parameters. Parameters: action' parameter1' parameter2' parameter3' parameter4
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The method has 12 parameters. Parameters: playerName' score' lineNr' date' medley' duet' shortSong' difficulty' artist' title' numPlayed' filePath
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The method has 10 parameters. Parameters: playerName' score' lineNr' date' medley' duet' shortSong' difficulty' dataBaseSongID' command
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The method has 6 parameters. Parameters: songID' artist' title' numPlayed' dateAdded' filePath
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The method has 5 parameters. Parameters: texture' rect' bounds' drawCoords' mirrored
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The method has 6 parameters. Parameters: texture' rect' drawCoords' mirrored' begin' end
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 5 parameters. Parameters: textureRef' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The method has 7 parameters. Parameters: textureRef' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The method has 5 parameters. Parameters: rot' rx1' rx2' ry1' ry2
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 5 parameters. Parameters: texture' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 5 parameters. Parameters: texture' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenStream,The method has 8 parameters. Parameters: stream' inputParameters' outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenInputStream,The method has 7 parameters. Parameters: stream' inputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenOutputStream,The method has 7 parameters. Parameters: stream' outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,_ProcessNewData,The method has 6 parameters. Parameters: input' output' frameCount' timeInfo' statusFlags' userData
Long Parameter List,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The method has 5 parameters. Parameters: freq' sampleRate' sampleCt' angle' data
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyph,The method has 7 parameters. Parameters: chr' fontHeight' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyph,The method has 8 parameters. Parameters: chr' fontHeight' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyphReflection,The method has 8 parameters. Parameters: chr' fontHeight' x' y' z' color' rspace' rheight
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 5 parameters. Parameters: text' font' x' y' z
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 7 parameters. Parameters: text' font' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawTextReflection,The method has 8 parameters. Parameters: text' font' x' y' z' color' rspace' rheight
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 8 parameters. Parameters: text' font' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,GetTextureAndRect,The method has 6 parameters. Parameters: fontHeight' x' y' z' texture' rect
Long Parameter List,Vocaluxe.Screens,CCreditName,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The method has 5 parameters. Parameters: image' imgDot' particle' particleOffsetX' particleOffsetY
Long Parameter List,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,_MyPaStreamCallback,The method has 6 parameters. Parameters: input' output' frameCount' timeInfo' statusFlags' userData
Long Identifier,Vocaluxe.Base,CSettings,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSettings.cs,,The length of the parameter DatabaseCreditsRessourcesVersion is 32.
Long Identifier,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,,The length of the parameter _StaticTimeLineExpandedHighlighted is 34.
Long Identifier,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _ButtonOptionsOpenSelectedItem is 30.
Long Identifier,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsPlaylistAdd is 30.
Long Identifier,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsPlaylistOpen is 31.
Long Identifier,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsNumMedleySongs is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlideBackgroundMusicVolume is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlideBackgroundMusicSource is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlidePreviewMusicVolume is 30.
Long Identifier,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,,The length of the parameter _SelectSlideVideosToBackground is 30.
Long Identifier,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,,The length of the parameter _SelectSlideWebcamCapabilities is 30.
Long Statement,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Update,The length of the statement  "            if (_PreviewStartHelperTask != null && ( _PreviewPlayer.Length > 0 || _PreviewStartWaitCounter++ >= _PreviewStartWaitMaxTries)) " is 127.
Long Statement,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Update,The length of the statement  "                    if (_PreviewStartHelperTask != null && (_PreviewPlayer.Length > 0 || _PreviewStartWaitCounter++ >= _PreviewStartWaitMaxTries)) " is 126.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawBackground,The length of the statement  "            g.DrawImage(bmpBackground' bmpBackground.GetRect()' 0' 0' bmpBackground.Width' bmpBackground.Height' GraphicsUnit.Pixel' ia); " is 125.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The length of the statement  "                    string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text); " is 123.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                diffWith += Math.Abs(requestedWidth - _GetWidth(elements' splitEl + 1' splitEl2)) + Math.Abs(requestedWidth - _GetWidth(elements' splitEl2 + 1)); " is 145.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                diffWithout += Math.Abs(requestedWidth - _GetWidth(elements' splitEl' splitEl3)) + Math.Abs(requestedWidth - _GetWidth(elements' splitEl3 + 1)); " is 144.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                    return startElement == 0 ? splitEl : splitEl - 1; //Both are alphanumeric' favor longer first lines but shorter middle lines " is 124.
Long Statement,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The length of the statement  "                if ((Array.IndexOf(_SplitCharAfter' text[i]) >= 0 && (Char.IsLetterOrDigit(text' i + 1) || Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)) || " is 145.
Long Statement,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The length of the statement  "                    CLog.LogError("There were some warnings or errors loading the config file. Some values might have been reset to their defaults."); " is 130.
Long Statement,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The length of the statement  "                    return "Fade player-information with lyrics and notebars: " + CHelper.ListStrings(Enum.GetNames(typeof(EFadePlayerInfo))); " is 122.
Long Statement,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The length of the statement  "                    return "Threshold of songs for that covers will not longer be included in get-all-songs-requests (e.g. song list) (default: 70) [-1..65535] -1 => always deliver covers"; " is 169.
Long Statement,Vocaluxe.Base,CCover,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,GenerateCover,The length of the statement  "                                          ? null : _CoverGenerators[type].GetCover(text' firstSong != null ? Path.Combine(firstSong.Folder' firstSong.CoverFileName) : null); " is 131.
Long Statement,Vocaluxe.Base,CCover,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,GenerateCover,The length of the statement  "                        coverBmp = _CoverGenerators[ECoverGeneratorType.Default].GetCover(text' firstSong != null ? Path.Combine(firstSong.Folder' firstSong.CoverFileName) : null); " is 156.
Long Statement,Vocaluxe.Base,CCover,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,_LoadCovers,The length of the statement  "                    CBase.Log.LogError("Covertheme \"" + coverTheme.Info.Name + "\" does not include a cover file named \"" + _NoCoverName + "\" and cannot be used!"' true' true); " is 159.
Long Statement,Vocaluxe.Base,CCursor,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCursor.cs,UpdatePosition,The length of the statement  "                //Use that point so cursor is deactivated only when there is no move by the diff value from this position the the given offTime " is 127.
Long Statement,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The length of the statement  "                        //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking " is 125.
Long Statement,Vocaluxe.Base,CLanguage,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_LoadLanguageFile,The length of the statement  "            var lang = new SLanguage {FilePath = Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameLanguages' fileName)' PartyModeTexts = new List<SPartyLanguage>()}; " is 162.
Long Statement,Vocaluxe.Base,CLanguage,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetPartyModeTexts,The length of the statement  "                _Languages[language].PartyModeTexts.Where(partyLanguage => partyLanguage.PartyModeID == partyModeID).Select(partyLanguage => partyLanguage.Texts).FirstOrDefault(); " is 163.
Long Statement,Vocaluxe.Base,CParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,Init,The length of the statement  "                    Info = new SPartyModeInfos {Author = "Vocaluxe Team"' Description = "Normal game"' Name = "Normal"' TargetAudience = "Just a normal game for everyone"}' " is 152.
Long Statement,Vocaluxe.Base,CParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,The length of the statement  "                    throw new Exception("Wrong PartyModeSystemVersion " + pm.PartyModeSystemVersion + " expected: " + _PartyModeSystemVersion); " is 123.
Long Statement,Vocaluxe.Base,CParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,The length of the statement  "            object instance = output.CreateInstance(typeof(IPartyMode).Namespace + "." + pm.Info.Folder + "." + pm.Info.PartyModeFile' false' " is 129.
Long Statement,Vocaluxe.Base,CParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_CompileFiles,The length of the statement  "                        CLog.LogError("Error Compiling Source (" + CHelper.ListStrings(files) + "): " + e.ErrorText + " in '" + e.FileName + "' (" + e.Line + ")"); " is 139.
Long Statement,Vocaluxe.Base,CSongCategorizer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_CreateCategories,The length of the statement  "                    if (lastCategory == null || String.Compare(songPointer.SortString' lastCategory.Name' StringComparison.CurrentCultureIgnoreCase) != 0) " is 134.
Long Statement,Vocaluxe.Base,CSongCategorizer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The length of the statement  "                        songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString(); " is 152.
Long Statement,Vocaluxe.Base,CSongCategorizer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_FillCategories,The length of the statement  "                    cat.CoverTextureSmall = CCover.GenerateCover(cat.Name' CCover._SongSortingToType(CSongs.Sorter.SongSorting)' cat.GetSong(0)); " is 125.
Long Statement,Vocaluxe.Base,CSongFilter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongFilter.cs,_FilterSongs,The length of the statement  "                        string search = song.Title.ToUpper() + " " + song.Artist.ToUpper() + " " + song.FolderName.ToUpper() + " " + song.FileName.ToUpper(); " is 133.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                    res = String.Compare(CSongs.Songs[s1.SongID].ArtistSorting' CSongs.Songs[s2.SongID].ArtistSorting' StringComparison.CurrentCultureIgnoreCase); " is 142.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                    return res != 0 ? res : String.Compare(CSongs.Songs[s1.SongID].TitleSorting' CSongs.Songs[s2.SongID].TitleSorting' StringComparison.CurrentCultureIgnoreCase); " is 158.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                res = String.Compare(CSongs.Songs[s1.SongID].Artist' CSongs.Songs[s2.SongID].Artist' StringComparison.CurrentCultureIgnoreCase); " is 128.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                return res != 0 ? res : String.Compare(CSongs.Songs[s1.SongID].Title' CSongs.Songs[s2.SongID].Title' StringComparison.CurrentCultureIgnoreCase); " is 144.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldTitle,The length of the statement  "                           ? String.Compare(CSongs.Songs[s1.SongID].TitleSorting' CSongs.Songs[s2.SongID].TitleSorting' StringComparison.CurrentCultureIgnoreCase) : " is 137.
Long Statement,Vocaluxe.Base,CSongSorter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldTitle,The length of the statement  "                           String.Compare(CSongs.Songs[s1.SongID].Title' CSongs.Songs[s2.SongID].Title' StringComparison.CurrentCultureIgnoreCase); " is 120.
Long Statement,Vocaluxe.Base,CMouse,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,MouseMove,The length of the statement  "            _Add(e.X' e.Y' false' false' false' 0' e.Button == MouseButtons.Left' e.Button == MouseButtons.Right' false' e.Button == MouseButtons.Middle); " is 142.
Long Statement,Vocaluxe.Base,CSettings,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSettings.cs,GetFullVersionText,The length of the statement  "            return ((AssemblyTitleAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute)' false).First()).Title; " is 138.
Long Statement,Vocaluxe.Base,CSongs,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,_LoadCoversAsync,The length of the statement  "            _CoverLoaderThread = new Thread(_LoadCovers) {Name = "CoverLoader"' Priority = ThreadPriority.BelowNormal' IsBackground = true}; " is 128.
Long Statement,Vocaluxe.Base,CWebcam,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CWebcam.cs,Init,The length of the statement  "            _Webcam.Select(CConfig.Config.Video.WebcamConfig.HasValue ? CConfig.Config.Video.WebcamConfig.Value : new SWebcamConfig()); " is 123.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,The length of the statement  "                if (NextScreen.CurrentMusicType != EMusicType.Background && NextScreen.CurrentMusicType != EMusicType.Preview && NextScreen.CurrentMusicType != EMusicType.BackgroundPreview) " is 173.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_FinishScreenFading,The length of the statement  "            if (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.Preview || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) " is 182.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_FinishScreenFading,The length of the statement  "                CBackgroundMusic.IsPlayingPreview = CurrentScreen.CurrentMusicType == EMusicType.Preview || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview; " is 155.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "            if (popupVolumeControlAllowed && (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_OFF) " is 236.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    if (_CurrentPopupScreen == EPopupScreens.NoPopup && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_ON) " is 127.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    CConfig.Config.Graphics.FullScreen = (CConfig.Config.Graphics.FullScreen == EOffOn.TR_CONFIG_ON) ? EOffOn.TR_CONFIG_OFF : EOffOn.TR_CONFIG_ON; " is 142.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                bool isOverPopupPlayerControl = CHelper.IsInBounds(_PopupScreens[(int)EPopupScreens.PopupPlayerControl].ScreenArea' mouseEvent); " is 128.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    if (_CurrentPopupScreen == EPopupScreens.NoPopup && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_ON) " is 127.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                bool isOverPopupVolumeControl = CHelper.IsInBounds(_PopupScreens[(int)EPopupScreens.PopupVolumeControl].ScreenArea' mouseEvent); " is 128.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputThemeEditor,The length of the statement  "                    CConfig.Config.Graphics.FullScreen = (CConfig.Config.Graphics.FullScreen == EOffOn.TR_CONFIG_ON) ? EOffOn.TR_CONFIG_OFF : EOffOn.TR_CONFIG_ON; " is 142.
Long Statement,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_Update,The length of the statement  "            if (_VolumePopupTimer.IsRunning && _VolumePopupTimer.ElapsedMilliseconds >= 1500 && _CurrentPopupScreen == EPopupScreens.PopupVolumeControl) " is 140.
Long Statement,Vocaluxe.Base.Server,CSessionControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\SessionControl.cs,_CheckForUserTimeouts,The length of the statement  "            var sessionIdsToRemove = _ActiveSessions.Where(pair => (DateTime.Now-pair.Value.LastSeen).TotalMilliseconds > _UserTimeout) " is 123.
Long Statement,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,_RegisterUrlAndCert,The length of the statement  "                Arguments = AppDomain.CurrentDomain.FriendlyName + " " + port + " " + (_Encrypted ? "true" : "false") + (reserve ? " true" : "")' " is 129.
Long Statement,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,GetAllSongs,The length of the statement  "            bool sendCovers = CConfig.Config.Server.SongCountCoverThreshold == -1 || CConfig.Config.Server.SongCountCoverThreshold > CSongs.Songs.Count; " is 140.
Long Statement,Vocaluxe.Base.ThemeSystem,CPartyTheme,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_Load,The length of the statement  "            return CFonts.LoadThemeFonts(_Data.Fonts' Path.Combine(_Folder' ".."' CSettings.FolderNamePartyModeFonts)' Name' PartyModeID); " is 126.
Long Statement,Vocaluxe.Base.ThemeSystem,CTheme,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CTheme.cs,Init,The length of the statement  "                    string errorMsg = _Data.ThemeSystemVersion < _ThemeSystemVersion ? "the file ist outdated!" : "the file is for newer program versions!"; " is 136.
Long Statement,Vocaluxe.Base.ThemeSystem,CSkin,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CSkin.cs,Init,The length of the statement  "                    string errorMsg = _Data.SkinSystemVersion < _SkinSystemVersion ? "the file ist outdated!" : "the file is for newer program versions!"; " is 134.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,Init,The length of the statement  "            return CSkin.InitRequiredElements() && ReadThemesFromFolder(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameThemes)' -1); " is 131.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,Load,The length of the statement  "            CTheme theme = _Themes.FirstOrDefault(th => th is CBaseTheme && th.Name == CConfig.Config.Theme.Theme) ?? _Themes.FirstOrDefault(th => th is CBaseTheme); " is 153.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,_LogMissingElement,The length of the statement  "            CLog.LogError("Skin " + CurrentThemes[partyModeID].CurrentSkin + " is missing the " + elType + " \"" + elName + "\"! Expect visual problems!"); " is 143.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,_IsProgramInstalled,The length of the statement  "            return _CheckUninstallKey(name' baseKey + uninstallKey) || (_KeyExists(baseKey64) && _CheckUninstallKey(name' baseKey64 + uninstallKey)); " is 137.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,_EnsureDataFolderExists,The length of the statement  "                DirectoryInfo defaultProfileDir = new DirectoryInfo(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameProfiles)); " is 121.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2010 Redistributables are missing. Please install them first. \r\nDownload(x86): https://www.microsoft.com/de-de/download/details.aspx?id=5555 \r\nDownload(x64): https://www.microsoft.com/de-de/download/details.aspx?id=14632"' " is 232.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2012 Redistributables are missing. Please install them first.\r\nDownload: http://www.microsoft.com/de-de/download/details.aspx?id=30679"' " is 144.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2008 Redistributables are missing. Portaudio might not be working.\r\nDownload: http://www.microsoft.com/de-de/download/details.aspx?id=29"); " is 147.
Long Statement,Vocaluxe,CProgrammHelper,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2010 and 2008 Redistributables are missing. Please install them first. VC++ 2008 is preferred as Portaudio doesn't work with VC++ 2010.\r\nDownload(2008): http://www.microsoft.com/de-de/download/details.aspx?id=29 \r\nDownload(2010): http://www.microsoft.com/de-de/download/details.aspx?id=5555"' " is 302.
Long Statement,Vocaluxe.Lib.Database,CCoverDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The length of the statement  "                size = CHelper.FitInBounds(new SRectF(0' 0' maxSize' maxSize' 0)' (float)size.Width / size.Height' EAspect.LetterBox).SizeI; " is 124.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The length of the statement  "                    return _AddScore(CProfiles.GetPlayerName(player.ProfileID)' (int)Math.Round(player.Points)' player.VoiceNr' player.DateTicks' medley' " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                command.CommandText = "SELECT id FROM Scores WHERE SongID = @SongID AND PlayerName = @PlayerName AND Score = @Score AND " + " is 123.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                                      "LineNr = @LineNr AND Date = @Date AND Medley = @Medley AND Duet = @Duet AND ShortSong = @ShortSong AND Difficulty = @Difficulty"; " is 130.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                command.CommandText = "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty) " + " is 124.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The length of the statement  "                            "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " + " is 121.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The length of the statement  "                            "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " + " is 143.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDB,The length of the statement  "                    command.CommandText = "CREATE TABLE IF NOT EXISTS Version ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' Value INTEGER NOT NULL);"; " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDB,The length of the statement  "                                          "SongID INTEGER NOT NULL' PlayerName TEXT NOT NULL' Score INTEGER NOT NULL' LineNr INTEGER NOT NULL' Date BIGINT NOT NULL' " + " is 126.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDBV1,The length of the statement  "                    command.CommandText = "CREATE TABLE IF NOT EXISTS Version ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' Value INTEGER NOT NULL);"; " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDBV1,The length of the statement  "                                          "SongID INTEGER NOT NULL' PlayerName TEXT NOT NULL' Score INTEGER NOT NULL' LineNr INTEGER NOT NULL' Date BIGINT NOT NULL' " + " is 126.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The length of the statement  "                        "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores"; " is 166.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The length of the statement  "                                              ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores" " is 166.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The length of the statement  "                                              : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores"; " is 168.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The length of the statement  "                    CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")"); " is 122.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The length of the statement  "                    cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores"; " is 122.
Long Statement,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The length of the statement  "                dc.Ty2 += (newrect.H - height) / newrect.H; // Adjust so not all of the start of the texture is drawn (mirrored--> Ty1>Ty2) " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The length of the statement  "                if (_BorderLeft != CConfig.Config.Graphics.BorderLeft || _BorderRight != CConfig.Config.Graphics.BorderRight || _BorderTop != CConfig.Config.Graphics.BorderTop || " is 162.
Long Statement,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,EnqueueTexture,The length of the statement  "            // 3) a) AddTexture(fileA) || b) EnqueueTexture(fileA) with a)getFromCache + b)getFromCache + a)addToCache + b)addToCache --> Only keep one copy " is 144.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DoResize,The length of the statement  "            if (_H == _Form.ClientSize.Height && _W == _Form.ClientSize.Width && CConfig.Config.Graphics.ScreenAlignment == _CurrentAlignment) " is 130.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The length of the statement  "            _VertexBuffer = new VertexBuffer(_Device' CSettings.VertexBufferElements * (4 * Marshal.SizeOf(typeof(STexturedColoredVertex)))' Usage.WriteOnly | Usage.Dynamic' " is 161.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_OnAfterDraw,The length of the statement  "                //After a reset Init() needs to be called because all data in the Direct3D default pool are lost and need to be recreated " is 121.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The length of the statement  "            //The vertex buffer locks are slow actions' its better to lock once per frame and write all vertices to the buffer at once " is 122.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The length of the statement  "            DataStream stream = _VertexBuffer.Lock(0' _Vertices.Count * Marshal.SizeOf(typeof(STexturedColoredVertex))' LockFlags.Discard); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,CopyScreen,The length of the statement  "            Surface.FromSurface(textureSurface' backbufferSurface' Filter.Default' 0' new Rectangle(0' 0' _W' _H)' new Rectangle(0' 0' _W' _H)); " is 132.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,CopyScreen,The length of the statement  "            if (!_GetTexture(textureRef' out texture) || texture.DataSize.Width != GetScreenWidth() || texture.DataSize.Height != GetScreenHeight()) " is 136.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CreateTexture,The length of the statement  "            return new CD3DTexture(_Device' dataSize' _CheckForNextPowerOf2(dataSize.Width)' _CheckForNextPowerOf2(dataSize.Height)); " is 121.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The length of the statement  "            Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0)); " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_DrawBuffer,The length of the statement  "            frontBuffer.DrawImage(_Backbuffer' new Rectangle(x' y' w' h)' new Rectangle(0' 0' _Backbuffer.Width' _Backbuffer.Height)' GraphicsUnit.Pixel); " is 142.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CopyScreen,The length of the statement  "            if (!_TextureExists(texture) || texture.OrigSize.Width != GetScreenWidth() || texture.OrigSize.Height != GetScreenHeight()) " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,UpdateTexture,The length of the statement  "                BitmapData bmpData = _Bitmaps[texture.ID].LockBits(new Rectangle(0' 0' _Bitmaps[texture.ID].Width' _Bitmaps[texture.ID].Height)' " is 128.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_ColorizeBitmap,The length of the statement  "                var cm = new ColorMatrix { Matrix33 = color.A' Matrix00 = color.R' Matrix11 = color.G' Matrix22 = color.B' Matrix44 = 1 }; " is 122.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_AdjustNewBorders,The length of the statement  "            GL.Ortho(-CConfig.Config.Graphics.BorderLeft' CConfig.Config.Graphics.BorderRight + CSettings.RenderW * CConfig.Config.Graphics.NumScreens' CConfig.Config.Graphics.BorderBottom + CSettings.RenderH' " is 197.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,MakeScreenShot,The length of the statement  "                BitmapData bmpData = screen.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 150.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,CopyScreen,The length of the statement  "            if (!_GetTexture(textureRef' out texture) || texture.DataSize.Width != GetScreenWidth() || texture.DataSize.Height != GetScreenHeight()) " is 136.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CreateTexture,The length of the statement  "            COGLTexture texture = new COGLTexture(GL.GenTexture()' dataSize' _CheckForNextPowerOf2(dataSize.Width)' _CheckForNextPowerOf2(dataSize.Height)); " is 144.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_ClearTexture,The length of the statement  "            GL.FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget.Framebuffer' OpenTK.Graphics.OpenGL.FramebufferAttachment.ColorAttachment0' TextureTarget.Texture2D' " is 165.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_WriteDataToTexture,The length of the statement  "            GL.TexSubImage2D(TextureTarget.Texture2D' 0' 0' 0' texture.DataSize.Width' texture.DataSize.Height' PixelFormat.Bgra' PixelType.UnsignedByte' data); " is 148.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_WriteDataToTexture,The length of the statement  "            GL.TexSubImage2D(TextureTarget.Texture2D' 0' 0' 0' texture.DataSize.Width' texture.DataSize.Height' PixelFormat.Bgra' PixelType.UnsignedByte' data); " is 148.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            bool lb = (buttonStates.Buttons.LeftShoulder == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.LeftShoulder == OpenTK.Input.ButtonState.Released); " is 160.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            bool rb = (buttonStates.Buttons.RightShoulder == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.RightShoulder == OpenTK.Input.ButtonState.Released); " is 162.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            lb |= (buttonStates.Buttons.RightStick == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.RightStick == OpenTK.Input.ButtonState.Released); " is 152.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released) " is 143.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released) " is 135.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released) " is 135.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released) " is 141.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "                var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f)))); " is 141.
Long Statement,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "                var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f)))); " is 148.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenStream,The length of the statement  "                PortAudio.PaError res = PortAudio.Pa_OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' " is 160.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenInputStream,The length of the statement  "                            OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData)); " is 135.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenOutputStream,The length of the statement  "                            OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData)); " is 135.
Long Statement,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Update,The length of the statement  "                //lock() only protects from different threads not from the same' so we use StreamsToDelete to not modify _Streams while iterating it " is 132.
Long Statement,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudio,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudio.cs,Init,The length of the statement  "                    CLog.LogError("Gstreamer not found! Make sure you installed it correctly and if it set the environment variable '" + varName + "'!"' true); " is 139.
Long Statement,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The length of the statement  "            _Latency = CConfig.Config.Sound.AudioLatency / 1000f + (float)PortAudioSharp.PortAudio.Pa_GetStreamInfo(_Stream).outputLatency; " is 127.
Long Statement,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The length of the statement  "                        string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as "; " is 131.
Long Statement,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The length of the statement  "                float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50; " is 121.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,GetTextBounds,The length of the statement  "            return new RectangleF(text.X' text.Y' GetTextWidth(text.TranslatedText' text.CalculatedFont)' GetTextHeight(text.TranslatedText' text.CalculatedFont)); " is 151.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadDefaultFonts,The length of the statement  "                defaultFonts = xml.Deserialize<SDefaultFonts>(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameFonts' CSettings.FileNameFonts)); " is 137.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Normal = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileNormal)' EStyle.Normal' fontFamily.Outline' fontFamily.OutlineColor); " is 163.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Italic = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileItalic)' EStyle.Italic' fontFamily.Outline' fontFamily.OutlineColor); " is 163.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Bold = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileBold)' EStyle.Bold' fontFamily.Outline' fontFamily.OutlineColor); " is 157.
Long Statement,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.BoldItalic = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileBoldItalic)' EStyle.BoldItalic' fontFamily.Outline' " is 149.
Long Statement,Vocaluxe.GameModes,CGameModeShort,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\GameModes\CGameModes.cs,_PrepareSong,The length of the statement  "            var newSong = new CSong(song) {Finish = CGame.GetTimeFromBeats(song.ShortEnd.EndBeat' song.BPM) + CSettings.DefaultMedleyFadeOutTime + song.Gap}; " is 145.
Long Statement,Vocaluxe.GameModes,CGameModeMedley,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\GameModes\CGameModes.cs,_PrepareSong,The length of the statement  "            var newSong = new CSong(song) {Start = CGame.GetTimeFromBeats(song.Medley.StartBeat' song.BPM) - song.Medley.FadeInTime + song.Gap}; " is 132.
Long Statement,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The length of the statement  "                var notification = new NotificationPosition {Offset = _BufferPortionCount - 1 + (_BufferPortionSize * i)' Event = new AutoResetEvent(false)}; " is 141.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,Skip,The length of the statement  "                _LastShownTime = time - _FrameDuration; //Set this to time to detect overflow of time in FindFrame but subtract FrameDuration so GetFrame will get the first frame " is 162.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_FindFrame,The length of the statement  "                    //First case is if we have no loop or we did not wrap or frame is before last one (last is the case if frame is already one of the new iterations' e.g. Last=19 now=1 frame=2) " is 174.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_DropWithSkip,The length of the statement  "            // Add 1 dropped frame per 16 frames (Power of 2 -> Div is fast) as skipping takes time too and we don't want to skip again " is 123.
Long Statement,Vocaluxe.Screens,CPopupScreenPlayerControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,Init,The length of the statement  "            _ThemeButtons = new string[] {_ButtonPlay' _ButtonPause' _ButtonPrevious' _ButtonNext' _ButtonRepeat' _ButtonShowVideo' _ButtonSing' _ButtonToBackgroundVideo}; " is 159.
Long Statement,Vocaluxe.Screens,CPopupScreenVolumeControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The length of the statement  "            string paragraph = "Inspired by the achievements of UltraStar Deluxe and its variants and pursuing the goal of making " + " is 121.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The length of the statement  "            paragraph = "Go ahead and grab your mics' crank up your stereo' warm up your voice and get ready to sing to the best " + " is 120.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The length of the statement  "                                 new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2)); " is 131.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            CCreditTranslation italian = _AddNewTranslation("Italian"' new List<string> { "giuseppep"' "LFactory"' "yogotosleepnow" }); " is 123.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            CCreditTranslation spanish = _AddNewTranslation("Spanish"' new List<string> { "Pantero03"' "RubenDjOn"' "TeLiX"' "karv" }); " is 123.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            _Translations = new List<CCreditTranslation> { intro' asturian' czech' dutch' french' hungarian' italian' spanish' swedish' turkish }; " is 134.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The length of the statement  "            CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language)); " is 172.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The length of the statement  "                text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t)); " is 141.
Long Statement,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The length of the statement  "                                _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenHighscore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenHighscore.cs,_AddScoresToDB,The length of the statement  "                    if (players[p].Points > CSettings.MinScoreForDB && players[p].SongFinished && !CProfiles.IsGuestProfile(players[p].ProfileID)) " is 126.
Long Statement,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,UpdateGame,The length of the statement  "                if (CConfig.Config.Video.VideoBackgrounds == EOffOn.TR_CONFIG_ON || CConfig.Config.Video.VideosToBackground == EOffOn.TR_CONFIG_ON) " is 131.
Long Statement,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The length of the statement  "            else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART) " is 143.
Long Statement,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckMics,The length of the statement  "                    _Texts[_TextWarningMics].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_MICS_SG").Replace("%v"' playerWithoutMicro[0].ToString()); " is 134.
Long Statement,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,The length of the statement  "                    _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_PL").Replace("%v"' playerNums); " is 120.
Long Statement,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,The length of the statement  "                    _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_SG").Replace("%v"' playerWithoutProfile[0].ToString()); " is 144.
Long Statement,Vocaluxe.Screens,CScreenOptions,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,Init,The length of the statement  "            _ThemeButtons = new string[] {_ButtonOptionsGame' _ButtonOptionsSound' _ButtonOptionsRecord' _ButtonOptionsVideo' _ButtonOptionsLyrics' _ButtonOptionsTheme}; " is 157.
Long Statement,Vocaluxe.Screens,CScreenOptionsGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsGame.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideLanguage' _SelectSlideDebugLevel' _SelectSlideSongMenu' _SelectSlideSongSorting' _SelectSlideTabs' _SelectSlideTimerMode' _SelectSlideHighscoreStyle}; " is 197.
Long Statement,Vocaluxe.Screens,CScreenParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,Init,The length of the statement  "            _ThemeTexts = new string[] {_TextDescription' _TextTargetAudience' _TextNumTeams' _TextNumPlayers' _TextAuthor' _TextVersion' _TextError}; " is 138.
Long Statement,Vocaluxe.Screens,CScreenParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,_UpdateSelection,The length of the statement  "                                              ? "TR_SCREENPARTY_ERROR_MICS" : CLanguage.Translate("TR_SCREENPARTY_ERROR_MIC_NUM").Replace("%d"' extInfo.MinMics.ToString()); " is 126.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,Init,The length of the statement  "                {_ButtonPlayerName' _ButtonExit' _ButtonSave' _ButtonNew' _ButtonDelete' _ButtonWebcam' _ButtonSaveSnapshot' _ButtonDiscardSnapshot' _ButtonTakeSnapshot}; " is 154.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideProfiles' _SelectSlideDifficulty' _SelectSlideAvatars' _SelectSlideUserRole' _SelectSlideActive}; " is 144.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _Buttons[_ButtonPlayerName].Text.Text = CProfiles.GetPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 128.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideDifficulty].Selection = (int)CProfiles.GetDifficulty(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 143.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideUserRole].Selection = (int)CProfiles.GetUserRoleProfile(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 146.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideActive].Selection = (int)CProfiles.GetActive(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,_LoadProfiles,The length of the statement  "                    _SelectSlides[_SelectSlideProfiles].SelectedTag = _SelectSlideGuids.FirstOrDefault(x => x.Value.Equals(selectedProfileID)).Key; " is 127.
Long Statement,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,_LoadAvatars,The length of the statement  "                _SelectSlides[_SelectSlideAvatars].SelectedTag = CProfiles.GetAvatarID(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,Init,The length of the statement  "            _ThemeScreenSettings = new string[] {_ScreenSettingShortScore' _ScreenSettingShortRating' _ScreenSettingShortDifficulty}; " is 121.
Long Statement,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextScores[p' CGame.NumPlayers - 1]].Text = ((int)Math.Round(players[p].Points)).ToString("0000") + " " + CLanguage.Translate("TR_SCREENSCORE_POINTS"); " is 159.
Long Statement,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextDifficulty[p' CGame.NumPlayers - 1]].Text = CLanguage.Translate(CProfiles.GetDifficulty(players[p].ProfileID).ToString()); " is 134.
Long Statement,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextRatings[p' CGame.NumPlayers - 1]].Text = CLanguage.Translate(_GetRating((int)Math.Round(players[p].Points))); " is 121.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,OnShow,The length of the statement  "                _Texts[_PlayerTextScore[p]].Color = new SColorF(CBase.Themes.GetPlayerColor(p + 1)' _Texts[_PlayerTextScore[p]].Color.A); " is 121.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The length of the statement  "                        _RemainingTimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM); " is 144.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The length of the statement  "                        _RemainingTimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM); " is 148.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The length of the statement  "            else if (!timer.IsRunning && timer.ElapsedMilliseconds == 0 && _Lyrics[_LyricMainDuet].Alpha > 0 && CGame.GetSong().IsDuet) " is 123.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The length of the statement  "            else if (!_TimerDuetText2.IsRunning && _TimerDuetText2.ElapsedMilliseconds == 0 && _Lyrics[_LyricMain].Alpha > 0 && CGame.GetSong().IsDuet) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The length of the statement  "                    CDraw.DrawTexture(_Statics[_StaticTimeLine].Texture' _Statics[_StaticTimeLine].Rect' new SColorF(1' 1' 1' 1)' _TimeLineRect); " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The length of the statement  "                        CDraw.DrawTexture(_TimeRects[i].Rect.Texture' _Statics[_StaticTimeLine].Rect' _TimeRects[i].Rect.Color' _TimeRects[i].Rect.Rect); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The length of the statement  "            if (_TimeToFirstNote > CSettings.LyricHelperMinTime && _RemainingTimeToFirstNote > 0f && _RemainingTimeToFirstNote < CSettings.LyricHelperEnableTime) " is 149.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The length of the statement  "                if (_TimeToFirstNoteDuet > CSettings.LyricHelperMinTime && _RemainingTimeToFirstNoteDuet > 0f && _RemainingTimeToFirstNoteDuet < CSettings.LyricHelperEnableTime) " is 161.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The length of the statement  "            _CurrentStream = CSound.Load(song.GetMP3()' false' true' CConfig.Config.Sound.KaraokeEffect == EOffOn.TR_CONFIG_ON ? EAudioEffect.Karaoke : EAudioEffect.None); " is 159.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The length of the statement  "                _Statics[_PlayerStaticAvatar[player]].Visible = (CConfig.Config.Theme.PlayerInfo == EPlayerInfo.TR_CONFIG_PLAYERINFO_BOTH || " is 124.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The length of the statement  "                else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime && " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The length of the statement  "                else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime) " is 124.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_InitiateProgressBars,The length of the statement  "                            _ProgressBars["ProgressBarRatingS" + (screen + 1) + target] = GetNewProgressBar(_ProgressBars["ProgressBarRating" + target]); " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_FindCurrentLine,The length of the statement  "            //We are only interested in the last matching line' so either do not check further after line[j].StartBeat > _CurrentBeat or go backwards! " is 138.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideOptionsMode' _SelectSlideOptionsPlaylistAdd' _SelectSlideOptionsPlaylistOpen' _SelectSlideOptionsNumMedleySongs}; " is 160.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The length of the statement  "                if (!_DragAndDropCover.Visible && _Playlist.Visible && CSongs.NumSongsVisible > 0 && _SongMenu.GetSelectedSongNr() != -1) " is 121.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,OnShow,The length of the statement  "            CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' _Sso.Sorting.SearchString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 170.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,UpdateGame,The length of the statement  "                    selectionText = CSongs.VisibleSongs[song].Artist + " - " + CSongs.VisibleSongs[song].Title + "   ( "+(song+1)+" / "+CSongs.NumSongsVisible+" )"; " is 144.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_UpdatePartyModeOptions,The length of the statement  "                CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' _Sso.Sorting.SearchString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 170.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                //Flamefire: What? We only sorted by one tag' sorting by multiple tags (e.g. Album) will be by e.g. the first entry. That can be used here too as otherwhise it will confuse users because it jumps randomly " is 204.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 138.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                if (curSelected >= 0 && curSelected < ct - 1 && categories[curSelected].Name.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                int visibleID = _FindIndex(categories' start' element => element.Name.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 137.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_ApplyNewSearchFilter,The length of the statement  "            CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' newFilterString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 160.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_OpenAndAddPlaylistAction,The length of the statement  "                _SelectSlides[_SelectSlideOptionsPlaylistAdd].AddValue(CPlaylists.GetName(_Playlist.ActivePlaylistID)' _Playlist.ActivePlaylistID); " is 131.
Long Statement,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_OpenAndAddPlaylistAction,The length of the statement  "                _SelectSlides[_SelectSlideOptionsPlaylistOpen].AddValue(CPlaylists.GetName(_Playlist.ActivePlaylistID)' _Playlist.ActivePlaylistID); " is 132.
Long Statement,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1); " is 123.
Long Statement,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1); " is 120.
Long Statement,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1); " is 121.
Long Statement,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1); " is 122.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,Init,The length of the statement  "                {_SelectSlideBackgroundMusic' _SelectSlideBackgroundMusicVolume' _SelectSlideBackgroundMusicSource' _SelectSlidePreviewMusicVolume' _SelectSlideGameMusicVolume' _SelectSlideKaraokeEffect}; " is 188.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "            _SelectSlides[_SelectSlideBackgroundMusicSource].SetValues<EBackgroundMusicSource>((int)CConfig.Config.Sound.BackgroundMusicSource); " is 132.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The length of the statement  "            CConfig.Config.Sound.BackgroundMusicSource = (EBackgroundMusicSource)_SelectSlides[_SelectSlideBackgroundMusicSource].Selection; " is 128.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,Init,The length of the statement  "                    _SelectSlideVideoBackgrounds' _SelectSlideVideoPreview' _SelectSlideVideosInSongs' _SelectSlideVideosToBackground' _SelectSlideWebcamDevices' " is 141.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,_SaveConfig,The length of the statement  "            CBackgroundMusic.VideoEnabled = CConfig.Config.Video.VideoBackgrounds == EOffOn.TR_CONFIG_ON && CConfig.Config.Video.VideosToBackground == EOffOn.TR_CONFIG_ON; " is 159.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,_GetFirstConfiguredWebcamDevice,The length of the statement  "            SWebcamConfig curConfig = CConfig.Config.Video.WebcamConfig.HasValue ? CConfig.Config.Video.WebcamConfig.Value : new SWebcamConfig(); " is 133.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] }; " is 265.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay }; " is 256.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]}; " is 159.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,UpdateGame,The length of the statement  "                    _Texts[_TextDelayPlayer[p]].Text = (_DelayTest.Delays[p] == 0) ? "??? ms" : _DelayTest.Delays[p].ToString("000") + " ms"; " is 121.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_GetFirstConfiguredRecordDevice,The length of the statement  "                if (_Devices[i].Name == CConfig.Config.Record.MicConfig[0].DeviceName && _Devices[i].Driver == CConfig.Config.Record.MicConfig[0].DeviceDriver) " is 143.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The length of the statement  "                AddMouseEvent(new SMouseEvent(ESender.WiiMote' EModifier.None' x' y' false' false' false' wheel' lbh' false' false' false)); " is 124.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The length of the statement  "                AddMouseEvent(new SMouseEvent(ESender.WiiMote' EModifier.None' x' y' lb' false' rb' wheel' false' false' false' false)); " is 120.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_TryConnect,The length of the statement  "            //We might have had a reader thread' that is not finished yet' so let it finish and close it's handle first or it will close the new one " is 136.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.X = ((float)_WiiMoteState.AccelState.RawValues.X - _WiiMoteState.AccelCalibrationInfo.X0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.Y = ((float)_WiiMoteState.AccelState.RawValues.Y - _WiiMoteState.AccelCalibrationInfo.Y0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.Z = ((float)_WiiMoteState.AccelState.RawValues.Z - _WiiMoteState.AccelCalibrationInfo.Z0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                        _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff); " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2; " is 131.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2; " is 131.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X); " is 135.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y); " is 135.
Long Statement,Vocaluxe.Lib.Playlist,CPlaylistFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,_Load,The length of the statement  "                CSong plSong = CSongs.AllSongs.FirstOrDefault(song => song.Artist == songEntry.Artist && song.Title == songEntry.Title); " is 120.
Long Statement,Vocaluxe.Lib.Playlist,CPlaylistFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,AddSong,The length of the statement  "                    GameMode = CSongs.GetSong(songID).IsGameModeAvailable(EGameMode.TR_GAMEMODE_DUET) ? EGameMode.TR_GAMEMODE_DUET : EGameMode.TR_GAMEMODE_NORMAL " is 141.
Long Statement,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The length of the statement  "                while (waitcount < 5 && PortAudioSharp.PortAudio.Pa_IsStreamStopped(handle) == PortAudioSharp.PortAudio.PaError.paStreamIsNotStopped) " is 133.
Long Statement,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetBitmap,The length of the statement  "                    BitmapData bitmapdata = bmp.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppArgb); " is 129.
Long Statement,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The length of the statement  "                BitmapData bitmapdata = e.Frame.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 132.
Complex Conditional,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The conditional expression  "(Array.IndexOf(_SplitCharAfter' text[i]) >= 0 && (Char.IsLetterOrDigit(text' i + 1) || Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)) ||                      (Char.IsLetterOrDigit(text' i) && Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)"  is complex.
Complex Conditional,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The conditional expression  "(_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat)"  is complex.
Complex Conditional,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The conditional expression  "notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit"  is complex.
Complex Conditional,Vocaluxe.Base,CSongFilter,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongFilter.cs,_FilterSongs,The conditional expression  "(song.IsDuet && _DuetOptions != EDuetOptions.NoDuets) || (!song.IsDuet && _DuetOptions != EDuetOptions.Duets)"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "popupVolumeControlAllowed && (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_OFF"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "keyEvent.IsArrowKey() || keyEvent.Key == Keys.NumPad0 || keyEvent.Key == Keys.D0 || keyEvent.Key == Keys.Add"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "!handled && _Fading == null && (_Cursor.IsActive || mouseEvent.LB || mouseEvent.RB || mouseEvent.MB)"  is complex.
Complex Conditional,Vocaluxe.Base.Server,CWebservice,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetMp3File,The conditional expression  "!File.Exists(path)                   || !(path.EndsWith(".mp3"' StringComparison.InvariantCulture)                           || path.EndsWith(".ogg"' StringComparison.InvariantCulture)                          || path.EndsWith(".wav"' StringComparison.InvariantCulture)                          || path.EndsWith(".webm"' StringComparison.InvariantCulture))"  is complex.
Complex Conditional,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendKeyEvent,The conditional expression  "Int32.TryParse(numberString' out number) && number >= 1                                  && number <= 12                                  && Enum.TryParse("F" + number' true' out fKey)"  is complex.
Complex Conditional,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The conditional expression  "Math.Abs(rect.W) < 1 || Math.Abs(rect.H) < 1 || Math.Abs(bounds.H) < 1 || Math.Abs(bounds.W) < 1"  is complex.
Complex Conditional,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The conditional expression  "_BorderLeft != CConfig.Config.Graphics.BorderLeft || _BorderRight != CConfig.Config.Graphics.BorderRight || _BorderTop != CConfig.Config.Graphics.BorderTop ||                      _BorderBottom != CConfig.Config.Graphics.BorderBottom"  is complex.
Complex Conditional,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The conditional expression  "Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb"  is complex.
Complex Conditional,Vocaluxe.Lib.Video.Acinerella,CFramebuffer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CFramebuffer.cs,_SetRead,The conditional expression  "(_First <= index && (index < _Next || _Next < _First)) || (_Next < _First && index < _Next)"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,UpdateGame,The conditional expression  "(_IntroOutPlayed || _SkipIntro) && next && CSettings.ProgramState == EProgramState.Start && CSongs.SongsLoaded"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The conditional expression  "(_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished)"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The conditional expression  "i == 0 && !song.IsDuet || i == 1 && song.IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The conditional expression  "i == 0 && !song.IsDuet || i == 1 && song.IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The conditional expression  "!timer.IsRunning && timer.ElapsedMilliseconds == 0 && _Lyrics[_LyricMainDuet].Alpha > 0 && CGame.GetSong().IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The conditional expression  "!_TimerDuetText2.IsRunning && _TimerDuetText2.ElapsedMilliseconds == 0 && _Lyrics[_LyricMain].Alpha > 0 && CGame.GetSong().IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The conditional expression  "(CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The conditional expression  "!_DragAndDropCover.Visible && _Playlist.Visible && CSongs.NumSongsVisible > 0 && _SongMenu.GetSelectedSongNr() != -1"  is complex.
Complex Conditional,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The conditional expression  "!lb && !rb && (p.X != _OldPosition.X || p.Y != _OldPosition.Y)"  is complex.
Complex Conditional,Vocaluxe.Lib.Playlist,CPlaylistFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSong,The conditional expression  "sourceNr < 0 || destNr < 0 || sourceNr == destNr || sourceNr >= Songs.Count || destNr >= Songs.Count"  is complex.
Empty Catch Block,Vocaluxe.Base,CLogFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLog.cs,Close,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Base,CKeys,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Base.Server,CWebservice,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,_GetSession,The method has an empty catch block.
Empty Catch Block,Vocaluxe,CMainProgram,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_CloseProgram,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CDatabaseBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,Init,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,GetDataBaseSongInfos,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,IncreaseSongCounter,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateOrConvert,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,Close,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,Close,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,LoadFile,The method has an empty catch block.
Magic Number,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Next,The following statement contains a magic number: if (_PreviousMusicIndex < _PreviousFiles.Count - 2)              {                  //We are in the previous list and next element exists                  _PreviousMusicIndex++;                  _CurrentPlaylistElement = _PreviousFiles[_PreviousMusicIndex];              }              else              {                  //We are not in the previous list (anymore)                  if (_NotPlayedFiles.Count == 0)                  {                      if (_PreviousFiles.Count == 0)                          return; //No songs to play                      _NotPlayedFiles.AddRange(_PreviousFiles);                  }                    _CurrentPlaylistElement = _NotPlayedFiles[CGame.Rand.Next(_NotPlayedFiles.Count)];                  _NotPlayedFiles.Remove(_CurrentPlaylistElement);                    _PreviousFiles.Add(_CurrentPlaylistElement);                  _PreviousMusicIndex = _PreviousFiles.Count - 1;              }
Magic Number,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: if (songChanged || _CurPlayer.Position + 30 < _CurPlayer.Length)              {                  lock (_PreviewStartHelperTaskLock)                  {                      // Check if the old _PreviewStartHelperTask needs to disposed                      if (_PreviewStartHelperTask != null)                      {                          _PreviewStartHelperTask.Dispose();                      }                      _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });                  }                  _CurPlayer = _PreviewPlayer;              }              else              {                  if (_PreviewStartHelperTask != null)                  {                      lock (_PreviewStartHelperTaskLock)                      {                          // Recheck the condition as it cloud have change before we got the lock                          if (_PreviewStartHelperTask != null)                          {                              _PreviewStartHelperTask.Dispose();                              _PreviewStartHelperTask = null;                          }                      }                  }                  _PreviewPlayer.Position = _CurPlayer.Position;                  _CurPlayer = _PreviewPlayer;                  Play();              }
Magic Number,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: if (songChanged || _CurPlayer.Position + 30 < _CurPlayer.Length)              {                  lock (_PreviewStartHelperTaskLock)                  {                      // Check if the old _PreviewStartHelperTask needs to disposed                      if (_PreviewStartHelperTask != null)                      {                          _PreviewStartHelperTask.Dispose();                      }                      _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });                  }                  _CurPlayer = _PreviewPlayer;              }              else              {                  if (_PreviewStartHelperTask != null)                  {                      lock (_PreviewStartHelperTaskLock)                      {                          // Recheck the condition as it cloud have change before we got the lock                          if (_PreviewStartHelperTask != null)                          {                              _PreviewStartHelperTask.Dispose();                              _PreviewStartHelperTask = null;                          }                      }                  }                  _PreviewPlayer.Position = _CurPlayer.Position;                  _CurPlayer = _PreviewPlayer;                  Play();              }
Magic Number,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,_StartSong,The following statement contains a magic number: if (!_CurrentPlaylistElement.HasMetaData)                  _BGPlayer.Load(_CurrentPlaylistElement.MusicFilePath' 0f' true);              else              {                  //Seek to #Start-Tag' if found                  float start = 0f;                  if (_CurrentPlaylistElement.Start > 0.001 && CConfig.Config.Sound.BackgroundMusicUseStart == EOffOn.TR_CONFIG_ON)                      start = _CurrentPlaylistElement.Start;                  _BGPlayer.Load(_CurrentPlaylistElement.Song' start' true);              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: using (var path = new GraphicsPath())              using (var pen = new Pen(outlineColorF.AsColor()' outlineSize / 2))              {                  pen.LineJoin = LineJoin.Round;                  pen.Alignment = PenAlignment.Outset;                  float top = (bmpSize.Height - _MarginBottom - _MarginTop - maxHeight * lineCount) / 2 + _MarginTop;                  int nextLineEl = 0;                  for (int i = 0; i < lineCount; i++)                  {                      int firstEl = nextLineEl;                      for (; nextLineEl < elements.Count; nextLineEl++)                      {                          if (elements[nextLineEl].Line > i)                              break;                      }                        string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text);                      float left;                      if (lineCount == 1 || (i == 1 && lineCount == 3))                      {                          //Center Text if this is the only line or the middle line                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = (bmpSize.Width - _MarginLeft - _MarginRight - width) / 2 + _MarginLeft;                      }                      else if (i == lineCount - 1)                      {                          //Place last line at right                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = bmpSize.Width - width - _MarginRight;                      }                      else                          left = _MarginLeft;                      //g.DrawString(line' fo' new SolidBrush(_TextColor.AsColor())' left' top' StringFormat.GenericTypographic);                      path.AddString(line' fo.FontFamily' (int)fo.Style' emSize' new PointF(left' top)' StringFormat.GenericTypographic);                      top += maxHeight + _LineSpace;                  }                  g.DrawPath(pen' path);                  g.FillPath(new SolidBrush(_TextColor.AsColor())' path);              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: using (var path = new GraphicsPath())              using (var pen = new Pen(outlineColorF.AsColor()' outlineSize / 2))              {                  pen.LineJoin = LineJoin.Round;                  pen.Alignment = PenAlignment.Outset;                  float top = (bmpSize.Height - _MarginBottom - _MarginTop - maxHeight * lineCount) / 2 + _MarginTop;                  int nextLineEl = 0;                  for (int i = 0; i < lineCount; i++)                  {                      int firstEl = nextLineEl;                      for (; nextLineEl < elements.Count; nextLineEl++)                      {                          if (elements[nextLineEl].Line > i)                              break;                      }                        string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text);                      float left;                      if (lineCount == 1 || (i == 1 && lineCount == 3))                      {                          //Center Text if this is the only line or the middle line                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = (bmpSize.Width - _MarginLeft - _MarginRight - width) / 2 + _MarginLeft;                      }                      else if (i == lineCount - 1)                      {                          //Place last line at right                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = bmpSize.Width - width - _MarginRight;                      }                      else                          left = _MarginLeft;                      //g.DrawString(line' fo' new SolidBrush(_TextColor.AsColor())' left' top' StringFormat.GenericTypographic);                      path.AddString(line' fo.FontFamily' (int)fo.Style' emSize' new PointF(left' top)' StringFormat.GenericTypographic);                      top += maxHeight + _LineSpace;                  }                  g.DrawPath(pen' path);                  g.FillPath(new SolidBrush(_TextColor.AsColor())' path);              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: using (var path = new GraphicsPath())              using (var pen = new Pen(outlineColorF.AsColor()' outlineSize / 2))              {                  pen.LineJoin = LineJoin.Round;                  pen.Alignment = PenAlignment.Outset;                  float top = (bmpSize.Height - _MarginBottom - _MarginTop - maxHeight * lineCount) / 2 + _MarginTop;                  int nextLineEl = 0;                  for (int i = 0; i < lineCount; i++)                  {                      int firstEl = nextLineEl;                      for (; nextLineEl < elements.Count; nextLineEl++)                      {                          if (elements[nextLineEl].Line > i)                              break;                      }                        string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text);                      float left;                      if (lineCount == 1 || (i == 1 && lineCount == 3))                      {                          //Center Text if this is the only line or the middle line                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = (bmpSize.Width - _MarginLeft - _MarginRight - width) / 2 + _MarginLeft;                      }                      else if (i == lineCount - 1)                      {                          //Place last line at right                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = bmpSize.Width - width - _MarginRight;                      }                      else                          left = _MarginLeft;                      //g.DrawString(line' fo' new SolidBrush(_TextColor.AsColor())' left' top' StringFormat.GenericTypographic);                      path.AddString(line' fo.FontFamily' (int)fo.Style' emSize' new PointF(left' top)' StringFormat.GenericTypographic);                      top += maxHeight + _LineSpace;                  }                  g.DrawPath(pen' path);                  g.FillPath(new SolidBrush(_TextColor.AsColor())' path);              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: using (var path = new GraphicsPath())              using (var pen = new Pen(outlineColorF.AsColor()' outlineSize / 2))              {                  pen.LineJoin = LineJoin.Round;                  pen.Alignment = PenAlignment.Outset;                  float top = (bmpSize.Height - _MarginBottom - _MarginTop - maxHeight * lineCount) / 2 + _MarginTop;                  int nextLineEl = 0;                  for (int i = 0; i < lineCount; i++)                  {                      int firstEl = nextLineEl;                      for (; nextLineEl < elements.Count; nextLineEl++)                      {                          if (elements[nextLineEl].Line > i)                              break;                      }                        string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text);                      float left;                      if (lineCount == 1 || (i == 1 && lineCount == 3))                      {                          //Center Text if this is the only line or the middle line                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = (bmpSize.Width - _MarginLeft - _MarginRight - width) / 2 + _MarginLeft;                      }                      else if (i == lineCount - 1)                      {                          //Place last line at right                          float width = _GetWidth(elements' firstEl' nextLineEl - 1);                          left = bmpSize.Width - width - _MarginRight;                      }                      else                          left = _MarginLeft;                      //g.DrawString(line' fo' new SolidBrush(_TextColor.AsColor())' left' top' StringFormat.GenericTypographic);                      path.AddString(line' fo.FontFamily' (int)fo.Style' emSize' new PointF(left' top)' StringFormat.GenericTypographic);                      top += maxHeight + _LineSpace;                  }                  g.DrawPath(pen' path);                  g.FillPath(new SolidBrush(_TextColor.AsColor())' path);              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 2 - _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl = _GetSplitElement(elements' textWidth / 2);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 3 - 2 * _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 3 - 2 * _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: if (elements.Count == 2 || factorH <= Math.Max(factor1' factor2))              {                  //Only 2 elements or cannot get any bigger                  if (factor2 <= factor1)                      return factor1;                  _SetLine(elements' splitEl + 1' elements.Count - 1' 1);                  return factor2;              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl21 = _GetSplitElement(elements' textWidth / 3' false);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl22 = _GetSplitElement(elements' textWidth / 3' true' splitEl21 + 1);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: if (factor3 > Math.Max(factor1' factor2))              {                  _SetLine(elements' splitEl21 + 1' splitEl22' 1);                  _SetLine(elements' splitEl22 + 1' elements.Count - 1' 2);                  return factor3;              }
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: Debug.Assert(singleSplit && elements.Count - startElement >= 2 || !singleSplit && elements.Count - startElement >= 3);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: Debug.Assert(singleSplit && elements.Count - startElement >= 2 || !singleSplit && elements.Count - startElement >= 3);
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: if (!singleSplit && splitEl >= elements.Count - 2)                  return elements.Count - 3;
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: if (!singleSplit && splitEl >= elements.Count - 2)                  return elements.Count - 3;
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: if (splitEl >= elements.Count - 1)                  return elements.Count - 2;
Magic Number,Vocaluxe.Base,CCoverGenerator,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  string part = lines[i].Trim();                  if (part.Length == 2 && part[1] == '.')                  {                      //Initials found' continue or start new                      if (curStart < 0)                          curStart = i;                      curText += lines[i];                  }                  else if (curStart >= 0)                  {                      //Initials end                      if (curStart < i - 1)                      {                          //More than 1 part                          lines[curStart] = curText;                          lines.RemoveRange(curStart + 1' i - curStart - 1);                          i = curStart;                      }                      curText = "";                      curStart = -1;                  }              }
Magic Number,Vocaluxe.Base,CTextElement,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,CTextElement,The following statement contains a magic number: Height = (dimensions.Height + font.Height) / 2;
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: if (!Config.Game.NumPlayers.IsInRange(1' CSettings.MaxNumPlayer))                  Config.Game.NumPlayers = 2;
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Record.MicDelay = (int)(20 * Math.Round(Config.Record.MicDelay / 20.0));
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Record.MicDelay = (int)(20 * Math.Round(Config.Record.MicDelay / 20.0));
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: if (!Config.Server.ServerPort.IsInRange(1' 65535))                  Config.Server.ServerPort = 3000;
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: if (!Config.Server.ServerPort.IsInRange(1' 65535))                  Config.Server.ServerPort = 3000;
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: foreach (CRecordDevice device in devices)              {                  //Has Device some signal-names in name -> This could be a (usb-)mic                  if (Regex.IsMatch(device.Name' "Usb|Wireless"' RegexOptions.IgnoreCase))                  {                      //Check if there is one or more channels                      if (device.Channels >= 2)                      {                          //Set this device to player 1                          Config.Record.MicConfig[0].DeviceName = device.Name;                          Config.Record.MicConfig[0].DeviceDriver = device.Driver;                          Config.Record.MicConfig[0].Channel = 1;                          //Set this device to player 2                          Config.Record.MicConfig[1].DeviceName = device.Name;                          Config.Record.MicConfig[1].DeviceDriver = device.Driver;                          Config.Record.MicConfig[1].Channel = 2;                            return true;                      }                  }              }
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: foreach (CRecordDevice device in devices)              {                  //Has Device some signal-names in name -> This could be a (usb-)mic                  if (Regex.IsMatch(device.Name' "Usb|Wireless"' RegexOptions.IgnoreCase))                  {                      //Check if there is one or more channels                      if (device.Channels >= 2)                      {                          //Set this device to player 1                          Config.Record.MicConfig[0].DeviceName = device.Name;                          Config.Record.MicConfig[0].DeviceDriver = device.Driver;                          Config.Record.MicConfig[0].Channel = 1;                          //Set this device to player 2                          Config.Record.MicConfig[1].DeviceName = device.Name;                          Config.Record.MicConfig[1].DeviceDriver = device.Driver;                          Config.Record.MicConfig[1].Channel = 2;                            return true;                      }                  }              }
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: foreach (CRecordDevice device in devices)              {                  //Has Device some signal-names in name -> This could be a mic                  if (Regex.IsMatch(device.Name' "Mic|Mik"' RegexOptions.IgnoreCase))                  {                      //Check if there is one or more channels                      if (device.Channels >= 1)                      {                          //Set this device to player 1                          Config.Record.MicConfig[0].DeviceName = device.Name;                          Config.Record.MicConfig[0].DeviceDriver = device.Driver;                          Config.Record.MicConfig[0].Channel = 1;                            if (device.Channels >= 2)                          {                              //Set this device to player 2                              Config.Record.MicConfig[1].DeviceName = device.Name;                              Config.Record.MicConfig[1].DeviceDriver = device.Driver;                              Config.Record.MicConfig[1].Channel = 2;                                return true;                          }                      }                  }              }
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: foreach (CRecordDevice device in devices)              {                  //Has Device some signal-names in name -> This could be a mic                  if (Regex.IsMatch(device.Name' "Mic|Mik"' RegexOptions.IgnoreCase))                  {                      //Check if there is one or more channels                      if (device.Channels >= 1)                      {                          //Set this device to player 1                          Config.Record.MicConfig[0].DeviceName = device.Name;                          Config.Record.MicConfig[0].DeviceDriver = device.Driver;                          Config.Record.MicConfig[0].Channel = 1;                            if (device.Channels >= 2)                          {                              //Set this device to player 2                              Config.Record.MicConfig[1].DeviceName = device.Name;                              Config.Record.MicConfig[1].DeviceDriver = device.Driver;                              Config.Record.MicConfig[1].Channel = 2;                                return true;                          }                      }                  }              }
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following statement contains a magic number: foreach (string text in args)              {                  Regex spliterVal = new Regex(@"\s"' RegexOptions.IgnoreCase);                    //split arg with Spilter-Regex and save in parts                  string[] parts = spliterVal.Split(text' 2);                    switch (parts.Length)                  {                      //Only found a parameter                      case 1:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add("");                          }                          break;                          //Found parameter and value                      case 2:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add(parts[1]);                          }                          break;                  }              }
Magic Number,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following statement contains a magic number: foreach (string text in args)              {                  Regex spliterVal = new Regex(@"\s"' RegexOptions.IgnoreCase);                    //split arg with Spilter-Regex and save in parts                  string[] parts = spliterVal.Split(text' 2);                    switch (parts.Length)                  {                      //Only found a parameter                      case 1:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add("");                          }                          break;                          //Found parameter and value                      case 2:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add(parts[1]);                          }                          break;                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,GetBeatFromTime,The following statement contains a magic number: return bpm / 60 * (time - gap);
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: _LastEvalBeat = -100;
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: CurrentBeatF = -100;
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: MidRecordedBeat = -100;
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: for (int p = 0; p < _NumPlayers; p++)              {                  for (int beat = _LastEvalBeat + 1; beat <= RecordedBeat; beat++)                  {                      if ((_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat))                          Players[p].SongFinished = true;                        CSongLine[] lines = song.Notes.GetVoice(Players[p].VoiceNr).Lines;                      int line = song.Notes.GetVoice(Players[p].VoiceNr).FindPreviousLine(beat);                      if (line < 0 || lines[line].EndBeat < beat)                          continue;                        //Check for already sung                      if (line < Players[p].SungLines.Count - 1)                          continue; // Already sung whole line                      if (line == Players[p].SungLines.Count - 1)                      {                          //We are in the last line                          if (beat <= Players[p].SungLines[line].LastNoteBeat)                              continue; //We already have something that ends with/after that beat                      }                        if (line != Players[p].CurrentLine)                          Players[p].CurrentNote = -1;                        Players[p].CurrentLine = line;                        while (Players[p].SungLines.Count <= line)                          Players[p].SungLines.Add(new CSungLine());                        CSongNote[] notes = lines[line].Notes;                      int note = lines[line].FindPreviousNote(beat);                      if (note < 0 || notes[note].EndBeat < beat)                          continue;                        Players[p].CurrentNote = note;                        if (line == lines.Length - 1 && beat == lines[line].LastNoteBeat)                          Players[p].SongFinished = true;                        if (notes[note].PointsForBeat > 0 && (CRecord.ToneValid(p)  #if DEBUG_HIT                          || true  #endif                                                           ))                      {                          int tone = notes[note].Tone;                          int tonePlayer = CRecord.GetTone(p);                            while (tonePlayer - tone > 6)                              tonePlayer -= 12;                            while (tonePlayer - tone < -6)                              tonePlayer += 12;    #if DEBUG_HIT                              tonePlayer = tone;  #endif                            Players[p].NoteDiff = Math.Abs(tone - tonePlayer);                          bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));                            if (hit)                          {                              // valid                              //CRecord.RecordSetTone(p' Tone);                              double points = (CSettings.MaxScore - CSettings.LinebonusScore) * (double)notes[note].PointsForBeat /                                              song.Notes.GetVoice(Players[p].VoiceNr).Points;                              if (notes[note].Type == ENoteType.Golden)                                  Players[p].PointsGoldenNotes += points;                                Players[p].Points += points;                                // update player notes (sung notes)                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                    if (notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                  else                                  {                                      Players[p].SungLines[line].IncLastNoteLength();                                      Players[p].SungLines[line].LastNote.Points += points;                                  }                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tone' notes[note]' points));                                Players[p].SungLines[line].LastNote.CheckPerfect();                              Players[p].SungLines[line].IsPerfect(lines[line]);                          }                          else                          {                              if (Players[p].SungLines[line].NoteCount > 0)                              {                                  CSungNote lastNote = Players[p].SungLines[line].LastNote;                                  if (lastNote.Tone != tonePlayer || lastNote.EndBeat + 1 != beat || lastNote.Hit)                                      Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                                  else                                      Players[p].SungLines[line].IncLastNoteLength();                              }                              else                                  Players[p].SungLines[line].AddNote(new CSungNote(beat' 1' tonePlayer));                          }                      }                        // Check if line ended                      int numLinesWithPoints = song.Notes.GetNumLinesWithPoints(Players[p].VoiceNr);                      if (beat == lines[line].LastNoteBeat && lines[line].Points > 0 && numLinesWithPoints > 0)                      {                          // Line Bonus                          double factor = Players[p].SungLines[line].Points / (double)lines[line].Points;                          if (factor <= 0.4)                              factor = 0.0;                          else if (factor >= 0.9)                              factor = 1.0;                          else                          {                              factor -= 0.4;                              factor *= 2;                              factor *= factor;                          }                            double points = CSettings.LinebonusScore * factor / numLinesWithPoints;                          Players[p].Points += points;                          Players[p].PointsLineBonus += points;                          Players[p].SungLines[line].BonusPoints += points;                            //Calculate rating                          //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking                          double current = Players[p].SungLines[line].Points / (double)lines[line].Points;                          Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);                      }                  }              }
Magic Number,Vocaluxe.Base,CLanguage,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,The following statement contains a magic number: if (keyWord.Length < 3 || keyWord.Substring(0' 3) != "TR_")              {                  translation = keyWord;                  return false;              }
Magic Number,Vocaluxe.Base,CLanguage,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,The following statement contains a magic number: if (keyWord.Length < 3 || keyWord.Substring(0' 3) != "TR_")              {                  translation = keyWord;                  return false;              }
Magic Number,Vocaluxe.Base,CLog,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLog.cs,StopBenchmark,The following statement contains a magic number: if (_BenchmarksRunning > 0 && _BenchmarksRunning <= _MaxBenchmarks)              {                  _BenchmarksRunning--;                  _BenchmarkTimer[_BenchmarksRunning].Stop();                    string space = String.Empty;                  for (int i = 0; i < _BenchmarksRunning; i++)                      space += "  ";                    float ms;                  if (Stopwatch.IsHighResolution && _NanosecPerTick > 0)                      ms = (float)((_NanosecPerTick * _BenchmarkTimer[_BenchmarksRunning].ElapsedTicks) / (1000.0 * 1000.0));                  else                      ms = _BenchmarkTimer[_BenchmarksRunning].ElapsedMilliseconds;                    _BenchmarkLog.Add(space + "Stop " + text + "' Elapsed Time: " + ms.ToString("0.000") + "ms");                  _BenchmarkLog.Add(String.Empty);              }              else                  _BenchmarksRunning--;
Magic Number,Vocaluxe.Base,CLog,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLog.cs,StopBenchmark,The following statement contains a magic number: if (_BenchmarksRunning > 0 && _BenchmarksRunning <= _MaxBenchmarks)              {                  _BenchmarksRunning--;                  _BenchmarkTimer[_BenchmarksRunning].Stop();                    string space = String.Empty;                  for (int i = 0; i < _BenchmarksRunning; i++)                      space += "  ";                    float ms;                  if (Stopwatch.IsHighResolution && _NanosecPerTick > 0)                      ms = (float)((_NanosecPerTick * _BenchmarkTimer[_BenchmarksRunning].ElapsedTicks) / (1000.0 * 1000.0));                  else                      ms = _BenchmarkTimer[_BenchmarksRunning].ElapsedMilliseconds;                    _BenchmarkLog.Add(space + "Stop " + text + "' Elapsed Time: " + ms.ToString("0.000") + "ms");                  _BenchmarkLog.Add(String.Empty);              }              else                  _BenchmarksRunning--;
Magic Number,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Init,The following statement contains a magic number: _AvatarIDs = new Queue<int>(1000);
Magic Number,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Init,The following statement contains a magic number: for (int i = 0; i < 1000; i++)                  _AvatarIDs.Enqueue(i);
Magic Number,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_PadNumbersInString,The following statement contains a magic number: return Regex.Replace(text' "[0-9]+"' match => match.Value.PadLeft(4' '0'));
Magic Number,Vocaluxe.Base,CSongCategorizer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The following statement contains a magic number: switch (sorting)              {                  case ESongSorting.TR_CONFIG_DECADE:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                      {                          string year = songPointer.SortString;                          if (year != "")                          {                              year = year.Substring(0' 3);                              songPointer.SortString = year + "0 - " + year + "9";                          }                      }                      break;                  case ESongSorting.TR_CONFIG_TITLE_LETTER:                  case ESongSorting.TR_CONFIG_ARTIST_LETTER:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString();                      break;                  case ESongSorting.TR_CONFIG_DATEADDED:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = CSongs.GetSong(songPointer.SongID).DateAdded.ToString("dd/MM/yyyy");                      break;              }
Magic Number,Vocaluxe.Base,CTime,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,GetMilliseconds,The following statement contains a magic number: if (_Stopwatch.IsRunning)              {                  long ticks = _Stopwatch.ElapsedTicks;                  if (Stopwatch.IsHighResolution && ticks != 0)                      return (float)((_NanosecPerTick * ticks) / (1000.0 * 1000.0));                  return _Stopwatch.ElapsedMilliseconds;              }
Magic Number,Vocaluxe.Base,CTime,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,GetMilliseconds,The following statement contains a magic number: if (_Stopwatch.IsRunning)              {                  long ticks = _Stopwatch.ElapsedTicks;                  if (Stopwatch.IsHighResolution && ticks != 0)                      return (float)((_NanosecPerTick * ticks) / (1000.0 * 1000.0));                  return _Stopwatch.ElapsedMilliseconds;              }
Magic Number,Vocaluxe.Base,CKeys,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The following statement contains a magic number: if (!_Timer.IsRunning || (_Timer.ElapsedMilliseconds > 75) || !keyRepeat)              {                  var pool = new SKeyEvent(ESender.Keyboard' alt' shift' ctrl' pressed && (unicode != Char.MinValue)' unicode' key);                    lock (_CopyLock)                  {                      try                      {                          _KeysPool.Add(pool);                      }                      catch (Exception) { }                  }                    _Timer.Reset();                  _Timer.Start();              }
Magic Number,Vocaluxe.Base,CKeys,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,KeyDown,The following statement contains a magic number: if (!_Timer.IsRunning || (_Timer.ElapsedMilliseconds > 75) || !repeat)              {                  _Keys = e.KeyCode;                  _Add(_ModAlt' _ModShift' _ModCtrl' _KeyPressed' repeat ? _Char : Char.MinValue' _Keys);              }
Magic Number,Vocaluxe.Base,CMouse,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The following statement contains a magic number: var pool = new SMouseEvent(ESender.Mouse' _Mod' x' y' lb' ld' rb' -wheel / 120' lbh' rbh' mb' mbh);
Magic Number,Vocaluxe.Base,CMouse,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,MouseDown,The following statement contains a magic number: if (lb)              {                  if (_Timer.IsRunning && _Timer.ElapsedMilliseconds < 450)                  {                      ld = true;                      _Timer.Reset();                  }                  else                  {                      _Timer.Reset();                      _Timer.Start();                  }              }              else                  _Timer.Reset();
Magic Number,Vocaluxe.Base,CSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,The following statement contains a magic number: if (fade)              {                  float length = -1f;                  for (int i = 0; i < 5; i++)                  {                      length = GetLength(stream);                      if (length >= 0f)                          break;                      Thread.Sleep(1);                  }                  if (length > 0f)                  {                      SetStreamVolume(stream' 0);                      Fade(stream' 100' length);                  }              }
Magic Number,Vocaluxe.Base,CSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,The following statement contains a magic number: if (fade)              {                  float length = -1f;                  for (int i = 0; i < 5; i++)                  {                      length = GetLength(stream);                      if (length >= 0f)                          break;                      Thread.Sleep(1);                  }                  if (length > 0f)                  {                      SetStreamVolume(stream' 0);                      Fade(stream' 100' length);                  }              }
Magic Number,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,The following statement contains a magic number: if (_Fading != null)              {                  Debug.Assert(NextScreen != null);                  bool finished;                  float newAlpha = _Fading.GetValue(out finished);                    if (!finished)                  {                      ZOffset = CSettings.ZFar / 2;                      _DrawScreen(CurrentScreen);                        GlobalAlpha = newAlpha;                      ZOffset = 0f;                      _DrawScreen(NextScreen);                        GlobalAlpha = 1f;                      int oldVol = CConfig.GetVolumeByType(CurrentScreen.CurrentMusicType);                      int newVol = CConfig.GetVolumeByType(NextScreen.CurrentMusicType);                      CSound.SetGlobalVolume((int)((newVol - oldVol) * newAlpha + oldVol));                  }                  else                  {                      _FinishScreenFading();                      if (_Cursor.IsActive)                          CurrentScreen.ProcessMouseMove(_Cursor.X' _Cursor.Y);                        _DrawScreen(CurrentScreen);                  }              }              else                  _DrawScreen(CurrentScreen);
Magic Number,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_Update,The following statement contains a magic number: if (_VolumePopupTimer.IsRunning && _VolumePopupTimer.ElapsedMilliseconds >= 1500 && _CurrentPopupScreen == EPopupScreens.PopupVolumeControl)              {                  _VolumePopupTimer.Reset();                  HidePopup(EPopupScreens.PopupVolumeControl);              }
Magic Number,Vocaluxe.Base,CGraphics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_DrawDebugInfos,The following statement contains a magic number: CFont font = new CFont("Normal"' EStyle.Normal' 25);
Magic Number,Vocaluxe.Base.Server,CWebservice,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetJsFile,The following statement contains a magic number: if (WebOperationContext.Current != null)              {                  WebOperationContext.Current.OutgoingResponse.ContentType = "text/javascript";                  WebOperationContext.Current.OutgoingResponse.LastModified = DateTime.UtcNow;                  WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));              }
Magic Number,Vocaluxe.Base.Server,CWebservice,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetCssFile,The following statement contains a magic number: if (WebOperationContext.Current != null)              {                  WebOperationContext.Current.OutgoingResponse.ContentType = "text/css";                  WebOperationContext.Current.OutgoingResponse.LastModified = DateTime.UtcNow;                  WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));              }
Magic Number,Vocaluxe.Base.Server,CWebservice,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetLocaleFile,The following statement contains a magic number: if (WebOperationContext.Current != null)              {                  WebOperationContext.Current.OutgoingResponse.ContentType = "text/javascript";                  WebOperationContext.Current.OutgoingResponse.LastModified = DateTime.UtcNow;                  WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));              }
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendKeyEvent,The following statement contains a magic number: if (!string.IsNullOrEmpty(lowerKey))              {                  switch (lowerKey)                  {                      case "up":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Up));                          result = true;                          break;                      case "down":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Down));                          result = true;                          break;                      case "left":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Left));                          result = true;                          break;                      case "right":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Right));                          result = true;                          break;                      case "escape":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Escape));                          result = true;                          break;                      case "return":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Return));                          result = true;                          break;                      case "tab":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Tab));                          result = true;                          break;                      case "backspace":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Back));                          result = true;                          break;                      default:                          if (lowerKey.StartsWith("f"))                          {                              string numberString = lowerKey.Substring(1);                              int number;                              Keys fKey;                                if (Int32.TryParse(numberString' out number) && number >= 1                                  && number <= 12                                  && Enum.TryParse("F" + number' true' out fKey))                              {                                  Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' fKey));                                  result = true;                              }                          }                          break;                  }              }
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendProfileData,The following statement contains a magic number: if (profile.Difficulty >= 0 && profile.Difficulty <= 2)                  newProfile.Difficulty = (EGameDifficulty)profile.Difficulty;
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendProfileData,The following statement contains a magic number: if (!string.IsNullOrEmpty(profile.Password))              {                  if (profile.Password == "***__CLEAR_PASSWORD__***")                  {                      newProfile.PasswordSalt = null;                      newProfile.PasswordHash = null;                  }                  else                  {                      RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();                      byte[] buffer = new byte[32];                      rng.GetNonZeroBytes(buffer);                      byte[] salt = buffer;                      byte[] hashedPassword = _Hash((new UTF8Encoding()).GetBytes(profile.Password)' salt);                        newProfile.PasswordSalt = salt;                      newProfile.PasswordHash = hashedPassword;                  }              }
Magic Number,Vocaluxe.Base.ThemeSystem,CPartyTheme,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_GetSkinToLoad,The following statement contains a magic number: switch (fallbackNum)              {                  case 0:                      _Skins.TryGetValue(CConfig.Config.Theme.Skin' out skin);                      break;                  case 1:                      _Skins.TryGetValue(CSettings.DefaultName' out skin);                      break;                  case 2:                      skin = _Skins.Values.FirstOrDefault();                      break;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Base.ThemeSystem,CPartyTheme,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_LoadSkin,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  skin = _GetSkinToLoad(i);                  if (skin == null)                      continue;                  if (skin.Load())                      break;                  skin.Unload();                  CLog.LogError("Failed to load skin " + skin + "! Removing..."' true);                  _Skins.Remove(skin.Name);              }
Magic Number,Vocaluxe,CMainProgram,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_EnsureSingleInstance,The following statement contains a magic number: if (!_Mutex.WaitOne(TimeSpan.FromSeconds(2)' false))              {                  //TODO: put it into language file                  MessageBox.Show("Another Instance of Vocaluxe is already runnning!");  #if WIN                  Process currentProcess = Process.GetCurrentProcess();                  Process[] processes = Process.GetProcessesByName(currentProcess.ProcessName);                    foreach (Process process in processes.Where(t => t.Id != currentProcess.Id))                  {                      IntPtr wnd = process.MainWindowHandle;                      if (wnd != IntPtr.Zero)                          COSFunctions.SetForegroundWindow(wnd);                  }  #endif                  return false;              }
Magic Number,Vocaluxe.Lib.Database,CCoverDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The following statement contains a magic number: lock (_Mutex)              {                  //Double check here because we may have just closed our connection                  if (_Connection == null)                      return false;                  using (var command = new SQLiteCommand(_Connection))                  {                      command.CommandText = "SELECT id' width' height FROM Cover WHERE [Path] = @path";                      command.Parameters.Add("@path"' DbType.String).Value = coverPath;                        SQLiteDataReader reader = command.ExecuteReader();                        if (reader != null && reader.HasRows)                      {                          reader.Read();                          int id = reader.GetInt32(0);                          int w = reader.GetInt32(1);                          int h = reader.GetInt32(2);                          reader.Close();                            command.CommandText = "SELECT Data FROM CoverData WHERE CoverID = @id";                          command.Parameters.Add("@id"' DbType.Int32).Value = id;                          reader = command.ExecuteReader();                            if (reader.HasRows)                          {                              reader.Read();                              byte[] data2 = _GetBytes(reader);                              reader.Dispose();                              tex = CDraw.EnqueueTexture(w' h' data2);                              return true;                          }                          command.CommandText = "DELETE FROM Cover WHERE id = @id";                          command.Parameters.Add("@id"' DbType.Int32).Value = id;                          command.ExecuteNonQuery();                      }                      if (reader != null)                          reader.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CCoverDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The following statement contains a magic number: try              {                  data = new byte[size.Width * size.Height * 4];                  BitmapData bmpData = origin.LockBits(origin.GetRect()' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb);                  Marshal.Copy(bmpData.Scan0' data' 0' data.Length);                  origin.UnlockBits(bmpData);              }              finally              {                  origin.Dispose();              }
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_UnixTimeToTicks,The following statement contains a magic number: var t70 = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_GetBytes,The following statement contains a magic number: const int chunkSize = 2 * 1024;
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_GetBytes,The following statement contains a magic number: const int chunkSize = 2 * 1024;
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + _FilePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return scores;                  }                    using (var command = new SQLiteCommand(connection))                  {                      int medley = 0;                      int duet = 0;                      int shortSong = 0;                      switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }                        int dataBaseSongID = _GetDataBaseSongID(songID' command);                      if (dataBaseSongID < 0)                          return scores;                        switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }                        command.Parameters.Add("@SongID"' DbType.Int32' 0).Value = dataBaseSongID;                      command.Parameters.Add("@Medley"' DbType.Int32' 0).Value = medley;                      command.Parameters.Add("@Duet"' DbType.Int32' 0).Value = duet;                      command.Parameters.Add("@ShortSong"' DbType.Int32' 0).Value = shortSong;                        SQLiteDataReader reader = command.ExecuteReader();                      if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };                                scores.Add(score);                          }                          reader.Dispose();                      }                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + _FilePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return scores;                  }                    using (var command = new SQLiteCommand(connection))                  {                      int medley = 0;                      int duet = 0;                      int shortSong = 0;                      switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }                        int dataBaseSongID = _GetDataBaseSongID(songID' command);                      if (dataBaseSongID < 0)                          return scores;                        switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }                        command.Parameters.Add("@SongID"' DbType.Int32' 0).Value = dataBaseSongID;                      command.Parameters.Add("@Medley"' DbType.Int32' 0).Value = medley;                      command.Parameters.Add("@Duet"' DbType.Int32' 0).Value = duet;                      command.Parameters.Add("@ShortSong"' DbType.Int32' 0).Value = shortSong;                        SQLiteDataReader reader = command.ExecuteReader();                      if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };                                scores.Add(score);                          }                          reader.Dispose();                      }                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + _FilePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return scores;                  }                    using (var command = new SQLiteCommand(connection))                  {                      int medley = 0;                      int duet = 0;                      int shortSong = 0;                      switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }                        int dataBaseSongID = _GetDataBaseSongID(songID' command);                      if (dataBaseSongID < 0)                          return scores;                        switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }                        command.Parameters.Add("@SongID"' DbType.Int32' 0).Value = dataBaseSongID;                      command.Parameters.Add("@Medley"' DbType.Int32' 0).Value = medley;                      command.Parameters.Add("@Duet"' DbType.Int32' 0).Value = duet;                      command.Parameters.Add("@ShortSong"' DbType.Int32' 0).Value = shortSong;                        SQLiteDataReader reader = command.ExecuteReader();                      if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };                                scores.Add(score);                          }                          reader.Dispose();                      }                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + _FilePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return scores;                  }                    using (var command = new SQLiteCommand(connection))                  {                      int medley = 0;                      int duet = 0;                      int shortSong = 0;                      switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }                        int dataBaseSongID = _GetDataBaseSongID(songID' command);                      if (dataBaseSongID < 0)                          return scores;                        switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }                        command.Parameters.Add("@SongID"' DbType.Int32' 0).Value = dataBaseSongID;                      command.Parameters.Add("@Medley"' DbType.Int32' 0).Value = medley;                      command.Parameters.Add("@Duet"' DbType.Int32' 0).Value = duet;                      command.Parameters.Add("@ShortSong"' DbType.Int32' 0).Value = shortSong;                        SQLiteDataReader reader = command.ExecuteReader();                      if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };                                scores.Add(score);                          }                          reader.Dispose();                      }                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "SELECT Artist' Title' NumPlayed' DateAdded FROM Songs WHERE [id] = @id";                      command.Parameters.Add("@id"' DbType.String' 0).Value = songID;                        SQLiteDataReader reader;                      try                      {                          reader = command.ExecuteReader();                      }                      catch (Exception)                      {                          return false;                      }                        if (reader != null && reader.HasRows)                      {                          reader.Read();                          artist = reader.GetString(0);                          title = reader.GetString(1);                          numPlayed = reader.GetInt32(2);                          dateAdded = new DateTime(reader.GetInt64(3));                          reader.Dispose();                          return true;                      }                      if (reader != null)                          reader.Dispose();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "SELECT Artist' Title' NumPlayed' DateAdded FROM Songs WHERE [id] = @id";                      command.Parameters.Add("@id"' DbType.String' 0).Value = songID;                        SQLiteDataReader reader;                      try                      {                          reader = command.ExecuteReader();                      }                      catch (Exception)                      {                          return false;                      }                        if (reader != null && reader.HasRows)                      {                          reader.Read();                          artist = reader.GetString(0);                          title = reader.GetString(1);                          numPlayed = reader.GetInt32(2);                          dateAdded = new DateTime(reader.GetInt64(3));                          reader.Dispose();                          return true;                      }                      if (reader != null)                          reader.Dispose();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateOrConvert,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA user_version";                      SQLiteDataReader reader = command.ExecuteReader();                      reader.Read();                        int version = reader.GetInt32(0);                        reader.Dispose();                        //Check if old scores table exists                      command.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name='US_Scores';";                      reader = command.ExecuteReader();                      reader.Read();                      bool scoresTableExists = reader.HasRows;                        reader.Dispose();                        command.CommandText = "SELECT Value FROM Version";                      reader = null;                        try                      {                          reader = command.ExecuteReader();                      }                      catch (Exception) {}                        if (reader == null || reader.FieldCount == 0)                      {                          // create new database/tables                          if (version == 1)                          {                              //Check for USDX 1.1 DB                              _CreateHighscoreDBV1(filePath);                              result &= !_ConvertFrom110(filePath);                              result &= _UpdateDatabase(1' connection);                              result &= _UpdateDatabase(2' connection);                          }                          else if (version == 0 && scoresTableExists)                          {                              //Check for USDX 1.01 or CMD Mod DB                              _CreateHighscoreDBV1(filePath);                              result &= _ConvertFrom101(filePath);                              result &= _UpdateDatabase(1' connection);                              result &= _UpdateDatabase(2' connection);                          }                          else                              _CreateHighscoreDB(filePath);                      }                      else                      {                          reader.Read();                          int currentVersion = reader.GetInt32(0);                          if (currentVersion < CSettings.DatabaseHighscoreVersion)                          {                              // update database                              result &= _UpdateDatabase(currentVersion' connection);                          }                      }                        if (reader != null)                          reader.Dispose();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateOrConvert,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA user_version";                      SQLiteDataReader reader = command.ExecuteReader();                      reader.Read();                        int version = reader.GetInt32(0);                        reader.Dispose();                        //Check if old scores table exists                      command.CommandText = "SELECT name FROM sqlite_master WHERE type='table' AND name='US_Scores';";                      reader = command.ExecuteReader();                      reader.Read();                      bool scoresTableExists = reader.HasRows;                        reader.Dispose();                        command.CommandText = "SELECT Value FROM Version";                      reader = null;                        try                      {                          reader = command.ExecuteReader();                      }                      catch (Exception) {}                        if (reader == null || reader.FieldCount == 0)                      {                          // create new database/tables                          if (version == 1)                          {                              //Check for USDX 1.1 DB                              _CreateHighscoreDBV1(filePath);                              result &= !_ConvertFrom110(filePath);                              result &= _UpdateDatabase(1' connection);                              result &= _UpdateDatabase(2' connection);                          }                          else if (version == 0 && scoresTableExists)                          {                              //Check for USDX 1.01 or CMD Mod DB                              _CreateHighscoreDBV1(filePath);                              result &= _ConvertFrom101(filePath);                              result &= _UpdateDatabase(1' connection);                              result &= _UpdateDatabase(2' connection);                          }                          else                              _CreateHighscoreDB(filePath);                      }                      else                      {                          reader.Read();                          int currentVersion = reader.GetInt32(0);                          if (currentVersion < CSettings.DatabaseHighscoreVersion)                          {                              // update database                              result &= _UpdateDatabase(currentVersion' connection);                          }                      }                        if (reader != null)                          reader.Dispose();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      //The USDX database has no column for LineNr' Medley and Duet so just fill 0 in there                      command.CommandText =                          "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        var scores = new List<SData>();                      var songs = new List<SData>();                        command.CommandText = "SELECT id' PlayerName' Date FROM Scores";                      SQLiteDataReader reader = command.ExecuteReader();                        if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var data = new SData {Id = reader.GetInt32(0)' Str1 = reader.GetString(1)};                              Int64 ticks = 0;                                try                              {                                  ticks = reader.GetInt64(2);                              }                              catch {}                                data.Ticks = _UnixTimeToTicks((int)ticks);                                scores.Add(data);                          }                          reader.Close();                      }                        command.CommandText = "SELECT id' Artist' Title FROM Songs";                        reader = command.ExecuteReader();                        if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var data = new SData {Id = reader.GetInt32(0)' Str1 = reader.GetString(1)' Str2 = reader.GetString(2)};                              songs.Add(data);                          }                      }                        if (reader != null)                          reader.Dispose();                        SQLiteTransaction transaction = connection.BeginTransaction();                      // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE us_statistics_info;";                      command.ExecuteNonQuery();                        //This versioning is not used in Vocaluxe so reset it to 0                      command.CommandText = "PRAGMA user_version = 0";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      //The USDX database has no column for LineNr' Medley and Duet so just fill 0 in there                      command.CommandText =                          "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        var scores = new List<SData>();                      var songs = new List<SData>();                        command.CommandText = "SELECT id' PlayerName' Date FROM Scores";                      SQLiteDataReader reader = command.ExecuteReader();                        if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var data = new SData {Id = reader.GetInt32(0)' Str1 = reader.GetString(1)};                              Int64 ticks = 0;                                try                              {                                  ticks = reader.GetInt64(2);                              }                              catch {}                                data.Ticks = _UnixTimeToTicks((int)ticks);                                scores.Add(data);                          }                          reader.Close();                      }                        command.CommandText = "SELECT id' Artist' Title FROM Songs";                        reader = command.ExecuteReader();                        if (reader != null && reader.HasRows)                      {                          while (reader.Read())                          {                              var data = new SData {Id = reader.GetInt32(0)' Str1 = reader.GetString(1)' Str2 = reader.GetString(2)};                              songs.Add(data);                          }                      }                        if (reader != null)                          reader.Dispose();                        SQLiteTransaction transaction = connection.BeginTransaction();                      // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE us_statistics_info;";                      command.ExecuteNonQuery();                        //This versioning is not used in Vocaluxe so reset it to 0                      command.CommandText = "PRAGMA user_version = 0";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA table_info(US_Scores);";                      bool dateExists = false;                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          //Check for column Date                          while (reader.Read())                          {                              for (int i = 0; i < reader.FieldCount; i++)                              {                                  if (reader.GetName(i) == "name")                                  {                                      if (reader.GetString(i) == "Date")                                          dateExists = true;                                      break;                                  }                              }                          }                      }                        //This is a USDX 1.01 DB                      command.CommandText = !dateExists                                                ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores"                                                : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        // convert from CP1252 to UTF8                      var scores = new List<SData>();                      var songs = new List<SData>();                        Sqlite3.sqlite3 oldDB;                      int res = Sqlite3.sqlite3_open(filePath' out oldDB);                        if (res != Sqlite3.SQLITE_OK)                          CLog.LogError("Error opening Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                      else                      {                          var stmt = new Sqlite3.Vdbe();                          res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' Artist' Title FROM Songs"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 2);                                  data.Str2 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    songs.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                            stmt = new Sqlite3.Vdbe();                            // ReSharper disable ConvertIfStatementToConditionalTernaryExpression                          if (!dateExists)                              // ReSharper restore ConvertIfStatementToConditionalTernaryExpression                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName FROM Scores"' -1' ref stmt' 0);                          else                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName' Date FROM Scores"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    if (dateExists)                                      data.Ticks = _UnixTimeToTicks(Sqlite3.sqlite3_column_int(stmt' 2));                                    scores.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                      }                      Sqlite3.sqlite3_close(oldDB);                        SQLiteTransaction transaction = connection.BeginTransaction();                        // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          if (!dateExists)                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player WHERE [id] = @id";                          else                          {                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                              command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          }                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA table_info(US_Scores);";                      bool dateExists = false;                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          //Check for column Date                          while (reader.Read())                          {                              for (int i = 0; i < reader.FieldCount; i++)                              {                                  if (reader.GetName(i) == "name")                                  {                                      if (reader.GetString(i) == "Date")                                          dateExists = true;                                      break;                                  }                              }                          }                      }                        //This is a USDX 1.01 DB                      command.CommandText = !dateExists                                                ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores"                                                : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        // convert from CP1252 to UTF8                      var scores = new List<SData>();                      var songs = new List<SData>();                        Sqlite3.sqlite3 oldDB;                      int res = Sqlite3.sqlite3_open(filePath' out oldDB);                        if (res != Sqlite3.SQLITE_OK)                          CLog.LogError("Error opening Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                      else                      {                          var stmt = new Sqlite3.Vdbe();                          res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' Artist' Title FROM Songs"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 2);                                  data.Str2 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    songs.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                            stmt = new Sqlite3.Vdbe();                            // ReSharper disable ConvertIfStatementToConditionalTernaryExpression                          if (!dateExists)                              // ReSharper restore ConvertIfStatementToConditionalTernaryExpression                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName FROM Scores"' -1' ref stmt' 0);                          else                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName' Date FROM Scores"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    if (dateExists)                                      data.Ticks = _UnixTimeToTicks(Sqlite3.sqlite3_column_int(stmt' 2));                                    scores.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                      }                      Sqlite3.sqlite3_close(oldDB);                        SQLiteTransaction transaction = connection.BeginTransaction();                        // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          if (!dateExists)                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player WHERE [id] = @id";                          else                          {                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                              command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          }                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA table_info(US_Scores);";                      bool dateExists = false;                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          //Check for column Date                          while (reader.Read())                          {                              for (int i = 0; i < reader.FieldCount; i++)                              {                                  if (reader.GetName(i) == "name")                                  {                                      if (reader.GetString(i) == "Date")                                          dateExists = true;                                      break;                                  }                              }                          }                      }                        //This is a USDX 1.01 DB                      command.CommandText = !dateExists                                                ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores"                                                : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        // convert from CP1252 to UTF8                      var scores = new List<SData>();                      var songs = new List<SData>();                        Sqlite3.sqlite3 oldDB;                      int res = Sqlite3.sqlite3_open(filePath' out oldDB);                        if (res != Sqlite3.SQLITE_OK)                          CLog.LogError("Error opening Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                      else                      {                          var stmt = new Sqlite3.Vdbe();                          res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' Artist' Title FROM Songs"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 2);                                  data.Str2 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    songs.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                            stmt = new Sqlite3.Vdbe();                            // ReSharper disable ConvertIfStatementToConditionalTernaryExpression                          if (!dateExists)                              // ReSharper restore ConvertIfStatementToConditionalTernaryExpression                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName FROM Scores"' -1' ref stmt' 0);                          else                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName' Date FROM Scores"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    if (dateExists)                                      data.Ticks = _UnixTimeToTicks(Sqlite3.sqlite3_column_int(stmt' 2));                                    scores.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                      }                      Sqlite3.sqlite3_close(oldDB);                        SQLiteTransaction transaction = connection.BeginTransaction();                        // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          if (!dateExists)                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player WHERE [id] = @id";                          else                          {                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                              command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          }                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The following statement contains a magic number: using (var connection = new SQLiteConnection())              {                  connection.ConnectionString = "Data Source=" + filePath;                    try                  {                      connection.Open();                  }                  catch (Exception)                  {                      return false;                  }                    using (var command = new SQLiteCommand(connection))                  {                      command.CommandText = "PRAGMA table_info(US_Scores);";                      bool dateExists = false;                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          //Check for column Date                          while (reader.Read())                          {                              for (int i = 0; i < reader.FieldCount; i++)                              {                                  if (reader.GetName(i) == "name")                                  {                                      if (reader.GetString(i) == "Date")                                          dateExists = true;                                      break;                                  }                              }                          }                      }                        //This is a USDX 1.01 DB                      command.CommandText = !dateExists                                                ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores"                                                : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores";                      command.ExecuteNonQuery();                        command.CommandText = "INSERT INTO Songs SELECT ID' Artist' Title' TimesPlayed from US_Songs";                      command.ExecuteNonQuery();                        // convert from CP1252 to UTF8                      var scores = new List<SData>();                      var songs = new List<SData>();                        Sqlite3.sqlite3 oldDB;                      int res = Sqlite3.sqlite3_open(filePath' out oldDB);                        if (res != Sqlite3.SQLITE_OK)                          CLog.LogError("Error opening Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                      else                      {                          var stmt = new Sqlite3.Vdbe();                          res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' Artist' Title FROM Songs"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 2);                                  data.Str2 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    songs.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                            stmt = new Sqlite3.Vdbe();                            // ReSharper disable ConvertIfStatementToConditionalTernaryExpression                          if (!dateExists)                              // ReSharper restore ConvertIfStatementToConditionalTernaryExpression                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName FROM Scores"' -1' ref stmt' 0);                          else                              res = Sqlite3.sqlite3_prepare_v2(oldDB' "SELECT id' PlayerName' Date FROM Scores"' -1' ref stmt' 0);                            if (res != Sqlite3.SQLITE_OK)                              CLog.LogError("Error query Database: " + filePath + " (" + Sqlite3.sqlite3_errmsg(oldDB) + ")");                          else                          {                              //Sqlite3.sqlite3_step(Stmt);                              Encoding utf8 = Encoding.UTF8;                              Encoding cp1252 = Encoding.GetEncoding(1252);                                while (Sqlite3.sqlite3_step(stmt) == Sqlite3.SQLITE_ROW)                              {                                  var data = new SData {Id = Sqlite3.sqlite3_column_int(stmt' 0)};                                    byte[] bytes = Sqlite3.sqlite3_column_rawbytes(stmt' 1);                                  data.Str1 = bytes != null ? utf8.GetString(Encoding.Convert(cp1252' utf8' bytes)) : "Someone";                                    if (dateExists)                                      data.Ticks = _UnixTimeToTicks(Sqlite3.sqlite3_column_int(stmt' 2));                                    scores.Add(data);                              }                              Sqlite3.sqlite3_finalize(stmt);                          }                      }                      Sqlite3.sqlite3_close(oldDB);                        SQLiteTransaction transaction = connection.BeginTransaction();                        // update Title and Artist strings                      foreach (SData data in songs)                      {                          command.CommandText = "UPDATE Songs SET [Artist] = @artist' [Title] = @title WHERE [ID] = @id";                          command.Parameters.Add("@title"' DbType.String' 0).Value = data.Str2;                          command.Parameters.Add("@artist"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                        // update player names                      foreach (SData data in scores)                      {                          if (!dateExists)                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player WHERE [id] = @id";                          else                          {                              command.CommandText = "UPDATE Scores SET [PlayerName] = @player' [Date] = @date WHERE [id] = @id";                              command.Parameters.Add("@date"' DbType.Int64' 0).Value = data.Ticks;                          }                          command.Parameters.Add("@player"' DbType.String' 0).Value = data.Str1;                          command.Parameters.Add("@id"' DbType.Int32' 0).Value = data.Id;                          command.ExecuteNonQuery();                      }                      transaction.Commit();                        //Delete old tables after conversion                      command.CommandText = "DROP TABLE US_Scores;";                      command.ExecuteNonQuery();                        command.CommandText = "DROP TABLE US_Songs;";                      command.ExecuteNonQuery();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_UpdateDatabase,The following statement contains a magic number: if (currentVersion < 2)                  updated &= _ConvertV1toV2(connection);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_UpdateDatabase,The following statement contains a magic number: if (currentVersion < 3)                  updated &= _ConvertV2toV3(connection);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV1toV2,The following statement contains a magic number: using (var command = new SQLiteCommand(connection))              {                  command.CommandText = "ALTER TABLE Scores ADD ShortSong INTEGER";                  command.ExecuteNonQuery();                  command.CommandText = "UPDATE Scores SET [ShortSong] = @ShortSong";                  command.Parameters.Add("@ShortSong"' DbType.Int32' 0).Value = 0;                  command.ExecuteNonQuery();                  command.CommandText = "UPDATE Version SET [Value] = @version";                  command.Parameters.Add("@version"' DbType.Int32' 0).Value = 2;                  command.ExecuteNonQuery();              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV2toV3,The following statement contains a magic number: command.Parameters.Add("@version"' DbType.Int32' 0).Value = 3;
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV2toV3,The following statement contains a magic number: DateTime dt = new DateTime(1' 1' 1' 0' 0' 5);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: using (var connSource = new SQLiteConnection())              {                  connSource.ConnectionString = "Data Source=" + sourceDBPath;                    try                  {                      connSource.Open();                  }                  catch (Exception e)                  {                      CLog.LogError("Error on import high score data. Can't open source database \"" + sourceDBPath + "\" (" + e.Message + ")");                      return false;                  }                  #endregion open db                    using (var cmdSource = new SQLiteCommand(connSource))                  {                      #region import table scores                      cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores";                      SQLiteDataReader source = cmdSource.ExecuteReader();                      if (source == null)                          return false;                        if (source.FieldCount == 0)                      {                          source.Close();                          return true;                      }                        while (source.Read())                      {                          int songid = source.GetInt32(0);                          string player = source.GetString(1);                          int score = source.GetInt32(2);                          int linenr = source.GetInt32(3);                          long date = source.GetInt64(4);                          int medley = source.GetInt32(5);                          int duet = source.GetInt32(6);                          int shortsong = source.GetInt32(7);                          int diff = source.GetInt32(8);                            string artist' title;                          DateTime dateadded;                          int numplayed;                          if (_GetDataBaseSongInfos(songid' out artist' out title' out numplayed' out dateadded' sourceDBPath))                              AddScore(player' score' linenr' date' medley' duet' shortsong' diff' artist' title' numplayed' _FilePath);                      }                      #endregion import table scores                        source.Close();                  }              }
Magic Number,Vocaluxe.Lib.Database,CResourceDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,GetCreditsRessource,The following statement contains a magic number: using (var command = new SQLiteCommand(_Connection))              {                  command.CommandText = "SELECT id' width' height FROM Images WHERE [Path] = @path";                  command.Parameters.Add("@path"' DbType.String' 0).Value = fileName;                    SQLiteDataReader reader = command.ExecuteReader();                    if (reader != null && reader.HasRows)                  {                      reader.Read();                      int id = reader.GetInt32(0);                      int w = reader.GetInt32(1);                      int h = reader.GetInt32(2);                      reader.Close();                        command.CommandText = "SELECT Data FROM ImageData WHERE ImageID = @id";                      command.Parameters.Add("@id"' DbType.Int32).Value = id;                      reader = command.ExecuteReader();                        if (reader.HasRows)                      {                          result = true;                          reader.Read();                          byte[] data = _GetBytes(reader);                          tex = CDraw.AddTexture(w' h' data);                      }                  }                    if (reader != null)                      reader.Dispose();              }
Magic Number,Vocaluxe.Lib.Database,CResourceDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,_AddImageToCreditsDB,The following statement contains a magic number: try              {                  int w = origin.Width;                  int h = origin.Height;                  byte[] data = new byte[w * h * 4];                    BitmapData bmpData = origin.LockBits(new Rectangle(0' 0' w' h)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb);                  Marshal.Copy(bmpData.Scan0' data' 0' w * h * 4);                  origin.UnlockBits(bmpData);                    using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "INSERT INTO Images (Path' width' height) VALUES (@path' @w' @h)";                      command.Parameters.Add("@path"' DbType.String).Value = Path.GetFileName(imagePath);                      command.Parameters.Add("@w"' DbType.Int32).Value = w;                      command.Parameters.Add("@h"' DbType.Int32).Value = h;                      command.ExecuteNonQuery();                  }                    int id = -1;                  using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "SELECT id FROM Images WHERE [Path] = @path";                      command.Parameters.Add("@path"' DbType.String' 0).Value = Path.GetFileName(imagePath);                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          if (reader != null)                          {                              reader.Read();                              id = reader.GetInt32(0);                          }                      }                  }                  if (id < 0)                      return false;                  using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "INSERT INTO ImageData (ImageID' Data) VALUES (@id' @data)";                      command.Parameters.Add("@id"' DbType.Int32).Value = id;                      command.Parameters.Add("@data"' DbType.Binary).Value = data;                      command.ExecuteNonQuery();                      return true;                  }              }              catch (Exception)              {                  return false;              }              finally              {                  origin.Dispose();              }
Magic Number,Vocaluxe.Lib.Database,CResourceDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,_AddImageToCreditsDB,The following statement contains a magic number: try              {                  int w = origin.Width;                  int h = origin.Height;                  byte[] data = new byte[w * h * 4];                    BitmapData bmpData = origin.LockBits(new Rectangle(0' 0' w' h)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb);                  Marshal.Copy(bmpData.Scan0' data' 0' w * h * 4);                  origin.UnlockBits(bmpData);                    using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "INSERT INTO Images (Path' width' height) VALUES (@path' @w' @h)";                      command.Parameters.Add("@path"' DbType.String).Value = Path.GetFileName(imagePath);                      command.Parameters.Add("@w"' DbType.Int32).Value = w;                      command.Parameters.Add("@h"' DbType.Int32).Value = h;                      command.ExecuteNonQuery();                  }                    int id = -1;                  using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "SELECT id FROM Images WHERE [Path] = @path";                      command.Parameters.Add("@path"' DbType.String' 0).Value = Path.GetFileName(imagePath);                      using (SQLiteDataReader reader = command.ExecuteReader())                      {                          if (reader != null)                          {                              reader.Read();                              id = reader.GetInt32(0);                          }                      }                  }                  if (id < 0)                      return false;                  using (SQLiteCommand command = new SQLiteCommand(_Connection))                  {                      command.Transaction = transaction;                      command.CommandText = "INSERT INTO ImageData (ImageID' Data) VALUES (@id' @data)";                      command.Parameters.Add("@id"' DbType.Int32).Value = id;                      command.Parameters.Add("@data"' DbType.Binary).Value = data;                      command.ExecuteNonQuery();                      return true;                  }              }              catch (Exception)              {                  return false;              }              finally              {                  origin.Dispose();              }
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following statement contains a magic number: if (_W / (float)_H > CSettings.GetRenderAspect())              {                  _Y = 0;                  //The windows width is too big                  int old = _W;                  _W = (int)Math.Round(_H * CSettings.GetRenderAspect());                  int diff = old - _W;                  switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _X = 0;                          break;                      case EGeneralAlignment.Middle:                          _X = diff / 2;                          break;                      case EGeneralAlignment.End:                          _X = diff;                          break;                  }              }              else              {                  _X = 0;                  //The windows height is too big                  int old = _H;                  _H = (int)Math.Round(_W / CSettings.GetRenderAspect());                  int diff = old - _H;                  switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _Y = reverse ? diff : 0;                          break;                      case EGeneralAlignment.Middle:                          _Y = diff / 2;                          break;                      case EGeneralAlignment.End:                          _Y = reverse ? 0 : diff;                          break;                  }              }
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following statement contains a magic number: if (_W / (float)_H > CSettings.GetRenderAspect())              {                  _Y = 0;                  //The windows width is too big                  int old = _W;                  _W = (int)Math.Round(_H * CSettings.GetRenderAspect());                  int diff = old - _W;                  switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _X = 0;                          break;                      case EGeneralAlignment.Middle:                          _X = diff / 2;                          break;                      case EGeneralAlignment.End:                          _X = diff;                          break;                  }              }              else              {                  _X = 0;                  //The windows height is too big                  int old = _H;                  _H = (int)Math.Round(_W / CSettings.GetRenderAspect());                  int diff = old - _H;                  switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _Y = reverse ? diff : 0;                          break;                      case EGeneralAlignment.Middle:                          _Y = diff / 2;                          break;                      case EGeneralAlignment.End:                          _Y = reverse ? 0 : diff;                          break;                  }              }
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: if (Math.Abs(color.A) < 0.01)                  return;
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: if (Math.Abs(color.A) < 0.01)                  return;
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: if (Math.Abs(color.A) < 0.01)                  return;
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The following statement contains a magic number: if (Math.Abs(color.A) < 0.01 || height < 1)                  return;
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The following statement contains a magic number: while (_Run)              {                  _CheckQueue();                  CVocaluxeServer.ProcessServerTasks();                    //We want to begin drawing                  _OnBeforeDraw();                    //Clear the previous Frame                  _ClearScreen();                  if (!CGraphics.Draw())                      _Run = false;                  _OnAfterDraw();                    if (!CGraphics.UpdateGameLogic(_Keys' _Mouse))                      _Run = false;                    //Apply fullscreen mode                  if ((CConfig.Config.Graphics.FullScreen == EOffOn.TR_CONFIG_ON) != _Fullscreen)                      _ToggleFullScreen();                    //Apply border changes                  if (_BorderLeft != CConfig.Config.Graphics.BorderLeft || _BorderRight != CConfig.Config.Graphics.BorderRight || _BorderTop != CConfig.Config.Graphics.BorderTop ||                      _BorderBottom != CConfig.Config.Graphics.BorderBottom)                  {                      _BorderLeft = CConfig.Config.Graphics.BorderLeft;                      _BorderRight = CConfig.Config.Graphics.BorderRight;                      _BorderTop = CConfig.Config.Graphics.BorderTop;                      _BorderBottom = CConfig.Config.Graphics.BorderBottom;                        _AdjustNewBorders();                  }                    if (_CurrentAlignment != CConfig.Config.Graphics.ScreenAlignment)                      _DoResize();                    if (CConfig.Config.Graphics.VSync == EOffOn.TR_CONFIG_OFF)                  {                      if (CTime.IsRunning())                      {                          int delay = (int)Math.Floor(CConfig.CalcCycleTime() - CTime.GetMilliseconds());                            if (delay >= 1 && delay < 500)                              Thread.Sleep(delay);                      }                  }                  //Calculate the FPS Rate and restart the timer after a frame                  CTime.CalculateFPS();                  CTime.Restart();              }
Magic Number,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_CenterToScreen,The following statement contains a magic number: _Form.Location = new Point((screen.WorkingArea.Width - _Form.Width) / 2'                                         (screen.WorkingArea.Height - _Form.Height) / 2);
Magic Number,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_CenterToScreen,The following statement contains a magic number: _Form.Location = new Point((screen.WorkingArea.Width - _Form.Width) / 2'                                         (screen.WorkingArea.Height - _Form.Height) / 2);
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_CheckForNextPowerOf2,The following statement contains a magic number: return (int)Math.Pow(2' Math.Ceiling(Math.Log(n' 2)));
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_CheckForNextPowerOf2,The following statement contains a magic number: return (int)Math.Pow(2' Math.Ceiling(Math.Log(n' 2)));
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetNewTextureSize,The following statement contains a magic number: if (!_NonPowerOf2TextureSupported)              {                  if (size.Width < size.Height)                  {                      newSize.Width = _CheckForNextPowerOf2(newSize.Width);                      newSize.Height = _CheckForNextPowerOf2(maxArea / newSize.Width);                      if (newSize.Width * newSize.Height > maxArea)                          newSize.Height /= 2;                  }                  else                  {                      newSize.Height = _CheckForNextPowerOf2(newSize.Height);                      newSize.Width = _CheckForNextPowerOf2(maxArea / newSize.Height);                      if (newSize.Width * newSize.Height > maxArea)                          newSize.Width /= 2;                  }              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetNewTextureSize,The following statement contains a magic number: if (!_NonPowerOf2TextureSupported)              {                  if (size.Width < size.Height)                  {                      newSize.Width = _CheckForNextPowerOf2(newSize.Width);                      newSize.Height = _CheckForNextPowerOf2(maxArea / newSize.Width);                      if (newSize.Width * newSize.Height > maxArea)                          newSize.Height /= 2;                  }                  else                  {                      newSize.Height = _CheckForNextPowerOf2(newSize.Height);                      newSize.Width = _CheckForNextPowerOf2(maxArea / newSize.Height);                      if (newSize.Width * newSize.Height > maxArea)                          newSize.Width /= 2;                  }              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_WriteDataToTexture,The following statement contains a magic number: byte[] dataArray = new byte[4 * texture.DataSize.Width * texture.DataSize.Height];
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_IsTextureUsable,The following statement contains a magic number: if (!texture.DataSize.Equals(dataSize))              {                  if (texture.Size.Width < dataSize.Width || texture.Size.Height < dataSize.Height)                      return false; // Texture memory to small                  if (texture.Size.Width * 0.9 > dataSize.Width || texture.Size.Height * 0.9 > dataSize.Height)                      return false; // Texture memory to big              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_IsTextureUsable,The following statement contains a magic number: if (!texture.DataSize.Equals(dataSize))              {                  if (texture.Size.Width < dataSize.Width || texture.Size.Height < dataSize.Height)                      return false; // Texture memory to small                  if (texture.Size.Width * 0.9 > dataSize.Width || texture.Size.Height * 0.9 > dataSize.Height)                      return false; // Texture memory to big              }
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: _VertexBuffer = new VertexBuffer(_Device' CSettings.VertexBufferElements * (4 * Marshal.SizeOf(typeof(STexturedColoredVertex)))' Usage.WriteOnly | Usage.Dynamic'                                               VertexFormat.Position | VertexFormat.Texture1 | VertexFormat.Diffuse' Pool.Default);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: var indices = new Int16[6];
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[2] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[2] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[3] = 0;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[4] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[4] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[5] = 3;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[5] = 3;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: _IndexBuffer = new IndexBuffer(_Device' 6 * sizeof(Int16)' Usage.WriteOnly' Pool.Managed' true);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AdjustNewBorders,The following statement contains a magic number: const float dx = (float)CSettings.RenderW / 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AdjustNewBorders,The following statement contains a magic number: const float dy = (float)CSettings.RenderH / 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: var vert = new STexturedColoredVertex[4];
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: vert[2] = new STexturedColoredVertex(new Vector3(dc.Wx2' -dc.Wy2' dc.Wz)' new Vector2(dc.Tx2' dc.Ty2)' c2);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: vert[3] = new STexturedColoredVertex(new Vector3(dc.Wx2' -dc.Wy1' dc.Wz)' new Vector2(dc.Tx2' dc.Ty1)' c);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AddToVertexBuffer,The following statement contains a magic number: _Vertices.Enqueue(vertices[2]);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AddToVertexBuffer,The following statement contains a magic number: _Vertices.Enqueue(vertices[3]);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The following statement contains a magic number: for (int i = 0; i < _Vertices.Count; i += 4)              {                  //Apply rotation                  if (_Device.SetTransform(TransformState.World' _VerticesRotationMatrices.Dequeue()).IsFailure)                      CLog.LogError("Failed to set world transformation");                  //Apply texture                  if (_Device.SetTexture(0' _VerticesTextures.Dequeue()).IsFailure)                      CLog.LogError("Failed to set texture");                  //Draw 2 triangles from vertexbuffer                  if (_Device.DrawIndexedPrimitives(PrimitiveType.TriangleList' i' 0' 4' 0' 2).IsFailure)                      CLog.LogError("Failed to draw quad");              }
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The following statement contains a magic number: for (int i = 0; i < _Vertices.Count; i += 4)              {                  //Apply rotation                  if (_Device.SetTransform(TransformState.World' _VerticesRotationMatrices.Dequeue()).IsFailure)                      CLog.LogError("Failed to set world transformation");                  //Apply texture                  if (_Device.SetTexture(0' _VerticesTextures.Dequeue()).IsFailure)                      CLog.LogError("Failed to set texture");                  //Draw 2 triangles from vertexbuffer                  if (_Device.DrawIndexedPrimitives(PrimitiveType.TriangleList' i' 0' 4' 0' 2).IsFailure)                      CLog.LogError("Failed to draw quad");              }
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The following statement contains a magic number: for (int i = 0; i < _Vertices.Count; i += 4)              {                  //Apply rotation                  if (_Device.SetTransform(TransformState.World' _VerticesRotationMatrices.Dequeue()).IsFailure)                      CLog.LogError("Failed to set world transformation");                  //Apply texture                  if (_Device.SetTexture(0' _VerticesTextures.Dequeue()).IsFailure)                      CLog.LogError("Failed to set texture");                  //Draw 2 triangles from vertexbuffer                  if (_Device.DrawIndexedPrimitives(PrimitiveType.TriangleList' i' 0' 4' 0' 2).IsFailure)                      CLog.LogError("Failed to draw quad");              }
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_WriteDataToTexture,The following statement contains a magic number: int rowWidth = 4 * texture.DataSize.Width;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0));
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0));
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: if (Math.Abs(rot) > float.Epsilon)              {                  float rotation = rot * (float)Math.PI / 180;                  float centerX = (rx1 + rx2) / 2f;                  float centerY = -(ry1 + ry2) / 2f;                    Matrix translationA = Matrix.Translation(-centerX' -centerY' 0);                  Matrix rotationMat = Matrix.RotationZ(-rotation);                  Matrix translationB = Matrix.Translation(centerX' centerY' 0);                    //Multiplicate the matrices to get the real world matrix'                  //First shift the texture into the center                  //Rotate it and shift it back to the origin position                  //Apply the originTranslation after                  Matrix result = translationA * rotationMat * translationB * originTranslation;                  return result;              }
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CDrawWinForm,The following statement contains a magic number: ClientSize = new Size(1280' 720);
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CDrawWinForm,The following statement contains a magic number: ClientSize = new Size(1280' 720);
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_DrawBuffer,The following statement contains a magic number: if (ClientSize.Width / (float)ClientSize.Height > CSettings.GetRenderAspect())              {                  w = (int)Math.Round(ClientSize.Height * CSettings.GetRenderAspect());                  x = (ClientSize.Width - w) / 2;              }              else              {                  h = (int)Math.Round(ClientSize.Width / CSettings.GetRenderAspect());                  y = (ClientSize.Height - h) / 2;              }
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_DrawBuffer,The following statement contains a magic number: if (ClientSize.Width / (float)ClientSize.Height > CSettings.GetRenderAspect())              {                  w = (int)Math.Round(ClientSize.Height * CSettings.GetRenderAspect());                  x = (ClientSize.Width - w) / 2;              }              else              {                  h = (int)Math.Round(ClientSize.Width / CSettings.GetRenderAspect());                  y = (ClientSize.Height - h) / 2;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: try              {  #if WIN                  var gm = new GraphicsMode(32' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #else                  var gm = new GraphicsMode(24' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #endif                  _Control = new GLControl(gm' 2' 1' GraphicsContextFlags.Default);                  if (_Control.GraphicsMode != null)                      ok = true;              }              catch (Exception)              {                  ok = false;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: try              {  #if WIN                  var gm = new GraphicsMode(32' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #else                  var gm = new GraphicsMode(24' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #endif                  _Control = new GLControl(gm' 2' 1' GraphicsContextFlags.Default);                  if (_Control.GraphicsMode != null)                      ok = true;              }              catch (Exception)              {                  ok = false;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: try              {  #if WIN                  var gm = new GraphicsMode(32' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #else                  var gm = new GraphicsMode(24' 24' 0' (int)CConfig.Config.Graphics.AAMode);  #endif                  _Control = new GLControl(gm' 2' 1' GraphicsContextFlags.Default);                  if (_Control.GraphicsMode != null)                      ok = true;              }              catch (Exception)              {                  ok = false;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: if (setValue > 32)                  setValue = 32;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: if (setValue > 32)                  setValue = 32;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: while (samples <= setValue)              {                  GraphicsMode mode;                  try                  {                      mode = new GraphicsMode(16' 0' 0' samples);                  }                  catch (Exception)                  {                      break;                  }                    if (mode.Samples != samples)                      break;                  if (samples == 0)                      samples = 2;                  else                      samples *= 2;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: while (samples <= setValue)              {                  GraphicsMode mode;                  try                  {                      mode = new GraphicsMode(16' 0' 0' samples);                  }                  catch (Exception)                  {                      break;                  }                    if (mode.Samples != samples)                      break;                  if (samples == 0)                      samples = 2;                  else                      samples *= 2;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: while (samples <= setValue)              {                  GraphicsMode mode;                  try                  {                      mode = new GraphicsMode(16' 0' 0' samples);                  }                  catch (Exception)                  {                      break;                  }                    if (mode.Samples != samples)                      break;                  if (samples == 0)                      samples = 2;                  else                      samples *= 2;              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: if (samples == 2)                  return 0;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: return samples / 2;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: for (int i = 0; i < loops; i++)              {                  SRectF newrect = rect;                  newrect.X += CSettings.RenderW * i;                    GL.Enable(EnableCap.Blend);                  GL.Color4(color.R' color.G' color.B' color.A * CGraphics.GlobalAlpha);                    GL.Begin(PrimitiveType.Quads);                  GL.MatrixMode(MatrixMode.Color);                  GL.PushMatrix();                  if (Math.Abs(newrect.Rotation) > 0.001)                  {                      GL.Translate(0.5f' 0.5f' 0);                      GL.Rotate(-newrect.Rotation' 0f' 0f' 1f);                      GL.Translate(-0.5f' -0.5f' 0);                  }                  GL.Vertex3(newrect.X' newrect.Y' newrect.Z + CGraphics.ZOffset);                  GL.Vertex3(newrect.X' newrect.Y + newrect.H' newrect.Z + CGraphics.ZOffset);                  GL.Vertex3(newrect.X + newrect.W' newrect.Y + newrect.H' newrect.Z + CGraphics.ZOffset);                  GL.Vertex3(newrect.X + newrect.W' newrect.Y' newrect.Z + CGraphics.ZOffset);                  GL.End();                  GL.PopMatrix();                  GL.Disable(EnableCap.Blend);              }
Magic Number,Vocaluxe.Lib.Draw,COpenGL,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: if (Math.Abs(rect.Rotation) > 0.001)              {                  GL.Translate(0.5f' 0.5f' 0);                  GL.Rotate(-rect.Rotation' 0f' 0f' 1f);                  GL.Translate(-0.5f' -0.5f' 0);              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_MainLoop,The following statement contains a magic number: while (_Active)              {                  Thread.Sleep(5);                    if (!_Connected)                  {                      if (!_DoConnect())                          _EvTerminate.WaitOne(1000);                  }                  else                  {                      bool startRumble;                      bool stopRumble;                      lock (_Sync)                      {                          startRumble = _RumbleTimer.ShouldStart;                          stopRumble = _RumbleTimer.ShouldStop;                      }                        if (startRumble)                          GamePad.SetVibration(_GamePadIndex' 1.0f' 1.0f);                      else if (stopRumble)                          GamePad.SetVibration(_GamePadIndex' 0.0f' 0.0f);                        _HandleButtons(GamePad.GetState(_GamePadIndex));                  }              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_MainLoop,The following statement contains a magic number: while (_Active)              {                  Thread.Sleep(5);                    if (!_Connected)                  {                      if (!_DoConnect())                          _EvTerminate.WaitOne(1000);                  }                  else                  {                      bool startRumble;                      bool stopRumble;                      lock (_Sync)                      {                          startRumble = _RumbleTimer.ShouldStart;                          stopRumble = _RumbleTimer.ShouldStop;                      }                        if (startRumble)                          GamePad.SetVibration(_GamePadIndex' 1.0f' 1.0f);                      else if (stopRumble)                          GamePad.SetVibration(_GamePadIndex' 0.0f' 0.0f);                        _HandleButtons(GamePad.GetState(_GamePadIndex));                  }              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (buttonStates.DPad.IsDown && !_OldButtonStates.DPad.IsDown)                  key = Keys.Down;              else if (buttonStates.DPad.IsUp && !_OldButtonStates.DPad.IsUp)                  key = Keys.Up;              else if (buttonStates.DPad.IsLeft && !_OldButtonStates.DPad.IsLeft)                  key = Keys.Left;              else if (buttonStates.DPad.IsRight && !_OldButtonStates.DPad.IsRight)                  key = Keys.Right;              else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released)                  key = Keys.Space;              else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released)                  key = Keys.Enter;              else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released)                  key = Keys.Escape;              else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released)                  key = Keys.Back;              else if (buttonStates.Triggers.Left >= 0.8 && _OldButtonStates.Triggers.Left < 0.8)                  key = Keys.PageUp;              else if (buttonStates.Triggers.Right >= 0.8 && _OldButtonStates.Triggers.Right < 0.8)                  key = Keys.PageDown;
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (buttonStates.DPad.IsDown && !_OldButtonStates.DPad.IsDown)                  key = Keys.Down;              else if (buttonStates.DPad.IsUp && !_OldButtonStates.DPad.IsUp)                  key = Keys.Up;              else if (buttonStates.DPad.IsLeft && !_OldButtonStates.DPad.IsLeft)                  key = Keys.Left;              else if (buttonStates.DPad.IsRight && !_OldButtonStates.DPad.IsRight)                  key = Keys.Right;              else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released)                  key = Keys.Space;              else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released)                  key = Keys.Enter;              else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released)                  key = Keys.Escape;              else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released)                  key = Keys.Back;              else if (buttonStates.Triggers.Left >= 0.8 && _OldButtonStates.Triggers.Left < 0.8)                  key = Keys.PageUp;              else if (buttonStates.Triggers.Right >= 0.8 && _OldButtonStates.Triggers.Right < 0.8)                  key = Keys.PageDown;
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (buttonStates.DPad.IsDown && !_OldButtonStates.DPad.IsDown)                  key = Keys.Down;              else if (buttonStates.DPad.IsUp && !_OldButtonStates.DPad.IsUp)                  key = Keys.Up;              else if (buttonStates.DPad.IsLeft && !_OldButtonStates.DPad.IsLeft)                  key = Keys.Left;              else if (buttonStates.DPad.IsRight && !_OldButtonStates.DPad.IsRight)                  key = Keys.Right;              else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released)                  key = Keys.Space;              else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released)                  key = Keys.Enter;              else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released)                  key = Keys.Escape;              else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released)                  key = Keys.Back;              else if (buttonStates.Triggers.Left >= 0.8 && _OldButtonStates.Triggers.Left < 0.8)                  key = Keys.PageUp;              else if (buttonStates.Triggers.Right >= 0.8 && _OldButtonStates.Triggers.Right < 0.8)                  key = Keys.PageDown;
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (buttonStates.DPad.IsDown && !_OldButtonStates.DPad.IsDown)                  key = Keys.Down;              else if (buttonStates.DPad.IsUp && !_OldButtonStates.DPad.IsUp)                  key = Keys.Up;              else if (buttonStates.DPad.IsLeft && !_OldButtonStates.DPad.IsLeft)                  key = Keys.Left;              else if (buttonStates.DPad.IsRight && !_OldButtonStates.DPad.IsRight)                  key = Keys.Right;              else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released)                  key = Keys.Space;              else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released)                  key = Keys.Enter;              else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released)                  key = Keys.Escape;              else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released)                  key = Keys.Back;              else if (buttonStates.Triggers.Left >= 0.8 && _OldButtonStates.Triggers.Left < 0.8)                  key = Keys.PageUp;              else if (buttonStates.Triggers.Right >= 0.8 && _OldButtonStates.Triggers.Right < 0.8)                  key = Keys.PageDown;
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb)              {                  var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));                  var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));                    AddMouseEvent(new SMouseEvent(ESender.Gamepad' EModifier.None' x' y' lb' false' rb' 0' false' false' false' false));              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb)              {                  var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));                  var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));                    AddMouseEvent(new SMouseEvent(ESender.Gamepad' EModifier.None' x' y' lb' false' rb' 0' false' false' false' false));              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb)              {                  var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));                  var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));                    AddMouseEvent(new SMouseEvent(ESender.Gamepad' EModifier.None' x' y' lb' false' rb' 0' false' false' false' false));              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: if (Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb)              {                  var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));                  var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));                    AddMouseEvent(new SMouseEvent(ESender.Gamepad' EModifier.None' x' y' lb' false' rb' 0' false' false' false' false));              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  if (GamePad.GetCapabilities(i).IsConnected)                  {                      _GamePadIndex = i;                      break;                  }              }
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (dx < -150 && Math.Abs(dy) < 150)              {                  _Locked = false;                  return EGesture.Back;              }
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (dx < -150 && Math.Abs(dy) < 150)              {                  _Locked = false;                  return EGesture.Back;              }
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (Math.Abs(dx) < 150 && dy > 30)              {                  _Begin.Y = newPosition.Y;                  _Begin.X = newPosition.X;                  return EGesture.ScrollDown;              }
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (Math.Abs(dx) < 150 && dy > 30)              {                  _Begin.Y = newPosition.Y;                  _Begin.X = newPosition.X;                  return EGesture.ScrollDown;              }
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (Math.Abs(dx) < 150 && dy < -30)              {                  _Begin.Y = newPosition.Y;                  _Begin.X = newPosition.X;                  return EGesture.ScrollUp;              }
Magic Number,Vocaluxe.Lib.Input,CGesture,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: if (Math.Abs(dx) < 150 && dy < -30)              {                  _Begin.Y = newPosition.Y;                  _Begin.X = newPosition.X;                  return EGesture.ScrollUp;              }
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Close,The following statement contains a magic number: while (_Streams.Count > 0)                  Thread.Sleep(5);
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,GetGlobalVolume,The following statement contains a magic number: return (_Initialized) ? (int) Math.Round(_GlobalVolume * 100) : 100;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,GetGlobalVolume,The following statement contains a magic number: return (_Initialized) ? (int) Math.Round(_GlobalVolume * 100) : 100;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetGlobalVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Fade,The following statement contains a magic number: float targetVolumeF = targetVolume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetStreamVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Open,The following statement contains a magic number: _ByteCount = 2 * _Format.ChannelCount;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,The following statement contains a magic number: lock (_MutexData)              {                  queuedCount = 0;                  for (int j = 0; j < freeBufferCt; j++)                  {                      if (_Data.BytesNotRead < _SampleBuf.Length && !(_NoMoreData && _Data.BytesNotRead > 0))                          break;                      _Data.Read(_SampleBuf);                        float volume = Volume * VolumeMax;                      //We want to scale all values. No matter how many channels we have (_ByteCount=2 or 4) we have short values                      //So just process 2 bytes a time                      for (int i = 0; i < _SampleBuf.Length; i += 2)                      {                          byte[] b = BitConverter.GetBytes((Int16)(BitConverter.ToInt16(_SampleBuf' i) * volume));                          _SampleBuf[i] = b[0];                          _SampleBuf[i + 1] = b[1];                      }                        int buffer = useQueuedBuffer ? AL.SourceUnqueueBuffer(_Source) : _Buffers[queuedCount];                          if (buffer != 0)                      {                          ALFormat alFormat = (_Format.ChannelCount == 2) ? ALFormat.Stereo16 : ALFormat.Mono16;                          AL.BufferData(buffer' alFormat' _SampleBuf' _SampleBuf.Length' _Format.SamplesPerSecond);                          AL.SourceQueueBuffer(_Source' buffer);                      }                      queuedCount++;                  }              }
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,The following statement contains a magic number: lock (_MutexData)              {                  queuedCount = 0;                  for (int j = 0; j < freeBufferCt; j++)                  {                      if (_Data.BytesNotRead < _SampleBuf.Length && !(_NoMoreData && _Data.BytesNotRead > 0))                          break;                      _Data.Read(_SampleBuf);                        float volume = Volume * VolumeMax;                      //We want to scale all values. No matter how many channels we have (_ByteCount=2 or 4) we have short values                      //So just process 2 bytes a time                      for (int i = 0; i < _SampleBuf.Length; i += 2)                      {                          byte[] b = BitConverter.GetBytes((Int16)(BitConverter.ToInt16(_SampleBuf' i) * volume));                          _SampleBuf[i] = b[0];                          _SampleBuf[i + 1] = b[1];                      }                        int buffer = useQueuedBuffer ? AL.SourceUnqueueBuffer(_Source) : _Buffers[queuedCount];                          if (buffer != 0)                      {                          ALFormat alFormat = (_Format.ChannelCount == 2) ? ALFormat.Stereo16 : ALFormat.Mono16;                          AL.BufferData(buffer' alFormat' _SampleBuf' _SampleBuf.Length' _Format.SamplesPerSecond);                          AL.SourceQueueBuffer(_Source' buffer);                      }                      queuedCount++;                  }              }
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: try              {                  _PaHandle = new CPortAudioHandle();                    int hostApi = _PaHandle.GetHostApi();                  _ApiInfo = PortAudioSharp.PortAudio.Pa_GetHostApiInfo(hostApi);                  _OutputDeviceInfo = PortAudioSharp.PortAudio.Pa_GetDeviceInfo(_ApiInfo.defaultOutputDevice);                  if (_OutputDeviceInfo.defaultLowOutputLatency < 0.1)                      _OutputDeviceInfo.defaultLowOutputLatency = 0.1;                    _PaStreamCallback = _ProcessNewData;              }              catch (Exception)              {                  Dispose();                  CLog.LogError("Error Init PortAudio Playback");                  return false;              }
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: try              {                  _PaHandle = new CPortAudioHandle();                    int hostApi = _PaHandle.GetHostApi();                  _ApiInfo = PortAudioSharp.PortAudio.Pa_GetHostApiInfo(hostApi);                  _OutputDeviceInfo = PortAudioSharp.PortAudio.Pa_GetDeviceInfo(_ApiInfo.defaultOutputDevice);                  if (_OutputDeviceInfo.defaultLowOutputLatency < 0.1)                      _OutputDeviceInfo.defaultLowOutputLatency = 0.1;                    _PaStreamCallback = _ProcessNewData;              }              catch (Exception)              {                  Dispose();                  CLog.LogError("Error Init PortAudio Playback");                  return false;              }
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: _ByteCount = 2 * format.ChannelCount;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: if (!_PaHandle.OpenOutputStream(                  out _Stream'                  ref outputParams'                  format.SamplesPerSecond'                  (uint)CConfig.Config.Sound.AudioBufferSize / 2'                  PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                  _PaStreamCallback'                  IntPtr.Zero) || _Stream == IntPtr.Zero)              {                  Dispose();                  return false;              }
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,_ProcessNewData,The following statement contains a magic number: lock (_LockData)              {                  int dataLen = _Data.BytesNotRead;                  if ((_NoMoreData && dataLen > 0) || dataLen >= buf.Length)                  {                      dataLen = Math.Min(dataLen' buf.Length);                      _Data.Read(buf);                      //We want to scale all values. No matter how many channels we have (_ByteCount=2 or 4) we have short values                      //So just process 2 bytes a time                      float volume = Volume * VolumeMax;                      for (int i = 0; i < dataLen; i += 2)                      {                          byte[] b = BitConverter.GetBytes((Int16)(BitConverter.ToInt16(buf' i) * volume));                          buf[i] = b[0];                          buf[i + 1] = b[1];                      }                      float latency = buf.Length / _BytesPerSecond + _Latency;                      float time = _TimeCode - _Data.BytesNotRead / _BytesPerSecond - latency;                      _SyncTimer.Update(time);                  }                    if (_Data.BytesNotRead < _BeginRefill && !_NoMoreData)                      _EventDecode.Set();              }
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: if (Stopwatch.IsHighResolution && ticks != 0)                  dt = (float)(ticks * nanosecPerTick / 1000000000.0);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,Input,The following statement contains a magic number: Analyzer_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,GetNote,The following statement contains a magic number: int note = (int)Math.Round(Analyzer_FindNote(_Instance' 60' 1800));
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,GetNote,The following statement contains a magic number: int note = (int)Math.Round(Analyzer_FindNote(_Instance' 60' 1800));
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_InitNext,The following statement contains a magic number: byte[] data = new byte[4096 * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_InitNext,The following statement contains a magic number: byte[] data = new byte[4096 * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG3.wav"' 19);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG3Miss.wav"' 19);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG4.wav"' 31);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: for (int i = 0; i < _Analyzers.Count; i++)              {                  string msg = _Analyzers[i].GetType().Name + ":";                  msg += " Errors=" + (_TestCount - _PassedCount[i]);                  msg += " Passed=" + _PassedCount[i];                  msg += " Total=" + _TestCount;                  msg += " Speed=" + _SamplesPerSec[i] / 1000 + "kSamples/s (=" + (_SamplesPerSec[i] / 44100) + "rec.s/s)";                  CBase.Log.LogDebug(msg);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: for (int i = 0; i < _Analyzers.Count; i++)              {                  string msg = _Analyzers[i].GetType().Name + ":";                  msg += " Errors=" + (_TestCount - _PassedCount[i]);                  msg += " Passed=" + _PassedCount[i];                  msg += " Total=" + _TestCount;                  msg += " Speed=" + _SamplesPerSec[i] / 1000 + "kSamples/s (=" + (_SamplesPerSec[i] / 44100) + "rec.s/s)";                  CBase.Log.LogDebug(msg);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: const int samplesPerBuffer = 512;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: byte[] data2 = new byte[samplesPerBuffer * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: const int repeats = 100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' 5)' 44100' samplesPerBuffer * repeats' ref angle' out data);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' 5)' 44100' samplesPerBuffer * repeats' ref angle' out data);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: for (int i = 0; i < _Analyzers.Count; i++)              {                  CPitchTracker analyzer = _Analyzers[i];                  Stopwatch sw = new Stopwatch();                  sw.Start();                  for (int j = 0; j < repeats; j++)                  {                      Buffer.BlockCopy(data' 0' data2' 0' samplesPerBuffer * 2);                      analyzer.Input(data2);                      analyzer.GetNote(out _MaxVolume' _Weights[i]);                  }                  sw.Stop();                  _SamplesPerSec[i] = (int)Math.Round(samplesPerBuffer * repeats / (sw.ElapsedMilliseconds / 1000.0));              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: for (int i = 0; i < _Analyzers.Count; i++)              {                  CPitchTracker analyzer = _Analyzers[i];                  Stopwatch sw = new Stopwatch();                  sw.Start();                  for (int j = 0; j < repeats; j++)                  {                      Buffer.BlockCopy(data' 0' data2' 0' samplesPerBuffer * 2);                      analyzer.Input(data2);                      analyzer.GetNote(out _MaxVolume' _Weights[i]);                  }                  sw.Stop();                  _SamplesPerSec[i] = (int)Math.Round(samplesPerBuffer * repeats / (sw.ElapsedMilliseconds / 1000.0));              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: tone += 24;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: string result = notes[tone % 12];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: if (withOctave)                  result += (tone / 12);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int toneTo = 47;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int sampleCt = 4096;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int batchCt = 512;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: byte[] data2 = new byte[batchCt * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: for (int distort = 0; distort < 10; distort++)              {                  //Do a reset first as we actually have an impossible situation (drop by multiple octaves)                  byte[] data = new byte[sampleCt * 2];                  _Process(data);                  for (int tone = toneFrom; tone <= toneTo; tone++)                  {                      _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);                      if (tone == 46 && distort == 4)                          data = new byte[data.Length];                      _Distort(data' tone' distort);                        for (int i = 0; i < sampleCt / batchCt; i++)                      {                          Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);                          _Process(data2);                          if (i * batchCt < 2048)                              continue;                          _CurTestCount++;                          bool ok = true;                          for (int j = 0; j < valids.Length; j++)                          {                              valids[j] = _Tones[j] == tone;                              if (!valids[j])                                  ok = false;                              else                                  _CurPassedCount[j]++;                          }                          if (ok)                              continue;                          string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as ";                          for (int j = 0; j < valids.Length; j++)                              msg += _ToneToNote(_Tones[j]) + (valids[j] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                          /*CWavFile w = new CWavFile();                          w.Create(tone + "-" + distort + ".wav"' 1' 44100' 16);                          w.Write16BitSamples(data);                          w.Close();*/                      }                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: if (type < 9)              {                  int newTone = 1;                  switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }                  byte[] data2;                  double angle = 0;                  _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);                  Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);              }              else              {                  Random r = new Random(0xBEEF);                  for (int i = 0; i < sdata.Length; i++)                      sdata[i] = (short)(r.Next() - Int16.MinValue);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: short[] sdata = new short[data.Length / 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: for (int i = 0; i < distortCt; i++)                  distortions[i] = _GetDistort(data.Length / 2' tone' i);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: for (int i = 0; i < sdata.Length; i++)              {                  double distortion = 0;                  for (int j = 0; j < distortCt; j++)                      distortion += distortions[j][i];                  distortion /= distortCt;                  sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: for (int i = 0; i < sdata.Length; i++)              {                  double distortion = 0;                  for (int j = 0; j < distortCt; j++)                      distortion += distortions[j][i];                  distortion /= distortCt;                  sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: for (int i = 0; i < sdata.Length; i++)              {                  double distortion = 0;                  for (int j = 0; j < distortCt; j++)                      distortion += distortions[j][i];                  distortion /= distortCt;                  sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: for (int i = 0; i < sampleCt; i++)                  data16Bit[i] = (short)(Math.Sin(2 * Math.PI * i / sampleRate * freq + angle) * max);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: angle = 2 * Math.PI * sampleCt / sampleRate * freq + angle;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: angle = angle % (2 * Math.PI);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: data = new byte[data16Bit.Length * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: note.Time = 46;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: try              {                  if (!wavFile.Open(fileName))                      return;                  if (wavFile.BitsPerSample != 16)                  {                      wavFile.Close();                      return;                  }                  int samplesRead = 0;                  int curTimeIndex = -1;                  int curNote = -1;                  const int maxSamplesPerBatch = 512;                  bool[] valids = new bool[_Tones.Length];                  while (wavFile.NumSamplesLeft > maxSamplesPerBatch)                  {                      byte[] samples = wavFile.GetNextSamples16BitAsBytes(maxSamplesPerBatch' 1);                      samplesRead += samples.Length / 2;                      int time = samplesRead * 1000 / wavFile.SampleRate;                      _Process(samples);                      while (curTimeIndex + 1 < tones.Count && time >= tones[curTimeIndex + 1].Time)                      {                          curTimeIndex++;                          curNote = tones[curTimeIndex].Note;                      }                      if (curNote < 0)                          continue;                      _CurTestCount++;                      bool error = false;                      for (int i = 0; i < _Tones.Length; i++)                      {                          valids[i] = _IsNoteValid(_Tones[i]' time' tones);                          if (valids[i])                              _CurPassedCount[i]++;                          else                              error = true;                      }                      if (error)                      {                          string msg = "Note " + _ToneToNote(curNote) + " at " + time + "ms detected as ";                          for (int i = 0; i < _Tones.Length; i++)                              msg += _ToneToNote(_Tones[i]) + (valids[i] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                      }                  }              }              catch (Exception e)              {                  Console.WriteLine("Error on file " + fileName + ": " + e);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: try              {                  if (!wavFile.Open(fileName))                      return;                  if (wavFile.BitsPerSample != 16)                  {                      wavFile.Close();                      return;                  }                  int samplesRead = 0;                  int curTimeIndex = -1;                  int curNote = -1;                  const int maxSamplesPerBatch = 512;                  bool[] valids = new bool[_Tones.Length];                  while (wavFile.NumSamplesLeft > maxSamplesPerBatch)                  {                      byte[] samples = wavFile.GetNextSamples16BitAsBytes(maxSamplesPerBatch' 1);                      samplesRead += samples.Length / 2;                      int time = samplesRead * 1000 / wavFile.SampleRate;                      _Process(samples);                      while (curTimeIndex + 1 < tones.Count && time >= tones[curTimeIndex + 1].Time)                      {                          curTimeIndex++;                          curNote = tones[curTimeIndex].Note;                      }                      if (curNote < 0)                          continue;                      _CurTestCount++;                      bool error = false;                      for (int i = 0; i < _Tones.Length; i++)                      {                          valids[i] = _IsNoteValid(_Tones[i]' time' tones);                          if (valids[i])                              _CurPassedCount[i]++;                          else                              error = true;                      }                      if (error)                      {                          string msg = "Note " + _ToneToNote(curNote) + " at " + time + "ms detected as ";                          for (int i = 0; i < _Tones.Length; i++)                              msg += _ToneToNote(_Tones[i]) + (valids[i] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                      }                  }              }              catch (Exception e)              {                  Console.WriteLine("Error on file " + fileName + ": " + e);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: try              {                  if (!wavFile.Open(fileName))                      return;                  if (wavFile.BitsPerSample != 16)                  {                      wavFile.Close();                      return;                  }                  int samplesRead = 0;                  int curTimeIndex = -1;                  int curNote = -1;                  const int maxSamplesPerBatch = 512;                  bool[] valids = new bool[_Tones.Length];                  while (wavFile.NumSamplesLeft > maxSamplesPerBatch)                  {                      byte[] samples = wavFile.GetNextSamples16BitAsBytes(maxSamplesPerBatch' 1);                      samplesRead += samples.Length / 2;                      int time = samplesRead * 1000 / wavFile.SampleRate;                      _Process(samples);                      while (curTimeIndex + 1 < tones.Count && time >= tones[curTimeIndex + 1].Time)                      {                          curTimeIndex++;                          curNote = tones[curTimeIndex].Note;                      }                      if (curNote < 0)                          continue;                      _CurTestCount++;                      bool error = false;                      for (int i = 0; i < _Tones.Length; i++)                      {                          valids[i] = _IsNoteValid(_Tones[i]' time' tones);                          if (valids[i])                              _CurPassedCount[i]++;                          else                              error = true;                      }                      if (error)                      {                          string msg = "Note " + _ToneToNote(curNote) + " at " + time + "ms detected as ";                          for (int i = 0; i < _Tones.Length; i++)                              msg += _ToneToNote(_Tones[i]) + (valids[i] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                      }                  }              }              catch (Exception e)              {                  Console.WriteLine("Error on file " + fileName + ": " + e);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: try              {                  if (!wavFile.Open(fileName))                      return;                  if (wavFile.BitsPerSample != 16)                  {                      wavFile.Close();                      return;                  }                  int samplesRead = 0;                  int curTimeIndex = -1;                  int curNote = -1;                  const int maxSamplesPerBatch = 512;                  bool[] valids = new bool[_Tones.Length];                  while (wavFile.NumSamplesLeft > maxSamplesPerBatch)                  {                      byte[] samples = wavFile.GetNextSamples16BitAsBytes(maxSamplesPerBatch' 1);                      samplesRead += samples.Length / 2;                      int time = samplesRead * 1000 / wavFile.SampleRate;                      _Process(samples);                      while (curTimeIndex + 1 < tones.Count && time >= tones[curTimeIndex + 1].Time)                      {                          curTimeIndex++;                          curNote = tones[curTimeIndex].Note;                      }                      if (curNote < 0)                          continue;                      _CurTestCount++;                      bool error = false;                      for (int i = 0; i < _Tones.Length; i++)                      {                          valids[i] = _IsNoteValid(_Tones[i]' time' tones);                          if (valids[i])                              _CurPassedCount[i]++;                          else                              error = true;                      }                      if (error)                      {                          string msg = "Note " + _ToneToNote(curNote) + " at " + time + "ms detected as ";                          for (int i = 0; i < _Tones.Length; i++)                              msg += _ToneToNote(_Tones[i]) + (valids[i] ? "" : "(!)") + "; ";                          CBase.Log.LogDebug(msg);                      }                  }              }              catch (Exception e)              {                  Console.WriteLine("Error on file " + fileName + ": " + e);              }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPtAKF,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPtAKF.cs,Input,The following statement contains a magic number: PtAKF_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPtDyWa,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPtDyWa.cs,Input,The following statement contains a magic number: PtDyWa_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record,CBuffer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CBuffer.cs,AnalyzeBuffer,The following statement contains a magic number: if (tone >= 0)              {                  ToneAbs = tone;                  Tone = ToneAbs % 12;                  ToneValid = true;              }              else                  ToneValid = false;
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: int doubleChannels = totalChannels * 2;
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: for (int i = 0; i < data.Length / doubleChannels; ++i)              {                  for (int j = 0; j < doubleChannels; ++j)                      allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];              }
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: for (int i = 0; i < data.Length / doubleChannels; ++i)              {                  for (int j = 0; j < doubleChannels; ++j)                      allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];              }
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: for (int i = 0; i < data.Length / doubleChannels; ++i)              {                  for (int j = 0; j < doubleChannels; ++j)                      allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];              }
Magic Number,Vocaluxe.Lib.Sound.Record,CDelayTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Start,The following statement contains a magic number: for (int i = 0; i < _DelaysChannel.Length; i++)              {                  if (i < channels.Length && channels[i] >= 0)                  {                      _DelaysChannel[i].Finished = false;                      _DelaysChannel[i].Channel = channels[i];                      _DelaysChannel[i].OrigThreshold = CRecord.GetVolumeThreshold(channels[i]);                      CRecord.SetVolumeThreshold(channels[i]' _DelaysChannel[i].OrigThreshold / 3);                  }                  else                      _DelaysChannel[i].Channel = -1;              }
Magic Number,Vocaluxe.Lib.Sound.Record,CDelayTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Update,The following statement contains a magic number: if (time <= _MaxDelayTime)              {                  for (int i = 0; i < _DelaysChannel.Length; i++)                  {                      if (_DelaysChannel[i].Channel < 0 || _DelaysChannel[i].Finished)                          continue;                      if (CRecord.GetTone(_DelaysChannel[i].Channel) == 9)                      {                          Delays[i] = (int)time;                          _DelaysChannel[i].Finished = true;                      }                      else                          isActive = true;                  }              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (!_Glyphs.TryGetValue(chr' out glyph))              {                  float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;                  glyph = new CGlyph(chr' this' maxHeight);                  _Glyphs.Add(chr' glyph);              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (!_Glyphs.TryGetValue(chr' out glyph))              {                  float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;                  glyph = new CGlyph(chr' this' maxHeight);                  _Glyphs.Add(chr' glyph);              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (!_Glyphs.TryGetValue(chr' out glyph))              {                  float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;                  glyph = new CGlyph(chr' this' maxHeight);                  _Glyphs.Add(chr' glyph);              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (glyph.MaxHeight + 50 < height)              {                  glyph.UnloadTexture();                  glyph = new CGlyph(chr' this' (float)Math.Round(height / 50) * 50);                  _Glyphs[chr] = glyph;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (glyph.MaxHeight + 50 < height)              {                  glyph.UnloadTexture();                  glyph = new CGlyph(chr' this' (float)Math.Round(height / 50) * 50);                  _Glyphs[chr] = glyph;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: if (glyph.MaxHeight + 50 < height)              {                  glyph.UnloadTexture();                  glyph = new CGlyph(chr' this' (float)Math.Round(height / 50) * 50);                  _Glyphs[chr] = glyph;              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(IntPtr.Zero))              {                  fullSize = g.MeasureString(chrString' fo);                  if (chr != ' ')                  {                      //Gets exact height and width for drawing more than 1 char. But width is to small to draw char on bitmap as e.g. italic chars will get cropped                      //See https://stackoverflow.com/questions/11708621/how-to-measure-width-of-a-string-precisely                      StringFormat format = StringFormat.GenericTypographic;                      RectangleF rect = new RectangleF(0' 0' 1000' 1000);                      CharacterRange[] ranges = { new CharacterRange(0' chrString.Length) };                      format.SetMeasurableCharacterRanges(ranges);                      _BoundingBox = g.MeasureCharacterRanges(chrString' fo' rect' format)[0].GetBounds(g).Size;                        // ReSharper disable CompareOfFloatsByEqualityOperator                      if (_BoundingBox.Height == 0)                          // ReSharper restore CompareOfFloatsByEqualityOperator                          _BoundingBox.Height = fullSize.Height;                      _BoundingBox.Width += outlineSize / 2;                      _BoundingBox.Height += outlineSize;                      fullSize.Width += outlineSize;                      bmpSize = new Size((int)fullSize.Width' (int)Math.Round(_BoundingBox.Height));                  }                  else                  {                      _BoundingBox = fullSize;                      _BoundingBox.Height += outlineSize;                      bmpSize = new Size(1' 1);                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(IntPtr.Zero))              {                  fullSize = g.MeasureString(chrString' fo);                  if (chr != ' ')                  {                      //Gets exact height and width for drawing more than 1 char. But width is to small to draw char on bitmap as e.g. italic chars will get cropped                      //See https://stackoverflow.com/questions/11708621/how-to-measure-width-of-a-string-precisely                      StringFormat format = StringFormat.GenericTypographic;                      RectangleF rect = new RectangleF(0' 0' 1000' 1000);                      CharacterRange[] ranges = { new CharacterRange(0' chrString.Length) };                      format.SetMeasurableCharacterRanges(ranges);                      _BoundingBox = g.MeasureCharacterRanges(chrString' fo' rect' format)[0].GetBounds(g).Size;                        // ReSharper disable CompareOfFloatsByEqualityOperator                      if (_BoundingBox.Height == 0)                          // ReSharper restore CompareOfFloatsByEqualityOperator                          _BoundingBox.Height = fullSize.Height;                      _BoundingBox.Width += outlineSize / 2;                      _BoundingBox.Height += outlineSize;                      fullSize.Width += outlineSize;                      bmpSize = new Size((int)fullSize.Width' (int)Math.Round(_BoundingBox.Height));                  }                  else                  {                      _BoundingBox = fullSize;                      _BoundingBox.Height += outlineSize;                      bmpSize = new Size(1' 1);                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (Graphics g = Graphics.FromHwnd(IntPtr.Zero))              {                  fullSize = g.MeasureString(chrString' fo);                  if (chr != ' ')                  {                      //Gets exact height and width for drawing more than 1 char. But width is to small to draw char on bitmap as e.g. italic chars will get cropped                      //See https://stackoverflow.com/questions/11708621/how-to-measure-width-of-a-string-precisely                      StringFormat format = StringFormat.GenericTypographic;                      RectangleF rect = new RectangleF(0' 0' 1000' 1000);                      CharacterRange[] ranges = { new CharacterRange(0' chrString.Length) };                      format.SetMeasurableCharacterRanges(ranges);                      _BoundingBox = g.MeasureCharacterRanges(chrString' fo' rect' format)[0].GetBounds(g).Size;                        // ReSharper disable CompareOfFloatsByEqualityOperator                      if (_BoundingBox.Height == 0)                          // ReSharper restore CompareOfFloatsByEqualityOperator                          _BoundingBox.Height = fullSize.Height;                      _BoundingBox.Width += outlineSize / 2;                      _BoundingBox.Height += outlineSize;                      fullSize.Width += outlineSize;                      bmpSize = new Size((int)fullSize.Width' (int)Math.Round(_BoundingBox.Height));                  }                  else                  {                      _BoundingBox = fullSize;                      _BoundingBox.Height += outlineSize;                      bmpSize = new Size(1' 1);                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (var bmp = new Bitmap(bmpSize.Width' bmpSize.Height' PixelFormat.Format32bppArgb))              using (Graphics g = Graphics.FromImage(bmp))              {                  g.Clear(Color.Transparent);                    if (chr == ' ')                  {                      _Texture = CDraw.AddTexture(bmp);                      _DrawBounding = new RectangleF(0' 0' 0' 0);                  }                  else                  {                      g.SmoothingMode = SmoothingMode.AntiAlias;                      g.InterpolationMode = InterpolationMode.HighQualityBicubic;                      g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                        var point = new PointF(outlineSize / 2' outlineSize / 4);                        using (var path = new GraphicsPath())                      {                          //Have to use size in em not pixels!                          float emSize = fo.Size * fo.FontFamily.GetCellAscent(fo.Style) / fo.FontFamily.GetEmHeight(fo.Style);                          path.AddString(chrString' fo.FontFamily' (int)fo.Style' emSize' point' new StringFormat());                            using (var pen = new Pen(fontStyle.OutlineColor.AsColor()' outlineSize))                          {                              pen.LineJoin = LineJoin.Round;                              g.DrawPath(pen' path);                              g.FillPath(Brushes.White' path);                          }                      }                      _DrawBounding = _GetRealBounds(bmp);                      using (Bitmap bmpCropped = bmp.Clone(_DrawBounding' PixelFormat.Format32bppArgb))                      {                          float dx = (fullSize.Width - _BoundingBox.Width - 1) / 2;                          _DrawBounding.X -= dx;                          _Texture = CDraw.AddTexture(bmpCropped);                          /*_DrawBounding.X *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Y *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Width = _Texture.Width;                          _DrawBounding.Height = _Texture.Height;*/  #if FONT_DEBUG_OUTPUT                          if (Char.IsLetterOrDigit(chr))                          {                              if (outline > 0)                                  bmpCropped.Save("font_" + chr + "o" + CFonts.Style + "2.png"' ImageFormat.Png);                              else                                  bmpCropped.Save("font_" + chr + CFonts.Style + "2.png"' ImageFormat.Png);                          }  #endif                      }                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (var bmp = new Bitmap(bmpSize.Width' bmpSize.Height' PixelFormat.Format32bppArgb))              using (Graphics g = Graphics.FromImage(bmp))              {                  g.Clear(Color.Transparent);                    if (chr == ' ')                  {                      _Texture = CDraw.AddTexture(bmp);                      _DrawBounding = new RectangleF(0' 0' 0' 0);                  }                  else                  {                      g.SmoothingMode = SmoothingMode.AntiAlias;                      g.InterpolationMode = InterpolationMode.HighQualityBicubic;                      g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                        var point = new PointF(outlineSize / 2' outlineSize / 4);                        using (var path = new GraphicsPath())                      {                          //Have to use size in em not pixels!                          float emSize = fo.Size * fo.FontFamily.GetCellAscent(fo.Style) / fo.FontFamily.GetEmHeight(fo.Style);                          path.AddString(chrString' fo.FontFamily' (int)fo.Style' emSize' point' new StringFormat());                            using (var pen = new Pen(fontStyle.OutlineColor.AsColor()' outlineSize))                          {                              pen.LineJoin = LineJoin.Round;                              g.DrawPath(pen' path);                              g.FillPath(Brushes.White' path);                          }                      }                      _DrawBounding = _GetRealBounds(bmp);                      using (Bitmap bmpCropped = bmp.Clone(_DrawBounding' PixelFormat.Format32bppArgb))                      {                          float dx = (fullSize.Width - _BoundingBox.Width - 1) / 2;                          _DrawBounding.X -= dx;                          _Texture = CDraw.AddTexture(bmpCropped);                          /*_DrawBounding.X *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Y *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Width = _Texture.Width;                          _DrawBounding.Height = _Texture.Height;*/  #if FONT_DEBUG_OUTPUT                          if (Char.IsLetterOrDigit(chr))                          {                              if (outline > 0)                                  bmpCropped.Save("font_" + chr + "o" + CFonts.Style + "2.png"' ImageFormat.Png);                              else                                  bmpCropped.Save("font_" + chr + CFonts.Style + "2.png"' ImageFormat.Png);                          }  #endif                      }                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: using (var bmp = new Bitmap(bmpSize.Width' bmpSize.Height' PixelFormat.Format32bppArgb))              using (Graphics g = Graphics.FromImage(bmp))              {                  g.Clear(Color.Transparent);                    if (chr == ' ')                  {                      _Texture = CDraw.AddTexture(bmp);                      _DrawBounding = new RectangleF(0' 0' 0' 0);                  }                  else                  {                      g.SmoothingMode = SmoothingMode.AntiAlias;                      g.InterpolationMode = InterpolationMode.HighQualityBicubic;                      g.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;                        var point = new PointF(outlineSize / 2' outlineSize / 4);                        using (var path = new GraphicsPath())                      {                          //Have to use size in em not pixels!                          float emSize = fo.Size * fo.FontFamily.GetCellAscent(fo.Style) / fo.FontFamily.GetEmHeight(fo.Style);                          path.AddString(chrString' fo.FontFamily' (int)fo.Style' emSize' point' new StringFormat());                            using (var pen = new Pen(fontStyle.OutlineColor.AsColor()' outlineSize))                          {                              pen.LineJoin = LineJoin.Round;                              g.DrawPath(pen' path);                              g.FillPath(Brushes.White' path);                          }                      }                      _DrawBounding = _GetRealBounds(bmp);                      using (Bitmap bmpCropped = bmp.Clone(_DrawBounding' PixelFormat.Format32bppArgb))                      {                          float dx = (fullSize.Width - _BoundingBox.Width - 1) / 2;                          _DrawBounding.X -= dx;                          _Texture = CDraw.AddTexture(bmpCropped);                          /*_DrawBounding.X *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Y *= _Texture.Width / _DrawBounding.Width;                          _DrawBounding.Width = _Texture.Width;                          _DrawBounding.Height = _Texture.Height;*/  #if FONT_DEBUG_OUTPUT                          if (Char.IsLetterOrDigit(chr))                          {                              if (outline > 0)                                  bmpCropped.Save("font_" + chr + "o" + CFonts.Style + "2.png"' ImageFormat.Png);                              else                                  bmpCropped.Save("font_" + chr + CFonts.Style + "2.png"' ImageFormat.Png);                          }  #endif                      }                  }              }
Magic Number,Vocaluxe.Base.Fonts,CGlyph,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,_GetRealBounds,The following statement contains a magic number: const int d = 4;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,CSoundCardSource,The following statement contains a magic number: SampleRateKhz = 44.1;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,CSoundCardSource,The following statement contains a magic number: _BufferSize = 2048;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _WaveFormat.BitsPerSample = 16;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _WaveFormat.BlockAlignment = (short)(_Channels * (_WaveFormat.BitsPerSample / 8));
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _BufferPortionCount = 2;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CDirectSoundRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CDirectSoundRecord.cs,Start,The following statement contains a magic number: foreach (CRecordDevice device in _Devices)              {                  bool usingDevice = false;                  for (int ch = 0; ch < device.Channels; ++ch)                  {                      if (device.PlayerChannel[ch] > 0)                          usingDevice = true;                  }                  if (usingDevice)                  {                      var source = new CSoundCardSource(device.Driver' (short)device.Channels) { SampleRateKhz = 44.1 };                      source.SampleDataReady += _OnDataReady;                      source.Start();                        _Sources.Add(source);                  }              }
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,CDecoderThread,The following statement contains a magic number: _Framebuffer = new CFramebuffer(10);
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,SyncTime,The following statement contains a magic number: if (RequestTime - time >= _FrameDuration)              {                  //Jump back more than 1 frame. To guarantee the order in the buffer use Skip() which clears the buffer                  Skip(time);              }              else if (time - RequestTime >= _FrameDuration)              {                  //we were more than 1 frame to slow -> Jump forward (This is save' as the decoder will skip frames if necessary)                  // ReSharper disable CompareOfFloatsByEqualityOperator                  if (Loop && RequestTime == _LoopedRequestTime)                      // ReSharper restore CompareOfFloatsByEqualityOperator                  {                      //In a loop our decoder may have reset RequestTime to 0 but we want a frame from the end of the video                      //Skipping forward is fatal as it resets the decoder to decode already decoded frames causing lags                      //So first check if we have a valid frame in our buffer                      _Framebuffer.ResetStack();                      CFramebuffer.CFrame frame;                      while ((frame = _Framebuffer.Pop()) != null)                      {                          if (frame.Time + _FrameDuration >= time)                              return;                      }                      //If we don't the Length might be inaccurate (e.g. last frame ends at 19.98 but Length=20)                      if (time >= Length - 2 * _FrameDuration)                          return;                  }                    RequestTime = time;              }
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_OpenVideoStream,The following statement contains a magic number: _Framebuffer.Init(_Width * _Height * 4);
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Decode,The following statement contains a magic number: const int minFrameDropCount = 4;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Decode,The following statement contains a magic number: const int seekThreshold = 25;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_DropWithSkip,The following statement contains a magic number: frameDropCount += frameDropCount / 16;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,The following statement contains a magic number: while (!_Terminated)              {                  if (_NoMoreFrames)                      _EvNoMoreFrames.WaitOne();                  if (_RequestSkip)                  {                      _RequestSkip = false;                      _NoMoreFrames = false;                      _Skip();                  }                    if (!_FrameAvailable)                      _Decode();                    //Bail out if we want to skip                  if (!_RequestSkip && _FrameAvailable)                  {                      if (!_Framebuffer.IsFull())                      {                          if (_CopyDecodedFrameToBuffer())                          {                              //Do not write to buffer if we want to skip. So check and write have to be done atomicly                              lock (_BufferMutex)                              {                                  if (_RequestSkip)                                      continue; //Frame is invalid if we want to skip                                  _Framebuffer.SetWritten();                              }                          }                          _WaitCount = 0;                          Thread.Sleep(5); //Sleep for a bit to give other threads an opportunity to run                      }                      else if (_WaitCount > 3)                      {                          _IsSleeping = true;                          _EvWakeUp.WaitOne();                      }                      else                      {                          Thread.Sleep((int)(_Framebuffer.Size * _FrameDuration * 1000 / 2));                          _WaitCount++;                      }                  }              }
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,The following statement contains a magic number: while (!_Terminated)              {                  if (_NoMoreFrames)                      _EvNoMoreFrames.WaitOne();                  if (_RequestSkip)                  {                      _RequestSkip = false;                      _NoMoreFrames = false;                      _Skip();                  }                    if (!_FrameAvailable)                      _Decode();                    //Bail out if we want to skip                  if (!_RequestSkip && _FrameAvailable)                  {                      if (!_Framebuffer.IsFull())                      {                          if (_CopyDecodedFrameToBuffer())                          {                              //Do not write to buffer if we want to skip. So check and write have to be done atomicly                              lock (_BufferMutex)                              {                                  if (_RequestSkip)                                      continue; //Frame is invalid if we want to skip                                  _Framebuffer.SetWritten();                              }                          }                          _WaitCount = 0;                          Thread.Sleep(5); //Sleep for a bit to give other threads an opportunity to run                      }                      else if (_WaitCount > 3)                      {                          _IsSleeping = true;                          _EvWakeUp.WaitOne();                      }                      else                      {                          Thread.Sleep((int)(_Framebuffer.Size * _FrameDuration * 1000 / 2));                          _WaitCount++;                      }                  }              }
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,The following statement contains a magic number: while (!_Terminated)              {                  if (_NoMoreFrames)                      _EvNoMoreFrames.WaitOne();                  if (_RequestSkip)                  {                      _RequestSkip = false;                      _NoMoreFrames = false;                      _Skip();                  }                    if (!_FrameAvailable)                      _Decode();                    //Bail out if we want to skip                  if (!_RequestSkip && _FrameAvailable)                  {                      if (!_Framebuffer.IsFull())                      {                          if (_CopyDecodedFrameToBuffer())                          {                              //Do not write to buffer if we want to skip. So check and write have to be done atomicly                              lock (_BufferMutex)                              {                                  if (_RequestSkip)                                      continue; //Frame is invalid if we want to skip                                  _Framebuffer.SetWritten();                              }                          }                          _WaitCount = 0;                          Thread.Sleep(5); //Sleep for a bit to give other threads an opportunity to run                      }                      else if (_WaitCount > 3)                      {                          _IsSleeping = true;                          _EvWakeUp.WaitOne();                      }                      else                      {                          Thread.Sleep((int)(_Framebuffer.Size * _FrameDuration * 1000 / 2));                          _WaitCount++;                      }                  }              }
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,The following statement contains a magic number: while (!_Terminated)              {                  if (_NoMoreFrames)                      _EvNoMoreFrames.WaitOne();                  if (_RequestSkip)                  {                      _RequestSkip = false;                      _NoMoreFrames = false;                      _Skip();                  }                    if (!_FrameAvailable)                      _Decode();                    //Bail out if we want to skip                  if (!_RequestSkip && _FrameAvailable)                  {                      if (!_Framebuffer.IsFull())                      {                          if (_CopyDecodedFrameToBuffer())                          {                              //Do not write to buffer if we want to skip. So check and write have to be done atomicly                              lock (_BufferMutex)                              {                                  if (_RequestSkip)                                      continue; //Frame is invalid if we want to skip                                  _Framebuffer.SetWritten();                              }                          }                          _WaitCount = 0;                          Thread.Sleep(5); //Sleep for a bit to give other threads an opportunity to run                      }                      else if (_WaitCount > 3)                      {                          _IsSleeping = true;                          _EvWakeUp.WaitOne();                      }                      else                      {                          Thread.Sleep((int)(_Framebuffer.Size * _FrameDuration * 1000 / 2));                          _WaitCount++;                      }                  }              }
Magic Number,Vocaluxe.Screens,CPopupScreenServerQR,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenServerQR.cs,_GenerateQRs,The following statement contains a magic number: _QRServerAddress = CDraw.AddTexture(qrcode.GetGraphic(20));
Magic Number,Vocaluxe.Screens,CPopupScreenVolumeControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,_SaveConfig,The following statement contains a magic number: int volume = _SelectSlides[_SelectSlideVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CPopupScreenVolumeControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,_UpdateSlides,The following statement contains a magic number: _SelectSlides[_SelectSlideVolume].Selection = volume / 5;
Magic Number,Vocaluxe.Screens,CCreditTranslation,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Reset,The following statement contains a magic number: foreach (CText t in _Texts)              {                  y += 25;                  t.Y = y;              }
Magic Number,Vocaluxe.Screens,CCreditName,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The following statement contains a magic number: _ParticleOffsetX = (int)Math.Round(particleOffsetX * image.Rect.W / image.Texture.OrigSize.Width - particle.Rect.W / 2);
Magic Number,Vocaluxe.Screens,CCreditName,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The following statement contains a magic number: _ParticleOffsetY = (int)Math.Round(particleOffsetY * image.Rect.H / image.Texture.OrigSize.Height - particle.Rect.H / 2);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: int lastY = 280;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: foreach (string[] paragraph in _Paragraphs)              {                  string line = "";                  for (int e = 0; e < paragraph.Length; e++)                  {                      if (paragraph[e] == null)                          continue;                      string newLine = " " + paragraph[e];                      CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);                      text.Visible = false;                      if (CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220))                      {                          line += newLine;                            //Check if all words are used                          if ((e + 1) == paragraph.Length)                          {                              text.Text = line;                              _ParagraphTexts.Add(text);                              line = "";                              lastY += 40;                          }                      }                      else                      {                          _ParagraphTexts.Add(text);                          line = newLine;                          lastY += 27;                      }                      _AddText(text);                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBrunzel' 502' 29' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBrunzel' 502' 29' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameDarkice' 360' 55' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameDarkice' 360' 55' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlokuep' 214' 14' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlokuep' 214' 14' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlamefire' 496' 46' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlamefire' 496' 46' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameLukeIam' 411' 26' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameLukeIam' 411' 26' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBohning' 383' 54' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBohning' 383' 54' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameMesand' 525' 13' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameMesand' 525' 13' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBabene03' 33' 26' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBabene03' 33' 26' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: int partSize = bigParticles ? 35 : 25;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: int partSize = bigParticles ? 35 : 25;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: bool isRed = _CreditNames.Count % 2 == 0;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partRectSize = bigParticles ? 25 : 20;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partRectSize = bigParticles ? 25 : 20;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partCount = bigParticles ? 8 : 6;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partCount = bigParticles ? 8 : 6;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: var particleRect = new SRectF(-1' -1' partRectSize' partRectSize' -6);
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: imgDotRect.Z = -5;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language));
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: foreach (string t in translators)              {                  y += 30;                  text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));                  _AddText(text);                  texts.Add(text);                  _NumTranslationTexts++;              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: foreach (string t in translators)              {                  y += 30;                  text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));                  _AddText(text);                  texts.Add(text);                  _NumTranslationTexts++;              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: foreach (string t in translators)              {                  y += 30;                  text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));                  _AddText(text);                  texts.Add(text);                  _NumTranslationTexts++;              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,OnShow,The following statement contains a magic number: foreach (CCreditName name in _CreditNames)              {                  name.Visible = true;                  name.Direction = isRight ? EDirection.Right : EDirection.Left;                  name.X = -name.W;                  name.Y = 580;                  name.Alpha = 1;                  isRight = !isRight;              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,OnShow,The following statement contains a magic number: _Logo.Y = -270;
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_LogoTimer.IsRunning)              {                  active = true;                    _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;                  _StarsRed.Y = _Logo.Y;                  _StarsBlue.Y = _Logo.Y;                  if (_LogoTimer.ElapsedMilliseconds >= 2000 && !_CreditsTimer.IsRunning)                      _CreditsTimer.Start();                  if (_LogoTimer.ElapsedMilliseconds >= 3000)                      _LogoTimer.Stop();              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_LogoTimer.IsRunning)              {                  active = true;                    _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;                  _StarsRed.Y = _Logo.Y;                  _StarsBlue.Y = _Logo.Y;                  if (_LogoTimer.ElapsedMilliseconds >= 2000 && !_CreditsTimer.IsRunning)                      _CreditsTimer.Start();                  if (_LogoTimer.ElapsedMilliseconds >= 3000)                      _LogoTimer.Stop();              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_LogoTimer.IsRunning)              {                  active = true;                    _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;                  _StarsRed.Y = _Logo.Y;                  _StarsBlue.Y = _Logo.Y;                  if (_LogoTimer.ElapsedMilliseconds >= 2000 && !_CreditsTimer.IsRunning)                      _CreditsTimer.Start();                  if (_LogoTimer.ElapsedMilliseconds >= 3000)                      _LogoTimer.Stop();              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_CreditsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _CreditNames.Count; i++)                  {                      if (!_CreditNames[i].Visible)                          continue;                      switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_TranslationsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _Translations.Count; i++)                   {                      if (i * 1500f < _TranslationsTimer.ElapsedMilliseconds)                      {                          if (_Translations[i].StartTime == -1)                              _Translations[i].StartTime = _TranslationsTimer.ElapsedMilliseconds;                          float newY = 720f - (520f / 5000f) * (_TranslationsTimer.ElapsedMilliseconds - _Translations[i].StartTime);                          _Translations[i].Y = newY;                      }                        if (_Translations[i].Y <= 160f)                      {                          _Translations[i].Visible = false;                          if (i == _Translations.Count - 1)                          {                              _TranslationsTimer.Stop();                              _TextTimer.Start();                              foreach (CText text in _ParagraphTexts)                                  text.Visible = true;                          }                      }                      if (_Translations[i].Y <= 360f)                      {                          //Fade out                          float alpha = ((360 - _Translations[i].Y) / 200).Clamp(0'1);                          _Translations[i].Alpha = 1 - alpha;                      }                  }                                  }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_TranslationsTimer.IsRunning)              {                  active = true;                    for (int i = 0; i < _Translations.Count; i++)                   {                      if (i * 1500f < _TranslationsTimer.ElapsedMilliseconds)                      {                          if (_Translations[i].StartTime == -1)                              _Translations[i].StartTime = _TranslationsTimer.ElapsedMilliseconds;                          float newY = 720f - (520f / 5000f) * (_TranslationsTimer.ElapsedMilliseconds - _Translations[i].StartTime);                          _Translations[i].Y = newY;                      }                        if (_Translations[i].Y <= 160f)                      {                          _Translations[i].Visible = false;                          if (i == _Translations.Count - 1)                          {                              _TranslationsTimer.Stop();                              _TextTimer.Start();                              foreach (CText text in _ParagraphTexts)                                  text.Visible = true;                          }                      }                      if (_Translations[i].Y <= 360f)                      {                          //Fade out                          float alpha = ((360 - _Translations[i].Y) / 200).Clamp(0'1);                          _Translations[i].Alpha = 1 - alpha;                      }                  }                                  }
Magic Number,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: if (_TextTimer.IsRunning)                  active = _TextTimer.ElapsedMilliseconds <= 10000;
Magic Number,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The following statement contains a magic number: if (_CurrentIntroVideo < 0)              {                  _CurrentIntroVideo = 0;                  _Intros[0].Start();              }              else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART)              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 1;                  _Intros[1].Loop = true;                  _Intros[1].Start();              }              else if ((_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished))              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 2;                  _Intros[2].Start();              }              else if (_CurrentIntroVideo == 2 && _Intros[2].IsFinished)                  _IntroOutPlayed = true;
Magic Number,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The following statement contains a magic number: if (_CurrentIntroVideo < 0)              {                  _CurrentIntroVideo = 0;                  _Intros[0].Start();              }              else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART)              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 1;                  _Intros[1].Loop = true;                  _Intros[1].Start();              }              else if ((_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished))              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 2;                  _Intros[2].Start();              }              else if (_CurrentIntroVideo == 2 && _Intros[2].IsFinished)                  _IntroOutPlayed = true;
Magic Number,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The following statement contains a magic number: if (_CurrentIntroVideo < 0)              {                  _CurrentIntroVideo = 0;                  _Intros[0].Start();              }              else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART)              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 1;                  _Intros[1].Loop = true;                  _Intros[1].Start();              }              else if ((_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished))              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 2;                  _Intros[2].Start();              }              else if (_CurrentIntroVideo == 2 && _Intros[2].IsFinished)                  _IntroOutPlayed = true;
Magic Number,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The following statement contains a magic number: if (_CurrentIntroVideo < 0)              {                  _CurrentIntroVideo = 0;                  _Intros[0].Start();              }              else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART)              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 1;                  _Intros[1].Loop = true;                  _Intros[1].Start();              }              else if ((_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished))              {                  _Intros[_CurrentIntroVideo].Close();                  _CurrentIntroVideo = 2;                  _Intros[2].Start();              }              else if (_CurrentIntroVideo == 2 && _Intros[2].IsFinished)                  _IntroOutPlayed = true;
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)              {                  case Keys.Add:                      if (CConfig.Config.Game.NumPlayers + 1 <= CSettings.MaxNumPlayer)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.Subtract:                      if (CConfig.Config.Game.NumPlayers - 1 > 0)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers - 2;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.P:                      if (!_SelectingKeyboardActive)                      {                          _SelectingFastPlayerNr = 1;                          _SelectingFast = true;                          _ResetPlayerSelections();                      }                      else                      {                          if (_SelectingFastPlayerNr + 1 <= CGame.NumPlayers)                              _SelectingFastPlayerNr++;                          else                              _SelectingFastPlayerNr = 1;                          _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                      }                      break;              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: if (_SelectingKeyboardActive)              {                  //Handle left/right/up/down                  _NameSelections[_NameSelection].HandleInput(keyEvent);                  int numberPressed = -1;                  bool resetSelection = false;                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }                  if (numberPressed > 0 || resetSelection)                  {                      if (numberPressed == _SelectingFastPlayerNr || resetSelection)                      {                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          _NameSelections[_NameSelection].FastSelection(false' -1);                      }                      else if (numberPressed <= CConfig.Config.Game.NumPlayers)                      {                          _SelectingFastPlayerNr = numberPressed;                          _NameSelections[_NameSelection].FastSelection(true' numberPressed);                      }                      _SelectingFast = false;                  }              }                  //Normal Keyboard handling              else              {                  base.HandleInput(keyEvent);                  switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                            if (_Buttons[_ButtonBack].Selected)                              CGraphics.FadeTo(EScreen.Song);                          else if (_Buttons[_ButtonStart].Selected)                              _StartSong();                            break;                        case Keys.D1:                      case Keys.NumPad1:                          _SelectingFastPlayerNr = 1;                          break;                        case Keys.D2:                      case Keys.NumPad2:                          _SelectingFastPlayerNr = 2;                          break;                        case Keys.D3:                      case Keys.NumPad3:                          _SelectingFastPlayerNr = 3;                          break;                        case Keys.D4:                      case Keys.NumPad4:                          _SelectingFastPlayerNr = 4;                          break;                        case Keys.D5:                      case Keys.NumPad5:                          _SelectingFastPlayerNr = 5;                          break;                        case Keys.D6:                      case Keys.NumPad6:                          _SelectingFastPlayerNr = 6;                          break;                      default:                          _UpdatePlayerNumber();                          break;                  }                    if (_SelectingFastPlayerNr > 0 && _SelectingFastPlayerNr <= CConfig.Config.Game.NumPlayers)                  {                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }                  if (_NameSelections[_NameSelection].Selected && !_SelectingKeyboardActive)                  {                      _SelectingKeyboardActive = true;                      _SelectingFast = true;                      _SelectingFastPlayerNr = 1;                      _SelectingKeyboardActive = true;                      _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                  }              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_LoadProfiles,The following statement contains a magic number: for (int i = 0; i < CSettings.MaxNumPlayer; i++)              {                  _NameSelections[_NameSelection].UseProfile(CGame.Players[i].ProfileID);                  _Statics[_StaticPlayerAvatar[i]].Texture = CProfiles.IsProfileIDValid(CGame.Players[i].ProfileID) ?                                                                 CProfiles.GetAvatarTextureFromProfile(CGame.Players[i].ProfileID) :                                                                 _OriginalPlayerAvatarTextures[i];                  _Texts[_TextPlayer[i]].Text = CProfiles.GetPlayerName(CGame.Players[i].ProfileID' i + 1);                  if (CGame.GetNumSongs() == 1 && firstSong.IsDuet)                  {                      _SelectSlides[_SelectSlideDuetPlayer[i]].Clear();                      _SelectSlides[_SelectSlideDuetPlayer[i]].Visible = i + 1 <= CGame.NumPlayers;                        for (int j = 0; j < firstSong.Notes.VoiceCount; j++)                          _SelectSlides[_SelectSlideDuetPlayer[i]].AddValue(firstSong.Notes.VoiceNames[j]);                      _SelectSlides[_SelectSlideDuetPlayer[i]].Selection = i % 2;                  }                  else                      _SelectSlides[_SelectSlideDuetPlayer[i]].Visible = false;              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckMics,The following statement contains a magic number: if (playerWithoutMicro.Count > 0)              {                  _Statics[_StaticWarningMics].Visible = true;                  _Texts[_TextWarningMics].Visible = true;                    if (playerWithoutMicro.Count > 1)                  {                      string playerNums = string.Empty;                      for (int i = 0; i < playerWithoutMicro.Count; i++)                      {                          if (playerWithoutMicro.Count - 1 == i)                              playerNums += playerWithoutMicro[i].ToString();                          else if (playerWithoutMicro.Count - 2 == i)                              playerNums += playerWithoutMicro[i] + " " + CLanguage.Translate("TR_GENERAL_AND") + " ";                          else                              playerNums += playerWithoutMicro[i] + "' ";                      }                        _Texts[_TextWarningMics].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_MICS_PL").Replace("%v"' playerNums);                  }                  else                      _Texts[_TextWarningMics].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_MICS_SG").Replace("%v"' playerWithoutMicro[0].ToString());              }              else              {                  _Statics[_StaticWarningMics].Visible = false;                  _Texts[_TextWarningMics].Visible = false;              }
Magic Number,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,The following statement contains a magic number: if (playerWithoutProfile.Count > 0)              {                  _Statics[_StaticWarningProfiles].Visible = true;                  _Texts[_TextWarningProfiles].Visible = true;                    if (playerWithoutProfile.Count > 1)                  {                      string playerNums = string.Empty;                      for (int i = 0; i < playerWithoutProfile.Count; i++)                      {                          if (playerWithoutProfile.Count - 1 == i)                              playerNums += playerWithoutProfile[i].ToString();                          else if (playerWithoutProfile.Count - 2 == i)                              playerNums += playerWithoutProfile[i] + " " + CLanguage.Translate("TR_GENERAL_AND") + " ";                          else                              playerNums += playerWithoutProfile[i] + "' ";                      }                        _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_PL").Replace("%v"' playerNums);                  }                  else                      _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_SG").Replace("%v"' playerWithoutProfile[0].ToString());              }              else              {                  _Statics[_StaticWarningProfiles].Visible = false;                  _Texts[_TextWarningProfiles].Visible = false;              }
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: if (points >= 9800)                  rating = "TR_RATING_VOCAL_HERO";              else if (points >= 8400)                  rating = "TR_RATING_SUPERSTAR";              else if (points >= 7000)                  rating = "TR_RATING_LEAD_SINGER";              else if (points >= 5600)                  rating = "TR_RATING_RISING_STAR";              else if (points >= 4200)                  rating = "TR_RATING_HOPEFUL";              else if (points >= 2800)                  rating = "TR_RATING_WANNABE";              else if (points >= 1400)                  rating = "TR_RATING_AMATEUR";              else                  rating = "TR_RATING_TONE_DEAF";
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,OnShow,The following statement contains a magic number: _CurrentBeat = -100;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (CSound.IsPlaying(_CurrentStream) || CSound.IsPaused(_CurrentStream))              {                  _CurrentTime = CSound.GetPosition(_CurrentStream);                    if (_FinishTime > 0.001 && _CurrentTime >= _FinishTime)                      finish = true;              }              else                  finish = true;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: if (alpha != null)              {                  _Lyrics[_LyricMain].Alpha = alpha[0];                  _Lyrics[_LyricSub].Alpha = alpha[1];                    _Lyrics[_LyricMainTop].Alpha = alpha[0];                  _Lyrics[_LyricSubTop].Alpha = alpha[1];                    _Statics[_StaticLyrics].Alpha = alpha[0];                  _Statics[_StaticLyricsTop].Alpha = alpha[0];                    _Statics[_StaticLyricHelper].Alpha = alpha[0];                  _Statics[_StaticLyricHelperTop].Alpha = alpha[0];                    for (int p = 0; p < CGame.NumPlayers; p++)                  {                      _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_INFO ||                          CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                      if (CConfig.Config.Theme.FadePlayerInfo == EFadePlayerInfo.TR_CONFIG_FADEPLAYERINFO_ALL)                      {                          _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                          _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];                      }                  }                    if (alpha.Length > 2)                  {                      _Lyrics[_LyricMainDuet].Alpha = alpha[0];                      _Lyrics[_LyricSubDuet].Alpha = alpha[1];                        _Statics[_StaticLyricsDuet].Alpha = alpha[0];                      _Statics[_StaticLyricHelperDuet].Alpha = alpha[0];                        _Lyrics[_LyricMain].Alpha = alpha[2];                      _Lyrics[_LyricSub].Alpha = alpha[3];                        _Statics[_StaticLyrics].Alpha = alpha[2];                      _Statics[_StaticLyricHelper].Alpha = alpha[2];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: for (int p = 0; p < CGame.NumPlayers; p++)              {                  string fmtString = (CGame.Players[p].Points < 10000) ? "0000" : "00000";                  _Texts[_PlayerTextScore[p]].Text = CGame.Players[p].Points.ToString(fmtString);              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSub].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSubDuet].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSubTop].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  if (i > 1)                      break; // for later                    CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line                  int nr = _FindCurrentLine(voice' lines' song);                    if (nr != -1)                  {                      for (int j = 0; j < CGame.NumPlayers; j++)                      {                          if (CGame.Players[j].VoiceNr == i)                              _SingNotes[_SingBars].PlayerNotes[j].SetLine(nr);                      }                        if (i == 0 && !song.IsDuet || i == 1 && song.IsDuet)                      {                          _Lyrics[_LyricMain].SetLine(lines[nr]);                          _Lyrics[_LyricMainTop].SetLine(lines[nr]);                          _TimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - lines[nr].StartBeat' song.BPM);                          _RemainingTimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM);                            if (lines.Length >= nr + 2)                          {                              _Lyrics[_LyricSub].SetLine(lines[nr + 1]);                              _Lyrics[_LyricSubTop].SetLine(lines[nr + 1]);                          }                          else                          {                              _Lyrics[_LyricSub].Clear();                              _Lyrics[_LyricSubTop].Clear();                          }                      }                      if (i == 0 && song.IsDuet)                      {                          _Lyrics[_LyricMainDuet].SetLine(lines[nr]);                          _TimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - lines[nr].StartBeat' song.BPM);                          _RemainingTimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM);                            if (lines.Length >= nr + 2)                              _Lyrics[_LyricSubDuet].SetLine(lines[nr + 1]);                          else                              _Lyrics[_LyricSubDuet].Clear();                      }                  }                  else                  {                      if (i == 0 && !song.IsDuet || i == 1 && song.IsDuet)                      {                          _Lyrics[_LyricMain].Clear();                          _Lyrics[_LyricSub].Clear();                          _Lyrics[_LyricMainTop].Clear();                          _Lyrics[_LyricSubTop].Clear();                          _TimeToFirstNote = 0f;                      }                        if (i == 0 && song.IsDuet)                      {                          _Lyrics[_LyricMainDuet].Clear();                          _Lyrics[_LyricSubDuet].Clear();                          _TimeToFirstNoteDuet = 0f;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  if (i > 1)                      break; // for later                    CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line                  int nr = _FindCurrentLine(voice' lines' song);                    if (nr != -1)                  {                      for (int j = 0; j < CGame.NumPlayers; j++)                      {                          if (CGame.Players[j].VoiceNr == i)                              _SingNotes[_SingBars].PlayerNotes[j].SetLine(nr);                      }                        if (i == 0 && !song.IsDuet || i == 1 && song.IsDuet)                      {                          _Lyrics[_LyricMain].SetLine(lines[nr]);                          _Lyrics[_LyricMainTop].SetLine(lines[nr]);                          _TimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - lines[nr].StartBeat' song.BPM);                          _RemainingTimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM);                            if (lines.Length >= nr + 2)                          {                              _Lyrics[_LyricSub].SetLine(lines[nr + 1]);                              _Lyrics[_LyricSubTop].SetLine(lines[nr + 1]);                          }                          else                          {                              _Lyrics[_LyricSub].Clear();                              _Lyrics[_LyricSubTop].Clear();                          }                      }                      if (i == 0 && song.IsDuet)                      {                          _Lyrics[_LyricMainDuet].SetLine(lines[nr]);                          _TimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - lines[nr].StartBeat' song.BPM);                          _RemainingTimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM);                            if (lines.Length >= nr + 2)                              _Lyrics[_LyricSubDuet].SetLine(lines[nr + 1]);                          else                              _Lyrics[_LyricSubDuet].Clear();                      }                  }                  else                  {                      if (i == 0 && !song.IsDuet || i == 1 && song.IsDuet)                      {                          _Lyrics[_LyricMain].Clear();                          _Lyrics[_LyricSub].Clear();                          _Lyrics[_LyricMainTop].Clear();                          _Lyrics[_LyricSubTop].Clear();                          _TimeToFirstNote = 0f;                      }                        if (i == 0 && song.IsDuet)                      {                          _Lyrics[_LyricMainDuet].Clear();                          _Lyrics[_LyricSubDuet].Clear();                          _TimeToFirstNoteDuet = 0f;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: if (_CurrentTime < timeToFirstMedleyNote)              {                  float timeDiff = timeToFirstMedleyNote - _CurrentTime + 1;                  var fullSeconds = (float)Math.Truncate(timeDiff);                  float partSeconds = timeDiff - fullSeconds;                  _Texts[_TextMedleyCountdown].Visible = true;                  _Texts[_TextMedleyCountdown].Text = fullSeconds.ToString();                  _Texts[_TextMedleyCountdown].Font.Height = partSeconds * CSettings.RenderH;                    RectangleF textBounds = CFonts.GetTextBounds(_Texts[_TextMedleyCountdown]);                  float x = CSettings.RenderW / 2 - textBounds.Width / 2;                  float y = CSettings.RenderH / 2 - textBounds.Height / 2;                  _Texts[_TextMedleyCountdown].X = x;                  _Texts[_TextMedleyCountdown].Y = y;              }              else                  _Texts[_TextMedleyCountdown].Visible = false;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: if (_CurrentTime < timeToFirstMedleyNote)              {                  float timeDiff = timeToFirstMedleyNote - _CurrentTime + 1;                  var fullSeconds = (float)Math.Truncate(timeDiff);                  float partSeconds = timeDiff - fullSeconds;                  _Texts[_TextMedleyCountdown].Visible = true;                  _Texts[_TextMedleyCountdown].Text = fullSeconds.ToString();                  _Texts[_TextMedleyCountdown].Font.Height = partSeconds * CSettings.RenderH;                    RectangleF textBounds = CFonts.GetTextBounds(_Texts[_TextMedleyCountdown]);                  float x = CSettings.RenderW / 2 - textBounds.Width / 2;                  float y = CSettings.RenderH / 2 - textBounds.Height / 2;                  _Texts[_TextMedleyCountdown].X = x;                  _Texts[_TextMedleyCountdown].Y = y;              }              else                  _Texts[_TextMedleyCountdown].Visible = false;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: if (_CurrentTime < timeToFirstMedleyNote)              {                  float timeDiff = timeToFirstMedleyNote - _CurrentTime + 1;                  var fullSeconds = (float)Math.Truncate(timeDiff);                  float partSeconds = timeDiff - fullSeconds;                  _Texts[_TextMedleyCountdown].Visible = true;                  _Texts[_TextMedleyCountdown].Text = fullSeconds.ToString();                  _Texts[_TextMedleyCountdown].Font.Height = partSeconds * CSettings.RenderH;                    RectangleF textBounds = CFonts.GetTextBounds(_Texts[_TextMedleyCountdown]);                  float x = CSettings.RenderW / 2 - textBounds.Width / 2;                  float y = CSettings.RenderH / 2 - textBounds.Height / 2;                  _Texts[_TextMedleyCountdown].X = x;                  _Texts[_TextMedleyCountdown].Y = y;              }              else                  _Texts[_TextMedleyCountdown].Visible = false;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: if (_CurrentTime < timeToFirstMedleyNote)              {                  float timeDiff = timeToFirstMedleyNote - _CurrentTime + 1;                  var fullSeconds = (float)Math.Truncate(timeDiff);                  float partSeconds = timeDiff - fullSeconds;                  _Texts[_TextMedleyCountdown].Visible = true;                  _Texts[_TextMedleyCountdown].Text = fullSeconds.ToString();                  _Texts[_TextMedleyCountdown].Font.Height = partSeconds * CSettings.RenderH;                    RectangleF textBounds = CFonts.GetTextBounds(_Texts[_TextMedleyCountdown]);                  float x = CSettings.RenderW / 2 - textBounds.Width / 2;                  float y = CSettings.RenderH / 2 - textBounds.Height / 2;                  _Texts[_TextMedleyCountdown].X = x;                  _Texts[_TextMedleyCountdown].Y = y;              }              else                  _Texts[_TextMedleyCountdown].Visible = false;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: if (Math.Abs(song.Finish) > 0.001)                  totalTime = song.Finish;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: CSound.SetStreamVolume(_CurrentStream' 100);
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: if (song.IsDuet)              {                  //TODO: Show more than 2 voicenames                  _Texts[_TextDuetName1].Text = song.Notes.VoiceNames[0];                  _Texts[_TextDuetName2].Text = song.Notes.VoiceNames[1];                  //More than one song: Player is not assigned to line by user                  //Otherwise' this is done by CScreenNames                  if (CGame.GetNumSongs() > 1)                  {                      for (int i = 0; i < CGame.NumPlayers; i++)                          CGame.Players[i].VoiceNr = (i + 1) % 2;                  }                  else                  {                      for (int i = 0; i < CGame.NumPlayers; i++)                          CGame.Players[i].VoiceNr = voiceAssignments[i];                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: foreach (CNoteBars notes in _SingNotes[_SingBars].PlayerNotes)              {                  if (notes.Rect.Bottom >= CSettings.RenderH / 2)                      _DynamicLyricsBottom = true;                  else                      _DynamicLyricsTop = true;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: for (int screen = 0; screen < CSettings.MaxNumScreens; screen++)              {                  int currentScreenPlayers = screenPlayers;                    if (remainingScreenPlayers > 0)                  {                      currentScreenPlayers++;                      remainingScreenPlayers--;                  }                    string curN = "N" + currentScreenPlayers;                  string curS = "S" + (screen + 1);                    foreach (string se in _StaticsExtra[screen])                  {                      string n = se.Substring(se.Length - 2);                      string s = se.Substring(0' 2);                      //Make StaticExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Statics[se].Visible = true;                      else                          _Statics[se].Visible = false;                  }                    foreach (string te in _TextsExtra[screen])                  {                      string n = te.Substring(te.Length - 2);                      string s = te.Substring(0' 2);                      //Make TextExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Texts[te].Visible = true;                      else                          _Texts[te].Visible = false;                  }                    for (int numplayer = 0; numplayer < CSettings.MaxNumPlayer; numplayer++)                  {                      for (int player = 0; player < CSettings.MaxNumPlayer && player <= numplayer; player++)                      {                          _Texts[_TextScores[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextScores[screen' player' numplayer]].Visible = false;                          _Texts[_TextNames[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextNames[screen' player' numplayer]].Visible = false;                          _Statics[_StaticScores[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticScores[screen' player' numplayer]].Visible = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].Visible = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].AllMonitors = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].Visible = false;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: for (int screen = 0; screen < CSettings.MaxNumScreens; screen++)              {                  int currentScreenPlayers = screenPlayers;                    if (remainingScreenPlayers > 0)                  {                      currentScreenPlayers++;                      remainingScreenPlayers--;                  }                    string curN = "N" + currentScreenPlayers;                  string curS = "S" + (screen + 1);                    foreach (string se in _StaticsExtra[screen])                  {                      string n = se.Substring(se.Length - 2);                      string s = se.Substring(0' 2);                      //Make StaticExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Statics[se].Visible = true;                      else                          _Statics[se].Visible = false;                  }                    foreach (string te in _TextsExtra[screen])                  {                      string n = te.Substring(te.Length - 2);                      string s = te.Substring(0' 2);                      //Make TextExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Texts[te].Visible = true;                      else                          _Texts[te].Visible = false;                  }                    for (int numplayer = 0; numplayer < CSettings.MaxNumPlayer; numplayer++)                  {                      for (int player = 0; player < CSettings.MaxNumPlayer && player <= numplayer; player++)                      {                          _Texts[_TextScores[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextScores[screen' player' numplayer]].Visible = false;                          _Texts[_TextNames[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextNames[screen' player' numplayer]].Visible = false;                          _Statics[_StaticScores[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticScores[screen' player' numplayer]].Visible = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].Visible = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].AllMonitors = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].Visible = false;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: for (int screen = 0; screen < CSettings.MaxNumScreens; screen++)              {                  int currentScreenPlayers = screenPlayers;                    if (remainingScreenPlayers > 0)                  {                      currentScreenPlayers++;                      remainingScreenPlayers--;                  }                    string curN = "N" + currentScreenPlayers;                  string curS = "S" + (screen + 1);                    foreach (string se in _StaticsExtra[screen])                  {                      string n = se.Substring(se.Length - 2);                      string s = se.Substring(0' 2);                      //Make StaticExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Statics[se].Visible = true;                      else                          _Statics[se].Visible = false;                  }                    foreach (string te in _TextsExtra[screen])                  {                      string n = te.Substring(te.Length - 2);                      string s = te.Substring(0' 2);                      //Make TextExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Texts[te].Visible = true;                      else                          _Texts[te].Visible = false;                  }                    for (int numplayer = 0; numplayer < CSettings.MaxNumPlayer; numplayer++)                  {                      for (int player = 0; player < CSettings.MaxNumPlayer && player <= numplayer; player++)                      {                          _Texts[_TextScores[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextScores[screen' player' numplayer]].Visible = false;                          _Texts[_TextNames[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextNames[screen' player' numplayer]].Visible = false;                          _Statics[_StaticScores[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticScores[screen' player' numplayer]].Visible = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].Visible = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].AllMonitors = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].Visible = false;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: for (int screen = 0; screen < CSettings.MaxNumScreens; screen++)              {                  int currentScreenPlayers = screenPlayers;                    if (remainingScreenPlayers > 0)                  {                      currentScreenPlayers++;                      remainingScreenPlayers--;                  }                    string curN = "N" + currentScreenPlayers;                  string curS = "S" + (screen + 1);                    foreach (string se in _StaticsExtra[screen])                  {                      string n = se.Substring(se.Length - 2);                      string s = se.Substring(0' 2);                      //Make StaticExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Statics[se].Visible = true;                      else                          _Statics[se].Visible = false;                  }                    foreach (string te in _TextsExtra[screen])                  {                      string n = te.Substring(te.Length - 2);                      string s = te.Substring(0' 2);                      //Make TextExtra elements with matching player number and active screen visible                       if (n == curN && s == curS && screen < CConfig.GetNumScreens())                          _Texts[te].Visible = true;                      else                          _Texts[te].Visible = false;                  }                    for (int numplayer = 0; numplayer < CSettings.MaxNumPlayer; numplayer++)                  {                      for (int player = 0; player < CSettings.MaxNumPlayer && player <= numplayer; player++)                      {                          _Texts[_TextScores[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextScores[screen' player' numplayer]].Visible = false;                          _Texts[_TextNames[screen' player' numplayer]].AllMonitors = false;                          _Texts[_TextNames[screen' player' numplayer]].Visible = false;                          _Statics[_StaticScores[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticScores[screen' player' numplayer]].Visible = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].AllMonitors = false;                          _Statics[_StaticAvatars[screen' player' numplayer]].Visible = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].AllMonitors = false;                          _ProgressBars[_ProgressBarsRating[screen' player' numplayer]].Visible = false;                      }                  }              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: var alpha = new float[song.Notes.VoiceCount * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: for (int i = 0; i < song.Notes.VoiceCount; i++)              {                  CVoice voice = song.Notes.GetVoice(i);                  CSongLine[] lines = voice.Lines;                    // find current line for lyric sub fading                  int currentLineSub = _FindCurrentLine(voice' lines' song);                    // find current line for lyric main fading                  int currentLine = 0;                  for (int j = 0; j < lines.Length; j++)                  {                      if (lines[j].FirstNoteBeat <= _CurrentBeat)                          currentLine = j;                  }                    // default values                  alpha[i * 2] = 1f;                  alpha[i * 2 + 1] = 1f;                    // main line alpha                  if (currentLine == 0 && currentTime < CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM))                  {                      // first main line and fist note is not reached                      // => fade in                      float diff = CGame.GetTimeFromBeats(lines[currentLine].FirstNoteBeat' song.BPM) - currentTime;                      if (diff > dt)                          alpha[i * 2] = 1f - (diff - dt) / rt;                  }                  else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime &&                           CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) > currentTime)                  {                      // current position is between two lines                        // time between the to lines                      float diff = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) -                                   CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                        // fade only if there is enough time for fading                      if (diff > 3.3f * dt)                      {                          // time elapsed since last line                          float last = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                            // time to next line                          float next = CGame.GetTimeFromBeats(lines[currentLine + 1].FirstNoteBeat' song.BPM) - currentTime;                            if (last < next)                          {                              // fade out                              alpha[i * 2] = 1f - last / rt;                          }                          else                          {                              // fade in if it is time for                              if (next > dt)                                  alpha[i * 2] = 1f - (next - dt) / rt;                          }                      }                  }                  else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime)                  {                      // last main line and last note was reached                      // => fade out                      float diff = currentTime - CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM);                      alpha[i * 2] = 1f - diff / rt;                  }                    // sub                  if (currentLineSub < lines.Length - 2)                  {                      float diff = CGame.GetTimeFromBeats(lines[currentLineSub + 1].FirstNoteBeat' song.BPM) - currentTime;                        if (diff > dt)                          alpha[i * 2 + 1] = 1f - (diff - dt) / rt;                  }                    if (alpha[i * 2] < 0f)                      alpha[i * 2] = 0f;                    if (alpha[i * 2 + 1] < 0f)                      alpha[i * 2 + 1] = 0f;              }
Magic Number,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_PrepareTimeLine,The following statement contains a magic number: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect = stat.Rect;                      _Statics[_StaticTimePointer].Visible = false;                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      _TimeRects.Clear();                      _Statics[_StaticTimePointer].Visible = true;                        CSong song = CGame.GetSong();                        if (song == null)                          return;                        float totalTime = CSound.GetLength(_CurrentStream);                      if (Math.Abs(song.Finish) > 0.001)                          totalTime = song.Finish;                        totalTime -= song.Start;                        if (totalTime <= 0f)                          return;                        _Length = totalTime;                        foreach (CVoice voice in song.Notes.Voices)                      {                          foreach (CSongLine line in voice.Lines.Where(line => line.VisibleInTimeLine))                          {                              var trect = new STimeRect { StartBeat = line.FirstNoteBeat' EndBeat = line.EndBeat };                              trect.Rect = GetNewStatic(null'                                                        new SColorF(1f' 1f' 1f' 1f)'                                                        new SRectF(                                                            stat.Rect.X + stat.Rect.W * ((CGame.GetTimeFromBeats(trect.StartBeat' song.BPM) + song.Gap - song.Start) / totalTime)'                                                            stat.Rect.Y'                                                            stat.Rect.W * (CGame.GetTimeFromBeats(trect.EndBeat - trect.StartBeat' song.BPM) / totalTime)'                                                            stat.Rect.H'                                                            stat.Rect.Z));                                _TimeRects.Add(trect);                          }                      }                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following statement contains a magic number: if (_CurSongOptionsView == ESongOptionsView.None)              {                  if (keyEvent.KeyPressed && !Char.IsControl(keyEvent.Unicode) && keyEvent.Mod != EModifier.Ctrl)                  {                      if (_SearchActive)                          _ApplyNewSearchFilter(_SearchText + keyEvent.Unicode);                      else if (!_Sso.Selection.PartyMode)                      {                          _JumpTo(keyEvent.Unicode);                          return true;                      }                  }                  else                  {                      if (_SongMenu.HandleInput(ref keyEvent' _Sso))                          keyEvent.Handled = true;                        if (keyEvent.Handled)                          return true;                        switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }                      if (!_SearchActive)                      {                          switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }                      }                  }              }              else              {                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }              }
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following statement contains a magic number: if (_CurSongOptionsView == ESongOptionsView.None)              {                  if (keyEvent.KeyPressed && !Char.IsControl(keyEvent.Unicode) && keyEvent.Mod != EModifier.Ctrl)                  {                      if (_SearchActive)                          _ApplyNewSearchFilter(_SearchText + keyEvent.Unicode);                      else if (!_Sso.Selection.PartyMode)                      {                          _JumpTo(keyEvent.Unicode);                          return true;                      }                  }                  else                  {                      if (_SongMenu.HandleInput(ref keyEvent' _Sso))                          keyEvent.Handled = true;                        if (keyEvent.Handled)                          return true;                        switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }                      if (!_SearchActive)                      {                          switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }                      }                  }              }              else              {                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }              }
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following statement contains a magic number: if (_CurSongOptionsView == ESongOptionsView.None)              {                  if (keyEvent.KeyPressed && !Char.IsControl(keyEvent.Unicode) && keyEvent.Mod != EModifier.Ctrl)                  {                      if (_SearchActive)                          _ApplyNewSearchFilter(_SearchText + keyEvent.Unicode);                      else if (!_Sso.Selection.PartyMode)                      {                          _JumpTo(keyEvent.Unicode);                          return true;                      }                  }                  else                  {                      if (_SongMenu.HandleInput(ref keyEvent' _Sso))                          keyEvent.Handled = true;                        if (keyEvent.Handled)                          return true;                        switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }                      if (!_SearchActive)                      {                          switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }                      }                  }              }              else              {                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }              }
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following statement contains a magic number: if (_CurSongOptionsView == ESongOptionsView.None)              {                  if (keyEvent.KeyPressed && !Char.IsControl(keyEvent.Unicode) && keyEvent.Mod != EModifier.Ctrl)                  {                      if (_SearchActive)                          _ApplyNewSearchFilter(_SearchText + keyEvent.Unicode);                      else if (!_Sso.Selection.PartyMode)                      {                          _JumpTo(keyEvent.Unicode);                          return true;                      }                  }                  else                  {                      if (_SongMenu.HandleInput(ref keyEvent' _Sso))                          keyEvent.Handled = true;                        if (keyEvent.Handled)                          return true;                        switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }                      if (!_SearchActive)                      {                          switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }                      }                  }              }              else              {                  switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }              }
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,OnShow,The following statement contains a magic number: _SelectedCategoryIndex = -2;
Magic Number,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_ShowSongOptionsMedley,The following statement contains a magic number: if (_SelectSlides[_SelectSlideOptionsNumMedleySongs].NumValues >= 5)                  _SelectSlides[_SelectSlideOptionsNumMedleySongs].SelectedValue = "5";              else                  _SelectSlides[_SelectSlideOptionsNumMedleySongs].SelectLastValue();
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection = CConfig.BackgroundMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlidePreviewMusicVolume].Selection = CConfig.PreviewMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlideGameMusicVolume].Selection = CConfig.GameMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,UpdateGame,The following statement contains a magic number: if (_BackgroundMusicVolume != CConfig.BackgroundMusicVolume)                  _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection = CConfig.BackgroundMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlideGameMusicVolume].Selection = CConfig.GameMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlidePreviewMusicVolume].Selection = CConfig.PreviewMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.GameMusicVolume = _SelectSlides[_SelectSlideGameMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.PreviewMusicVolume = _SelectSlides[_SelectSlidePreviewMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.BackgroundMusicVolume = _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,LoadTheme,The following statement contains a magic number: for (int i = 0; i < 26; i++)                  _SelectSlides[_SelectSlideDelay].AddValue((i * 20) + " ms");
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,LoadTheme,The following statement contains a magic number: for (int i = 0; i < 26; i++)                  _SelectSlides[_SelectSlideDelay].AddValue((i * 20) + " ms");
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlideDelay].Selection = CConfig.Config.Record.MicDelay / 20;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_SaveDelayConfig,The following statement contains a magic number: CConfig.Config.Record.MicDelay = _SelectSlides[_SelectSlideDelay].Selection * 20;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,Init,The following statement contains a magic number: _ButtonStates = new bool[11];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WiiMote_WiiMoteConnectionChanged,The following statement contains a magic number: if (!e.Connected)              {                  _Connected = false;              }              else              {                  _WiiMote.SetReportType(EInputReport.IRAccel' EIRSensitivity.Max' false);                  _WiiMote.SetLEDs(false' false' true' false);                    _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                  Thread.Sleep(250);                  _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                                      bool startRumble;                  bool stopRumble;                  lock (_Sync)                  {                      startRumble = _RumbleTimer.ShouldStart;                      stopRumble = _RumbleTimer.ShouldStop;                  }                    if (startRumble)                      _WiiMote.SetRumble(true);                  else if (stopRumble)                      _WiiMote.SetRumble(false);                    _Connected = true;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WiiMote_WiiMoteConnectionChanged,The following statement contains a magic number: if (!e.Connected)              {                  _Connected = false;              }              else              {                  _WiiMote.SetReportType(EInputReport.IRAccel' EIRSensitivity.Max' false);                  _WiiMote.SetLEDs(false' false' true' false);                    _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                  Thread.Sleep(250);                  _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                                      bool startRumble;                  bool stopRumble;                  lock (_Sync)                  {                      startRumble = _RumbleTimer.ShouldStart;                      stopRumble = _RumbleTimer.ShouldStop;                  }                    if (startRumble)                      _WiiMote.SetRumble(true);                  else if (stopRumble)                      _WiiMote.SetRumble(false);                    _Connected = true;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WiiMote_WiiMoteConnectionChanged,The following statement contains a magic number: if (!e.Connected)              {                  _Connected = false;              }              else              {                  _WiiMote.SetReportType(EInputReport.IRAccel' EIRSensitivity.Max' false);                  _WiiMote.SetLEDs(false' false' true' false);                    _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                  Thread.Sleep(250);                  _WiiMote.SetRumble(true);                  Thread.Sleep(250);                  _WiiMote.SetRumble(false);                                      bool startRumble;                  bool stopRumble;                  lock (_Sync)                  {                      startRumble = _RumbleTimer.ShouldStart;                      stopRumble = _RumbleTimer.ShouldStop;                  }                    if (startRumble)                      _WiiMote.SetRumble(true);                  else if (stopRumble)                      _WiiMote.SetRumble(false);                    _Connected = true;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: p.X = 1023 - p.X;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: if (ws.ButtonState.A && !_ButtonStates[0])                  lb = true;              else if (ws.ButtonState.B && !_ButtonStates[1])                  _Gesture.SetLockPosition(p);              else if (!ws.ButtonState.B && _ButtonStates[1])                  _Gesture.Reset();              else if (ws.ButtonState.Down && !_ButtonStates[2])                  key = Keys.Right;              else if (ws.ButtonState.Up && !_ButtonStates[3])                  key = Keys.Left;              else if (ws.ButtonState.Left && !_ButtonStates[4])                  key = Keys.Down;              else if (ws.ButtonState.Right && !_ButtonStates[5])                  key = Keys.Up;              else if (ws.ButtonState.Home && !_ButtonStates[6])                  key = Keys.Space;              else if (ws.ButtonState.Minus && !_ButtonStates[7])                  key = Keys.Subtract;              else if (ws.ButtonState.Plus && !_ButtonStates[8])                  key = Keys.Add;              else if (ws.ButtonState.One && !_ButtonStates[9])                  key = Keys.Enter;              else if (ws.ButtonState.Two && !_ButtonStates[10])                  key = Keys.Escape;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[2] = ws.ButtonState.Down;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[3] = ws.ButtonState.Up;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[4] = ws.ButtonState.Left;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[5] = ws.ButtonState.Right;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[6] = ws.ButtonState.Home;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[7] = ws.ButtonState.Minus;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[8] = ws.ButtonState.Plus;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[9] = ws.ButtonState.One;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[10] = ws.ButtonState.Two;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteStatus,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,CWiiMoteStatus,The following statement contains a magic number: IRState.Sensors = new SIR[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,SetReportType,The following statement contains a magic number: _Buff[2] = (byte)type;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReaderLoop,The following statement contains a magic number: while (Connected)              {                  int bytesRead;                  try                  {                      bytesRead = CHIDApi.ReadTimeout(_Handle' ref buff' _ReportLength' 400);                      if (bytesRead == -1)                      {                          Connected = false; //Disconnected                          Connect();                          break;                      }                  }                  catch (Exception e)                  {                      CLog.LogError("(WiiMoteLib) Error reading from device: " + e);                      Connected = false;                      break;                  }                    if (bytesRead > 0 && _ParseInputReport(buff))                  {                      if (WiiMoteChanged != null)                          WiiMoteChanged.Invoke(this' new CWiiMoteChangedEventArgs(_WiiMoteState));                  }                  Thread.Sleep(5);              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReaderLoop,The following statement contains a magic number: while (Connected)              {                  int bytesRead;                  try                  {                      bytesRead = CHIDApi.ReadTimeout(_Handle' ref buff' _ReportLength' 400);                      if (bytesRead == -1)                      {                          Connected = false; //Disconnected                          Connect();                          break;                      }                  }                  catch (Exception e)                  {                      CLog.LogError("(WiiMoteLib) Error reading from device: " + e);                      Connected = false;                      break;                  }                    if (bytesRead > 0 && _ParseInputReport(buff))                  {                      if (WiiMoteChanged != null)                          WiiMoteChanged.Invoke(this' new CWiiMoteChangedEventArgs(_WiiMoteState));                  }                  Thread.Sleep(5);              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.LogError("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.LogError("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.LogError("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.LogError("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.LogError("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.A = (buff[2] & 0x08) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.B = (buff[2] & 0x04) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Minus = (buff[2] & 0x10) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Home = (buff[2] & 0x80) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.One = (buff[2] & 0x02) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Two = (buff[2] & 0x01) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.X = buff[3];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.Y = buff[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.Z = buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: if (_WiiMoteState.IRState.Sensors[0].Active && _WiiMoteState.IRState.Sensors[1].Active)              {                  _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;                  _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;                    _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X);                  _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y);              }              else if (_WiiMoteState.IRState.Sensors[0].Active)              {                  if (_WiiMoteState.IRState.Sensors[0].Position.X > 512)                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X - _WiiMoteState.IRState.Distance.X / 2;                  else                      _WiiMoteState.IRState.Position.X = _WiiMoteState.IRState.Sensors[0].Position.X + _WiiMoteState.IRState.Distance.X / 2;                    if (_WiiMoteState.IRState.Sensors[0].Position.X < 384)                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y - _WiiMoteState.IRState.Distance.Y / 2;                  else                      _WiiMoteState.IRState.Position.Y = _WiiMoteState.IRState.Sensors[0].Position.Y + _WiiMoteState.IRState.Distance.Y / 2;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: if ((buff[3] & 0x08) != 0)              {                  CLog.LogError("Error reading data from WiiMote: Bytes do not exist");                  Connected = false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: if ((buff[3] & 0x07) != 0)              {                  CLog.LogError("Error reading data from WiiMote: Attempt to read from write-only registers.");                  Connected = false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int size = (buff[3] >> 4) + 1;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int size = (buff[3] >> 4) + 1;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: Array.Copy(buff' 6' _ReadBuff' offset - _Address' size);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: byte[] buff = _ReadData(0x0016' 7);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.Z0 = buff[2];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityX = buff[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityY = buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityZ = buff[6];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[1] = (byte)(((address & 0xff000000) >> 24) | _RumbleBit);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[4] = (byte)(address & 0x000000ff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[5] = (byte)((size & 0xff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[5] = (byte)((size & 0xff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[6] = (byte)(size & 0xff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: if (!_ReadDone.WaitOne(1000' false))              {                  Connected = false;                  return null;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[1] = (byte)(((address & 0xff000000) >> 24) | _RumbleBit);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[4] = (byte)(address & 0x000000ff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[5] = size;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: Array.Copy(buff' 0' _Buff' 6' size);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Vocaluxe.Lib.Playlist,CPlaylistFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSongUp,The following statement contains a magic number: if (songNr < Songs.Count && songNr > 0)                  Songs.Reverse(songNr - 1' 2);
Magic Number,Vocaluxe.Lib.Playlist,CPlaylistFile,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSongDown,The following statement contains a magic number: if (songNr < Songs.Count - 1 && songNr >= 0)                  Songs.Reverse(songNr' 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: foreach (IntPtr handle in _RecHandle)              {                  int waitcount = 0;                  while (waitcount < 5 && PortAudioSharp.PortAudio.Pa_IsStreamStopped(handle) == PortAudioSharp.PortAudio.PaError.paStreamIsNotStopped)                  {                      Thread.Sleep(1);                      waitcount++;                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: for (int dev = 0; dev < _Devices.Count; dev++)              {                  bool usingDevice = false;                  for (int ch = 0; ch < _Devices[dev].Channels; ++ch) {                      if (_Devices[dev].PlayerChannel[ch] > 0)                          usingDevice = true;                  }                  if (usingDevice)                  {                      PortAudioSharp.PortAudio.PaStreamParameters? inputParams = new PortAudioSharp.PortAudio.PaStreamParameters                      {                          channelCount = _Devices[dev].Channels'                          device = _Devices[dev].ID'                          sampleFormat = PortAudioSharp.PortAudio.PaSampleFormat.paInt16'                          suggestedLatency = PortAudioSharp.PortAudio.Pa_GetDeviceInfo(_Devices[dev].ID).defaultLowInputLatency'                          hostApiSpecificStreamInfo = IntPtr.Zero                      };                      if (!_PaHandle.OpenInputStream(                          out _RecHandle[dev]'                          ref inputParams'                          44100'                          882'                          PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                          _MyRecProc'                          new IntPtr(dev)))                          return false;                        if (_PaHandle.CheckError("Start Stream (rec)"' PortAudioSharp.PortAudio.Pa_StartStream(_RecHandle[dev])))                          return false;                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: for (int dev = 0; dev < _Devices.Count; dev++)              {                  bool usingDevice = false;                  for (int ch = 0; ch < _Devices[dev].Channels; ++ch) {                      if (_Devices[dev].PlayerChannel[ch] > 0)                          usingDevice = true;                  }                  if (usingDevice)                  {                      PortAudioSharp.PortAudio.PaStreamParameters? inputParams = new PortAudioSharp.PortAudio.PaStreamParameters                      {                          channelCount = _Devices[dev].Channels'                          device = _Devices[dev].ID'                          sampleFormat = PortAudioSharp.PortAudio.PaSampleFormat.paInt16'                          suggestedLatency = PortAudioSharp.PortAudio.Pa_GetDeviceInfo(_Devices[dev].ID).defaultLowInputLatency'                          hostApiSpecificStreamInfo = IntPtr.Zero                      };                      if (!_PaHandle.OpenInputStream(                          out _RecHandle[dev]'                          ref inputParams'                          44100'                          882'                          PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                          _MyRecProc'                          new IntPtr(dev)))                          return false;                        if (_PaHandle.CheckError("Start Stream (rec)"' PortAudioSharp.PortAudio.Pa_StartStream(_RecHandle[dev])))                          return false;                  }              }
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,_MyPaStreamCallback,The following statement contains a magic number: try              {                  if (frameCount > 0 && input != IntPtr.Zero)                  {                      CRecordDevice dev = _Devices[userData.ToInt32()];                      uint numBytes;                      numBytes = frameCount * (uint)dev.Channels * 2;                        byte[] recbuffer = new byte[numBytes];                        // copy from managed to unmanaged memory                      Marshal.Copy(input' recbuffer' 0' (int)numBytes);                      _HandleData(dev' recbuffer);                  }              }              catch (Exception e)              {                  CLog.LogError("Error on Stream Callback (rec): " + e);              }
Magic Number,Vocaluxe.Lib.Sound.Playback.Decoder,CAudioDecoderFFmpeg,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\Decoder\CAudioDecoderFFmpeg.cs,Open,The following statement contains a magic number: if (_FormatInfo.BitDepth != 16)              {                  CLog.LogError("Unsupported BitDepth in file " + fileName);                  Close();                  return false;              }
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetFrame,The following statement contains a magic number: lock (_MutexData)              {                  if (_Data != null && _Data.Length == _Width * _Height * 4 && _NewFrameAvailable)                  {                      if (frame == null)                          frame = CDraw.AddTexture(_Width' _Height' _Data);                      else                          CDraw.UpdateTexture(frame' _Width' _Height' _Data);                      _NewFrameAvailable = false;                      return true;                  }                  return false;              }
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetBitmap,The following statement contains a magic number: lock (_MutexData)              {                  if (_Data != null && _Data.Length == _Width * _Height * 4)                  {                      var bmp = new Bitmap(_Width' _Height);                      BitmapData bitmapdata = bmp.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppArgb);                      Marshal.Copy(_Data' 0' bitmapdata.Scan0' _Data.Length);                      bmp.UnlockBits(bitmapdata);                      return bmp;                  }                  return null;              }
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The following statement contains a magic number: lock (_MutexData)              {                  if (!IsCapturing())                      return;                  if (_Data == null || _Data.Length != e.Frame.Width * e.Frame.Height * 4)                      _Data = new byte[e.Frame.Width * e.Frame.Height * 4];                    _Width = e.Frame.Width;                  _Height = e.Frame.Height;                  BitmapData bitmapdata = e.Frame.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb);                  Marshal.Copy(bitmapdata.Scan0' _Data' 0' _Data.Length);                  e.Frame.UnlockBits(bitmapdata);                  _NewFrameAvailable = true;              }
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The following statement contains a magic number: lock (_MutexData)              {                  if (!IsCapturing())                      return;                  if (_Data == null || _Data.Length != e.Frame.Width * e.Frame.Height * 4)                      _Data = new byte[e.Frame.Width * e.Frame.Height * 4];                    _Width = e.Frame.Width;                  _Height = e.Frame.Height;                  BitmapData bitmapdata = e.Frame.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb);                  Marshal.Copy(bitmapdata.Scan0' _Data' 0' _Data.Length);                  e.Frame.UnlockBits(bitmapdata);                  _NewFrameAvailable = true;              }
Missing Default,Vocaluxe.Base,CBackgroundMusic,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,SetMusicSource,The following switch statement is missing a default case: switch (_MusicSource)              {                  case EBackgroundMusicSource.TR_CONFIG_NO_OWN_MUSIC:                      _AddBackgroundMusic();                      _RemoveOwnMusic();                      break;                    case EBackgroundMusicSource.TR_CONFIG_ONLY_OWN_MUSIC:                      _AddOwnMusic();                      _RemoveBackgroundMusic();                      break;                  case EBackgroundMusicSource.TR_CONFIG_OWN_MUSIC:                      _AddBackgroundMusic();                      _AddOwnMusic();                      break;              }
Missing Default,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following switch statement is missing a default case: switch (parts.Length)                  {                      //Only found a parameter                      case 1:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add("");                          }                          break;                          //Found parameter and value                      case 2:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add(parts[1]);                          }                          break;                  }
Missing Default,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,UseCommandLineParamsBefore,The following switch statement is missing a default case: switch (param)                  {                      case "configfile":                          //Check if value is valid                                                if (_CheckFile(value))                              _FileConfig = value;                          break;                        case "scorefile":                          //Check if value is valid                          if (_CheckFile(value))                              FileHighscoreDB = value;                          break;                        case "playlistfolder":                          FolderPlaylists = value;                          break;                        case "profilefolder":                          ProfileFolders.Clear();                          ProfileFolders.Add(value);                          break;                  }
Missing Default,Vocaluxe.Base,CConfig,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,UseCommandLineParamsAfter,The following switch statement is missing a default case: switch (param)                  {                      case "songfolder":                      case "songpath":                          if (!songFoldersOverwritten)                          {                              SongFolders.Clear();                              songFoldersOverwritten = true;                          }                          if (!SongFolders.Contains(value))                              SongFolders.Add(value);                          break;                  }
Missing Default,Vocaluxe.Base,CProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Update,The following switch statement is missing a default case: switch (change.Action)                      {                          case EAction.LoadProfiles:                              _LoadProfiles();                              _ProfilesChanged = true;                              _AvatarsChanged = true;                              break;                            case EAction.LoadAvatars:                              _LoadAvatars();                              _AvatarsChanged = true;                              break;                            case EAction.AddProfile:                              CProfile newProf = change.Profile;                              if (newProf == null)                                  break;                                newProf.ID = Guid.NewGuid();                              if (newProf.Avatar == null)                                  newProf.Avatar = _Avatars.Values.First();                              else if (newProf.Avatar.ID < 0)                              {                                  newProf.Avatar.ID = _AvatarIDs.Dequeue();                                  _Avatars.Add(newProf.Avatar.ID' newProf.Avatar);                                  _AvatarsChanged = true;                              }                              newProf.SaveProfile();                              _Profiles.Add(newProf.ID' newProf);                                _ProfilesChanged = true;                              break;                            case EAction.EditProfile:                              if (change.Profile == null)                                  break;                                if (!IsProfileIDValid(change.Profile.ID))                                  return;                                _Profiles[change.Profile.ID] = change.Profile;                              _ProfilesChanged = true;                              break;                            case EAction.DeleteProfile:                              if (!IsProfileIDValid(change.ProfileID))                                  break;                                _DeleteProfile(change.ProfileID);                              _ProfilesChanged = true;                              break;                            case EAction.AddAvatar:                              if (change.Avatar == null)                                  break;                                change.Avatar.ID = _AvatarIDs.Dequeue();                              _Avatars.Add(change.Avatar.ID' change.Avatar);                              _AvatarsChanged = true;                              break;                            case EAction.EditAvatar:                              if (change.Avatar == null)                                  break;                                if (!IsAvatarIDValid(change.Avatar.ID))                                  return;                                _Avatars[change.Avatar.ID] = change.Avatar;                              _AvatarsChanged = true;                              break;                      }
Missing Default,Vocaluxe.Base,CSongCategorizer,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The following switch statement is missing a default case: switch (sorting)              {                  case ESongSorting.TR_CONFIG_DECADE:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                      {                          string year = songPointer.SortString;                          if (year != "")                          {                              year = year.Substring(0' 3);                              songPointer.SortString = year + "0 - " + year + "9";                          }                      }                      break;                  case ESongSorting.TR_CONFIG_TITLE_LETTER:                  case ESongSorting.TR_CONFIG_ARTIST_LETTER:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString();                      break;                  case ESongSorting.TR_CONFIG_DATEADDED:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = CSongs.GetSong(songPointer.SongID).DateAdded.ToString("dd/MM/yyyy");                      break;              }
Missing Default,Vocaluxe.Base,CSongs,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,LoadSongs,The following switch statement is missing a default case: switch (CConfig.Config.Theme.CoverLoading)              {                  case ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART:                      _LoadCovers();                      break;                  case ECoverLoading.TR_CONFIG_COVERLOADING_DYNAMIC:                      _LoadCoversAsync();                      break;              }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The following switch statement is missing a default case: switch (player.GameMode)                  {                      case EGameMode.TR_GAMEMODE_MEDLEY:                          medley = 1;                          break;                      case EGameMode.TR_GAMEMODE_DUET:                          duet = 1;                          break;                      case EGameMode.TR_GAMEMODE_SHORTSONG:                          shortSong = 1;                          break;                  }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following switch statement is missing a default case: switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following switch statement is missing a default case: switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }
Missing Default,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following switch statement is missing a default case: switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _X = 0;                          break;                      case EGeneralAlignment.Middle:                          _X = diff / 2;                          break;                      case EGeneralAlignment.End:                          _X = diff;                          break;                  }
Missing Default,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following switch statement is missing a default case: switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _Y = reverse ? diff : 0;                          break;                      case EGeneralAlignment.Middle:                          _Y = diff / 2;                          break;                      case EGeneralAlignment.End:                          _Y = reverse ? 0 : diff;                          break;                  }
Missing Default,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_OnMessageAvoidScreenOff,The following switch statement is missing a default case: switch (m.Msg)              {                  case 0x112: // WM_SYSCOMMAND                      switch ((int)m.WParam & 0xFFF0)                      {                          case 0xF100: // SC_KEYMENU                              m.Result = IntPtr.Zero;                              return false;                          case 0xF140: // SC_SCREENSAVER                          case 0xF170: // SC_MONITORPOWER                              return false;                      }                      break;              }
Missing Default,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_OnMessageAvoidScreenOff,The following switch statement is missing a default case: switch ((int)m.WParam & 0xFFF0)                      {                          case 0xF100: // SC_KEYMENU                              m.Result = IntPtr.Zero;                              return false;                          case 0xF140: // SC_SCREENSAVER                          case 0xF170: // SC_MONITORPOWER                              return false;                      }
Missing Default,Vocaluxe.Lib.Sound.Playback,CAudioStreamBase,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CAudioStreamBase.cs,Update,The following switch statement is missing a default case: switch (_AfterFadeAction)                      {                          case EStreamAction.Close:                              Close();                              break;                          case EStreamAction.Stop:                              Stop();                              break;                          case EStreamAction.Pause:                              IsPaused = true;                              break;                      }
Missing Default,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,_OnMessage,The following switch statement is missing a default case: switch (msg.Type)              {                  case MessageType.Eos:                      if (_Loop)                          Position = 0;                      else                          _IsFinished = true;                      break;                  case MessageType.Error:                      GException error;                      string debug;                      msg.ParseError(out error' out debug);                      CLog.LogError("Gstreamer error: message" + error.Message + "' code" + error.Code + " 'debug information" + debug);                      return false;                  case MessageType.DurationChanged:                      _UpdateDuration();                      break;              }
Missing Default,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following switch statement is missing a default case: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Missing Default,Vocaluxe.Base.Fonts,CFontStyle,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,_GetSystemFontStyle,The following switch statement is missing a default case: switch (_Style)              {                  case EStyle.Normal:                      return FontStyle.Regular;                  case EStyle.Italic:                      return FontStyle.Italic;                  case EStyle.Bold:                      return FontStyle.Bold;                  case EStyle.BoldItalic:                      return FontStyle.Bold | FontStyle.Italic;              }
Missing Default,Vocaluxe.Base.Fonts,CFonts,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_GetFontStyle,The following switch statement is missing a default case: switch (font.Style)              {                  case EStyle.Normal:                      return _FontFamilies[index].Normal;                  case EStyle.Italic:                      return _FontFamilies[index].Italic;                  case EStyle.Bold:                      return _FontFamilies[index].Bold;                  case EStyle.BoldItalic:                      return _FontFamilies[index].BoldItalic;              }
Missing Default,Vocaluxe.Screens,CPopupScreenServerQR,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenServerQR.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Escape:                  case Keys.Back:                      CGraphics.HidePopup(EPopupScreens.PopupServerQR);                      return true;              }
Missing Default,Vocaluxe.Screens,CScreenOptionsVideoAdjustments,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideoAdjustments.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.OptionsVideo);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.OptionsVideo);                          }                          break;                  }
Missing Default,Vocaluxe.Screens,CPopupScreenPlayerControl,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.HidePopup(EPopupScreens.PopupPlayerControl);                          return false;                        case Keys.Enter:                          if (_Buttons[_ButtonNext].Selected)                              CBackgroundMusic.Next();                          if (_Buttons[_ButtonPrevious].Selected)                              CBackgroundMusic.Previous();                          if (_Buttons[_ButtonPlay].Selected)                              CBackgroundMusic.Play();                          if (_Buttons[_ButtonPause].Selected)                              CBackgroundMusic.Pause();                          if (_Buttons[_ButtonRepeat].Selected)                              CBackgroundMusic.RepeatSong = !CBackgroundMusic.RepeatSong;                          if (_Buttons[_ButtonShowVideo].Selected)                              _VideoPreview = !_VideoPreview;                          if (_Buttons[_ButtonSing].Selected)                              _StartSong(CBackgroundMusic.SongID);                          if (_Buttons[_ButtonToBackgroundVideo].Selected)                              _VideoBackground = !_VideoBackground;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          CGraphics.FadeTo(EScreen.Main);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenCredits,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following switch statement is missing a default case: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Missing Default,Vocaluxe.Screens,CScreenHighscore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenHighscore.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          _LeaveScreen();                          break;                        case Keys.Down:                          _ChangePos(1);                          break;                        case Keys.Up:                          _ChangePos(-1);                          break;                        case Keys.Left:                          _ChangeRound(-1);                          break;                        case Keys.Right:                          _ChangeRound(1);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenLoad,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                      case Keys.Escape:                      case Keys.Space:                      case Keys.Back:                          _SkipIntro = true;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenMain,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenMain.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.O:                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          if (CProfiles.NumProfiles > 0)                              CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.C:                          CGraphics.FadeTo(EScreen.Credits);                          break;                        case Keys.T:                          CGraphics.FadeTo(EScreen.Test);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonSing].Selected)                          {                              CParty.SetNormalGameMode();                              CGraphics.FadeTo(EScreen.Song);                          }                            if (_Buttons[_ButtonParty].Selected)                              CGraphics.FadeTo(EScreen.Party);                            if (_Buttons[_ButtonOptions].Selected)                              CGraphics.FadeTo(EScreen.Options);                            if (_Buttons[_ButtonProfiles].Selected)                              CGraphics.FadeTo(EScreen.Profiles);                            if (_Buttons[_ButtonExit].Selected)                              return false;                            break;                        case Keys.Escape:                          _SelectElement(_Buttons[_ButtonExit]);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Add:                      if (CConfig.Config.Game.NumPlayers + 1 <= CSettings.MaxNumPlayer)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.Subtract:                      if (CConfig.Config.Game.NumPlayers - 1 > 0)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers - 2;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.P:                      if (!_SelectingKeyboardActive)                      {                          _SelectingFastPlayerNr = 1;                          _SelectingFast = true;                          _ResetPlayerSelections();                      }                      else                      {                          if (_SelectingFastPlayerNr + 1 <= CGame.NumPlayers)                              _SelectingFastPlayerNr++;                          else                              _SelectingFastPlayerNr = 1;                          _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                      }                      break;              }
Missing Default,Vocaluxe.Screens,CScreenNames,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptions,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonOptionsGame].Selected)                              CGraphics.FadeTo(EScreen.OptionsGame);                            if (_Buttons[_ButtonOptionsSound].Selected)                              CGraphics.FadeTo(EScreen.OptionsSound);                            if (_Buttons[_ButtonOptionsRecord].Selected)                              CGraphics.FadeTo(EScreen.OptionsRecord);                            if (_Buttons[_ButtonOptionsVideo].Selected)                              CGraphics.FadeTo(EScreen.OptionsVideo);                            if (_Buttons[_ButtonOptionsLyrics].Selected)                              CGraphics.FadeTo(EScreen.OptionsLyrics);                            if (_Buttons[_ButtonOptionsTheme].Selected)                              CGraphics.FadeTo(EScreen.OptionsTheme);                            break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsGame,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsGame.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          else if (_Buttons[_ButtonServer].Selected)                              CGraphics.ShowPopup(EPopupScreens.PopupServerQR);                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsLyrics,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsLyrics.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenParty,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonStart].Selected)                              _StartPartyMode();                            if (_Buttons[_ButtonExit].Selected)                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Left:                      case Keys.Right:                          if (_SelectSlides[_SelectSlideModes].Selected)                              _UpdateSelection();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleInput,The following switch statement is missing a default case: switch (_EditMode)                  {                      case EEditMode.None:                          break;                      case EEditMode.PlayerName:                          _SelectSlides[_SelectSlideProfiles].RenameValue(                              CProfiles.AddGetPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)' keyEvent.Unicode));                          _ProfilesChanged = true;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenProfiles,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                          if (_EditMode == EEditMode.PlayerName)                              _EditMode = EEditMode.None;                          else                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                              CGraphics.FadeTo(EScreen.Main);                          else if (_Buttons[_ButtonSave].Selected)                              _SaveProfiles();                          else if (_Buttons[_ButtonNew].Selected)                              _NewProfile();                          else if (_Buttons[_ButtonPlayerName].Selected)                          {                              if (CProfiles.NumProfiles > 0 && _EditMode != EEditMode.PlayerName)                                  _EditMode = EEditMode.PlayerName;                              else                                  _EditMode = EEditMode.None;                          }                          else if (_Buttons[_ButtonDelete].Selected)                              _DeleteProfile();                          else if (_Buttons[_ButtonWebcam].Selected)                              _OnWebcam();                          else if (_Buttons[_ButtonSaveSnapshot].Selected)                              _OnSaveSnapshot();                          else if (_Buttons[_ButtonDiscardSnapshot].Selected)                              _OnDiscardSnapshot();                          else if (_Buttons[_ButtonTakeSnapshot].Selected)                              _OnTakeSnapshot();                          break;                        case Keys.Back:                          if (_EditMode == EEditMode.PlayerName)                          {                              _SelectSlides[_SelectSlideProfiles].RenameValue(                                  CProfiles.GetDeleteCharInPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)));                              _ProfilesChanged = true;                          }                          else                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Delete:                          _DeleteProfile();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenScore,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          _LeaveScreen();                          break;                        case Keys.Left:                          _ChangeRound(-1);                          break;                        case Keys.Right:                          _ChangeRound(1);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                          _TogglePause();                          if (_Pause)                              _SelectElement(_Buttons[_ButtonCancel]);                          break;                        case Keys.P:                          _TogglePause();                          if (_Pause)                              _SelectElement(_Buttons[_ButtonContinue]);                          break;                        case Keys.T:                          var mode = (int)CConfig.Config.Game.TimerMode;                            mode++;                          if (mode > Enum.GetNames(typeof(ETimerMode)).Length - 1)                              mode = 0;                          CConfig.Config.Game.TimerMode = (ETimerMode)mode;                          CConfig.SaveConfig();                          break;                        case Keys.I:                          mode = (int)CConfig.Config.Theme.PlayerInfo;                            mode++;                          if (mode > Enum.GetNames(typeof(EPlayerInfo)).Length - 1)                              mode = 0;                          CConfig.Config.Theme.PlayerInfo = (EPlayerInfo)mode;                          CConfig.SaveConfig();                          _SetVisibility();                          break;                        case Keys.S:                          if (CGame.NumRounds > CGame.RoundNr)                          {                              if (keyEvent.ModCtrl)                                  _NextSong();                          }                          break;                      case Keys.W:                          if (CWebcam.IsDeviceAvailable())                          {                              _Webcam = !CWebcam.IsCapturing();                              if (_Webcam)                                  CWebcam.Start();                              else                                  CWebcam.Stop();                          }                          break;                      case Keys.Enter:                          if (_Pause)                          {                              if (_Buttons[_ButtonContinue].Selected)                                  _SetPause(false);                              if (_Buttons[_ButtonCancel].Selected)                                  _Stop();                              if (_Buttons[_ButtonRestartGame].Selected)                                  _RestartGame();                              if (_Buttons[_ButtonRestartRound].Selected)                                  _RestartRound();                              if (_Buttons[_ButtonSkip].Selected)                              {                                  _NextSong();                                  _SetPause(false);                              }                          }                          break;                        case Keys.V:                          if (_VideoAspect == EAspect.Zoom2)                              _VideoAspect = EAspect.Crop;                          else                              _VideoAspect++;                            CSong song = CGame.GetSong();                          song.VideoAspect = _VideoAspect;                            if (CConfig.Config.Debug.SaveModifiedSongs == EOffOn.TR_CONFIG_ON)                              song.Save();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect.W = _Statics[_StaticTimeLine].Rect.W * (currentTime / totalTime);                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      CStatic stat = _Statics[_StaticTimeLine];                      int currentBeat = CGame.CurrentBeat;                      for (int i = 0; i < _TimeRects.Count; i++)                      {                          if (currentBeat >= _TimeRects[i].StartBeat && currentBeat <= _TimeRects[i].EndBeat)                          {                              _TimeRects[i].Rect.Texture = _Statics[_StaticTimeLineExpandedHighlighted].Texture;                              _TimeRects[i].Rect.Color = _Statics[_StaticTimeLineExpandedHighlighted].Color;                          }                          else                          {                              _TimeRects[i].Rect.Texture = _Statics[_StaticTimeLineExpandedNormal].Texture;                              _TimeRects[i].Rect.Color = _Statics[_StaticTimeLineExpandedNormal].Color;                          }                      }                      _Statics[_StaticTimePointer].X = stat.X + stat.W * (currentTime / totalTime);                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      CDraw.DrawTexture(_Statics[_StaticTimeLine].Texture' _Statics[_StaticTimeLine].Rect' new SColorF(1' 1' 1' 1)' _TimeLineRect);                      break;                  case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      for (int i = 0; i < _TimeRects.Count; i++)                          CDraw.DrawTexture(_TimeRects[i].Rect.Texture' _Statics[_StaticTimeLine].Rect' _TimeRects[i].Rect.Color' _TimeRects[i].Rect.Rect);                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_PrepareTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect = stat.Rect;                      _Statics[_StaticTimePointer].Visible = false;                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      _TimeRects.Clear();                      _Statics[_StaticTimePointer].Visible = true;                        CSong song = CGame.GetSong();                        if (song == null)                          return;                        float totalTime = CSound.GetLength(_CurrentStream);                      if (Math.Abs(song.Finish) > 0.001)                          totalTime = song.Finish;                        totalTime -= song.Start;                        if (totalTime <= 0f)                          return;                        _Length = totalTime;                        foreach (CVoice voice in song.Notes.Voices)                      {                          foreach (CSongLine line in voice.Lines.Where(line => line.VisibleInTimeLine))                          {                              var trect = new STimeRect { StartBeat = line.FirstNoteBeat' EndBeat = line.EndBeat };                              trect.Rect = GetNewStatic(null'                                                        new SColorF(1f' 1f' 1f' 1f)'                                                        new SRectF(                                                            stat.Rect.X + stat.Rect.W * ((CGame.GetTimeFromBeats(trect.StartBeat' song.BPM) + song.Gap - song.Start) / totalTime)'                                                            stat.Rect.Y'                                                            stat.Rect.W * (CGame.GetTimeFromBeats(trect.EndBeat - trect.StartBeat' song.BPM) / totalTime)'                                                            stat.Rect.H'                                                            stat.Rect.Z));                                _TimeRects.Add(trect);                          }                      }                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }
Missing Default,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }
Missing Default,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The following switch statement is missing a default case: switch (CConfig.Config.Game.SongSorting)                  {                      case ESongSorting.TR_CONFIG_ARTIST:                      case ESongSorting.TR_CONFIG_ARTIST_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_YEAR:                      case ESongSorting.TR_CONFIG_DECADE:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_TITLE_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_FOLDER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSong,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The following switch statement is missing a default case: switch (CConfig.Config.Game.SongSorting)                  {                      case ESongSorting.TR_CONFIG_FOLDER:                      case ESongSorting.TR_CONFIG_TITLE_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_ARTIST:                      case ESongSorting.TR_CONFIG_ARTIST_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenTest,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.F:                          //FadeAndPause();                          break;                        case Keys.S:                          //PlayFile();                          break;                        case Keys.P:                          //PauseFile();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsSound,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsVideo,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          else if (_Buttons[_ButtonScreenAdjustments].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.OptionsVideoAdjustments);                          }                          break;                        case Keys.Left:                          if (_SelectSlides[_SelectSlideWebcamDevices].Selected)                              _OnDeviceEvent();                          if (_SelectSlides[_SelectSlideWebcamCapabilities].Selected)                              _OnCapabilitiesEvent();                          _SaveConfig();                          break;                        case Keys.Right:                          if (_SelectSlides[_SelectSlideWebcamDevices].Selected)                              _OnDeviceEvent();                          if (_SelectSlides[_SelectSlideWebcamCapabilities].Selected)                              _OnCapabilitiesEvent();                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsRecord,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveMicConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveMicConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveMicConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                            if (_Buttons[_ButtonDelayTest].Selected)                              _TestDelay();                            break;                        case Keys.D:                          _TestDelay();                          break;                        case Keys.Left:                          _SelectSlideAction();                          break;                        case Keys.Right:                          _SelectSlideAction();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsTheme,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsTheme.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _Close();                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                              _Close();                          break;                        case Keys.Left:                          _OnChange();                          break;                        case Keys.Right:                          _OnChange();                          break;                  }
Missing Default,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following switch statement is missing a default case: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Missing Default,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,C:\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following switch statement is missing a default case: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
