Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The method has 131 lines of code.
Long Method,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The method has 135 lines of code.
Long Method,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The method has 179 lines of code.
Long Method,Vocaluxe,CMainProgram,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_Run,The method has 174 lines of code.
Long Method,Vocaluxe,CMainProgram,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_CloseProgram,The method has 114 lines of code.
Long Method,Vocaluxe.Lib.Database,CCoverDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The method has 102 lines of code.
Long Method,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The method has 129 lines of code.
Long Method,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,Open,The method has 109 lines of code.
Long Method,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The method has 174 lines of code.
Long Method,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The method has 106 lines of code.
Long Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The method has 203 lines of code.
Long Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleMouse,The method has 187 lines of code.
Long Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The method has 214 lines of code.
Long Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The method has 203 lines of code.
Complex Method,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,Cyclomatic complexity of the method is 62
Complex Method,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CCover,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,_SongSortingToType,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,Cyclomatic complexity of the method is 28
Complex Method,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetToTime,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,_GetNoteTimeBeforeBeat,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CLanguage,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Update,Cyclomatic complexity of the method is 22
Complex Method,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_LoadProfiles,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_LoadAvatars,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_GetNoCategoryName,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CSongFilter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongFilter.cs,_FilterSongs,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_AddSongToList,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Base,CSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,Cyclomatic complexity of the method is 49
Complex Method,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputThemeEditor,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetMp3File,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendKeyEvent,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendProfileData,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe,CMainProgram,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_Run,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Lib.Database,CCoverDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,Cyclomatic complexity of the method is 15
Complex Method,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_CheckQueue,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,Cyclomatic complexity of the method is 17
Complex Method,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,Open,Cyclomatic complexity of the method is 15
Complex Method,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,_DoFree,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,_DoFree,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Lib.Sound.Record,CDelayTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_GetFontIndex,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,_GetRealBounds,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_FindFrame,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,SyncTime,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Screens,CPopupScreenPlayerControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,HandleInput,Cyclomatic complexity of the method is 11
Complex Method,Vocaluxe.Screens,CPopupScreenPlayerControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,HandleMouse,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,Cyclomatic complexity of the method is 25
Complex Method,Vocaluxe.Screens,CScreenMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenMain.cs,HandleInput,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,Cyclomatic complexity of the method is 37
Complex Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleMouse,Cyclomatic complexity of the method is 40
Complex Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckMics,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenOptions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,HandleInput,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenOptions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,HandleMouse,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenOptionsGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsGame.cs,HandleInput,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleInput,Cyclomatic complexity of the method is 23
Complex Method,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleMouse,Cyclomatic complexity of the method is 19
Complex Method,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,Cyclomatic complexity of the method is 15
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,HandleInput,Cyclomatic complexity of the method is 25
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,HandleMouse,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,Cyclomatic complexity of the method is 14
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,Cyclomatic complexity of the method is 13
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,Cyclomatic complexity of the method is 19
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,Cyclomatic complexity of the method is 16
Complex Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,Cyclomatic complexity of the method is 64
Complex Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,Cyclomatic complexity of the method is 44
Complex Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_UpdatePartyModeOptions,Cyclomatic complexity of the method is 15
Complex Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,Cyclomatic complexity of the method is 18
Complex Method,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_OpenAndAddPlaylistAction,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,HandleInput,Cyclomatic complexity of the method is 12
Complex Method,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,HandleInput,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,UpdateGame,Cyclomatic complexity of the method is 9
Complex Method,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,Cyclomatic complexity of the method is 19
Complex Method,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,Cyclomatic complexity of the method is 8
Complex Method,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,Cyclomatic complexity of the method is 10
Complex Method,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,Cyclomatic complexity of the method is 12
Long Parameter List,Vocaluxe.Base,CDataBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDataBase.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Base,CDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 5 parameters. Parameters: textureRef' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Base,CDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,DrawTextureReflection,The method has 7 parameters. Parameters: textureRef' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Base,CBdraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Base,CBdraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' reflectionSpace' reflectionHeight' allMonitors
Long Parameter List,Vocaluxe.Base,CBfonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawText,The method has 7 parameters. Parameters: text' font' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base,CBfonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawTextReflection,The method has 8 parameters. Parameters: text' font' x' y' z' color' reflectionSpace' reflectionHeight
Long Parameter List,Vocaluxe.Base,CBfonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,DrawText,The method has 8 parameters. Parameters: text' font' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base,CBsongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,SortSongs,The method has 6 parameters. Parameters: sorting' tabs' ignoreArticles' searchString' duetOptions' playlistID
Long Parameter List,Vocaluxe.Base,CBdataBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CMain.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Base,CKeys,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has 6 parameters. Parameters: alt' shift' ctrl' pressed' unicode' key
Long Parameter List,Vocaluxe.Base,CMouse,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has 10 parameters. Parameters: x' y' lb' ld' rb' wheel' lbh' rbh' mb' mbh
Long Parameter List,Vocaluxe.Base,CSongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,Sort,The method has 6 parameters. Parameters: sorting' tabs' ignoreArticles' searchString' duetOptions' playlistID
Long Parameter List,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,DoTask,The method has 5 parameters. Parameters: action' parameter1' parameter2' parameter3' parameter4
Long Parameter List,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,DoTaskWithoutReturn,The method has 5 parameters. Parameters: action' parameter1' parameter2' parameter3' parameter4
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,GetDataBaseSongInfos,The method has 5 parameters. Parameters: artist' title' numPlayed' dateAdded' highscoreID
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The method has 12 parameters. Parameters: playerName' score' lineNr' date' medley' duet' shortSong' difficulty' artist' title' numPlayed' filePath
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The method has 10 parameters. Parameters: playerName' score' lineNr' date' medley' duet' shortSong' difficulty' dataBaseSongID' command
Long Parameter List,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The method has 6 parameters. Parameters: songID' artist' title' numPlayed' dateAdded' filePath
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The method has 5 parameters. Parameters: texture' rect' bounds' drawCoords' mirrored
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The method has 6 parameters. Parameters: texture' rect' drawCoords' mirrored' begin' end
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 5 parameters. Parameters: textureRef' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The method has 6 parameters. Parameters: textureRef' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The method has 7 parameters. Parameters: textureRef' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The method has 5 parameters. Parameters: rot' rx1' rx2' ry1' ry2
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 5 parameters. Parameters: texture' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 5 parameters. Parameters: texture' rect' color' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' bounds' mirrored' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTexture,The method has 6 parameters. Parameters: texture' rect' color' begin' end' allMonitors
Long Parameter List,Vocaluxe.Lib.Draw,IDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\IDraw.cs,DrawTextureReflection,The method has 7 parameters. Parameters: texture' rect' color' bounds' space' height' allMonitors
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenStream,The method has 8 parameters. Parameters: stream' inputParameters' outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenInputStream,The method has 7 parameters. Parameters: stream' inputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenOutputStream,The method has 7 parameters. Parameters: stream' outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData
Long Parameter List,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,_ProcessNewData,The method has 6 parameters. Parameters: input' output' frameCount' timeInfo' statusFlags' userData
Long Parameter List,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The method has 5 parameters. Parameters: freq' sampleRate' sampleCt' angle' data
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyph,The method has 7 parameters. Parameters: chr' fontHeight' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyph,The method has 8 parameters. Parameters: chr' fontHeight' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,DrawGlyphReflection,The method has 8 parameters. Parameters: chr' fontHeight' x' y' z' color' rspace' rheight
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 5 parameters. Parameters: text' font' x' y' z
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 7 parameters. Parameters: text' font' x' y' z' color' allMonitors
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawTextReflection,The method has 8 parameters. Parameters: text' font' x' y' z' color' rspace' rheight
Long Parameter List,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,DrawText,The method has 8 parameters. Parameters: text' font' x' y' z' color' begin' end
Long Parameter List,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,GetTextureAndRect,The method has 6 parameters. Parameters: fontHeight' x' y' z' texture' rect
Long Parameter List,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,_ShowReporter,The method has 5 parameters. Parameters: crash' showContinue' vocaluxeVersionTag' log' lastError
Long Parameter List,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,CReporter,The method has 5 parameters. Parameters: crash' showContinue' vocaluxeVersionTag' log' lastError
Long Parameter List,Vocaluxe.Screens,CCreditName,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The method has 5 parameters. Parameters: image' imgDot' particle' particleOffsetX' particleOffsetY
Long Parameter List,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,_MyPaStreamCallback,The method has 6 parameters. Parameters: input' output' frameCount' timeInfo' statusFlags' userData
Long Identifier,Vocaluxe.Base,CSettings,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSettings.cs,,The length of the parameter DatabaseCreditsRessourcesVersion is 32.
Long Identifier,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,,The length of the parameter _StaticTimeLineExpandedHighlighted is 34.
Long Identifier,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _ButtonOptionsOpenSelectedItem is 30.
Long Identifier,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsPlaylistAdd is 30.
Long Identifier,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsPlaylistOpen is 31.
Long Identifier,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,,The length of the parameter _SelectSlideOptionsNumMedleySongs is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlideBackgroundMusicVolume is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlideBackgroundMusicSource is 33.
Long Identifier,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,,The length of the parameter _SelectSlidePreviewMusicVolume is 30.
Long Identifier,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,,The length of the parameter _SelectSlideVideosToBackground is 30.
Long Identifier,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,,The length of the parameter _SelectSlideWebcamCapabilities is 30.
Long Statement,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Update,The length of the statement  "            if (_PreviewStartHelperTask != null && ( _PreviewPlayer.Length > 0 || _PreviewStartWaitCounter++ >= _PreviewStartWaitMaxTries)) " is 127.
Long Statement,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Update,The length of the statement  "                    if (_PreviewStartHelperTask != null && (_PreviewPlayer.Length > 0 || _PreviewStartWaitCounter++ >= _PreviewStartWaitMaxTries)) " is 126.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawBackground,The length of the statement  "            g.DrawImage(bmpBackground' bmpBackground.GetRect()' 0' 0' bmpBackground.Width' bmpBackground.Height' GraphicsUnit.Pixel' ia); " is 125.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The length of the statement  "                    string line = elements.GetRange(firstEl' nextLineEl - firstEl).Aggregate(""' (current' element) => current + element.Text); " is 123.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                diffWith += Math.Abs(requestedWidth - _GetWidth(elements' splitEl + 1' splitEl2)) + Math.Abs(requestedWidth - _GetWidth(elements' splitEl2 + 1)); " is 145.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                diffWithout += Math.Abs(requestedWidth - _GetWidth(elements' splitEl' splitEl3)) + Math.Abs(requestedWidth - _GetWidth(elements' splitEl3 + 1)); " is 144.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The length of the statement  "                    return startElement == 0 ? splitEl : splitEl - 1; //Both are alphanumeric' favor longer first lines but shorter middle lines " is 124.
Long Statement,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The length of the statement  "                if ((Array.IndexOf(_SplitCharAfter' text[i]) >= 0 && (Char.IsLetterOrDigit(text' i + 1) || Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)) || " is 145.
Long Statement,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The length of the statement  "                    CLog.Error("There were some warnings or errors loading the config file. Some values might have been reset to their defaults."); " is 127.
Long Statement,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The length of the statement  "                    return "Fade player-information with lyrics and notebars: " + CHelper.ListStrings(Enum.GetNames(typeof(EFadePlayerInfo))); " is 122.
Long Statement,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_GetComment,The length of the statement  "                    return "Threshold of songs for that covers will not longer be included in get-all-songs-requests (e.g. song list) (default: 70) [-1..65535] -1 => always deliver covers"; " is 169.
Long Statement,Vocaluxe.Base,CCover,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,GenerateCover,The length of the statement  "                                          ? null : _CoverGenerators[type].GetCover(text' firstSong != null ? Path.Combine(firstSong.Folder' firstSong.CoverFileName) : null); " is 131.
Long Statement,Vocaluxe.Base,CCover,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,GenerateCover,The length of the statement  "                        coverBmp = _CoverGenerators[ECoverGeneratorType.Default].GetCover(text' firstSong != null ? Path.Combine(firstSong.Folder' firstSong.CoverFileName) : null); " is 156.
Long Statement,Vocaluxe.Base,CCover,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCover.cs,_LoadCovers,The length of the statement  "                    CLog.Fatal("Covertheme \"{ThemeName}\" does not include a cover file named \"{MissingFileName}\" and cannot be used!"' CLog.Params(coverTheme.Info.Name' _NoCoverName)); " is 168.
Long Statement,Vocaluxe.Base,CCursor,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCursor.cs,UpdatePosition,The length of the statement  "                //Use that point so cursor is deactivated only when there is no move by the diff value from this position the the given offTime " is 127.
Long Statement,Vocaluxe.Base,CDraw,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CDraw.cs,Init,The length of the statement  "                        CLog.Fatal(e' "Error in initializing of Direct3D. Please check if your DirectX redistributables and graphic card drivers are up to date. You can " + " is 148.
Long Statement,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The length of the statement  "                        //Shift fraction of correct sung notes to [-0.1' 0.1]' player needs to sing five lines fully correctly to get highest ranking " is 125.
Long Statement,Vocaluxe.Base,CLanguage,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_LoadLanguageFile,The length of the statement  "            var lang = new SLanguage {FilePath = Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameLanguages' fileName)' PartyModeTexts = new List<SPartyLanguage>()}; " is 162.
Long Statement,Vocaluxe.Base,CLanguage,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetPartyModeTexts,The length of the statement  "                _Languages[language].PartyModeTexts.Where(partyLanguage => partyLanguage.PartyModeID == partyModeID).Select(partyLanguage => partyLanguage.Texts).FirstOrDefault(); " is 163.
Long Statement,Vocaluxe.Base,CParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,Init,The length of the statement  "                    Info = new SPartyModeInfos {Author = "Vocaluxe Team"' Description = "Normal game"' Name = "Normal"' TargetAudience = "Just a normal game for everyone"}' " is 152.
Long Statement,Vocaluxe.Base,CParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,The length of the statement  "                    throw new Exception("Wrong PartyModeSystemVersion " + pm.PartyModeSystemVersion + " expected: " + _PartyModeSystemVersion); " is 123.
Long Statement,Vocaluxe.Base,CParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_LoadPartyMode,The length of the statement  "            object instance = output.CreateInstance(typeof(IPartyMode).Namespace + "." + pm.Info.Folder + "." + pm.Info.PartyModeFile' false' " is 129.
Long Statement,Vocaluxe.Base,CParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CParty.cs,_CompileFiles,The length of the statement  "                        CLog.Error("Error Compiling Source (" + CHelper.ListStrings(files) + "): " + e.ErrorText + " in '" + e.FileName + "' (" + e.Line + ")"); " is 136.
Long Statement,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_CreateCategories,The length of the statement  "                    if (lastCategory == null || String.Compare(songPointer.SortString' lastCategory.Name' StringComparison.CurrentCultureIgnoreCase) != 0) " is 134.
Long Statement,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The length of the statement  "                        songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString(); " is 152.
Long Statement,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_FillCategories,The length of the statement  "                    cat.CoverTextureSmall = CCover.GenerateCover(cat.Name' CCover._SongSortingToType(CSongs.Sorter.SongSorting)' cat.GetSong(0)); " is 125.
Long Statement,Vocaluxe.Base,CSongFilter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongFilter.cs,_FilterSongs,The length of the statement  "                        string search = song.Title.ToUpper() + " " + song.Artist.ToUpper() + " " + song.FolderName.ToUpper() + " " + song.FileName.ToUpper(); " is 133.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                    res = String.Compare(CSongs.Songs[s1.SongID].ArtistSorting' CSongs.Songs[s2.SongID].ArtistSorting' StringComparison.CurrentCultureIgnoreCase); " is 142.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                    return res != 0 ? res : String.Compare(CSongs.Songs[s1.SongID].TitleSorting' CSongs.Songs[s2.SongID].TitleSorting' StringComparison.CurrentCultureIgnoreCase); " is 158.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                res = String.Compare(CSongs.Songs[s1.SongID].Artist' CSongs.Songs[s2.SongID].Artist' StringComparison.CurrentCultureIgnoreCase); " is 128.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldArtistTitle,The length of the statement  "                return res != 0 ? res : String.Compare(CSongs.Songs[s1.SongID].Title' CSongs.Songs[s2.SongID].Title' StringComparison.CurrentCultureIgnoreCase); " is 144.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldTitle,The length of the statement  "                           ? String.Compare(CSongs.Songs[s1.SongID].TitleSorting' CSongs.Songs[s2.SongID].TitleSorting' StringComparison.CurrentCultureIgnoreCase) : " is 137.
Long Statement,Vocaluxe.Base,CSongSorter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongSorter.cs,_SortByFieldTitle,The length of the statement  "                           String.Compare(CSongs.Songs[s1.SongID].Title' CSongs.Songs[s2.SongID].Title' StringComparison.CurrentCultureIgnoreCase); " is 120.
Long Statement,Vocaluxe.Base,CMouse,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,MouseMove,The length of the statement  "            _Add(e.X' e.Y' false' false' false' 0' e.Button == MouseButtons.Left' e.Button == MouseButtons.Right' false' e.Button == MouseButtons.Middle); " is 142.
Long Statement,Vocaluxe.Base,CSettings,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSettings.cs,GetFullVersionText,The length of the statement  "            return ((AssemblyTitleAttribute)Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(AssemblyTitleAttribute)' false).First()).Title; " is 138.
Long Statement,Vocaluxe.Base,CSongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,_LoadCoversAsync,The length of the statement  "            _CoverLoaderThread = new Thread(_LoadCovers) {Name = "CoverLoader"' Priority = ThreadPriority.BelowNormal' IsBackground = true}; " is 128.
Long Statement,Vocaluxe.Base,CWebcam,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CWebcam.cs,Init,The length of the statement  "            _Webcam.Select(CConfig.Config.Video.WebcamConfig.HasValue ? CConfig.Config.Video.WebcamConfig.Value : new SWebcamConfig()); " is 123.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,The length of the statement  "                if (NextScreen.CurrentMusicType != EMusicType.Background && NextScreen.CurrentMusicType != EMusicType.Preview && NextScreen.CurrentMusicType != EMusicType.BackgroundPreview) " is 173.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_FinishScreenFading,The length of the statement  "            if (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.Preview || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) " is 182.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_FinishScreenFading,The length of the statement  "                CBackgroundMusic.IsPlayingPreview = CurrentScreen.CurrentMusicType == EMusicType.Preview || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview; " is 155.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "            if (popupVolumeControlAllowed && (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_OFF) " is 236.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    if (_CurrentPopupScreen == EPopupScreens.NoPopup && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_ON) " is 127.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    CConfig.Config.Graphics.FullScreen = (CConfig.Config.Graphics.FullScreen == EOffOn.TR_CONFIG_ON) ? EOffOn.TR_CONFIG_OFF : EOffOn.TR_CONFIG_ON; " is 142.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                bool isOverPopupPlayerControl = CHelper.IsInBounds(_PopupScreens[(int)EPopupScreens.PopupPlayerControl].ScreenArea' mouseEvent); " is 128.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                    if (_CurrentPopupScreen == EPopupScreens.NoPopup && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_ON) " is 127.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The length of the statement  "                bool isOverPopupVolumeControl = CHelper.IsInBounds(_PopupScreens[(int)EPopupScreens.PopupVolumeControl].ScreenArea' mouseEvent); " is 128.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputThemeEditor,The length of the statement  "                    CConfig.Config.Graphics.FullScreen = (CConfig.Config.Graphics.FullScreen == EOffOn.TR_CONFIG_ON) ? EOffOn.TR_CONFIG_OFF : EOffOn.TR_CONFIG_ON; " is 142.
Long Statement,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_Update,The length of the statement  "            if (_VolumePopupTimer.IsRunning && _VolumePopupTimer.ElapsedMilliseconds >= 1500 && _CurrentPopupScreen == EPopupScreens.PopupVolumeControl) " is 140.
Long Statement,Vocaluxe.Base.Server,CSessionControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\SessionControl.cs,_CheckForUserTimeouts,The length of the statement  "            var sessionIdsToRemove = _ActiveSessions.Where(pair => (DateTime.Now-pair.Value.LastSeen).TotalMilliseconds > _UserTimeout) " is 123.
Long Statement,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,_RegisterUrlAndCert,The length of the statement  "                Arguments = AppDomain.CurrentDomain.FriendlyName + " " + port + " " + (_Encrypted ? "true" : "false") + (reserve ? " true" : "")' " is 129.
Long Statement,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,GetAllSongs,The length of the statement  "            bool sendCovers = CConfig.Config.Server.SongCountCoverThreshold == -1 || CConfig.Config.Server.SongCountCoverThreshold > CSongs.Songs.Count; " is 140.
Long Statement,Vocaluxe.Base.ThemeSystem,CPartyTheme,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_Load,The length of the statement  "            return CFonts.LoadThemeFonts(_Data.Fonts' Path.Combine(_Folder' ".."' CSettings.FolderNamePartyModeFonts)' Name' PartyModeID); " is 126.
Long Statement,Vocaluxe.Base.ThemeSystem,CTheme,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CTheme.cs,Init,The length of the statement  "                    string errorMsg = _Data.ThemeSystemVersion < _ThemeSystemVersion ? "the file ist outdated!" : "the file is for newer program versions!"; " is 136.
Long Statement,Vocaluxe.Base.ThemeSystem,CSkin,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CSkin.cs,Init,The length of the statement  "                    string errorMsg = _Data.SkinSystemVersion < _SkinSystemVersion ? "the file ist outdated!" : "the file is for newer program versions!"; " is 134.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,Init,The length of the statement  "            return CSkin.InitRequiredElements() && ReadThemesFromFolder(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameThemes)' -1); " is 131.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,Load,The length of the statement  "            CTheme theme = _Themes.FirstOrDefault(th => th is CBaseTheme && th.Name == CConfig.Config.Theme.Theme) ?? _Themes.FirstOrDefault(th => th is CBaseTheme); " is 153.
Long Statement,Vocaluxe.Base.ThemeSystem,CThemes,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CThemes.cs,_LogMissingElement,The length of the statement  "            CLog.Error("Skin " + CurrentThemes[partyModeID].CurrentSkin + " is missing the " + elType + " \"" + elName + "\"! Expect visual problems!"); " is 140.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,_IsProgramInstalled,The length of the statement  "            return _CheckUninstallKey(name' baseKey + uninstallKey) || (_KeyExists(baseKey64) && _CheckUninstallKey(name' baseKey64 + uninstallKey)); " is 137.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,_EnsureDataFolderExists,The length of the statement  "                DirectoryInfo defaultProfileDir = new DirectoryInfo(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameProfiles)); " is 121.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2010 Redistributables are missing. Please install them first. \r\nDownload(x86): https://www.microsoft.com/de-de/download/details.aspx?id=5555 \r\nDownload(x64): https://www.microsoft.com/de-de/download/details.aspx?id=14632"); " is 233.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2012 Redistributables are missing. Please install them first.\r\nDownload: http://www.microsoft.com/de-de/download/details.aspx?id=30679"); " is 145.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2008 Redistributables are missing. Portaudio might not be working.\r\nDownload: http://www.microsoft.com/de-de/download/details.aspx?id=29"); " is 147.
Long Statement,Vocaluxe,CProgrammHelper,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\CProgrammHelper.cs,CheckRequirements,The length of the statement  "                    "VC++ 2010 and 2008 Redistributables are missing. Please install them first. VC++ 2008 is preferred as Portaudio doesn't work with VC++ 2010.\r\nDownload(2008): http://www.microsoft.com/de-de/download/details.aspx?id=29 \r\nDownload(2010): http://www.microsoft.com/de-de/download/details.aspx?id=5555"); " is 303.
Long Statement,Vocaluxe.Lib.Database,CCoverDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The length of the statement  "                size = CHelper.FitInBounds(new SRectF(0' 0' maxSize' maxSize' 0)' (float)size.Width / size.Height' EAspect.LetterBox).SizeI; " is 124.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The length of the statement  "                    return _AddScore(CProfiles.GetPlayerName(player.ProfileID)' (int)Math.Round(player.Points)' player.VoiceNr' player.DateTicks' medley' " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                command.CommandText = "SELECT id FROM Scores WHERE SongID = @SongID AND PlayerName = @PlayerName AND Score = @Score AND " + " is 123.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                                      "LineNr = @LineNr AND Date = @Date AND Medley = @Medley AND Duet = @Duet AND ShortSong = @ShortSong AND Difficulty = @Difficulty"; " is 130.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The length of the statement  "                command.CommandText = "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty) " + " is 124.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The length of the statement  "                            "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " + " is 121.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The length of the statement  "                            "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " + " is 143.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDB,The length of the statement  "                    command.CommandText = "CREATE TABLE IF NOT EXISTS Version ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' Value INTEGER NOT NULL);"; " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDB,The length of the statement  "                                          "SongID INTEGER NOT NULL' PlayerName TEXT NOT NULL' Score INTEGER NOT NULL' LineNr INTEGER NOT NULL' Date BIGINT NOT NULL' " + " is 126.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDBV1,The length of the statement  "                    command.CommandText = "CREATE TABLE IF NOT EXISTS Version ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT' Value INTEGER NOT NULL);"; " is 133.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateHighscoreDBV1,The length of the statement  "                                          "SongID INTEGER NOT NULL' PlayerName TEXT NOT NULL' Score INTEGER NOT NULL' LineNr INTEGER NOT NULL' Date BIGINT NOT NULL' " + " is 126.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The length of the statement  "                        "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores"; " is 166.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The length of the statement  "                                              ? "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' '0'' '0'' '0'' Difficulty from US_Scores" " is 166.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom101,The length of the statement  "                                              : "INSERT INTO Scores (SongID' PlayerName' Score' LineNr' Date' Medley' Duet' Difficulty) SELECT SongID' Player' Score' '0'' Date' '0'' '0'' Difficulty from US_Scores"; " is 168.
Long Statement,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The length of the statement  "                    cmdSource.CommandText = "SELECT SongID' PlayerName' Score' LineNr' Date' Medley' Duet' ShortSong' Difficulty FROM Scores"; " is 122.
Long Statement,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The length of the statement  "                dc.Ty2 += (newrect.H - height) / newrect.H; // Adjust so not all of the start of the texture is drawn (mirrored--> Ty1>Ty2) " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The length of the statement  "                if (_BorderLeft != CConfig.Config.Graphics.BorderLeft || _BorderRight != CConfig.Config.Graphics.BorderRight || _BorderTop != CConfig.Config.Graphics.BorderTop || " is 162.
Long Statement,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,EnqueueTexture,The length of the statement  "            // 3) a) AddTexture(fileA) || b) EnqueueTexture(fileA) with a)getFromCache + b)getFromCache + a)addToCache + b)addToCache --> Only keep one copy " is 144.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DoResize,The length of the statement  "            if (_H == _Form.ClientSize.Height && _W == _Form.ClientSize.Width && CConfig.Config.Graphics.ScreenAlignment == _CurrentAlignment) " is 130.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The length of the statement  "            _VertexBuffer = new VertexBuffer(_Device' CSettings.VertexBufferElements * (4 * Marshal.SizeOf(typeof(STexturedColoredVertex)))' Usage.WriteOnly | Usage.Dynamic' " is 161.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_OnAfterDraw,The length of the statement  "                //After a reset Init() needs to be called because all data in the Direct3D default pool are lost and need to be recreated " is 121.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The length of the statement  "            //The vertex buffer locks are slow actions' its better to lock once per frame and write all vertices to the buffer at once " is 122.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The length of the statement  "            DataStream stream = _VertexBuffer.Lock(0' _Vertices.Count * Marshal.SizeOf(typeof(STexturedColoredVertex))' LockFlags.Discard); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,CopyScreen,The length of the statement  "            Surface.FromSurface(textureSurface' backbufferSurface' Filter.Default' 0' new Rectangle(0' 0' _W' _H)' new Rectangle(0' 0' _W' _H)); " is 132.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,CopyScreen,The length of the statement  "            if (!_GetTexture(textureRef' out texture) || texture.DataSize.Width != GetScreenWidth() || texture.DataSize.Height != GetScreenHeight()) " is 136.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CreateTexture,The length of the statement  "            return new CD3DTexture(_Device' dataSize' _CheckForNextPowerOf2(dataSize.Width)' _CheckForNextPowerOf2(dataSize.Height)); " is 121.
Long Statement,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The length of the statement  "            Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0)); " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_DrawBuffer,The length of the statement  "            frontBuffer.DrawImage(_Backbuffer' new Rectangle(x' y' w' h)' new Rectangle(0' 0' _Backbuffer.Width' _Backbuffer.Height)' GraphicsUnit.Pixel); " is 142.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CopyScreen,The length of the statement  "            if (!_TextureExists(texture) || texture.OrigSize.Width != GetScreenWidth() || texture.OrigSize.Height != GetScreenHeight()) " is 123.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,UpdateTexture,The length of the statement  "                BitmapData bmpData = _Bitmaps[texture.ID].LockBits(new Rectangle(0' 0' _Bitmaps[texture.ID].Width' _Bitmaps[texture.ID].Height)' " is 128.
Long Statement,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_ColorizeBitmap,The length of the statement  "                var cm = new ColorMatrix { Matrix33 = color.A' Matrix00 = color.R' Matrix11 = color.G' Matrix22 = color.B' Matrix44 = 1 }; " is 122.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_AdjustNewBorders,The length of the statement  "            GL.Ortho(-CConfig.Config.Graphics.BorderLeft' CConfig.Config.Graphics.BorderRight + CSettings.RenderW * CConfig.Config.Graphics.NumScreens' CConfig.Config.Graphics.BorderBottom + CSettings.RenderH' " is 197.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,MakeScreenShot,The length of the statement  "            string file = CHelper.GetUniqueFileName(Path.Combine(CSettings.DataFolder' CSettings.FolderNameScreenshots)' "Screenshot.png"); " is 127.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,MakeScreenShot,The length of the statement  "                BitmapData bmpData = screen.LockBits(new Rectangle(0' 0' width' height)' ImageLockMode.WriteOnly' System.Drawing.Imaging.PixelFormat.Format32bppArgb); " is 150.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,CopyScreen,The length of the statement  "            if (!_GetTexture(textureRef' out texture) || texture.DataSize.Width != GetScreenWidth() || texture.DataSize.Height != GetScreenHeight()) " is 136.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CreateTexture,The length of the statement  "            COGLTexture texture = new COGLTexture(GL.GenTexture()' dataSize' _CheckForNextPowerOf2(dataSize.Width)' _CheckForNextPowerOf2(dataSize.Height)); " is 144.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_ClearTexture,The length of the statement  "            GL.FramebufferTexture2D(OpenTK.Graphics.OpenGL.FramebufferTarget.Framebuffer' OpenTK.Graphics.OpenGL.FramebufferAttachment.ColorAttachment0' TextureTarget.Texture2D' " is 165.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_WriteDataToTexture,The length of the statement  "            GL.TexSubImage2D(TextureTarget.Texture2D' 0' 0' 0' texture.DataSize.Width' texture.DataSize.Height' PixelFormat.Bgra' PixelType.UnsignedByte' data); " is 148.
Long Statement,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_WriteDataToTexture,The length of the statement  "            GL.TexSubImage2D(TextureTarget.Texture2D' 0' 0' 0' texture.DataSize.Width' texture.DataSize.Height' PixelFormat.Bgra' PixelType.UnsignedByte' data); " is 148.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            bool lb = (buttonStates.Buttons.LeftShoulder == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.LeftShoulder == OpenTK.Input.ButtonState.Released); " is 160.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            bool rb = (buttonStates.Buttons.RightShoulder == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.RightShoulder == OpenTK.Input.ButtonState.Released); " is 162.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            lb |= (buttonStates.Buttons.RightStick == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.RightStick == OpenTK.Input.ButtonState.Released); " is 152.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.Start == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Start == OpenTK.Input.ButtonState.Released) " is 143.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.A == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.A == OpenTK.Input.ButtonState.Released) " is 135.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.B == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.B == OpenTK.Input.ButtonState.Released) " is 135.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "            else if (buttonStates.Buttons.Back == OpenTK.Input.ButtonState.Pressed && _OldButtonStates.Buttons.Back == OpenTK.Input.ButtonState.Released) " is 141.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "                var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f)))); " is 141.
Long Statement,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The length of the statement  "                var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f)))); " is 148.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenStream,The length of the statement  "                PortAudio.PaError res = PortAudio.Pa_OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' " is 160.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenInputStream,The length of the statement  "                            OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData)); " is 135.
Long Statement,Vocaluxe.Lib.Sound,CPortAudioHandle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\CPortAudioHandle.cs,OpenOutputStream,The length of the statement  "                            OpenStream(out stream' ref inputParameters' ref outputParameters' sampleRate' framesPerBuffer' streamFlags' streamCallback' userData)); " is 135.
Long Statement,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Update,The length of the statement  "                //lock() only protects from different threads not from the same' so we use StreamsToDelete to not modify _Streams while iterating it " is 132.
Long Statement,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudio,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudio.cs,Init,The length of the statement  "                    CLog.Error("Gstreamer not found! Make sure you installed it correctly and if it set the environment variable '" + varName + "'!"' true); " is 136.
Long Statement,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The length of the statement  "            _Latency = CConfig.Config.Sound.AudioLatency / 1000f + (float)PortAudioSharp.PortAudio.Pa_GetStreamInfo(_Stream).outputLatency; " is 127.
Long Statement,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The length of the statement  "                        string msg = "Note " + _ToneToNote(tone) + "(" + distort + ") at buffer " + (i + 1) + "/" + (sampleCt / batchCt) + " detected as "; " is 131.
Long Statement,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The length of the statement  "                float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50; " is 121.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,GetTextBounds,The length of the statement  "            return new RectangleF(text.X' text.Y' GetTextWidth(text.TranslatedText' text.CalculatedFont)' GetTextHeight(text.TranslatedText' text.CalculatedFont)); " is 151.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadDefaultFonts,The length of the statement  "                defaultFonts = xml.Deserialize<SDefaultFonts>(Path.Combine(CSettings.ProgramFolder' CSettings.FolderNameFonts' CSettings.FileNameFonts)); " is 137.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Normal = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileNormal)' EStyle.Normal' fontFamily.Outline' fontFamily.OutlineColor); " is 163.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Italic = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileItalic)' EStyle.Italic' fontFamily.Outline' fontFamily.OutlineColor); " is 163.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.Bold = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileBold)' EStyle.Bold' fontFamily.Outline' fontFamily.OutlineColor); " is 157.
Long Statement,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_LoadFont,The length of the statement  "            fontFamily.BoldItalic = new CFontStyle(Path.Combine(fontFolder' fontFamily.Folder' fontFamily.FileBoldItalic)' EStyle.BoldItalic' fontFamily.Outline' " is 149.
Long Statement,Vocaluxe.GameModes,CGameModeShort,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\GameModes\CGameModes.cs,_PrepareSong,The length of the statement  "            var newSong = new CSong(song) {Finish = CGame.GetTimeFromBeats(song.ShortEnd.EndBeat' song.BPM) + CSettings.DefaultMedleyFadeOutTime + song.Gap}; " is 145.
Long Statement,Vocaluxe.GameModes,CGameModeMedley,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\GameModes\CGameModes.cs,_PrepareSong,The length of the statement  "            var newSong = new CSong(song) {Start = CGame.GetTimeFromBeats(song.Medley.StartBeat' song.BPM) - song.Medley.FadeInTime + song.Gap}; " is 132.
Long Statement,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The length of the statement  "                var notification = new NotificationPosition {Offset = _BufferPortionCount - 1 + (_BufferPortionSize * i)' Event = new AutoResetEvent(false)}; " is 141.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,Skip,The length of the statement  "                _LastShownTime = time - _FrameDuration; //Set this to time to detect overflow of time in FindFrame but subtract FrameDuration so GetFrame will get the first frame " is 162.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_FindFrame,The length of the statement  "                    //First case is if we have no loop or we did not wrap or frame is before last one (last is the case if frame is already one of the new iterations' e.g. Last=19 now=1 frame=2) " is 174.
Long Statement,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_DropWithSkip,The length of the statement  "            // Add 1 dropped frame per 16 frames (Power of 2 -> Div is fast) as skipping takes time too and we don't want to skip again " is 123.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,_Init,The length of the statement  "                _MessageNoCrashText = CLanguage.Translate("TR_REPORTER_MESSAGE_NO_CRASH_TEXT").Replace("\\n"' "\n").Replace("\\r"' "\r"); " is 121.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,NoUpload_CheckedChanged,The length of the statement  "            this.SubmitButton.Text = this.NoUploadSelect.Checked ? (_ShowContinue ? _SubmitStep2ContinueText : _SubmitStep2ExitText) : _SubmitStep0Text; " is 140.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,_StartIssueUpload,The length of the statement  "            string issueUrl = $"https://github.com/Vocaluxe/Vocaluxe/issues/new?title=Give%20me%20a%20meaningful%20title&body={ Uri.EscapeDataString(template) }"; " is 150.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CReporter)); " is 129.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.TitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.MessageText.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.GistOnlySelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.GistAndIssueSelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.NoUploadSelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.SubmitButton.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 157.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.Url.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.SubmitedTitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.LastErrorTitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The length of the statement  "            this.LastErrorBox.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,Vocaluxe.Screens,CPopupScreenPlayerControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,Init,The length of the statement  "            _ThemeButtons = new string[] {_ButtonPlay' _ButtonPause' _ButtonPrevious' _ButtonNext' _ButtonRepeat' _ButtonShowVideo' _ButtonSing' _ButtonToBackgroundVideo}; " is 159.
Long Statement,Vocaluxe.Screens,CPopupScreenVolumeControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The length of the statement  "            string paragraph = "Inspired by the achievements of UltraStar Deluxe and its variants and pursuing the goal of making " + " is 121.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The length of the statement  "            paragraph = "Go ahead and grab your mics' crank up your stereo' warm up your voice and get ready to sing to the best " + " is 120.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The length of the statement  "                                 new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2)); " is 131.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            CCreditTranslation italian = _AddNewTranslation("Italian"' new List<string> { "giuseppep"' "LFactory"' "yogotosleepnow" }); " is 123.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            CCreditTranslation spanish = _AddNewTranslation("Spanish"' new List<string> { "Pantero03"' "RubenDjOn"' "TeLiX"' "karv" }); " is 123.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddTranslations,The length of the statement  "            _Translations = new List<CCreditTranslation> { intro' asturian' czech' dutch' french' hungarian' italian' spanish' swedish' turkish }; " is 134.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The length of the statement  "            CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language)); " is 172.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The length of the statement  "                text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t)); " is 141.
Long Statement,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The length of the statement  "                                _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenHighscore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenHighscore.cs,_AddScoresToDB,The length of the statement  "                    if (players[p].Points > CSettings.MinScoreForDB && players[p].SongFinished && !CProfiles.IsGuestProfile(players[p].ProfileID)) " is 126.
Long Statement,Vocaluxe.Screens,CScreenLoad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,UpdateGame,The length of the statement  "                if (CConfig.Config.Video.VideoBackgrounds == EOffOn.TR_CONFIG_ON || CConfig.Config.Video.VideosToBackground == EOffOn.TR_CONFIG_ON) " is 131.
Long Statement,Vocaluxe.Screens,CScreenLoad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The length of the statement  "            else if (_CurrentIntroVideo == 0 && _Intros[0].IsFinished && CConfig.Config.Theme.CoverLoading == ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART) " is 143.
Long Statement,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckMics,The length of the statement  "                    _Texts[_TextWarningMics].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_MICS_SG").Replace("%v"' playerWithoutMicro[0].ToString()); " is 134.
Long Statement,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,The length of the statement  "                    _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_PL").Replace("%v"' playerNums); " is 120.
Long Statement,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_CheckPlayers,The length of the statement  "                    _Texts[_TextWarningProfiles].Text = CLanguage.Translate("TR_SCREENNAMES_WARNING_PROFILES_SG").Replace("%v"' playerWithoutProfile[0].ToString()); " is 144.
Long Statement,Vocaluxe.Screens,CScreenOptions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,Init,The length of the statement  "            _ThemeButtons = new string[] {_ButtonOptionsGame' _ButtonOptionsSound' _ButtonOptionsRecord' _ButtonOptionsVideo' _ButtonOptionsLyrics' _ButtonOptionsTheme}; " is 157.
Long Statement,Vocaluxe.Screens,CScreenOptionsGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsGame.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideLanguage' _SelectSlideDebugLevel' _SelectSlideSongMenu' _SelectSlideSongSorting' _SelectSlideTabs' _SelectSlideTimerMode' _SelectSlideHighscoreStyle}; " is 197.
Long Statement,Vocaluxe.Screens,CScreenParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,Init,The length of the statement  "            _ThemeTexts = new string[] {_TextDescription' _TextTargetAudience' _TextNumTeams' _TextNumPlayers' _TextAuthor' _TextVersion' _TextError}; " is 138.
Long Statement,Vocaluxe.Screens,CScreenParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,_UpdateSelection,The length of the statement  "                                              ? "TR_SCREENPARTY_ERROR_MICS" : CLanguage.Translate("TR_SCREENPARTY_ERROR_MIC_NUM").Replace("%d"' extInfo.MinMics.ToString()); " is 126.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,Init,The length of the statement  "                {_ButtonPlayerName' _ButtonExit' _ButtonSave' _ButtonNew' _ButtonDelete' _ButtonWebcam' _ButtonSaveSnapshot' _ButtonDiscardSnapshot' _ButtonTakeSnapshot}; " is 154.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideProfiles' _SelectSlideDifficulty' _SelectSlideAvatars' _SelectSlideUserRole' _SelectSlideActive}; " is 144.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _Buttons[_ButtonPlayerName].Text.Text = CProfiles.GetPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 128.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideDifficulty].Selection = (int)CProfiles.GetDifficulty(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 143.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideUserRole].Selection = (int)CProfiles.GetUserRoleProfile(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 146.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,UpdateGame,The length of the statement  "                _SelectSlides[_SelectSlideActive].Selection = (int)CProfiles.GetActive(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,_LoadProfiles,The length of the statement  "                    _SelectSlides[_SelectSlideProfiles].SelectedTag = _SelectSlideGuids.FirstOrDefault(x => x.Value.Equals(selectedProfileID)).Key; " is 127.
Long Statement,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,_LoadAvatars,The length of the statement  "                _SelectSlides[_SelectSlideAvatars].SelectedTag = CProfiles.GetAvatarID(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)); " is 135.
Long Statement,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,Init,The length of the statement  "            _ThemeScreenSettings = new string[] {_ScreenSettingShortScore' _ScreenSettingShortRating' _ScreenSettingShortDifficulty}; " is 121.
Long Statement,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextScores[p' CGame.NumPlayers - 1]].Text = ((int)Math.Round(players[p].Points)).ToString("0000") + " " + CLanguage.Translate("TR_SCREENSCORE_POINTS"); " is 159.
Long Statement,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextDifficulty[p' CGame.NumPlayers - 1]].Text = CLanguage.Translate(CProfiles.GetDifficulty(players[p].ProfileID).ToString()); " is 134.
Long Statement,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_UpdateRatings,The length of the statement  "                    _Texts[_TextRatings[p' CGame.NumPlayers - 1]].Text = CLanguage.Translate(_GetRating((int)Math.Round(players[p].Points))); " is 121.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,OnShow,The length of the statement  "                _Texts[_PlayerTextScore[p]].Color = new SColorF(CBase.Themes.GetPlayerColor(p + 1)' _Texts[_PlayerTextScore[p]].Color.A); " is 121.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The length of the statement  "                        _RemainingTimeToFirstNote = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM); " is 144.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The length of the statement  "                        _RemainingTimeToFirstNoteDuet = CGame.GetTimeFromBeats(lines[nr].FirstNoteBeat - CGame.GetBeatFromTime(_CurrentTime' song.BPM' song.Gap)' song.BPM); " is 148.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The length of the statement  "            else if (!timer.IsRunning && timer.ElapsedMilliseconds == 0 && _Lyrics[_LyricMainDuet].Alpha > 0 && CGame.GetSong().IsDuet) " is 123.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The length of the statement  "            else if (!_TimerDuetText2.IsRunning && _TimerDuetText2.ElapsedMilliseconds == 0 && _Lyrics[_LyricMain].Alpha > 0 && CGame.GetSong().IsDuet) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The length of the statement  "                    CDraw.DrawTexture(_Statics[_StaticTimeLine].Texture' _Statics[_StaticTimeLine].Rect' new SColorF(1' 1' 1' 1)' _TimeLineRect); " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The length of the statement  "                        CDraw.DrawTexture(_TimeRects[i].Rect.Texture' _Statics[_StaticTimeLine].Rect' _TimeRects[i].Rect.Color' _TimeRects[i].Rect.Rect); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The length of the statement  "            if (_TimeToFirstNote > CSettings.LyricHelperMinTime && _RemainingTimeToFirstNote > 0f && _RemainingTimeToFirstNote < CSettings.LyricHelperEnableTime) " is 149.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The length of the statement  "                if (_TimeToFirstNoteDuet > CSettings.LyricHelperMinTime && _RemainingTimeToFirstNoteDuet > 0f && _RemainingTimeToFirstNoteDuet < CSettings.LyricHelperEnableTime) " is 161.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The length of the statement  "            _CurrentStream = CSound.Load(song.GetMP3()' false' true' CConfig.Config.Sound.KaraokeEffect == EOffOn.TR_CONFIG_ON ? EAudioEffect.Karaoke : EAudioEffect.None); " is 159.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The length of the statement  "                _Statics[_PlayerStaticAvatar[player]].Visible = (CConfig.Config.Theme.PlayerInfo == EPlayerInfo.TR_CONFIG_PLAYERINFO_BOTH || " is 124.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The length of the statement  "                else if (currentLine < lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime && " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The length of the statement  "                else if (currentLine == lines.Length - 1 && CGame.GetTimeFromBeats(lines[currentLine].LastNoteBeat' song.BPM) < currentTime) " is 124.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_InitiateProgressBars,The length of the statement  "                            _ProgressBars["ProgressBarRatingS" + (screen + 1) + target] = GetNewProgressBar(_ProgressBars["ProgressBarRating" + target]); " is 125.
Long Statement,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_FindCurrentLine,The length of the statement  "            //We are only interested in the last matching line' so either do not check further after line[j].StartBeat > _CurrentBeat or go backwards! " is 138.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideOptionsMode' _SelectSlideOptionsPlaylistAdd' _SelectSlideOptionsPlaylistOpen' _SelectSlideOptionsNumMedleySongs}; " is 160.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The length of the statement  "                if (!_DragAndDropCover.Visible && _Playlist.Visible && CSongs.NumSongsVisible > 0 && _SongMenu.GetSelectedSongNr() != -1) " is 121.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,OnShow,The length of the statement  "            CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' _Sso.Sorting.SearchString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 170.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,UpdateGame,The length of the statement  "                    selectionText = CSongs.VisibleSongs[song].Artist + " - " + CSongs.VisibleSongs[song].Title + "   ( "+(song+1)+" / "+CSongs.NumSongsVisible+" )"; " is 144.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_UpdatePartyModeOptions,The length of the statement  "                CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' _Sso.Sorting.SearchString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 170.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                //Flamefire: What? We only sorted by one tag' sorting by multiple tags (e.g. Album) will be by e.g. the first entry. That can be used here too as otherwhise it will confuse users because it jumps randomly " is 204.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 138.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 128.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 140.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 130.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 139.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                        visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 129.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                if (curSelected >= 0 && curSelected < ct - 1 && categories[curSelected].Name.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)) " is 143.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The length of the statement  "                int visibleID = _FindIndex(categories' start' element => element.Name.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase)); " is 137.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_ApplyNewSearchFilter,The length of the statement  "            CSongs.Sort(_Sso.Sorting.SongSorting' _Sso.Sorting.Tabs' _Sso.Sorting.IgnoreArticles' newFilterString' _Sso.Sorting.DuetOptions' _Sso.Sorting.FilterPlaylistID); " is 160.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_OpenAndAddPlaylistAction,The length of the statement  "                _SelectSlides[_SelectSlideOptionsPlaylistAdd].AddValue(CPlaylists.GetName(_Playlist.ActivePlaylistID)' _Playlist.ActivePlaylistID); " is 131.
Long Statement,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_OpenAndAddPlaylistAction,The length of the statement  "                _SelectSlides[_SelectSlideOptionsPlaylistOpen].AddValue(CPlaylists.GetName(_Playlist.ActivePlaylistID)' _Playlist.ActivePlaylistID); " is 132.
Long Statement,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1); " is 123.
Long Statement,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1); " is 120.
Long Statement,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1); " is 121.
Long Statement,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The length of the statement  "            text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1); " is 122.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,Init,The length of the statement  "                {_SelectSlideBackgroundMusic' _SelectSlideBackgroundMusicVolume' _SelectSlideBackgroundMusicSource' _SelectSlidePreviewMusicVolume' _SelectSlideGameMusicVolume' _SelectSlideKaraokeEffect}; " is 188.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "            _SelectSlides[_SelectSlideBackgroundMusicSource].SetValues<EBackgroundMusicSource>((int)CConfig.Config.Sound.BackgroundMusicSource); " is 132.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The length of the statement  "                {"0"' "5"' "10"' "15"' "20"' "25"' "30"' "35"' "40"' "45"' "50"' "55"' "60"' "65"' "70"' "75"' "80"' "85"' "90"' "95"' "100"}); " is 127.
Long Statement,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The length of the statement  "            CConfig.Config.Sound.BackgroundMusicSource = (EBackgroundMusicSource)_SelectSlides[_SelectSlideBackgroundMusicSource].Selection; " is 128.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,Init,The length of the statement  "                    _SelectSlideVideoBackgrounds' _SelectSlideVideoPreview' _SelectSlideVideosInSongs' _SelectSlideVideosToBackground' _SelectSlideWebcamDevices' " is 141.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,_SaveConfig,The length of the statement  "            CBackgroundMusic.VideoEnabled = CConfig.Config.Video.VideoBackgrounds == EOffOn.TR_CONFIG_ON && CConfig.Config.Video.VideosToBackground == EOffOn.TR_CONFIG_ON; " is 159.
Long Statement,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,_GetFirstConfiguredWebcamDevice,The length of the statement  "            SWebcamConfig curConfig = CConfig.Config.Video.WebcamConfig.HasValue ? CConfig.Config.Video.WebcamConfig.Value : new SWebcamConfig(); " is 133.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] }; " is 265.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay }; " is 256.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The length of the statement  "            _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]}; " is 159.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,UpdateGame,The length of the statement  "                    _Texts[_TextDelayPlayer[p]].Text = (_DelayTest.Delays[p] == 0) ? "??? ms" : _DelayTest.Delays[p].ToString("000") + " ms"; " is 121.
Long Statement,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_GetFirstConfiguredRecordDevice,The length of the statement  "                if (_Devices[i].Name == CConfig.Config.Record.MicConfig[0].DeviceName && _Devices[i].Driver == CConfig.Config.Record.MicConfig[0].DeviceDriver) " is 143.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The length of the statement  "                AddMouseEvent(new SMouseEvent(ESender.WiiMote' EModifier.None' x' y' false' false' false' wheel' lbh' false' false' false)); " is 124.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The length of the statement  "                AddMouseEvent(new SMouseEvent(ESender.WiiMote' EModifier.None' x' y' lb' false' rb' wheel' false' false' false' false)); " is 120.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_TryConnect,The length of the statement  "            //We might have had a reader thread' that is not finished yet' so let it finish and close it's handle first or it will close the new one " is 136.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.X = ((float)_WiiMoteState.AccelState.RawValues.X - _WiiMoteState.AccelCalibrationInfo.X0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.Y = ((float)_WiiMoteState.AccelState.RawValues.Y - _WiiMoteState.AccelCalibrationInfo.Y0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The length of the statement  "            _WiiMoteState.AccelState.Values.Z = ((float)_WiiMoteState.AccelState.RawValues.Z - _WiiMoteState.AccelCalibrationInfo.Z0) / " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                        _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff); " is 123.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2; " is 131.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2; " is 131.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Distance.X = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.X - _WiiMoteState.IRState.Sensors[0].Position.X); " is 135.
Long Statement,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The length of the statement  "                _WiiMoteState.IRState.Distance.Y = Math.Abs(_WiiMoteState.IRState.Sensors[1].Position.Y - _WiiMoteState.IRState.Sensors[0].Position.Y); " is 135.
Long Statement,Vocaluxe.Lib.Playlist,CPlaylistFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,_Load,The length of the statement  "                CSong plSong = CSongs.AllSongs.FirstOrDefault(song => song.Artist == songEntry.Artist && song.Title == songEntry.Title); " is 120.
Long Statement,Vocaluxe.Lib.Playlist,CPlaylistFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,AddSong,The length of the statement  "                    GameMode = CSongs.GetSong(songID).IsGameModeAvailable(EGameMode.TR_GAMEMODE_DUET) ? EGameMode.TR_GAMEMODE_DUET : EGameMode.TR_GAMEMODE_NORMAL " is 141.
Long Statement,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The length of the statement  "                while (waitcount < 5 && PortAudioSharp.PortAudio.Pa_IsStreamStopped(handle) == PortAudioSharp.PortAudio.PaError.paStreamIsNotStopped) " is 133.
Long Statement,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetBitmap,The length of the statement  "                    BitmapData bitmapdata = bmp.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.WriteOnly' PixelFormat.Format32bppArgb); " is 129.
Long Statement,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The length of the statement  "                BitmapData bitmapdata = e.Frame.LockBits(new Rectangle(0' 0' _Width' _Height)' ImageLockMode.ReadOnly' PixelFormat.Format32bppArgb); " is 132.
Complex Conditional,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The conditional expression  "(Array.IndexOf(_SplitCharAfter' text[i]) >= 0 && (Char.IsLetterOrDigit(text' i + 1) || Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)) ||                      (Char.IsLetterOrDigit(text' i) && Array.IndexOf(_SplitCharBefore' text[i + 1]) >= 0)"  is complex.
Complex Conditional,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The conditional expression  "(_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_MEDLEY && song.Medley.EndBeat == beat) ||                          (_SongQueue.GetCurrentGameMode() == EGameMode.TR_GAMEMODE_SHORTSONG && song.ShortEnd.EndBeat == beat)"  is complex.
Complex Conditional,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The conditional expression  "notes[note].StartBeat == beat || lastNote.EndBeat + 1 != beat || lastNote.Tone != tone || !lastNote.Hit"  is complex.
Complex Conditional,Vocaluxe.Base,CSongFilter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongFilter.cs,_FilterSongs,The conditional expression  "(song.IsDuet && _DuetOptions != EDuetOptions.NoDuets) || (!song.IsDuet && _DuetOptions != EDuetOptions.Duets)"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "popupVolumeControlAllowed && (CurrentScreen.CurrentMusicType == EMusicType.Background || CurrentScreen.CurrentMusicType == EMusicType.BackgroundPreview) && CConfig.Config.Sound.BackgroundMusic == EBackgroundMusicOffOn.TR_CONFIG_OFF"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "keyEvent.IsArrowKey() || keyEvent.Key == Keys.NumPad0 || keyEvent.Key == Keys.D0 || keyEvent.Key == Keys.Add"  is complex.
Complex Conditional,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_HandleInputs,The conditional expression  "!handled && _Fading == null && (_Cursor.IsActive || mouseEvent.LB || mouseEvent.RB || mouseEvent.MB)"  is complex.
Complex Conditional,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetMp3File,The conditional expression  "!File.Exists(path)                   || !(path.EndsWith(".mp3"' StringComparison.InvariantCulture)                           || path.EndsWith(".ogg"' StringComparison.InvariantCulture)                          || path.EndsWith(".wav"' StringComparison.InvariantCulture)                          || path.EndsWith(".webm"' StringComparison.InvariantCulture))"  is complex.
Complex Conditional,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendKeyEvent,The conditional expression  "Int32.TryParse(numberString' out number) && number >= 1                                  && number <= 12                                  && Enum.TryParse("F" + number' true' out fKey)"  is complex.
Complex Conditional,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_CalcDrawCoords,The conditional expression  "Math.Abs(rect.W) < 1 || Math.Abs(rect.H) < 1 || Math.Abs(bounds.H) < 1 || Math.Abs(bounds.W) < 1"  is complex.
Complex Conditional,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The conditional expression  "_BorderLeft != CConfig.Config.Graphics.BorderLeft || _BorderRight != CConfig.Config.Graphics.BorderRight || _BorderTop != CConfig.Config.Graphics.BorderTop ||                      _BorderBottom != CConfig.Config.Graphics.BorderBottom"  is complex.
Complex Conditional,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The conditional expression  "Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb"  is complex.
Complex Conditional,Vocaluxe.Lib.Video.Acinerella,CFramebuffer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CFramebuffer.cs,_SetRead,The conditional expression  "(_First <= index && (index < _Next || _Next < _First)) || (_Next < _First && index < _Next)"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenLoad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,UpdateGame,The conditional expression  "(_IntroOutPlayed || _SkipIntro) && next && CSettings.ProgramState == EProgramState.Start && CSongs.SongsLoaded"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenLoad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,_CheckStartIntroVideos,The conditional expression  "(_CurrentIntroVideo == 1 && CSongs.CoverLoaded) ||                       (_CurrentIntroVideo == 0 && _Intros[0].IsFinished)"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The conditional expression  "i == 0 && !song.IsDuet || i == 1 && song.IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The conditional expression  "i == 0 && !song.IsDuet || i == 1 && song.IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The conditional expression  "!timer.IsRunning && timer.ElapsedMilliseconds == 0 && _Lyrics[_LyricMainDuet].Alpha > 0 && CGame.GetSong().IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The conditional expression  "!_TimerDuetText2.IsRunning && _TimerDuetText2.ElapsedMilliseconds == 0 && _Lyrics[_LyricMain].Alpha > 0 && CGame.GetSong().IsDuet"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The conditional expression  "(CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive"  is complex.
Complex Conditional,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleMouse,The conditional expression  "!_DragAndDropCover.Visible && _Playlist.Visible && CSongs.NumSongsVisible > 0 && _SongMenu.GetSelectedSongNr() != -1"  is complex.
Complex Conditional,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The conditional expression  "!lb && !rb && (p.X != _OldPosition.X || p.Y != _OldPosition.Y)"  is complex.
Complex Conditional,Vocaluxe.Lib.Playlist,CPlaylistFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSong,The conditional expression  "sourceNr < 0 || destNr < 0 || sourceNr == destNr || sourceNr >= Songs.Count || destNr >= Songs.Count"  is complex.
Empty Catch Block,Vocaluxe.Base,CKeys,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,_GetSession,The method has an empty catch block.
Empty Catch Block,Vocaluxe,CMainProgram,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_CloseProgram,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CDatabaseBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,Init,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,GetDataBaseSongInfos,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,IncreaseSongCounter,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_AddScore,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateOrConvert,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,Close,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,Close,The method has an empty catch block.
Empty Catch Block,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,LoadFile,The method has an empty catch block.
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Next,The following statement contains a magic number: _PreviousMusicIndex < _PreviousFiles.Count - 2
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,Previous,The following statement contains a magic number: _CurrentPlaylistElement == null || (_BGPlayer.Position <= 1.5f && _PreviousMusicIndex > 0)
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: _PreviewStartHelperTask = new Task(() =>                      {                          float length = _PreviewPlayer.Length;                          if (length < 1)                              length = 30; // If length is unknow or invalid assume a length of 30s                            if (start < 0)                              start = (song.Preview.Source == EDataSource.None) ? length / 4f : song.Preview.StartTime;                          if (start > length - 5f)                              start = Math.Max(0f' Math.Min(length / 4f' length - 5f));                          if (start >= 0.5f)                              start -= 0.5f;                            _PreviewPlayer.Position = start;                          Play();                      });
Magic Number,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,LoadPreview,The following statement contains a magic number: songChanged || _CurPlayer.Position + 30 < _CurPlayer.Length || _PreviewStartHelperTask == null
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: float top = (bmpSize.Height - _MarginBottom - _MarginTop - maxHeight * lineCount) / 2 + _MarginTop;
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DrawText,The following statement contains a magic number: left = (bmpSize.Width - _MarginLeft - _MarginRight - width) / 2 + _MarginLeft;
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 2 - _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl = _GetSplitElement(elements' textWidth / 2);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 3 - 2 * _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: maxHeight = Math.Min(availableHeight / 3 - 2 * _LineSpace' (int)_Theme.Text.Font.Size);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: elements.Count == 2 || factorH <= Math.Max(factor1' factor2)
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl21 = _GetSplitElement(elements' textWidth / 3' false);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: int splitEl22 = _GetSplitElement(elements' textWidth / 3' true' splitEl21 + 1);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_DistributeText,The following statement contains a magic number: _SetLine(elements' splitEl22 + 1' elements.Count - 1' 2);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: Debug.Assert(singleSplit && elements.Count - startElement >= 2 || !singleSplit && elements.Count - startElement >= 3);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: Debug.Assert(singleSplit && elements.Count - startElement >= 2 || !singleSplit && elements.Count - startElement >= 3);
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: return elements.Count - 3;
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: !singleSplit && splitEl >= elements.Count - 2
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: return elements.Count - 2;
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_GetSplitElement,The following statement contains a magic number: float equalDist = requestedWidth * 0.025f;
Magic Number,Vocaluxe.Base,CCoverGenerator,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,_SplitText,The following statement contains a magic number: part.Length == 2 && part[1] == '.'
Magic Number,Vocaluxe.Base,CTextElement,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCoverGenerator.cs,CTextElement,The following statement contains a magic number: Height = (dimensions.Height + font.Height) / 2;
Magic Number,Vocaluxe.Base,CVideoPlayer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CVideoPlayer.cs,Draw,The following statement contains a magic number: float videoTime = _VideoTimer.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Base,CVideoPlayer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CVideoPlayer.cs,PreLoad,The following statement contains a magic number: videoTime += 0.05f;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Game.MinLineBreakTime = 0.1f;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Game.NumPlayers = 2;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Record.MicDelay = (int)(20 * Math.Round(Config.Record.MicDelay / 20.0));
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Record.MicDelay = (int)(20 * Math.Round(Config.Record.MicDelay / 20.0));
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: Config.Server.ServerPort = 3000;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,_LoadConfig,The following statement contains a magic number: !Config.Server.ServerPort.IsInRange(1' 65535)
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,CalcCycleTime,The following statement contains a magic number: return (1f / Config.Graphics.MaxFPS) * 1000f;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: Config.Record.MicConfig[1].Channel = 2;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: device.Channels >= 2
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: Config.Record.MicConfig[1].Channel = 2;
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,AutoAssignMics,The following statement contains a magic number: device.Channels >= 2
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following statement contains a magic number: string[] parts = spliterVal.Split(text' 2);
Magic Number,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following statement contains a magic number: switch (parts.Length)                  {                      //Only found a parameter                      case 1:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add("");                          }                          break;                          //Found parameter and value                      case 2:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add(parts[1]);                          }                          break;                  }
Magic Number,Vocaluxe.Base,CCursor,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCursor.cs,Deactivate,The following statement contains a magic number: _Fade(0f' 0.5f);
Magic Number,Vocaluxe.Base,CCursor,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CCursor.cs,Activate,The following statement contains a magic number: _Fade(1f' 0.2f);
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,GetBeatFromTime,The following statement contains a magic number: return bpm / 60 * (time - gap);
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,GetTimeFromBeats,The following statement contains a magic number: return beats / bpm * 60f;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: Players[i].Rating = 0.5f;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: _LastEvalBeat = -100;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: CurrentBeatF = -100;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,ResetPlayer,The following statement contains a magic number: MidRecordedBeat = -100;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: MidRecordedBeat = -0.5f + GetBeatFromTime(time' song.BPM' song.Gap + CConfig.Config.Record.MicDelay / 1000f);
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: MidRecordedBeat = -0.5f + GetBeatFromTime(time' song.BPM' song.Gap + CConfig.Config.Record.MicDelay / 1000f);
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: tonePlayer -= 12;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: tonePlayer - tone > 6
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: tonePlayer += 12;
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: tonePlayer - tone < -6
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: bool hit = Players[p].NoteDiff <= (2 - (int)CProfiles.GetDifficulty(Players[p].ProfileID));
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: factor <= 0.4
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);
Magic Number,Vocaluxe.Base,CGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGame.cs,UpdatePoints,The following statement contains a magic number: Players[p].Rating = (Players[p].Rating + (current * 0.2 - 0.1)).Clamp(0' 1);
Magic Number,Vocaluxe.Base,CLanguage,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,The following statement contains a magic number: keyWord.Length < 3 || keyWord.Substring(0' 3) != "TR_"
Magic Number,Vocaluxe.Base,CLanguage,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CLanguage.cs,_GetTranslation,The following statement contains a magic number: keyWord.Length < 3 || keyWord.Substring(0' 3) != "TR_"
Magic Number,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Init,The following statement contains a magic number: _AvatarIDs = new Queue<int>(1000);
Magic Number,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Init,The following statement contains a magic number: i < 1000
Magic Number,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,_PadNumbersInString,The following statement contains a magic number: return Regex.Replace(text' "[0-9]+"' match => match.Value.PadLeft(4' '0'));
Magic Number,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The following statement contains a magic number: switch (sorting)              {                  case ESongSorting.TR_CONFIG_DECADE:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                      {                          string year = songPointer.SortString;                          if (year != "")                          {                              year = year.Substring(0' 3);                              songPointer.SortString = year + "0 - " + year + "9";                          }                      }                      break;                  case ESongSorting.TR_CONFIG_TITLE_LETTER:                  case ESongSorting.TR_CONFIG_ARTIST_LETTER:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString();                      break;                  case ESongSorting.TR_CONFIG_DATEADDED:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = CSongs.GetSong(songPointer.SongID).DateAdded.ToString("dd/MM/yyyy");                      break;              }
Magic Number,Vocaluxe.Base,CTime,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,GetMilliseconds,The following statement contains a magic number: return (float)((_NanosecPerTick * ticks) / (1000.0 * 1000.0));
Magic Number,Vocaluxe.Base,CTime,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,GetMilliseconds,The following statement contains a magic number: return (float)((_NanosecPerTick * ticks) / (1000.0 * 1000.0));
Magic Number,Vocaluxe.Base,CTime,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,GetFPS,The following statement contains a magic number: return _Fps * 1000f;
Magic Number,Vocaluxe.Base,CKeys,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The following statement contains a magic number: !_Timer.IsRunning || (_Timer.ElapsedMilliseconds > 75) || !keyRepeat
Magic Number,Vocaluxe.Base,CKeys,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,KeyDown,The following statement contains a magic number: !_Timer.IsRunning || (_Timer.ElapsedMilliseconds > 75) || !repeat
Magic Number,Vocaluxe.Base,CMouse,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,_Add,The following statement contains a magic number: var pool = new SMouseEvent(ESender.Mouse' _Mod' x' y' lb' ld' rb' -wheel / 120' lbh' rbh' mb' mbh);
Magic Number,Vocaluxe.Base,CMouse,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CUtility.cs,MouseDown,The following statement contains a magic number: _Timer.IsRunning && _Timer.ElapsedMilliseconds < 450
Magic Number,Vocaluxe.Base,CSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,The following statement contains a magic number: i < 5
Magic Number,Vocaluxe.Base,CSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSound.cs,PlaySound,The following statement contains a magic number: Fade(stream' 100' length);
Magic Number,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,Draw,The following statement contains a magic number: ZOffset = CSettings.ZFar / 2;
Magic Number,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_Update,The following statement contains a magic number: _VolumePopupTimer.IsRunning && _VolumePopupTimer.ElapsedMilliseconds >= 1500 && _CurrentPopupScreen == EPopupScreens.PopupVolumeControl
Magic Number,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_DrawDebugInfos,The following statement contains a magic number: debugOutput.Add((memory / 1000000L).ToString(CLanguage.Translate("TR_DEBUG_MEMORY") + ": 00000 MB"));
Magic Number,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_DrawDebugInfos,The following statement contains a magic number: CFont font = new CFont("Normal"' EStyle.Normal' 25);
Magic Number,Vocaluxe.Base,CGraphics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CGraphics.cs,_DrawDebugInfos,The following statement contains a magic number: SColorF gray = new SColorF(1f' 1f' 1f' 0.5f);
Magic Number,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetJsFile,The following statement contains a magic number: WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));
Magic Number,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetCssFile,The following statement contains a magic number: WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));
Magic Number,Vocaluxe.Base.Server,CWebservice,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CWebservice.cs,GetLocaleFile,The following statement contains a magic number: WebOperationContext.Current.OutgoingResponse.Headers.Add(                      HttpResponseHeader.Expires'                      DateTime.UtcNow.AddHours(4).ToString("r"));
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,Init,The following statement contains a magic number: WebHttpBinding wb = new WebHttpBinding              {                  MaxReceivedMessageSize = 10485760'                  MaxBufferSize = 10485760'                  MaxBufferPoolSize = 10485760'                  ReaderQuotas = { MaxStringContentLength = 10485760' MaxArrayLength = 10485760' MaxBytesPerRead = 10485760 }              };
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendKeyEvent,The following statement contains a magic number: switch (lowerKey)                  {                      case "up":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Up));                          result = true;                          break;                      case "down":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Down));                          result = true;                          break;                      case "left":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Left));                          result = true;                          break;                      case "right":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Right));                          result = true;                          break;                      case "escape":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Escape));                          result = true;                          break;                      case "return":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Return));                          result = true;                          break;                      case "tab":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Tab));                          result = true;                          break;                      case "backspace":                          Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' Keys.Back));                          result = true;                          break;                      default:                          if (lowerKey.StartsWith("f"))                          {                              string numberString = lowerKey.Substring(1);                              int number;                              Keys fKey;                                if (Int32.TryParse(numberString' out number) && number >= 1                                  && number <= 12                                  && Enum.TryParse("F" + number' true' out fKey))                              {                                  Controller.AddKeyEvent(new SKeyEvent(ESender.Keyboard' false' false' false' false' Char.MinValue' fKey));                                  result = true;                              }                          }                          break;                  }
Magic Number,Vocaluxe.Base.Server,CVocaluxeServer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Server\CVocaluxeServer.cs,SendProfileData,The following statement contains a magic number: profile.Difficulty >= 0 && profile.Difficulty <= 2
Magic Number,Vocaluxe.Base.ThemeSystem,CPartyTheme,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_GetSkinToLoad,The following statement contains a magic number: switch (fallbackNum)              {                  case 0:                      _Skins.TryGetValue(CConfig.Config.Theme.Skin' out skin);                      break;                  case 1:                      _Skins.TryGetValue(CSettings.DefaultName' out skin);                      break;                  case 2:                      skin = _Skins.Values.FirstOrDefault();                      break;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Base.ThemeSystem,CPartyTheme,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\ThemeSystem\CPartyTheme.cs,_LoadSkin,The following statement contains a magic number: i < 3
Magic Number,Vocaluxe,CMainProgram,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Program.cs,_EnsureSingleInstance,The following statement contains a magic number: !_Mutex.WaitOne(TimeSpan.FromSeconds(2)' false)
Magic Number,Vocaluxe.Lib.Database,CCoverDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The following statement contains a magic number: int h = reader.GetInt32(2);
Magic Number,Vocaluxe.Lib.Database,CCoverDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CCoverDB.cs,GetCover,The following statement contains a magic number: data = new byte[size.Width * size.Height * 4];
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_UnixTimeToTicks,The following statement contains a magic number: var t70 = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_GetBytes,The following statement contains a magic number: const int chunkSize = 2 * 1024;
Magic Number,Vocaluxe.Lib.Database,CDatabaseBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CDatabaseBase.cs,_GetBytes,The following statement contains a magic number: const int chunkSize = 2 * 1024;
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following statement contains a magic number: var score = new SDBScoreEntry                                  {                                      Name = reader.GetString(0)'                                      Score = reader.GetInt32(1)'                                      Date = new DateTime(reader.GetInt64(2)).ToString("dd/MM/yyyy")'                                      Difficulty = (EGameDifficulty)reader.GetInt32(3)'                                      VoiceNr = reader.GetInt32(4)'                                      ID = reader.GetInt32(5)                                  };
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: numPlayed = reader.GetInt32(2);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: !reader.IsDBNull(2)
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: dateAdded = new DateTime(reader.GetInt64(3));
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_GetDataBaseSongInfos,The following statement contains a magic number: !reader.IsDBNull(3)
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_CreateOrConvert,The following statement contains a magic number: result &= _UpdateDatabase(2' connection);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The following statement contains a magic number: ticks = reader.GetInt64(2);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertFrom110,The following statement contains a magic number: var data = new SData {Id = reader.GetInt32(0)' Str1 = reader.GetString(1)' Str2 = reader.GetString(2)};
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_UpdateDatabase,The following statement contains a magic number: currentVersion < 2
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV1toV2,The following statement contains a magic number: command.Parameters.Add("@version"' DbType.Int32' 0).Value = 2;
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV2toV3,The following statement contains a magic number: command.Parameters.Add("@version"' DbType.Int32' 0).Value = 3;
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ConvertV2toV3,The following statement contains a magic number: DateTime dt = new DateTime(1' 1' 1' 0' 0' 5);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int score = source.GetInt32(2);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int linenr = source.GetInt32(3);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: long date = source.GetInt64(4);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int medley = source.GetInt32(5);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int duet = source.GetInt32(6);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int shortsong = source.GetInt32(7);
Magic Number,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,_ImportData,The following statement contains a magic number: int diff = source.GetInt32(8);
Magic Number,Vocaluxe.Lib.Database,CResourceDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,GetCreditsRessource,The following statement contains a magic number: int h = reader.GetInt32(2);
Magic Number,Vocaluxe.Lib.Database,CResourceDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,_AddImageToCreditsDB,The following statement contains a magic number: byte[] data = new byte[w * h * 4];
Magic Number,Vocaluxe.Lib.Database,CResourceDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CResourceDB.cs,_AddImageToCreditsDB,The following statement contains a magic number: Marshal.Copy(bmpData.Scan0' data' 0' w * h * 4);
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following statement contains a magic number: switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _X = 0;                          break;                      case EGeneralAlignment.Middle:                          _X = diff / 2;                          break;                      case EGeneralAlignment.End:                          _X = diff;                          break;                  }
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: Math.Abs(color.A) < 0.01
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: Math.Abs(color.A) < 0.01
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTexture,The following statement contains a magic number: Math.Abs(color.A) < 0.01
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,DrawTextureReflection,The following statement contains a magic number: Math.Abs(color.A) < 0.01 || height < 1
Magic Number,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,MainLoop,The following statement contains a magic number: delay >= 1 && delay < 500
Magic Number,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_CenterToScreen,The following statement contains a magic number: _Form.Location = new Point((screen.WorkingArea.Width - _Form.Width) / 2'                                         (screen.WorkingArea.Height - _Form.Height) / 2);
Magic Number,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_CenterToScreen,The following statement contains a magic number: _Form.Location = new Point((screen.WorkingArea.Width - _Form.Width) / 2'                                         (screen.WorkingArea.Height - _Form.Height) / 2);
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_CheckForNextPowerOf2,The following statement contains a magic number: return (int)Math.Pow(2' Math.Ceiling(Math.Log(n' 2)));
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_CheckForNextPowerOf2,The following statement contains a magic number: return (int)Math.Pow(2' Math.Ceiling(Math.Log(n' 2)));
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetMaxTextureArea,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      return 128 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      return 256 * 128;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      return 512 * 256;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      return 1024 * 512;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      return CSettings.RenderW * CSettings.RenderH;                  default:                      throw new ArgumentException();              }
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_GetNewTextureSize,The following statement contains a magic number: newSize.Height /= 2;
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_WriteDataToTexture,The following statement contains a magic number: byte[] dataArray = new byte[4 * texture.DataSize.Width * texture.DataSize.Height];
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_IsTextureUsable,The following statement contains a magic number: texture.Size.Width * 0.9 > dataSize.Width || texture.Size.Height * 0.9 > dataSize.Height
Magic Number,Vocaluxe.Lib.Draw,CTextureProvider<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CTextureProvider.cs,_IsTextureUsable,The following statement contains a magic number: texture.Size.Width * 0.9 > dataSize.Width || texture.Size.Height * 0.9 > dataSize.Height
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: _VertexBuffer = new VertexBuffer(_Device' CSettings.VertexBufferElements * (4 * Marshal.SizeOf(typeof(STexturedColoredVertex)))' Usage.WriteOnly | Usage.Dynamic'                                               VertexFormat.Position | VertexFormat.Texture1 | VertexFormat.Diffuse' Pool.Default);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: var indices = new Int16[6];
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[2] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[2] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[3] = 0;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[4] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[4] = 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[5] = 3;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: indices[5] = 3;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_InitDevice,The following statement contains a magic number: _IndexBuffer = new IndexBuffer(_Device' 6 * sizeof(Int16)' Usage.WriteOnly' Pool.Managed' true);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AdjustNewBorders,The following statement contains a magic number: const float dx = (float)CSettings.RenderW / 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AdjustNewBorders,The following statement contains a magic number: const float dy = (float)CSettings.RenderH / 2;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: dc.Wx1 -= 0.5f;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: dc.Wy1 -= 0.5f;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: dc.Wx2 -= 0.5f;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: dc.Wy2 -= 0.5f;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: var vert = new STexturedColoredVertex[4];
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: vert[2] = new STexturedColoredVertex(new Vector3(dc.Wx2' -dc.Wy2' dc.Wz)' new Vector2(dc.Tx2' dc.Ty2)' c2);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_DrawTexture,The following statement contains a magic number: vert[3] = new STexturedColoredVertex(new Vector3(dc.Wx2' -dc.Wy1' dc.Wz)' new Vector2(dc.Tx2' dc.Ty1)' c);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AddToVertexBuffer,The following statement contains a magic number: _Vertices.Enqueue(vertices[2]);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_AddToVertexBuffer,The following statement contains a magic number: _Vertices.Enqueue(vertices[3]);
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The following statement contains a magic number: _Device.DrawIndexedPrimitives(PrimitiveType.TriangleList' i' 0' 4' 0' 2).IsFailure
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_RenderVertexBuffer,The following statement contains a magic number: _Device.DrawIndexedPrimitives(PrimitiveType.TriangleList' i' 0' 4' 0' 2).IsFailure
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_WriteDataToTexture,The following statement contains a magic number: int rowWidth = 4 * texture.DataSize.Width;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0));
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: Matrix originTranslation = Matrix.Translation(new Vector3(-(float)CSettings.RenderW / 2' (float)CSettings.RenderH / 2' 0));
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: float rotation = rot * (float)Math.PI / 180;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: float centerX = (rx1 + rx2) / 2f;
Magic Number,Vocaluxe.Lib.Draw,CDirect3D,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDirect3D.cs,_CalculateRotationMatrix,The following statement contains a magic number: float centerY = -(ry1 + ry2) / 2f;
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CDrawWinForm,The following statement contains a magic number: ClientSize = new Size(1280' 720);
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,CDrawWinForm,The following statement contains a magic number: ClientSize = new Size(1280' 720);
Magic Number,Vocaluxe.Lib.Draw,CDrawWinForm,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawWinForm.cs,_DrawBuffer,The following statement contains a magic number: x = (ClientSize.Width - w) / 2;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: var gm = new GraphicsMode(32' 24' 0' (int)CConfig.Config.Graphics.AAMode);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: var gm = new GraphicsMode(32' 24' 0' (int)CConfig.Config.Graphics.AAMode);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,COpenGL,The following statement contains a magic number: _Control = new GLControl(gm' 2' 1' GraphicsContextFlags.Default);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: setValue = 32;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: setValue > 32
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: mode = new GraphicsMode(16' 0' 0' samples);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: samples = 2;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: samples == 2
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_CheckAntiAliasingMode,The following statement contains a magic number: return samples / 2;
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRect,The following statement contains a magic number: Math.Abs(newrect.Rotation) > 0.001
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,DrawRectReflection,The following statement contains a magic number: Math.Abs(rect.Rotation) > 0.001
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_DrawTexture,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_DrawTexture,The following statement contains a magic number: GL.Translate(0.5f' 0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_DrawTexture,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Draw,COpenGL,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\COpenGL.cs,_DrawTexture,The following statement contains a magic number: GL.Translate(-0.5f' -0.5f' 0);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_MainLoop,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_MainLoop,The following statement contains a magic number: _EvTerminate.WaitOne(1000);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: var x = Math.Min(CSettings.RenderW' Math.Max(0' (int)(CSettings.RenderW  * (buttonStates.ThumbSticks.Right.X / 2.0 * _LimitFactor + 0.5f))));
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: var y = Math.Min(CSettings.RenderH' Math.Max(0' (int)(CSettings.RenderH  * (buttonStates.ThumbSticks.Right.Y / 2.0 * _LimitFactor * (-1) + 0.5f))));
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_HandleButtons,The following statement contains a magic number: Math.Abs(buttonStates.ThumbSticks.Right.X - _OldButtonStates.ThumbSticks.Right.X) > 0.01                  || Math.Abs(buttonStates.ThumbSticks.Right.Y - _OldButtonStates.ThumbSticks.Right.Y) > 0.01                  || lb || rb
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: i < 4
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGamePad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\CGamePad.cs,_DoConnect,The following statement contains a magic number: Thread.Sleep(125);
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: dx < -150 && Math.Abs(dy) < 150
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: dx < -150 && Math.Abs(dy) < 150
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: Math.Abs(dx) < 150 && dy > 30
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: Math.Abs(dx) < 150 && dy > 30
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: Math.Abs(dx) < 150 && dy < -30
Magic Number,Vocaluxe.Lib.Input,CGesture,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\IController.cs,GetGesture,The following statement contains a magic number: Math.Abs(dx) < 150 && dy < -30
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Close,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,GetGlobalVolume,The following statement contains a magic number: return (_Initialized) ? (int) Math.Round(_GlobalVolume * 100) : 100;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,GetGlobalVolume,The following statement contains a magic number: return (_Initialized) ? (int) Math.Round(_GlobalVolume * 100) : 100;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetGlobalVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetGlobalVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Fade,The following statement contains a magic number: float targetVolumeF = targetVolume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,Fade,The following statement contains a magic number: float targetVolumeF = targetVolume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetStreamVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback,CPlaybackBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CPlaybackBase.cs,SetStreamVolume,The following statement contains a magic number: float volumeF = volume.Clamp(0' 100) / 100f;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Open,The following statement contains a magic number: _ByteCount = 2 * _Format.ChannelCount;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,The following statement contains a magic number: ALFormat alFormat = (_Format.ChannelCount == 2) ? ALFormat.Stereo16 : ALFormat.Mono16;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,The following statement contains a magic number: float latency = CConfig.Config.Sound.AudioLatency / 1000f + queuedCount * _SampleBuf.Length / _BytesPerSecond + 0.1f;
Magic Number,Vocaluxe.Lib.Sound.Playback.OpenAL,COpenAlStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\OpenAL\COpenAlStream.cs,Update,The following statement contains a magic number: float latency = CConfig.Config.Sound.AudioLatency / 1000f + queuedCount * _SampleBuf.Length / _BytesPerSecond + 0.1f;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: _OutputDeviceInfo.defaultLowOutputLatency = 0.1;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: _OutputDeviceInfo.defaultLowOutputLatency < 0.1
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: _ByteCount = 2 * format.ChannelCount;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: !_PaHandle.OpenOutputStream(                  out _Stream'                  ref outputParams'                  format.SamplesPerSecond'                  (uint)CConfig.Config.Sound.AudioBufferSize / 2'                  PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                  _PaStreamCallback'                  IntPtr.Zero) || _Stream == IntPtr.Zero
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPortAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPortAudioStream.cs,Open,The following statement contains a magic number: _Latency = CConfig.Config.Sound.AudioLatency / 1000f + (float)PortAudioSharp.PortAudio.Pa_GetStreamInfo(_Stream).outputLatency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: double nanosecPerTick = (1000.0 * 1000.0 * 1000.0) / Stopwatch.Frequency;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: float dt = _Timer.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CPt1,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CPt1.cs,Update,The following statement contains a magic number: dt = (float)(ticks * nanosecPerTick / 1000000000.0);
Magic Number,Vocaluxe.Lib.Sound.Playback.PortAudio,CSyncTimer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\PortAudio\CSyncTimer.cs,Update,The following statement contains a magic number: Math.Abs(diff) > 0.05f
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,CAnalyzer,The following statement contains a magic number: _VolumeTreshold = 0.01f;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,Input,The following statement contains a magic number: Analyzer_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,GetNote,The following statement contains a magic number: int note = (int)Math.Round(Analyzer_FindNote(_Instance' 60' 1800));
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CAnalyzer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CAnalyzer.cs,GetNote,The following statement contains a magic number: int note = (int)Math.Round(Analyzer_FindNote(_Instance' 60' 1800));
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_InitNext,The following statement contains a magic number: byte[] data = new byte[4096 * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_InitNext,The following statement contains a magic number: byte[] data = new byte[4096 * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG3.wav"' 19);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG3Miss.wav"' 19);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: _TestFile("toneG4.wav"' 31);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: msg += " Speed=" + _SamplesPerSec[i] / 1000 + "kSamples/s (=" + (_SamplesPerSec[i] / 44100) + "rec.s/s)";
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,RunTest,The following statement contains a magic number: msg += " Speed=" + _SamplesPerSec[i] / 1000 + "kSamples/s (=" + (_SamplesPerSec[i] / 44100) + "rec.s/s)";
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: const int samplesPerBuffer = 512;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: byte[] data2 = new byte[samplesPerBuffer * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: const int repeats = 100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' 5)' 44100' samplesPerBuffer * repeats' ref angle' out data);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' 5)' 44100' samplesPerBuffer * repeats' ref angle' out data);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: Buffer.BlockCopy(data' 0' data2' 0' samplesPerBuffer * 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSpeed,The following statement contains a magic number: _SamplesPerSec[i] = (int)Math.Round(samplesPerBuffer * repeats / (sw.ElapsedMilliseconds / 1000.0));
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: tone += 24;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: string result = notes[tone % 12];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_ToneToNote,The following statement contains a magic number: result += (tone / 12);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int toneTo = 47;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int sampleCt = 4096;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: const int batchCt = 512;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: byte[] data2 = new byte[batchCt * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: byte[] data = new byte[sampleCt * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone)' 44100' sampleCt' ref angle' out data);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: tone == 46 && distort == 4
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: tone == 46 && distort == 4
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: Buffer.BlockCopy(data' i * batchCt * 2' data2' 0' batchCt * 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: i * batchCt < 2048
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestSines,The following statement contains a magic number: distort < 10
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: _GetSineWave(_BaseToneFreq * Math.Pow(_HalftoneBase' tone + newTone)' 44100' sampleCt' ref angle' out data2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: Buffer.BlockCopy(data2' 0' sdata' 0' sampleCt * 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following statement contains a magic number: type < 9
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: short[] sdata = new short[data.Length / 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: distortions[i] = _GetDistort(data.Length / 2' tone' i);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_Distort,The following statement contains a magic number: sdata[i] = (short)(sdata[i] * 4.0 / 5.0 + distortion / 5.0);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: data16Bit[i] = (short)(Math.Sin(2 * Math.PI * i / sampleRate * freq + angle) * max);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: angle = 2 * Math.PI * sampleCt / sampleRate * freq + angle;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: angle = angle % (2 * Math.PI);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetSineWave,The following statement contains a magic number: data = new byte[data16Bit.Length * 2];
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: note.Time = 46;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_IsNoteValid,The following statement contains a magic number: const int lastNoteMaxTimeDiff = 1536 * 1000 / 44100;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: wavFile.BitsPerSample != 16
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: const int maxSamplesPerBatch = 512;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: samplesRead += samples.Length / 2;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_TestFile,The following statement contains a magic number: int time = samplesRead * 1000 / wavFile.SampleRate;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPtAKF,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPtAKF.cs,Input,The following statement contains a magic number: PtAKF_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPtDyWa,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPtDyWa.cs,Input,The following statement contains a magic number: PtDyWa_InputByte(_Instance' data' data.Length / 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTracker,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\IPitchTracker.cs,_SetWeights,The following statement contains a magic number: weights[i] *= 0.9f;
Magic Number,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTracker,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\IPitchTracker.cs,_SetWeights,The following statement contains a magic number: weights[w] = Math.Min(1f' weights[w] + 0.15f);
Magic Number,Vocaluxe.Lib.Sound.Record,CBuffer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CBuffer.cs,CBuffer,The following statement contains a magic number: VolTreshold = 0.02f;
Magic Number,Vocaluxe.Lib.Sound.Record,CBuffer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CBuffer.cs,AnalyzeBuffer,The following statement contains a magic number: Tone = ToneAbs % 12;
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: int doubleChannels = totalChannels * 2;
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];
Magic Number,Vocaluxe.Lib.Sound.Record,CRecordBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CRecordBase.cs,_HandleData,The following statement contains a magic number: allBuffers[(int)Math.Floor(j / (double)2)][i * 2 + (j % 2)] = data[i * doubleChannels + j];
Magic Number,Vocaluxe.Lib.Sound.Record,CDelayTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Start,The following statement contains a magic number: CRecord.SetVolumeThreshold(channels[i]' _DelaysChannel[i].OrigThreshold / 3);
Magic Number,Vocaluxe.Lib.Sound.Record,CDelayTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Update,The following statement contains a magic number: float time = CSound.GetPosition(_Stream) * 1000f;
Magic Number,Vocaluxe.Lib.Sound.Record,CDelayTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\CDelayTest.cs,Update,The following statement contains a magic number: CRecord.GetTone(_DelaysChannel[i].Channel) == 9
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,CFontStyle,The following statement contains a magic number: switch (CConfig.Config.Graphics.TextureQuality)              {                  case ETextureQuality.TR_CONFIG_TEXTURE_LOWEST:                      _MaxGlyphHeight = 20f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_LOW:                      _MaxGlyphHeight = 40f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_MEDIUM:                      _MaxGlyphHeight = 60f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGH:                      _MaxGlyphHeight = 80f;                      break;                  case ETextureQuality.TR_CONFIG_TEXTURE_HIGHEST:                      _MaxGlyphHeight = 100f;                      break;                  default:                      _MaxGlyphHeight = 60f;                      break;              }
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: float maxHeight = (height < 0 || _MaxGlyphHeight + 50 >= height) ? _MaxGlyphHeight : (float)Math.Round(height / 50) * 50;
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: glyph = new CGlyph(chr' this' (float)Math.Round(height / 50) * 50);
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: glyph = new CGlyph(chr' this' (float)Math.Round(height / 50) * 50);
Magic Number,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,GetOrAddGlyph,The following statement contains a magic number: glyph.MaxHeight + 50 < height
Magic Number,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: RectangleF rect = new RectangleF(0' 0' 1000' 1000);
Magic Number,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: RectangleF rect = new RectangleF(0' 0' 1000' 1000);
Magic Number,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,CGlyph,The following statement contains a magic number: _BoundingBox.Width += outlineSize / 2;
Magic Number,Vocaluxe.Base.Fonts,CGlyph,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CGlyph.cs,_GetRealBounds,The following statement contains a magic number: const int d = 4;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,CSoundCardSource,The following statement contains a magic number: SampleRateKhz = 44.1;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,CSoundCardSource,The following statement contains a magic number: _BufferSize = 2048;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _WaveFormat.BitsPerSample = 16;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _WaveFormat.BlockAlignment = (short)(_Channels * (_WaveFormat.BitsPerSample / 8));
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _WaveFormat.SamplesPerSecond = (int)(SampleRateKhz * 1000D);
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CSoundCardSource,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CSoundCardSource.cs,Start,The following statement contains a magic number: _BufferPortionCount = 2;
Magic Number,Vocaluxe.Lib.Sound.Record.DirectSound,CDirectSoundRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\DirectSound\CDirectSoundRecord.cs,Start,The following statement contains a magic number: var source = new CSoundCardSource(device.Driver' (short)device.Channels) { SampleRateKhz = 44.1 };
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoder,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoder.cs,GetFrame,The following statement contains a magic number: time = _LoopTime + _LoopTimer.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,CDecoderThread,The following statement contains a magic number: _Framebuffer = new CFramebuffer(10);
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,CDecoderThread,The following statement contains a magic number: _FrameDuration = 0.02f;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,LoadFile,The following statement contains a magic number: Length = instance.Info.Duration / 1000f;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,LoadFile,The following statement contains a magic number: bool ok = instance.Opened && Length > 0.001f;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_OpenVideoStream,The following statement contains a magic number: _Framebuffer.Init(_Width * _Height * 4);
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Skip,The following statement contains a magic number: CAcinerella.AcSeek(_Videodecoder' -1' (Int64)(skipTime * 1000f));
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Decode,The following statement contains a magic number: const int minFrameDropCount = 4;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Decode,The following statement contains a magic number: const int seekThreshold = 25;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_DropWithSeek,The following statement contains a magic number: hasFrameDecoded = CAcinerella.AcSeek(_Videodecoder' 0' (long)videoTime * 1000L);
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_DropWithSkip,The following statement contains a magic number: frameDropCount += frameDropCount / 16;
Magic Number,Vocaluxe.Lib.Video.Acinerella,CDecoderThread,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Video\Acinerella\CDecoderThread.cs,_Execute,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,Submit_Click,The following statement contains a magic number: switch (_Step)              {                  case 0:                      if (this.NoUploadSelect.Checked)                      {                          this.Close();                      }                      else                      {                          _Step = 1;                          this.SubmitButton.Text = _SubmitStep1Text;                          this.SubmitButton.Enabled = false;                          this.NoUploadSelect.Visible = false;                          this.GistAndIssueSelect.Visible = false;                          this.GistOnlySelect.Visible = false;                          this.LogBox.Enabled = false;                          this.LastErrorBox.Enabled = false;                            if (this.GistOnlySelect.Checked)                          {                              await Task.Run(() => _StartGistUpload(this.LogBox.Text' this.LastErrorBox.Text));                          }                          else if (this.GistAndIssueSelect.Checked)                          {                              await Task.Run(() => _StartIssueUpload(this.LogBox.Text' this.LastErrorBox.Text));                          }                          else                          {                              _Step = 0;                              this.SubmitButton.Text = _SubmitStep0Text;                              this.SubmitButton.Enabled = true;                              this.NoUploadSelect.Visible = true;                              this.GistAndIssueSelect.Visible = true;                              this.GistOnlySelect.Visible = true;                              this.LogBox.Enabled = true;                              this.LastErrorBox.Enabled = false;                          }                                                    }                        break;                  case 2:                      this.Close();                      break;              }
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.TitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.TitleLabel.Location = new System.Drawing.Point(9' 8);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.TitleLabel.Location = new System.Drawing.Point(9' 8);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.TitleLabel.Size = new System.Drawing.Size(110' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.TitleLabel.Size = new System.Drawing.Size(110' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.MessageText.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.MessageText.Location = new System.Drawing.Point(13' 31);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.MessageText.Location = new System.Drawing.Point(13' 31);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.MessageText.Size = new System.Drawing.Size(625' 63);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.MessageText.Size = new System.Drawing.Size(625' 63);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LogBox.Location = new System.Drawing.Point(13' 182);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LogBox.Location = new System.Drawing.Point(13' 182);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LogBox.Size = new System.Drawing.Size(625' 189);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LogBox.Size = new System.Drawing.Size(625' 189);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.Location = new System.Drawing.Point(12' 377);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.Location = new System.Drawing.Point(12' 377);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.Size = new System.Drawing.Size(385' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.Size = new System.Drawing.Size(385' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistOnlySelect.TabIndex = 2;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.Location = new System.Drawing.Point(12' 407);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.Location = new System.Drawing.Point(12' 407);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.Size = new System.Drawing.Size(519' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.Size = new System.Drawing.Size(519' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.GistAndIssueSelect.TabIndex = 3;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.Location = new System.Drawing.Point(12' 437);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.Location = new System.Drawing.Point(12' 437);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.Size = new System.Drawing.Size(493' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.Size = new System.Drawing.Size(493' 24);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.NoUploadSelect.TabIndex = 4;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.Location = new System.Drawing.Point(537' 388);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.Location = new System.Drawing.Point(537' 388);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.Size = new System.Drawing.Size(101' 73);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.Size = new System.Drawing.Size(101' 73);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitButton.TabIndex = 5;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.Location = new System.Drawing.Point(12' 409);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.Location = new System.Drawing.Point(12' 409);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.Size = new System.Drawing.Size(519' 22);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.Size = new System.Drawing.Size(519' 22);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.Url.TabIndex = 6;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.Location = new System.Drawing.Point(9' 381);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.Location = new System.Drawing.Point(9' 381);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.Size = new System.Drawing.Size(189' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.Size = new System.Drawing.Size(189' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.SubmitedTitleLabel.TabIndex = 8;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.Location = new System.Drawing.Point(9' 97);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.Location = new System.Drawing.Point(9' 97);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.Size = new System.Drawing.Size(87' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.Size = new System.Drawing.Size(87' 20);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorTitleLabel.TabIndex = 9;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.Location = new System.Drawing.Point(12' 120);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.Location = new System.Drawing.Point(12' 120);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.Size = new System.Drawing.Size(626' 38);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.Size = new System.Drawing.Size(626' 38);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.LastErrorBox.TabIndex = 10;
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(650' 467);
Magic Number,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(650' 467);
Magic Number,Vocaluxe.Screens,CPopupScreenServerQR,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenServerQR.cs,_GenerateQRs,The following statement contains a magic number: _QRServerAddress = CDraw.AddTexture(qrcode.GetGraphic(20));
Magic Number,Vocaluxe.Screens,CPopupScreenVolumeControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,_SaveConfig,The following statement contains a magic number: int volume = _SelectSlides[_SelectSlideVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CPopupScreenVolumeControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenVolumeControl.cs,_UpdateSlides,The following statement contains a magic number: _SelectSlides[_SelectSlideVolume].Selection = volume / 5;
Magic Number,Vocaluxe.Screens,CCreditTranslation,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Reset,The following statement contains a magic number: y += 25;
Magic Number,Vocaluxe.Screens,CCreditName,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The following statement contains a magic number: _ParticleOffsetX = (int)Math.Round(particleOffsetX * image.Rect.W / image.Texture.OrigSize.Width - particle.Rect.W / 2);
Magic Number,Vocaluxe.Screens,CCreditName,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,CCreditName,The following statement contains a magic number: _ParticleOffsetY = (int)Math.Round(particleOffsetY * image.Rect.H / image.Texture.OrigSize.Height - particle.Rect.H / 2);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The following statement contains a magic number: _BGTheme.Color = new SThemeColor {Name = null' R = 0' G = 0.18f' B = 0.474f' A = 1};
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,Init,The following statement contains a magic number: _BGTheme.Color = new SThemeColor {Name = null' R = 0' G = 0.18f' B = 0.474f' A = 1};
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: int lastY = 280;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: CText text = GetNewText(75' lastY' -2' 25' -1' EAlignment.Left' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' line);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: lastY += 40;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: CFonts.GetTextBounds(text).Width < (CSettings.RenderW - 220)
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _Logo = GetNewStatic(_TexLogo' new SColorF(1' 1' 1' 1)'                                   new SRectF((float)(CSettings.RenderW - _TexLogo.OrigSize.Width) / 2' -270' _TexLogo.OrigSize.Width' _TexLogo.OrigSize.Height' -2));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: var numstars = (int)(_Logo.Rect.W * 0.25f / 2f);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: var numstars = (int)(_Logo.Rect.W * 0.25f / 2f);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBrunzel' 502' 29' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBrunzel' 502' 29' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameDarkice' 360' 55' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameDarkice' 360' 55' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlokuep' 214' 14' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlokuep' 214' 14' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlamefire' 496' 46' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameFlamefire' 496' 46' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameLukeIam' 411' 26' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameLukeIam' 411' 26' true);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBohning' 383' 54' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBohning' 383' 54' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameMesand' 525' 13' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameMesand' 525' 13' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBabene03' 33' 26' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,LoadTheme,The following statement contains a magic number: _AddNewCreditName(_TexNameBabene03' 33' 26' false);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: SColorF partColor = isRed ? new SColorF(1' 0' 0' 1) : new SColorF(0.149f' 0.415f' 0.819f' 1);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: SColorF partColor = isRed ? new SColorF(1' 0' 0' 1) : new SColorF(0.149f' 0.415f' 0.819f' 1);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: SColorF partColor = isRed ? new SColorF(1' 0' 0' 1) : new SColorF(0.149f' 0.415f' 0.819f' 1);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: int partSize = bigParticles ? 35 : 25;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_GetStarParticles,The following statement contains a magic number: int partSize = bigParticles ? 35 : 25;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: bool isRed = _CreditNames.Count % 2 == 0;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partRectSize = bigParticles ? 25 : 20;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partRectSize = bigParticles ? 25 : 20;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partCount = bigParticles ? 8 : 6;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: int partCount = bigParticles ? 8 : 6;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: CStatic image = GetNewStatic(texture' new SColorF(1' 1' 1' 1)' new SRectF(-1' -1' 400' 120' -4));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: var particleRect = new SRectF(-1' -1' partRectSize' partRectSize' -6);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewCreditName,The following statement contains a magic number: imgDotRect.Z = -5;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: CText text = GetNewText(new CText(CSettings.RenderW / 2' CSettings.RenderH + 1' -4f' 30' -1' EAlignment.Center' EStyle.Bold' "Outline"' new SColorF(1' 1' 1' 1)' language));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: y += 30;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_AddNewTranslation,The following statement contains a magic number: text = GetNewText(new CText(CSettings.RenderW / 2' y' -4f' 27' -1' EAlignment.Center' EStyle.Normal' "Outline"' new SColorF(1' 1' 1' 1)' t));
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,OnShow,The following statement contains a magic number: name.Y = 580;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,OnShow,The following statement contains a magic number: _Logo.Y = -270;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _Logo.Y = -270 + (270f / 3000f) * _LogoTimer.ElapsedMilliseconds;
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _LogoTimer.ElapsedMilliseconds >= 2000 && !_CreditsTimer.IsRunning
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _LogoTimer.ElapsedMilliseconds >= 3000
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: float newY = 720f - (520f / 5000f) * (_TranslationsTimer.ElapsedMilliseconds - _Translations[i].StartTime);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: float newY = 720f - (520f / 5000f) * (_TranslationsTimer.ElapsedMilliseconds - _Translations[i].StartTime);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: float newY = 720f - (520f / 5000f) * (_TranslationsTimer.ElapsedMilliseconds - _Translations[i].StartTime);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: i * 1500f < _TranslationsTimer.ElapsedMilliseconds
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _Translations[i].Y <= 160f
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: float alpha = ((360 - _Translations[i].Y) / 200).Clamp(0'1);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: float alpha = ((360 - _Translations[i].Y) / 200).Clamp(0'1);
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: _Translations[i].Y <= 360f
Magic Number,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following statement contains a magic number: active = _TextTimer.ElapsedMilliseconds <= 10000;
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)              {                  case Keys.Add:                      if (CConfig.Config.Game.NumPlayers + 1 <= CSettings.MaxNumPlayer)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.Subtract:                      if (CConfig.Config.Game.NumPlayers - 1 > 0)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers - 2;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.P:                      if (!_SelectingKeyboardActive)                      {                          _SelectingFastPlayerNr = 1;                          _SelectingFast = true;                          _ResetPlayerSelections();                      }                      else                      {                          if (_SelectingFastPlayerNr + 1 <= CGame.NumPlayers)                              _SelectingFastPlayerNr++;                          else                              _SelectingFastPlayerNr = 1;                          _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                      }                      break;              }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following statement contains a magic number: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Magic Number,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,_LoadProfiles,The following statement contains a magic number: _SelectSlides[_SelectSlideDuetPlayer[i]].Selection = i % 2;
Magic Number,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,_GetRating,The following statement contains a magic number: points >= 9800
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,OnShow,The following statement contains a magic number: _CurrentBeat = -100;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _FinishTime > 0.001 && _CurrentTime >= _FinishTime
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _SingNotes[_SingBars].PlayerNotes[p].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Statics[_PlayerStaticScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Statics[_PlayerStaticAvatar[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Texts[_PlayerTextName[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Texts[_PlayerTextScore[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _ProgressBars[_PlayerProgressBarRating[p]].Alpha = alpha[CGame.Players[p].VoiceNr * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Lyrics[_LyricMain].Alpha = alpha[2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Lyrics[_LyricSub].Alpha = alpha[3];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Statics[_StaticLyrics].Alpha = alpha[2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: _Statics[_StaticLyricHelper].Alpha = alpha[2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: alpha.Length > 2
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,UpdateGame,The following statement contains a magic number: string fmtString = (CGame.Players[p].Points < 10000) ? "0000" : "00000";
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSub].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSubDuet].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: _Lyrics[_LyricSubTop].Update(-100);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: lines.Length >= nr + 2
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateLyrics,The following statement contains a magic number: lines.Length >= nr + 2
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: float x = CSettings.RenderW / 2 - textBounds.Width / 2;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: float x = CSettings.RenderW / 2 - textBounds.Width / 2;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: float y = CSettings.RenderH / 2 - textBounds.Height / 2;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateMedleyCountdown,The following statement contains a magic number: float y = CSettings.RenderH / 2 - textBounds.Height / 2;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateSongText,The following statement contains a magic number: float t = _TimerSongText.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateSongText,The following statement contains a magic number: t < 7f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateSongText,The following statement contains a magic number: t < 10f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: float t = timer.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: textName.Color.A = t / 3f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: t < 3f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: t < 10f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: float t = _TimerDuetText2.ElapsedMilliseconds / 1000f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: _Texts[_TextDuetName2].Color.A = (3f - (3f - t)) / 3f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: _Texts[_TextDuetName2].Color.A = (3f - (3f - t)) / 3f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: _Texts[_TextDuetName2].Color.A = (3f - (3f - t)) / 3f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: t < 3f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateDuetNames,The following statement contains a magic number: t < 10f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: Math.Abs(song.Finish) > 0.001
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following statement contains a magic number: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_DrawLyricHelper,The following statement contains a magic number: float alpha = (float)((Math.Cos(_CurrentTime * Math.PI * 2) + 1) / 2.0) / 2f + 0.5f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: CSound.SetStreamVolume(_CurrentStream' 100);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: CGame.Players[i].VoiceNr = (i + 1) % 2;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_LoadCurrentSong,The following statement contains a magic number: notes.Rect.Bottom >= CSettings.RenderH / 2
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CloseSong,The following statement contains a magic number: CSound.FadeAndClose(_CurrentStream' 0' 0.5f);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: string n = se.Substring(se.Length - 2);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: string s = se.Substring(0' 2);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: string n = te.Substring(te.Length - 2);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_SetVisibility,The following statement contains a magic number: string s = te.Substring(0' 2);
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: const float dt = 4f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: const float rt = dt * 0.8f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: var alpha = new float[song.Notes.VoiceCount * 2];
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2] = 1f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2 + 1] = 1f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2] = 1f - (diff - dt) / rt;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2 + 1] = 1f - (diff - dt) / rt;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: currentLineSub < lines.Length - 2
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2] = 0f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2] < 0f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2 + 1] = 0f;
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_CalcFadingAlpha,The following statement contains a magic number: alpha[i * 2 + 1] < 0f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_FindCurrentLine,The following statement contains a magic number: lastNoteTime + CConfig.Config.Record.MicDelay / 1000f * 1.5f >= currentTime
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_FindCurrentLine,The following statement contains a magic number: lastNoteTime + CConfig.Config.Record.MicDelay / 1000f * 1.5f >= currentTime
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_FindCurrentLine,The following statement contains a magic number: firstNoteTime <= currentTime + 10f
Magic Number,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_PrepareTimeLine,The following statement contains a magic number: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect = stat.Rect;                      _Statics[_StaticTimePointer].Visible = false;                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      _TimeRects.Clear();                      _Statics[_StaticTimePointer].Visible = true;                        CSong song = CGame.GetSong();                        if (song == null)                          return;                        float totalTime = CSound.GetLength(_CurrentStream);                      if (Math.Abs(song.Finish) > 0.001)                          totalTime = song.Finish;                        totalTime -= song.Start;                        if (totalTime <= 0f)                          return;                        _Length = totalTime;                        foreach (CVoice voice in song.Notes.Voices)                      {                          foreach (CSongLine line in voice.Lines.Where(line => line.VisibleInTimeLine))                          {                              var trect = new STimeRect { StartBeat = line.FirstNoteBeat' EndBeat = line.EndBeat };                              trect.Rect = GetNewStatic(null'                                                        new SColorF(1f' 1f' 1f' 1f)'                                                        new SRectF(                                                            stat.Rect.X + stat.Rect.W * ((CGame.GetTimeFromBeats(trect.StartBeat' song.BPM) + song.Gap - song.Start) / totalTime)'                                                            stat.Rect.Y'                                                            stat.Rect.W * (CGame.GetTimeFromBeats(trect.EndBeat - trect.StartBeat' song.BPM) / totalTime)'                                                            stat.Rect.H'                                                            stat.Rect.Z));                                _TimeRects.Add(trect);                          }                      }                      break;              }
Magic Number,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,OnShow,The following statement contains a magic number: _SelectedCategoryIndex = -2;
Magic Number,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_ShowSongOptionsMedley,The following statement contains a magic number: _SelectSlides[_SelectSlideOptionsNumMedleySongs].NumValues >= 5
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: var text = new CText(10' 50' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Normal"' color' "jÄNormal Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 90' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Normal"' color' "jÄBold Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 130' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Normal"' color' "jÄItalic Text" + test' -1' 26' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 170' 1' 32' 0' EAlignment.Left' EStyle.Normal' "Outline"' color' "jÄNormal Text" + test' -1' 50' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 210' 1' 32' 0' EAlignment.Left' EStyle.Bold' "Outline"' color' "jÄBold Text" + test' -1' 100' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,Init,The following statement contains a magic number: text = new CText(10' 250' 1' 32' 0' EAlignment.Left' EStyle.Italic' "Outline"' color' "jÄItalic Text" + test' -1' 150' 1);
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection = CConfig.BackgroundMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlidePreviewMusicVolume].Selection = CConfig.PreviewMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlideGameMusicVolume].Selection = CConfig.GameMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,UpdateGame,The following statement contains a magic number: _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection = CConfig.BackgroundMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlideGameMusicVolume].Selection = CConfig.GameMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlidePreviewMusicVolume].Selection = CConfig.PreviewMusicVolume / 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.GameMusicVolume = _SelectSlides[_SelectSlideGameMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.PreviewMusicVolume = _SelectSlides[_SelectSlidePreviewMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,_SaveConfig,The following statement contains a magic number: CConfig.BackgroundMusicVolume = _SelectSlides[_SelectSlideBackgroundMusicVolume].Selection * 5;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeTexts = new string[] {_TextWarning' _TextPlayer[0]' _TextPlayer[1]' _TextPlayer[2]' _TextPlayer[3]' _TextPlayer[4]' _TextPlayer[5]' _TextDelayPlayer[0]' _TextDelayPlayer[1]' _TextDelayPlayer[2]' _TextDelayPlayer[3]' _TextDelayPlayer[4]' _TextDelayPlayer[5] };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeSelectSlides = new string[] {_SelectSlideRecordDevices' _SelectSlideRecordPlayer[0]' _SelectSlideRecordPlayer[1]' _SelectSlideRecordPlayer[2]' _SelectSlideRecordPlayer[3]' _SelectSlideRecordPlayer[4]' _SelectSlideRecordPlayer[5]' _SelectSlideDelay };
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,Init,The following statement contains a magic number: _ThemeEqualizers = new string[] {_EqualizerPlayer[0]' _EqualizerPlayer[1]' _EqualizerPlayer[2]' _EqualizerPlayer[3]' _EqualizerPlayer[4]' _EqualizerPlayer[5]};
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,LoadTheme,The following statement contains a magic number: _SelectSlides[_SelectSlideDelay].AddValue((i * 20) + " ms");
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,LoadTheme,The following statement contains a magic number: i < 26
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,OnShow,The following statement contains a magic number: _SelectSlides[_SelectSlideDelay].Selection = CConfig.Config.Record.MicDelay / 20;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_SaveDelayConfig,The following statement contains a magic number: CConfig.Config.Record.MicDelay = _SelectSlides[_SelectSlideDelay].Selection * 20;
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,_TestDelay,The following statement contains a magic number: _DelayTest.Start(new int[] {0' 1' 2' 3' 4' 5});
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,Init,The following statement contains a magic number: _ButtonStates = new bool[11];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: p.X = 1023 - p.X;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[2] = ws.ButtonState.Down;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[3] = ws.ButtonState.Up;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[4] = ws.ButtonState.Left;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[5] = ws.ButtonState.Right;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[6] = ws.ButtonState.Home;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[7] = ws.ButtonState.Minus;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[8] = ws.ButtonState.Plus;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[9] = ws.ButtonState.One;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: _ButtonStates[10] = ws.ButtonState.Two;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: const float reducing = 0.15f;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: const float factor = 1f / (1f - reducing * 2f);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: float rx = ((p.X / 1024f) - reducing) * factor;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMote,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\CWiiMote.cs,_WmWiiMoteChanged,The following statement contains a magic number: float ry = ((p.Y / 768f) - reducing) * factor;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteStatus,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,CWiiMoteStatus,The following statement contains a magic number: IRState.Sensors = new SIR[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,SetReportType,The following statement contains a magic number: _Buff[2] = (byte)type;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReaderLoop,The following statement contains a magic number: bytesRead = CHIDApi.ReadTimeout(_Handle' ref buff' _ReportLength' 400);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReaderLoop,The following statement contains a magic number: Thread.Sleep(5);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.Error("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.Error("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.Error("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.Error("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseInputReport,The following statement contains a magic number: switch (type)              {                  case EInputReport.Buttons:                  case EInputReport.ButtonsExtension:                      _ParseButtons(buff);                      break;                    case EInputReport.ButtonsAccel:                  case EInputReport.ExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      break;                    case EInputReport.IRAccel:                  case EInputReport.IRExtensionAccel:                      _ParseButtons(buff);                      _ParseAccel(buff);                      _ParseIR(buff);                      break;                    case EInputReport.Status:                      _ParseButtons(buff);                      _WiiMoteState.Battery = buff[6];                        _WiiMoteState.LEDState.LED1 = (buff[3] & 0x10) != 0;                      _WiiMoteState.LEDState.LED2 = (buff[3] & 0x20) != 0;                      _WiiMoteState.LEDState.LED3 = (buff[3] & 0x40) != 0;                      _WiiMoteState.LEDState.LED4 = (buff[3] & 0x80) != 0;                      break;                    case EInputReport.ReadData:                      _ParseButtons(buff);                      _ParseReadData(buff);                      break;                    case EInputReport.Ack:                      return false;                    case EInputReport.Buttons8Bytes:                      break;                    default:                      //CLog.Error("(WiiMoteLib) Unknown report type: " + type.ToString("x"));                      return false;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.A = (buff[2] & 0x08) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.B = (buff[2] & 0x04) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Minus = (buff[2] & 0x10) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Home = (buff[2] & 0x80) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.One = (buff[2] & 0x02) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseButtons,The following statement contains a magic number: _WiiMoteState.ButtonState.Two = (buff[2] & 0x01) != 0;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.X = buff[3];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.Y = buff[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseAccel,The following statement contains a magic number: _WiiMoteState.AccelState.RawValues.Z = buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: _WiiMoteState.IRState.Position.X = (_WiiMoteState.IRState.Sensors[1].Position.X + _WiiMoteState.IRState.Sensors[0].Position.X) / 2;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following statement contains a magic number: _WiiMoteState.IRState.Position.Y = (_WiiMoteState.IRState.Sensors[1].Position.Y + _WiiMoteState.IRState.Sensors[0].Position.Y) / 2;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: (buff[3] & 0x08) != 0
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: (buff[3] & 0x07) != 0
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int size = (buff[3] >> 4) + 1;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int size = (buff[3] >> 4) + 1;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: int offset = buff[4] << 8 | buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseReadData,The following statement contains a magic number: Array.Copy(buff' 6' _ReadBuff' offset - _Address' size);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: byte[] buff = _ReadData(0x0016' 7);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.Z0 = buff[2];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityX = buff[4];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityY = buff[5];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadCalibration,The following statement contains a magic number: _WiiMoteState.AccelCalibrationInfo.GravityZ = buff[6];
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[1] = (byte)(((address & 0xff000000) >> 24) | _RumbleBit);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[4] = (byte)(address & 0x000000ff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[5] = (byte)((size & 0xff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[5] = (byte)((size & 0xff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: _Buff[6] = (byte)(size & 0xff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ReadData,The following statement contains a magic number: !_ReadDone.WaitOne(1000' false)
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[1] = (byte)(((address & 0xff000000) >> 24) | _RumbleBit);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[2] = (byte)((address & 0x00ff0000) >> 16);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[3] = (byte)((address & 0x0000ff00) >> 8);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[4] = (byte)(address & 0x000000ff);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: _Buff[5] = size;
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: Array.Copy(buff' 0' _Buff' 6' size);
Magic Number,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_WriteData,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Vocaluxe.Lib.Playlist,CPlaylistFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSongUp,The following statement contains a magic number: Songs.Reverse(songNr - 1' 2);
Magic Number,Vocaluxe.Lib.Playlist,CPlaylistFile,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Playlist\CPlaylistFile.cs,MoveSongDown,The following statement contains a magic number: Songs.Reverse(songNr' 2);
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: waitcount < 5 && PortAudioSharp.PortAudio.Pa_IsStreamStopped(handle) == PortAudioSharp.PortAudio.PaError.paStreamIsNotStopped
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: !_PaHandle.OpenInputStream(                          out _RecHandle[dev]'                          ref inputParams'                          44100'                          882'                          PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                          _MyRecProc'                          new IntPtr(dev))
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,Start,The following statement contains a magic number: !_PaHandle.OpenInputStream(                          out _RecHandle[dev]'                          ref inputParams'                          44100'                          882'                          PortAudioSharp.PortAudio.PaStreamFlags.paNoFlag'                          _MyRecProc'                          new IntPtr(dev))
Magic Number,Vocaluxe.Lib.Sound.Record.PortAudio,CPortAudioRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PortAudio\CPortAudioRecord.cs,_MyPaStreamCallback,The following statement contains a magic number: numBytes = frameCount * (uint)dev.Channels * 2;
Magic Number,Vocaluxe.Lib.Sound.Playback.Decoder,CAudioDecoderFFmpeg,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\Decoder\CAudioDecoderFFmpeg.cs,Open,The following statement contains a magic number: _FormatInfo.BitDepth != 16
Magic Number,Vocaluxe.Lib.Sound.Playback.Decoder,CAudioDecoderFFmpeg,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\Decoder\CAudioDecoderFFmpeg.cs,GetLength,The following statement contains a magic number: return _FileOpened ? _Instance.Info.Duration / 1000f : 0;
Magic Number,Vocaluxe.Lib.Sound.Playback.Decoder,CAudioDecoderFFmpeg,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\Decoder\CAudioDecoderFFmpeg.cs,SetPosition,The following statement contains a magic number: CAcinerella.AcSeek(_Audiodecoder' (time > _CurrentTime) ? 0 : -1' (Int64)(time * 1000f));
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetFrame,The following statement contains a magic number: _Data != null && _Data.Length == _Width * _Height * 4 && _NewFrameAvailable
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,GetBitmap,The following statement contains a magic number: _Data != null && _Data.Length == _Width * _Height * 4
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The following statement contains a magic number: _Data = new byte[e.Frame.Width * e.Frame.Height * 4];
Magic Number,Vocaluxe.Lib.Webcam,CAForgeNet,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Webcam\CAForgeNet.cs,_OnFrame,The following statement contains a magic number: _Data == null || _Data.Length != e.Frame.Width * e.Frame.Height * 4
Missing Default,Vocaluxe.Base,CBackgroundMusic,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CBackgroundMusic.cs,SetMusicSource,The following switch statement is missing a default case: switch (_MusicSource)              {                  case EBackgroundMusicSource.TR_CONFIG_NO_OWN_MUSIC:                      _AddBackgroundMusic();                      _RemoveOwnMusic();                      break;                    case EBackgroundMusicSource.TR_CONFIG_ONLY_OWN_MUSIC:                      _AddOwnMusic();                      _RemoveBackgroundMusic();                      break;                  case EBackgroundMusicSource.TR_CONFIG_OWN_MUSIC:                      _AddBackgroundMusic();                      _AddOwnMusic();                      break;              }
Missing Default,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,LoadCommandLineParams,The following switch statement is missing a default case: switch (parts.Length)                  {                      //Only found a parameter                      case 1:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add("");                          }                          break;                          //Found parameter and value                      case 2:                          if (parts[0] != "")                          {                              //Add parameter                              _Params.Add(parts[0]);                                //Add value                              _Values.Add(parts[1]);                          }                          break;                  }
Missing Default,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,UseCommandLineParamsBefore,The following switch statement is missing a default case: switch (param)                  {                      case "configfile":                          //Check if value is valid                                                if (_CheckFile(value))                              _FileConfig = value;                          break;                        case "scorefile":                          //Check if value is valid                          if (_CheckFile(value))                              FileHighscoreDB = value;                          break;                        case "playlistfolder":                          FolderPlaylists = value;                          break;                        case "profilefolder":                          ProfileFolders.Clear();                          ProfileFolders.Add(value);                          break;                  }
Missing Default,Vocaluxe.Base,CConfig,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CConfig.cs,UseCommandLineParamsAfter,The following switch statement is missing a default case: switch (param)                  {                      case "songfolder":                      case "songpath":                          if (!songFoldersOverwritten)                          {                              SongFolders.Clear();                              songFoldersOverwritten = true;                          }                          if (!SongFolders.Contains(value))                              SongFolders.Add(value);                          break;                  }
Missing Default,Vocaluxe.Base,CProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CProfiles.cs,Update,The following switch statement is missing a default case: switch (change.Action)                      {                          case EAction.LoadProfiles:                              _LoadProfiles();                              _ProfilesChanged = true;                              _AvatarsChanged = true;                              break;                            case EAction.LoadAvatars:                              _LoadAvatars();                              _AvatarsChanged = true;                              break;                            case EAction.AddProfile:                              CProfile newProf = change.Profile;                              if (newProf == null)                                  break;                                newProf.ID = Guid.NewGuid();                              if (newProf.Avatar == null)                                  newProf.Avatar = _Avatars.Values.First();                              else if (newProf.Avatar.ID < 0)                              {                                  newProf.Avatar.ID = _AvatarIDs.Dequeue();                                  _Avatars.Add(newProf.Avatar.ID' newProf.Avatar);                                  _AvatarsChanged = true;                              }                              newProf.SaveProfile();                              _Profiles.Add(newProf.ID' newProf);                                _ProfilesChanged = true;                              break;                            case EAction.EditProfile:                              if (change.Profile == null)                                  break;                                if (!IsProfileIDValid(change.Profile.ID))                                  return;                                _Profiles[change.Profile.ID] = change.Profile;                              _ProfilesChanged = true;                              break;                            case EAction.DeleteProfile:                              if (!IsProfileIDValid(change.ProfileID))                                  break;                                _DeleteProfile(change.ProfileID);                              _ProfilesChanged = true;                              break;                            case EAction.AddAvatar:                              if (change.Avatar == null)                                  break;                                change.Avatar.ID = _AvatarIDs.Dequeue();                              _Avatars.Add(change.Avatar.ID' change.Avatar);                              _AvatarsChanged = true;                              break;                            case EAction.EditAvatar:                              if (change.Avatar == null)                                  break;                                if (!IsAvatarIDValid(change.Avatar.ID))                                  return;                                _Avatars[change.Avatar.ID] = change.Avatar;                              _AvatarsChanged = true;                              break;                      }
Missing Default,Vocaluxe.Base,CSongCategorizer,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongCategorizer.cs,_AdjustCategoryNames,The following switch statement is missing a default case: switch (sorting)              {                  case ESongSorting.TR_CONFIG_DECADE:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                      {                          string year = songPointer.SortString;                          if (year != "")                          {                              year = year.Substring(0' 3);                              songPointer.SortString = year + "0 - " + year + "9";                          }                      }                      break;                  case ESongSorting.TR_CONFIG_TITLE_LETTER:                  case ESongSorting.TR_CONFIG_ARTIST_LETTER:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = (songPointer.SortString.Length == 0 || !Char.IsLetter(songPointer.SortString' 0)) ? "#" : songPointer.SortString[0].ToString();                      break;                  case ESongSorting.TR_CONFIG_DATEADDED:                      foreach (CSongPointer songPointer in CSongs.Sorter.SortedSongs)                          songPointer.SortString = CSongs.GetSong(songPointer.SongID).DateAdded.ToString("dd/MM/yyyy");                      break;              }
Missing Default,Vocaluxe.Base,CSongs,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\CSongs.cs,LoadSongs,The following switch statement is missing a default case: switch (CConfig.Config.Theme.CoverLoading)                  {                      case ECoverLoading.TR_CONFIG_COVERLOADING_ATSTART:                          _LoadCovers();                          break;                      case ECoverLoading.TR_CONFIG_COVERLOADING_DYNAMIC:                          _LoadCoversAsync();                          break;                  }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,AddScore,The following switch statement is missing a default case: switch (player.GameMode)                  {                      case EGameMode.TR_GAMEMODE_MEDLEY:                          medley = 1;                          break;                      case EGameMode.TR_GAMEMODE_DUET:                          duet = 1;                          break;                      case EGameMode.TR_GAMEMODE_SHORTSONG:                          shortSong = 1;                          break;                  }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following switch statement is missing a default case: switch (gameMode)                      {                          case EGameMode.TR_GAMEMODE_MEDLEY:                              medley = 1;                              break;                          case EGameMode.TR_GAMEMODE_DUET:                              duet = 1;                              break;                          case EGameMode.TR_GAMEMODE_SHORTSONG:                              shortSong = 1;                              break;                      }
Missing Default,Vocaluxe.Lib.Database,CHighscoreDB,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Database\CHighscoreDB.cs,LoadScore,The following switch statement is missing a default case: switch (style)                      {                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_BEST:                              command.CommandText = "SELECT os.PlayerName' os.Score' os.Date' os.Difficulty' os.LineNr' os.id " +                              "FROM Scores os " +                              "INNER JOIN ( " +                              "SELECT sc.PlayerName' sc.Score' sc.Difficulty' sc.LineNr' MIN(sc.Date) AS Date " +                              "FROM Scores sc " +                              "INNER JOIN ( " +                              "SELECT Playername' MAX(Score) AS Score' Difficulty' LineNr " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY PlayerName' Difficulty' LineNr " +                              ") AS mc " +                              "ON sc.PlayerName = mc.PlayerName AND sc.Difficulty = mc.Difficulty AND sc.LineNr = mc.LineNr AND sc.Score = mc.Score " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY sc.PlayerName' sc.Difficulty' sc.LineNr' sc.Score " +                              ") AS iq " +                              "ON os.PlayerName = iq.PlayerName AND os.Difficulty = iq.Difficulty AND os.LineNr = iq.LineNr AND os.Score = iq.Score AND os.Date = iq.Date " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "GROUP BY os.PlayerName' os.Difficulty' os.LineNr' os.Score " +                              "ORDER BY os.Score DESC' os.Date ASC";                              break;                          case EHighscoreStyle.TR_CONFIG_HIGHSCORE_LIST_ALL:                              command.CommandText = "SELECT PlayerName' Score' Date' Difficulty' LineNr' id " +                              "FROM Scores " +                              "WHERE [SongID] = @SongID AND [Medley] = @Medley AND [Duet] = @Duet AND [ShortSong] = @ShortSong " +                              "ORDER BY [Score] DESC' [Date] ASC";                              break;                      }
Missing Default,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following switch statement is missing a default case: switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _X = 0;                          break;                      case EGeneralAlignment.Middle:                          _X = diff / 2;                          break;                      case EGeneralAlignment.End:                          _X = diff;                          break;                  }
Missing Default,Vocaluxe.Lib.Draw,CDrawBase<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBase.cs,_AdjustAspect,The following switch statement is missing a default case: switch (_CurrentAlignment)                  {                      case EGeneralAlignment.Start:                          _Y = reverse ? diff : 0;                          break;                      case EGeneralAlignment.Middle:                          _Y = diff / 2;                          break;                      case EGeneralAlignment.End:                          _Y = reverse ? 0 : diff;                          break;                  }
Missing Default,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_OnMessageAvoidScreenOff,The following switch statement is missing a default case: switch (m.Msg)              {                  case 0x112: // WM_SYSCOMMAND                      switch ((int)m.WParam & 0xFFF0)                      {                          case 0xF100: // SC_KEYMENU                              m.Result = IntPtr.Zero;                              return false;                          case 0xF140: // SC_SCREENSAVER                          case 0xF170: // SC_MONITORPOWER                              return false;                      }                      break;              }
Missing Default,Vocaluxe.Lib.Draw,CDrawBaseWindows<TTextureType>,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Draw\CDrawBaseWindows.cs,_OnMessageAvoidScreenOff,The following switch statement is missing a default case: switch ((int)m.WParam & 0xFFF0)                      {                          case 0xF100: // SC_KEYMENU                              m.Result = IntPtr.Zero;                              return false;                          case 0xF140: // SC_SCREENSAVER                          case 0xF170: // SC_MONITORPOWER                              return false;                      }
Missing Default,Vocaluxe.Lib.Sound.Playback,CAudioStreamBase,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\CAudioStreamBase.cs,Update,The following switch statement is missing a default case: switch (_AfterFadeAction)                      {                          case EStreamAction.Close:                              Close();                              break;                          case EStreamAction.Stop:                              Stop();                              break;                          case EStreamAction.Pause:                              IsPaused = true;                              break;                      }
Missing Default,Vocaluxe.Lib.Sound.Playback.GstreamerSharp,CGstreamerSharpAudioStream,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Playback\GstreamerSharp\CGstreamerSharpAudioStream.cs,_OnMessage,The following switch statement is missing a default case: switch (msg.Type)              {                  case MessageType.Eos:                      if (_Loop)                          Position = 0;                      else                          _IsFinished = true;                      break;                  case MessageType.Error:                      GException error;                      string debug;                      msg.ParseError(out error' out debug);                      CLog.Error("Gstreamer error: message" + error.Message + "' code" + error.Code + " 'debug information" + debug);                      return false;                  case MessageType.DurationChanged:                      _UpdateDuration();                      break;              }
Missing Default,Vocaluxe.Lib.Sound.Record.PitchTracker,CPitchTrackerTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Sound\Record\PitchTracker\CPitchTrackerTest.cs,_GetDistort,The following switch statement is missing a default case: switch (type)                  {                      case 0:                          newTone = 2;                          break;                      case 1:                          newTone = 3;                          break;                      case 2:                          newTone = 6;                          break;                      case 3:                          newTone = 8;                          break;                      case 4:                          newTone = 10;                          break;                      case 5:                          newTone = 15;                          break;                      case 6:                          newTone = 25;                          break;                      case 7:                          newTone = 26;                          break;                      case 8:                          newTone = 29;                          break;                  }
Missing Default,Vocaluxe.Base.Fonts,CFontStyle,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFontStyle.cs,_GetSystemFontStyle,The following switch statement is missing a default case: switch (_Style)              {                  case EStyle.Normal:                      return FontStyle.Regular;                  case EStyle.Italic:                      return FontStyle.Italic;                  case EStyle.Bold:                      return FontStyle.Bold;                  case EStyle.BoldItalic:                      return FontStyle.Bold | FontStyle.Italic;              }
Missing Default,Vocaluxe.Base.Fonts,CFonts,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Base\Fonts\CFonts.cs,_GetFontStyle,The following switch statement is missing a default case: switch (font.Style)              {                  case EStyle.Normal:                      return _FontFamilies[index].Normal;                  case EStyle.Italic:                      return _FontFamilies[index].Italic;                  case EStyle.Bold:                      return _FontFamilies[index].Bold;                  case EStyle.BoldItalic:                      return _FontFamilies[index].BoldItalic;              }
Missing Default,Vocaluxe.Reporting,CReporter,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Reporting\Reporter.cs,Submit_Click,The following switch statement is missing a default case: switch (_Step)              {                  case 0:                      if (this.NoUploadSelect.Checked)                      {                          this.Close();                      }                      else                      {                          _Step = 1;                          this.SubmitButton.Text = _SubmitStep1Text;                          this.SubmitButton.Enabled = false;                          this.NoUploadSelect.Visible = false;                          this.GistAndIssueSelect.Visible = false;                          this.GistOnlySelect.Visible = false;                          this.LogBox.Enabled = false;                          this.LastErrorBox.Enabled = false;                            if (this.GistOnlySelect.Checked)                          {                              await Task.Run(() => _StartGistUpload(this.LogBox.Text' this.LastErrorBox.Text));                          }                          else if (this.GistAndIssueSelect.Checked)                          {                              await Task.Run(() => _StartIssueUpload(this.LogBox.Text' this.LastErrorBox.Text));                          }                          else                          {                              _Step = 0;                              this.SubmitButton.Text = _SubmitStep0Text;                              this.SubmitButton.Enabled = true;                              this.NoUploadSelect.Visible = true;                              this.GistAndIssueSelect.Visible = true;                              this.GistOnlySelect.Visible = true;                              this.LogBox.Enabled = true;                              this.LastErrorBox.Enabled = false;                          }                                                    }                        break;                  case 2:                      this.Close();                      break;              }
Missing Default,Vocaluxe.Screens,CPopupScreenServerQR,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenServerQR.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Escape:                  case Keys.Back:                      CGraphics.HidePopup(EPopupScreens.PopupServerQR);                      return true;              }
Missing Default,Vocaluxe.Screens,CScreenOptionsVideoAdjustments,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideoAdjustments.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.OptionsVideo);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.OptionsVideo);                          }                          break;                  }
Missing Default,Vocaluxe.Screens,CPopupScreenPlayerControl,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CPopupScreenPlayerControl.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.HidePopup(EPopupScreens.PopupPlayerControl);                          return false;                        case Keys.Enter:                          if (_Buttons[_ButtonNext].Selected)                              CBackgroundMusic.Next();                          if (_Buttons[_ButtonPrevious].Selected)                              CBackgroundMusic.Previous();                          if (_Buttons[_ButtonPlay].Selected)                              CBackgroundMusic.Play();                          if (_Buttons[_ButtonPause].Selected)                              CBackgroundMusic.Pause();                          if (_Buttons[_ButtonRepeat].Selected)                              CBackgroundMusic.RepeatSong = !CBackgroundMusic.RepeatSong;                          if (_Buttons[_ButtonShowVideo].Selected)                              _VideoPreview = !_VideoPreview;                          if (_Buttons[_ButtonSing].Selected)                              _StartSong(CBackgroundMusic.SongID);                          if (_Buttons[_ButtonToBackgroundVideo].Selected)                              _VideoBackground = !_VideoBackground;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          CGraphics.FadeTo(EScreen.Main);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenCredits,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenCredits.cs,_Animation,The following switch statement is missing a default case: switch (_CreditNames[i].Direction)                      {                          case EDirection.Right:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = -450 + (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X >= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Left:                              if (i * 4000f <= _CreditsTimer.ElapsedMilliseconds)                              {                                  _CreditNames[i].X = CSettings.RenderW -                                                      (((CSettings.RenderW - _CreditNames[i].W) / 2) / 3000f) * (_CreditsTimer.ElapsedMilliseconds - (i * 4000f));                                    //Check if name is in middle of screen and should go up                                  if (_CreditNames[i].X <= (CSettings.RenderW - _CreditNames[i].W) / 2)                                  {                                      _CreditNames[i].Direction = EDirection.Up;                                      _CreditNames[i].StartTimeUp = _CreditsTimer.ElapsedMilliseconds;                                  }                              }                              break;                            case EDirection.Up:                              _CreditNames[i].Y = 580 - (430f / 3000f) * (_CreditsTimer.ElapsedMilliseconds - _CreditNames[i].StartTimeUp);                                //Set name inactive                              if (_CreditNames[i].Y <= 160f)                              {                                  _CreditNames[i].Visible = false;                                  //Check' if last name is shown                                  if (i == _CreditNames.Count - 1)                                  {                                      _CreditsTimer.Stop();                                      _TranslationsTimer.Start();                                  }                              }                              else if (_CreditNames[i].Y <= 360f)                              {                                  //Fade names out                                  float alpha = ((360 - _CreditNames[i].Y) / 200).Clamp(0' 1);                                  _CreditNames[i].Alpha = 1 - alpha;                              }                                break;                      }
Missing Default,Vocaluxe.Screens,CScreenHighscore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenHighscore.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          _LeaveScreen();                          break;                        case Keys.Down:                          _ChangePos(1);                          break;                        case Keys.Up:                          _ChangePos(-1);                          break;                        case Keys.Left:                          _ChangeRound(-1);                          break;                        case Keys.Right:                          _ChangeRound(1);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenLoad,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenLoad.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                      case Keys.Escape:                      case Keys.Space:                      case Keys.Back:                          _SkipIntro = true;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenMain,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenMain.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.O:                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          if (CProfiles.NumProfiles > 0)                              CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.C:                          CGraphics.FadeTo(EScreen.Credits);                          break;                        case Keys.T:                          CGraphics.FadeTo(EScreen.Test);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonSing].Selected)                          {                              CParty.SetNormalGameMode();                              CGraphics.FadeTo(EScreen.Song);                          }                            if (_Buttons[_ButtonParty].Selected)                              CGraphics.FadeTo(EScreen.Party);                            if (_Buttons[_ButtonOptions].Selected)                              CGraphics.FadeTo(EScreen.Options);                            if (_Buttons[_ButtonProfiles].Selected)                              CGraphics.FadeTo(EScreen.Profiles);                            if (_Buttons[_ButtonExit].Selected)                              return false;                            break;                        case Keys.Escape:                          _SelectElement(_Buttons[_ButtonExit]);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)              {                  case Keys.Add:                      if (CConfig.Config.Game.NumPlayers + 1 <= CSettings.MaxNumPlayer)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.Subtract:                      if (CConfig.Config.Game.NumPlayers - 1 > 0)                      {                          _SelectSlides[_SelectSlidePlayerNumber].Selection = CConfig.Config.Game.NumPlayers - 2;                          _UpdatePlayerNumber();                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                      }                      break;                    case Keys.P:                      if (!_SelectingKeyboardActive)                      {                          _SelectingFastPlayerNr = 1;                          _SelectingFast = true;                          _ResetPlayerSelections();                      }                      else                      {                          if (_SelectingFastPlayerNr + 1 <= CGame.NumPlayers)                              _SelectingFastPlayerNr++;                          else                              _SelectingFastPlayerNr = 1;                          _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                      }                      break;              }
Missing Default,Vocaluxe.Screens,CScreenNames,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenNames.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                          //Check' if a player is selected                          if (_NameSelections[_NameSelection].SelectedID != Guid.Empty)                          {                              _SelectedProfileID = _NameSelections[_NameSelection].SelectedID;                                if (!CProfiles.IsProfileIDValid(_SelectedProfileID))                                  return true;                                _UpdateSelectedProfile(_SelectingFastPlayerNr - 1' _SelectedProfileID);                          }                          //Started selecting with 'P'                          if (_SelectingFast)                          {                              if (_SelectingFastPlayerNr == CGame.NumPlayers)                              {                                  resetSelection = true;                                  _SelectElement(_Buttons[_ButtonStart]);                              }                              else                              {                                  _SelectingFastPlayerNr++;                                  _NameSelections[_NameSelection].FastSelection(true' _SelectingFastPlayerNr);                              }                          }                          else                              resetSelection = true;                          break;                        case Keys.D1:                      case Keys.NumPad1:                          numberPressed = 1;                          break;                      case Keys.D2:                      case Keys.NumPad2:                          numberPressed = 2;                          break;                      case Keys.D3:                      case Keys.NumPad3:                          numberPressed = 3;                          break;                      case Keys.D4:                      case Keys.NumPad4:                          numberPressed = 4;                          break;                      case Keys.D5:                      case Keys.NumPad5:                          numberPressed = 5;                          break;                      case Keys.D6:                      case Keys.NumPad6:                          numberPressed = 6;                          break;                        case Keys.Escape:                          resetSelection = true;                          _SelectElement(_SelectSlides[_SelectSlidePlayerNumber]);                          break;                        case Keys.Delete:                          //Delete profile-selection                          _ResetPlayerSelection(_SelectingFastPlayerNr - 1);                          //Reset all values                          _SelectingFastPlayerNr = 0;                          _SelectingKeyboardActive = false;                          _NameSelections[_NameSelection].FastSelection(false' -1);                          //Update Tiles-List                          _NameSelections[_NameSelection].UpdateList();                          break;                        case Keys.F10:                          if (CGame.GetNumSongs() == 1 && CGame.GetSong(0).IsDuet)                          {                              CSelectSlide selectSlideDuetPart = _SelectSlides[_SelectSlideDuetPlayer[_SelectingFastPlayerNr - 1]];                              selectSlideDuetPart.Selection = (selectSlideDuetPart.Selection + 1) % 2;                              //Reset all values                              _SelectingFastPlayerNr = 0;                              _SelectingKeyboardActive = false;                              _SelectingFast = false;                              _NameSelections[_NameSelection].FastSelection(false' -1);                              _SelectElement(_Buttons[_ButtonStart]);                          }                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptions,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptions.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonOptionsGame].Selected)                              CGraphics.FadeTo(EScreen.OptionsGame);                            if (_Buttons[_ButtonOptionsSound].Selected)                              CGraphics.FadeTo(EScreen.OptionsSound);                            if (_Buttons[_ButtonOptionsRecord].Selected)                              CGraphics.FadeTo(EScreen.OptionsRecord);                            if (_Buttons[_ButtonOptionsVideo].Selected)                              CGraphics.FadeTo(EScreen.OptionsVideo);                            if (_Buttons[_ButtonOptionsLyrics].Selected)                              CGraphics.FadeTo(EScreen.OptionsLyrics);                            if (_Buttons[_ButtonOptionsTheme].Selected)                              CGraphics.FadeTo(EScreen.OptionsTheme);                            break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsGame,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsGame.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          else if (_Buttons[_ButtonServer].Selected)                              CGraphics.ShowPopup(EPopupScreens.PopupServerQR);                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsLyrics,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsLyrics.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenParty,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenParty.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonStart].Selected)                              _StartPartyMode();                            if (_Buttons[_ButtonExit].Selected)                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Left:                      case Keys.Right:                          if (_SelectSlides[_SelectSlideModes].Selected)                              _UpdateSelection();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleInput,The following switch statement is missing a default case: switch (_EditMode)                  {                      case EEditMode.None:                          break;                      case EEditMode.PlayerName:                          _SelectSlides[_SelectSlideProfiles].RenameValue(                              CProfiles.AddGetPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)' keyEvent.Unicode));                          _ProfilesChanged = true;                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenProfiles,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenProfiles.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                          if (_EditMode == EEditMode.PlayerName)                              _EditMode = EEditMode.None;                          else                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                              CGraphics.FadeTo(EScreen.Main);                          else if (_Buttons[_ButtonSave].Selected)                              _SaveProfiles();                          else if (_Buttons[_ButtonNew].Selected)                              _NewProfile();                          else if (_Buttons[_ButtonPlayerName].Selected)                          {                              if (CProfiles.NumProfiles > 0 && _EditMode != EEditMode.PlayerName)                                  _EditMode = EEditMode.PlayerName;                              else                                  _EditMode = EEditMode.None;                          }                          else if (_Buttons[_ButtonDelete].Selected)                              _DeleteProfile();                          else if (_Buttons[_ButtonWebcam].Selected)                              _OnWebcam();                          else if (_Buttons[_ButtonSaveSnapshot].Selected)                              _OnSaveSnapshot();                          else if (_Buttons[_ButtonDiscardSnapshot].Selected)                              _OnDiscardSnapshot();                          else if (_Buttons[_ButtonTakeSnapshot].Selected)                              _OnTakeSnapshot();                          break;                        case Keys.Back:                          if (_EditMode == EEditMode.PlayerName)                          {                              _SelectSlides[_SelectSlideProfiles].RenameValue(                                  CProfiles.GetDeleteCharInPlayerName(_GetIdFromTag(_SelectSlides[_SelectSlideProfiles].SelectedTag)));                              _ProfilesChanged = true;                          }                          else                              CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Delete:                          _DeleteProfile();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenScore,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenScore.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                      case Keys.Enter:                          _LeaveScreen();                          break;                        case Keys.Left:                          _ChangeRound(-1);                          break;                        case Keys.Right:                          _ChangeRound(1);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                          _TogglePause();                          if (_Pause)                              _SelectElement(_Buttons[_ButtonCancel]);                          break;                        case Keys.P:                          _TogglePause();                          if (_Pause)                              _SelectElement(_Buttons[_ButtonContinue]);                          break;                        case Keys.T:                          var mode = (int)CConfig.Config.Game.TimerMode;                            mode++;                          if (mode > Enum.GetNames(typeof(ETimerMode)).Length - 1)                              mode = 0;                          CConfig.Config.Game.TimerMode = (ETimerMode)mode;                          CConfig.SaveConfig();                          break;                        case Keys.I:                          mode = (int)CConfig.Config.Theme.PlayerInfo;                            mode++;                          if (mode > Enum.GetNames(typeof(EPlayerInfo)).Length - 1)                              mode = 0;                          CConfig.Config.Theme.PlayerInfo = (EPlayerInfo)mode;                          CConfig.SaveConfig();                          _SetVisibility();                          break;                        case Keys.S:                          if (CGame.NumRounds > CGame.RoundNr)                          {                              if (keyEvent.ModCtrl)                                  _NextSong();                          }                          break;                      case Keys.W:                          if (CWebcam.IsDeviceAvailable())                          {                              _Webcam = !CWebcam.IsCapturing();                              if (_Webcam)                                  CWebcam.Start();                              else                                  CWebcam.Stop();                          }                          break;                      case Keys.Enter:                          if (_Pause)                          {                              if (_Buttons[_ButtonContinue].Selected)                                  _SetPause(false);                              if (_Buttons[_ButtonCancel].Selected)                                  _Stop();                              if (_Buttons[_ButtonRestartGame].Selected)                                  _RestartGame();                              if (_Buttons[_ButtonRestartRound].Selected)                                  _RestartRound();                              if (_Buttons[_ButtonSkip].Selected)                              {                                  _NextSong();                                  _SetPause(false);                              }                          }                          break;                        case Keys.V:                          if (_VideoAspect == EAspect.Zoom2)                              _VideoAspect = EAspect.Crop;                          else                              _VideoAspect++;                            CSong song = CGame.GetSong();                          song.VideoAspect = _VideoAspect;                            if (CConfig.Config.Debug.SaveModifiedSongs == EOffOn.TR_CONFIG_ON)                              song.Save();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Game.TimerMode)              {                  case ETimerMode.TR_CONFIG_TIMERMODE_CURRENT:                      var min = (int)Math.Floor(currentTime / 60f);                      var sec = (int)(currentTime - min * 60f);                      _Texts[_TextTime].Text = min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_REMAINING:                      min = (int)Math.Floor(remainingTime / 60f);                      sec = (int)(remainingTime - min * 60f);                      _Texts[_TextTime].Text = "-" + min.ToString("00") + ":" + sec.ToString("00");                      break;                    case ETimerMode.TR_CONFIG_TIMERMODE_TOTAL:                      min = (int)Math.Floor(totalTime / 60f);                      sec = (int)(totalTime - min * 60f);                      _Texts[_TextTime].Text = "#" + min.ToString("00") + ":" + sec.ToString("00");                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_UpdateTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect.W = _Statics[_StaticTimeLine].Rect.W * (currentTime / totalTime);                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      CStatic stat = _Statics[_StaticTimeLine];                      int currentBeat = CGame.CurrentBeat;                      for (int i = 0; i < _TimeRects.Count; i++)                      {                          if (currentBeat >= _TimeRects[i].StartBeat && currentBeat <= _TimeRects[i].EndBeat)                          {                              _TimeRects[i].Rect.Texture = _Statics[_StaticTimeLineExpandedHighlighted].Texture;                              _TimeRects[i].Rect.Color = _Statics[_StaticTimeLineExpandedHighlighted].Color;                          }                          else                          {                              _TimeRects[i].Rect.Texture = _Statics[_StaticTimeLineExpandedNormal].Texture;                              _TimeRects[i].Rect.Color = _Statics[_StaticTimeLineExpandedNormal].Color;                          }                      }                      _Statics[_StaticTimePointer].X = stat.X + stat.W * (currentTime / totalTime);                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,Draw,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      CDraw.DrawTexture(_Statics[_StaticTimeLine].Texture' _Statics[_StaticTimeLine].Rect' new SColorF(1' 1' 1' 1)' _TimeLineRect);                      break;                  case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      for (int i = 0; i < _TimeRects.Count; i++)                          CDraw.DrawTexture(_TimeRects[i].Rect.Texture' _Statics[_StaticTimeLine].Rect' _TimeRects[i].Rect.Color' _TimeRects[i].Rect.Rect);                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSing,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSing.cs,_PrepareTimeLine,The following switch statement is missing a default case: switch (CConfig.Config.Theme.TimerLook)              {                  case ETimerLook.TR_CONFIG_TIMERLOOK_NORMAL:                      _TimeLineRect = stat.Rect;                      _Statics[_StaticTimePointer].Visible = false;                      break;                    case ETimerLook.TR_CONFIG_TIMERLOOK_EXPANDED:                      _TimeRects.Clear();                      _Statics[_StaticTimePointer].Visible = true;                        CSong song = CGame.GetSong();                        if (song == null)                          return;                        float totalTime = CSound.GetLength(_CurrentStream);                      if (Math.Abs(song.Finish) > 0.001)                          totalTime = song.Finish;                        totalTime -= song.Start;                        if (totalTime <= 0f)                          return;                        _Length = totalTime;                        foreach (CVoice voice in song.Notes.Voices)                      {                          foreach (CSongLine line in voice.Lines.Where(line => line.VisibleInTimeLine))                          {                              var trect = new STimeRect { StartBeat = line.FirstNoteBeat' EndBeat = line.EndBeat };                              trect.Rect = GetNewStatic(null'                                                        new SColorF(1f' 1f' 1f' 1f)'                                                        new SRectF(                                                            stat.Rect.X + stat.Rect.W * ((CGame.GetTimeFromBeats(trect.StartBeat' song.BPM) + song.Gap - song.Start) / totalTime)'                                                            stat.Rect.Y'                                                            stat.Rect.W * (CGame.GetTimeFromBeats(trect.EndBeat - trect.StartBeat' song.BPM) / totalTime)'                                                            stat.Rect.H'                                                            stat.Rect.Z));                                _TimeRects.Add(trect);                          }                      }                      break;              }
Missing Default,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                      {                          case Keys.Escape:                              if ((CSongs.Category < 0 || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode && !_SearchActive)                                  CGraphics.FadeTo(EScreen.Main);                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              break;                            case Keys.Enter:                              if (_Sso.Selection.RandomOnly && _Sso.Selection.NumJokers != null)                              {                                  for (int i = 0; i < _ButtonsJoker.Count; i++)                                  {                                      if (i < _Sso.Selection.NumJokers.Length)                                      {                                          if (_Buttons[_ButtonsJoker[i]].Selected)                                          {                                              _SelectNextRandom(i);                                              return true;                                          }                                      }                                  }                                  if (_Buttons[_ButtonStart].Selected)                                      _HandlePartySongSelection(_SongMenu.GetPreviewSongNr());                              }                              if (CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                              {                                  if (_SongMenu.GetPreviewSongNr() != -1)                                      _ToggleSongOptions(ESongOptionsView.Song);                              }                              break;                            case Keys.Tab:                              if (_Playlist.Visible)                              {                                  _Playlist.Selected = !_Playlist.Selected;                                  _SongMenu.Selected = !_Playlist.Selected;                              }                              break;                            case Keys.Back:                              if (_SearchActive)                              {                                  if (_SearchText != "")                                      _ApplyNewSearchFilter(_SearchText.Remove(_SearchText.Length - 1));                              }                              else if ((!CSongs.IsInCategory || _Sso.Sorting.Tabs == EOffOn.TR_CONFIG_OFF) && !_Sso.Selection.PartyMode)                                  CGraphics.FadeTo(EScreen.Main);                                break;                            case Keys.F3:                              if (_SearchActive)                              {                                  _SearchActive = false;                                  _SearchText = String.Empty;                                  _ApplyNewSearchFilter(_SearchText);                              }                              else if (!_Sso.Selection.PartyMode)                                  _SearchActive = true;                              break;                      }
Missing Default,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                          {                              case Keys.Space:                                  if (!_Sso.Selection.PartyMode)                                      _ToggleSongOptions(ESongOptionsView.General);                                  break;                                case Keys.A:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomAllSongs();                                  break;                              case Keys.V:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.PartyMode)                                      _StartRandomVisibleSongs();                                  break;                                case Keys.R:                                  if (keyEvent.Mod == EModifier.Ctrl && !_Sso.Selection.RandomOnly)                                      _SelectNextRandom(-1);                                  break;                                case Keys.S:                                  if (keyEvent.Mod == EModifier.Ctrl && CSongs.NumSongsVisible > 0 && !_Sso.Selection.PartyMode)                                      _StartMedleySong(_SongMenu.GetPreviewSongNr());                                  break;                                case Keys.F:                                  if (keyEvent.Mod == EModifier.Ctrl)                                      _SearchActive = true;                                  break;                                case Keys.D1:                              case Keys.NumPad1:                                  _SelectNextRandom(0);                                  break;                                case Keys.D2:                              case Keys.NumPad2:                                  _SelectNextRandom(1);                                  break;                                case Keys.D3:                              case Keys.NumPad3:                                  _SelectNextRandom(2);                                  break;                                case Keys.D4:                              case Keys.NumPad4:                                  _SelectNextRandom(3);                                  break;                                case Keys.D5:                              case Keys.NumPad5:                                  _SelectNextRandom(4);                                  break;                                case Keys.D6:                              case Keys.NumPad6:                                  _SelectNextRandom(5);                                  break;                          }
Missing Default,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Enter:                          if (_Buttons[_ButtonOptionsClose].Selected)                              _ToggleSongOptions(ESongOptionsView.None);                          else if (_Buttons[_ButtonOptionsSing].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartSong(_SongMenu.GetPreviewSongNr());                          }                          else if (_Buttons[_ButtonOptionsPlaylist].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _OpenAndAddPlaylistAction();                          }                          else if (_Buttons[_ButtonOptionsRandom].Selected)                          {                              if (CSongs.IsInCategory)                                  _SongMenu.SetSelectedSong(CSongs.GetRandomSong());                          }                          else if (_Buttons[_ButtonOptionsRandomCategory].Selected)                          {                              if (!CSongs.IsInCategory)                                  _SongMenu.SetSelectedCategory(CSongs.GetRandomCategory());                          }                          else if (_Buttons[_ButtonOptionsSingAll].Selected)                              _StartRandomAllSongs();                          else if (_Buttons[_ButtonOptionsSingAllVisible].Selected)                              _StartRandomVisibleSongs();                          else if (_Buttons[_ButtonOptionsOpenSelectedItem].Selected)                              _HandleSelectButton();                          else if (_SelectSlides[_SelectSlideOptionsPlaylistOpen].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistOpen].SelectedTag);                          else if (_SelectSlides[_SelectSlideOptionsPlaylistAdd].Selected)                              _OpenPlaylist(_SelectSlides[_SelectSlideOptionsPlaylistAdd].SelectedTag);                          else if (_Buttons[_ButtonOptionsRandomMedley].Selected)                              _ToggleSongOptions(ESongOptionsView.Medley);                          else if (_Buttons[_ButtonOptionsStartMedley].Selected)                          {                              _ToggleSongOptions(ESongOptionsView.None);                              _StartRandomMedley(_SelectSlides[_SelectSlideOptionsNumMedleySongs].Selection + 1' !CSongs.IsInCategory);                          }                          break;                        case Keys.Escape:                      case Keys.Back:                      case Keys.Space:                          _ToggleSongOptions(ESongOptionsView.None);                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The following switch statement is missing a default case: switch (CConfig.Config.Game.SongSorting)                  {                      case ESongSorting.TR_CONFIG_ARTIST:                      case ESongSorting.TR_CONFIG_ARTIST_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_YEAR:                      case ESongSorting.TR_CONFIG_DECADE:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Year.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_TITLE_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_FOLDER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Folder.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenSong,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenSong.cs,_JumpTo,The following switch statement is missing a default case: switch (CConfig.Config.Game.SongSorting)                  {                      case ESongSorting.TR_CONFIG_FOLDER:                      case ESongSorting.TR_CONFIG_TITLE_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Artist.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                        case ESongSorting.TR_CONFIG_ARTIST:                      case ESongSorting.TR_CONFIG_ARTIST_LETTER:                          if (curSelected >= 0 && curSelected < ct - 1 && songs[curSelected].Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase))                              start = curSelected + 1;                          visibleID = _FindIndex(songs' start' element => element.Title.StartsWith(letter.ToString()' StringComparison.OrdinalIgnoreCase));                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenTest,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenTest.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.Enter:                          CGraphics.FadeTo(EScreen.Main);                          break;                        case Keys.F:                          //FadeAndPause();                          break;                        case Keys.S:                          //PlayFile();                          break;                        case Keys.P:                          //PauseFile();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsSound,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsSound.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          break;                        case Keys.Left:                          _SaveConfig();                          break;                        case Keys.Right:                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsVideo,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsVideo.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                          else if (_Buttons[_ButtonScreenAdjustments].Selected)                          {                              _SaveConfig();                              CGraphics.FadeTo(EScreen.OptionsVideoAdjustments);                          }                          break;                        case Keys.Left:                          if (_SelectSlides[_SelectSlideWebcamDevices].Selected)                              _OnDeviceEvent();                          if (_SelectSlides[_SelectSlideWebcamCapabilities].Selected)                              _OnCapabilitiesEvent();                          _SaveConfig();                          break;                        case Keys.Right:                          if (_SelectSlides[_SelectSlideWebcamDevices].Selected)                              _OnDeviceEvent();                          if (_SelectSlides[_SelectSlideWebcamCapabilities].Selected)                              _OnCapabilitiesEvent();                          _SaveConfig();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsRecord,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsRecord.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _SaveMicConfig();                          CGraphics.FadeTo(EScreen.Options);                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveMicConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                          {                              _SaveMicConfig();                              CGraphics.FadeTo(EScreen.Options);                          }                            if (_Buttons[_ButtonDelayTest].Selected)                              _TestDelay();                            break;                        case Keys.D:                          _TestDelay();                          break;                        case Keys.Left:                          _SelectSlideAction();                          break;                        case Keys.Right:                          _SelectSlideAction();                          break;                  }
Missing Default,Vocaluxe.Screens,CScreenOptionsTheme,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Screens\CScreenOptionsTheme.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Escape:                      case Keys.Back:                          _Close();                          break;                        case Keys.S:                          CParty.SetNormalGameMode();                          _SaveConfig();                          CGraphics.FadeTo(EScreen.Song);                          break;                        case Keys.Enter:                          if (_Buttons[_ButtonExit].Selected)                              _Close();                          break;                        case Keys.Left:                          _OnChange();                          break;                        case Keys.Right:                          _OnChange();                          break;                  }
Missing Default,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_ParseIR,The following switch statement is missing a default case: switch (_WiiMoteState.IRState.Mode)              {                  case EIRMode.Basic:                      _WiiMoteState.IRState.Sensors[0].Active = !(buff[6] == 0xff && buff[7] == 0xff);                      if (_WiiMoteState.IRState.Sensors[0].Active)                      {                          _WiiMoteState.IRState.Sensors[0].Position.X = buff[6] | ((buff[8] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Position.Y = buff[7] | ((buff[8] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[0].Width = 0;                      }                      _WiiMoteState.IRState.Sensors[1].Active = !(buff[9] == 0xff && buff[10] == 0xff);                      if (_WiiMoteState.IRState.Sensors[1].Active)                      {                          _WiiMoteState.IRState.Sensors[1].Position.X = buff[9] | ((buff[8] >> 0) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Position.Y = buff[10] | ((buff[8] >> 2) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[1].Width = 0;                      }                      break;                  case EIRMode.Extended:                      for (int i = 0; i < 4; i++)                      {                          _WiiMoteState.IRState.Sensors[i].Active = !(buff[6 + i * 3] == 0xff && buff[7 + i * 3] == 0xff && buff[8 + i * 3] == 0xff);                          if (!_WiiMoteState.IRState.Sensors[i].Active)                              continue;                          _WiiMoteState.IRState.Sensors[i].Position.X = buff[6 + i * 3] | ((buff[8 + i * 3] >> 4) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Position.Y = buff[7 + i * 3] | ((buff[8 + i * 3] >> 6) & 0x03) << 8;                          _WiiMoteState.IRState.Sensors[i].Width = buff[8 + i * 3] & 0x0f;                      }                      break;              }
Missing Default,Vocaluxe.Lib.Input.WiiMote,CWiiMoteLib,D:\research\architectureSmells\repos\Vocaluxe_Vocaluxe\Vocaluxe\Lib\Input\WiiMote\WiiMoteLib.cs,_EnableIR,The following switch statement is missing a default case: switch (sensitivity)              {                  case EIRSensitivity.Level1:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x64' 0x00' 0xfe});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xfd' 0x05});                      break;                  case EIRSensitivity.Level2:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0x96' 0x00' 0xb4});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0xb3' 0x04});                      break;                  case EIRSensitivity.Level3:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xaa' 0x00' 0x64});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x63' 0x03});                      break;                  case EIRSensitivity.Level4:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x02' 0x00' 0x00' 0x71' 0x01' 0x00' 0xc8' 0x00' 0x36});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x35' 0x03});                      break;                  case EIRSensitivity.Level5:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x07' 0x00' 0x00' 0x71' 0x01' 0x00' 0x72' 0x00' 0x20});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x1' 0x03});                      break;                  case EIRSensitivity.Max:                      _WriteData(_RegisterIRSensitivity1' 9' new byte[] {0x00' 0x00' 0x00' 0x00' 0x00' 0x00' 0x90' 0x00' 0x41});                      Thread.Sleep(50);                      _WriteData(_RegisterIRSensitivity2' 2' new byte[] {0x40' 0x00});                      break;              }
