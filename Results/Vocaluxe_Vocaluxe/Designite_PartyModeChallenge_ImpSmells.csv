Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateScores,Cyclomatic complexity of the method is 14
Complex Method,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,HandleMouse,Cyclomatic complexity of the method is 16
Long Statement,VocaluxeLib.PartyModes.Challenge,CChallengeRounds,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CChallengeRounds.cs,_GetMatchingCombination,The length of the statement  "            // It may happen' that there are only players that already sung against each other. So create a 2nd best option with the most number of players that should sing in it " is 166.
Long Statement,VocaluxeLib.PartyModes.Challenge,CChallengeRounds,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CChallengeRounds.cs,_GetMatchingCombination,The length of the statement  "            // And select the combination that minimizes the sum of the number of songs sung (--> favor rounds with players that sung less than others) " is 139.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeSongs,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeSongs.cs,_SetAllowedOptions,The length of the statement  "            AllowedSongModes = new EGameMode[] { EGameMode.TR_GAMEMODE_NORMAL' EGameMode.TR_GAMEMODE_SHORTSONG' EGameMode.TR_GAMEMODE_MEDLEY }; " is 131.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,SetDefaults,The length of the statement  "            if (CBase.Config.GetTabs() == EOffOn.TR_CONFIG_ON && _ScreenSongOptions.Sorting.SongSorting != ESongSorting.TR_CONFIG_NONE) " is 123.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateSongList,The length of the statement  "                    GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(EGameMode.TR_GAMEMODE_MEDLEY)).Select(song => song.ID)); " is 135.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateSongList,The length of the statement  "                    GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(EGameMode.TR_GAMEMODE_MEDLEY)).Select(song => song.ID)); " is 135.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateScores,The length of the statement  "                    var row = new CResultTableRow {PlayerID = GameData.ProfileIDs[i]' NumPlayed = 0' NumWon = 0' NumSingPoints = 0' NumGamePoints = 0}; " is 131.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_GetPointsForPlayer,The length of the statement  "                var stat = new SStats {ProfileID = results[i].ProfileID' SingPoints = (int)Math.Round(results[i].Points)' Won = 0' GamePoints = 0}; " is 131.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_CreateCatSongIndices,The length of the statement  "            if (GameData.CatSongIndices == null && CBase.Songs.GetNumCategories() > 0 && _ScreenSongOptions.Sorting.Tabs == EOffOn.TR_CONFIG_ON) " is 132.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeConfig,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeConfig.cs,Init,The length of the statement  "            _ThemeSelectSlides = new string[] { _SelectSlideNumPlayers' _SelectSlideNumMics' _SelectSlideNumRounds' _SelectSlideNumJokers' _SelectSlideRefillJokers }; " is 154.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeConfig,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeConfig.cs,_SetRoundSteps,The length of the statement  "            if (_PartyMode.GameData.NumPlayerAtOnce < 1 || _PartyMode.GameData.NumPlayer < 1 || _PartyMode.GameData.NumPlayerAtOnce > _PartyMode.GameData.NumPlayer) " is 152.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,Init,The length of the statement  "                    _TextPosition' _TextPlayerName' _TextNumPlayed' _TextWon' _TextSingPoints' _TextGamePoints' _TextNextPlayer' _TextPopupReallyExit' _TextRoundNumber' " is 148.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,Init,The length of the statement  "                    _ButtonNextRound' _ButtonBack' _ButtonExit' _ButtonPopupYes' _ButtonPopupNo' _ButtonPlayerScrollDown' _ButtonPlayerScrollUp' _ButtonRoundsScrollDown' " is 149.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The length of the statement  "                      ((_PartyMode.GameData.NumPlayerAtOnce * _Statics[_StaticNextPlayer].Rect.W) + ((_PartyMode.GameData.NumPlayerAtOnce - 1) * 15)) / 2; " is 132.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerContents,The length of the statement  "                    Guid id = _PartyMode.GameData.ProfileIDs[_PartyMode.GameData.Rounds[_PartyMode.GameData.CurrentRoundNr - 1].Players[i]]; " is 120.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The length of the statement  "                        float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) + " is 148.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateRoundsTable,The length of the statement  "                    if (_PartyMode.GameData.Rounds.Count > i + _RoundsTableOffset && _PartyMode.GameData.Rounds[i + _RoundsTableOffset].Players.Count > p) " is 134.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateRoundsTable,The length of the statement  "                            CBase.Profiles.GetPlayerName(_PartyMode.GameData.ProfileIDs[_PartyMode.GameData.Rounds[i + _RoundsTableOffset].Players[p]]); " is 124.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateRoundsTable,The length of the statement  "            _Buttons[_ButtonRoundsScrollDown].Visible = _PartyMode.GameData.Rounds.Count - _NumRoundsVisible - _RoundsTableOffset > 0; " is 122.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildPlayerTable,The length of the statement  "            _PlayerTableScrollArea = new SRectF {X = _Texts[_TextPosition].X' Y = _Texts[_TextPosition].Y' W = _Texts[_TextGamePoints].X - _Texts[_TextPosition].X}; " is 152.
Long Statement,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdatePlayerTable,The length of the statement  "            _Buttons[_ButtonPlayerScrollDown].Visible = _PartyMode.GameData.ProfileIDs.Count - _NumPlayerVisible - _PlayerTableOffset > 0; " is 126.
Magic Number,VocaluxeLib.PartyModes.Challenge,CChallengeRounds,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CChallengeRounds.cs,_BuildRounds,The following statement contains a magic number: for (int i = 0; i < numRounds * 10; i++)              {                  if (combinations.Count == 0)                      _AddCombinations(numPlayer' playersPerRound' combinations);                  List<int> playersInRound = _GetPlayersForRound(numSung);                  CRound curRound = _GetMatchingCombination(playersInRound' numSung' combinations);                  foreach (int player in curRound.Players)                      numSung[player]++;                  _Rounds.Add(curRound);                  combinations.Remove(curRound);                  //Stop if we have enough rounds and all players sung the same amount of songs                  if (_Rounds.Count >= numRounds && numSung.All(ct => ct == numSung[0]))                      break;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: _ScreenSongOptions.Selection.NumJokers = new int[] {5' 5};
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: _ScreenSongOptions.Selection.NumJokers = new int[] {5' 5};
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: GameData = new SData              {                  NumPlayer = 4'                  NumPlayerAtOnce = 2'                  NumRounds = 12'                  NumJokers = 5'                  RefillJokers = true'                  CurrentRoundNr = 1'                  ProfileIDs = new List<Guid>()'                  Sorting = CBase.Config.GetSongSorting()'                  SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                  PlaylistID = 0'                  CategoryIndex = 0'                  GameMode = EGameMode.TR_GAMEMODE_NORMAL'                  NumMedleySongs = 5'                  CatSongIndices = null'                  Results = null'                  Songs = new List<int>()              };
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: GameData = new SData              {                  NumPlayer = 4'                  NumPlayerAtOnce = 2'                  NumRounds = 12'                  NumJokers = 5'                  RefillJokers = true'                  CurrentRoundNr = 1'                  ProfileIDs = new List<Guid>()'                  Sorting = CBase.Config.GetSongSorting()'                  SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                  PlaylistID = 0'                  CategoryIndex = 0'                  GameMode = EGameMode.TR_GAMEMODE_NORMAL'                  NumMedleySongs = 5'                  CatSongIndices = null'                  Results = null'                  Songs = new List<int>()              };
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: GameData = new SData              {                  NumPlayer = 4'                  NumPlayerAtOnce = 2'                  NumRounds = 12'                  NumJokers = 5'                  RefillJokers = true'                  CurrentRoundNr = 1'                  ProfileIDs = new List<Guid>()'                  Sorting = CBase.Config.GetSongSorting()'                  SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                  PlaylistID = 0'                  CategoryIndex = 0'                  GameMode = EGameMode.TR_GAMEMODE_NORMAL'                  NumMedleySongs = 5'                  CatSongIndices = null'                  Results = null'                  Songs = new List<int>()              };
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: GameData = new SData              {                  NumPlayer = 4'                  NumPlayerAtOnce = 2'                  NumRounds = 12'                  NumJokers = 5'                  RefillJokers = true'                  CurrentRoundNr = 1'                  ProfileIDs = new List<Guid>()'                  Sorting = CBase.Config.GetSongSorting()'                  SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                  PlaylistID = 0'                  CategoryIndex = 0'                  GameMode = EGameMode.TR_GAMEMODE_NORMAL'                  NumMedleySongs = 5'                  CatSongIndices = null'                  Results = null'                  Songs = new List<int>()              };
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,CPartyModeChallenge,The following statement contains a magic number: GameData = new SData              {                  NumPlayer = 4'                  NumPlayerAtOnce = 2'                  NumRounds = 12'                  NumJokers = 5'                  RefillJokers = true'                  CurrentRoundNr = 1'                  ProfileIDs = new List<Guid>()'                  Sorting = CBase.Config.GetSongSorting()'                  SongSource = ESongSource.TR_SONGSOURCE_ALLSONGS'                  PlaylistID = 0'                  CategoryIndex = 0'                  GameMode = EGameMode.TR_GAMEMODE_NORMAL'                  NumMedleySongs = 5'                  CatSongIndices = null'                  Results = null'                  Songs = new List<int>()              };
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateScores,The following statement contains a magic number: for (int j = 0; j < GameData.NumPlayerAtOnce; j++)                  GameData.Results[GameData.CurrentRoundNr - 2' j] = (int)Math.Round(results[j].Points);
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_GetPointsForPlayer,The following statement contains a magic number: for (int i = result.Count - 1; i >= 0; i--)              {                  SStats res = result[i];                    if (i < result.Count - 1)                  {                      if (current > res.SingPoints)                      {                          res.GamePoints = i * 2;                          wonset = true;                          points = res.GamePoints;                      }                      else                      {                          if (!wonset)                              res.Won = 1;                          res.GamePoints = points;                      }                  }                  else                  {                      res.GamePoints = i * 2;                      res.Won = 1;                  }                    current = res.SingPoints;                    result[i] = res;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_GetPointsForPlayer,The following statement contains a magic number: for (int i = result.Count - 1; i >= 0; i--)              {                  SStats res = result[i];                    if (i < result.Count - 1)                  {                      if (current > res.SingPoints)                      {                          res.GamePoints = i * 2;                          wonset = true;                          points = res.GamePoints;                      }                      else                      {                          if (!wonset)                              res.Won = 1;                          res.GamePoints = points;                      }                  }                  else                  {                      res.GamePoints = i * 2;                      res.Won = 1;                  }                    current = res.SingPoints;                    result[i] = res;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeConfig,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeConfig.cs,_RebuildSlides,The following statement contains a magic number: for (int i = 1; i <= 10; i++)              {                  _SelectSlides[_SelectSlideNumJokers].AddValue(i.ToString());              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,OnShow,The following statement contains a magic number: if (_PartyMode.GameData.CurrentRoundNr == 1)                  _BuildRoundsTable();              else                  _ScrollRoundsTable(_PartyMode.GameData.CurrentRoundNr - 2);
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: float x = (float)CBase.Settings.GetRenderW() / 2 -                        ((_PartyMode.GameData.NumPlayerAtOnce * _Statics[_StaticNextPlayer].Rect.W) + ((_PartyMode.GameData.NumPlayerAtOnce - 1) * 15)) / 2;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: float x = (float)CBase.Settings.GetRenderW() / 2 -                        ((_PartyMode.GameData.NumPlayerAtOnce * _Statics[_StaticNextPlayer].Rect.W) + ((_PartyMode.GameData.NumPlayerAtOnce - 1) * 15)) / 2;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: float x = (float)CBase.Settings.GetRenderW() / 2 -                        ((_PartyMode.GameData.NumPlayerAtOnce * _Statics[_StaticNextPlayer].Rect.W) + ((_PartyMode.GameData.NumPlayerAtOnce - 1) * 15)) / 2;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: const float staticY = 590;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: const float textY = 550;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: for (int i = 0; i < _PartyMode.GameData.NumPlayerAtOnce; i++)              {                  //static                  _NextPlayerStatics[i].X = x;                  _NextPlayerStatics[i].Y = staticY;                  _NextPlayerStatics[i].Visible = true;                  //text                  _NextPlayerTexts[i].X = x + _Statics[_StaticNextPlayer].Rect.W / 2;                  _NextPlayerTexts[i].Y = textY;                  _NextPlayerTexts[i].Visible = true;                    x += _Statics[_StaticNextPlayer].Rect.W + 15;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_UpdateNextPlayerPositions,The following statement contains a magic number: for (int i = 0; i < _PartyMode.GameData.NumPlayerAtOnce; i++)              {                  //static                  _NextPlayerStatics[i].X = x;                  _NextPlayerStatics[i].Y = staticY;                  _NextPlayerStatics[i].Visible = true;                  //text                  _NextPlayerTexts[i].X = x + _Statics[_StaticNextPlayer].Rect.W / 2;                  _NextPlayerTexts[i].Y = textY;                  _NextPlayerTexts[i].Visible = true;                    x += _Statics[_StaticNextPlayer].Rect.W + 15;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_CreateRoundsTable,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  var rtr = new CRoundsTableRow {TextPlayer = new List<CText>()' TextScores = new List<CText>()};                  _RoundsTable.Add(rtr);              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_CreateRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  CText text = GetNewText(_Texts[_TextRoundNumber]);                  _AddText(text);                  roundRow.Number = text;                  for (int row = 0; row < 2; row++)                  {                      for (int column = 0; column < 3; column++)                      {                          //Player                          text = GetNewText(_Texts[_TextRoundPlayer]);                          _AddText(text);                          roundRow.TextPlayer.Add(text);                          //Score                          text = GetNewText(_Texts[_TextRoundScore]);                          _AddText(text);                          roundRow.TextScores.Add(text);                      }                  }              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_CreateRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  CText text = GetNewText(_Texts[_TextRoundNumber]);                  _AddText(text);                  roundRow.Number = text;                  for (int row = 0; row < 2; row++)                  {                      for (int column = 0; column < 3; column++)                      {                          //Player                          text = GetNewText(_Texts[_TextRoundPlayer]);                          _AddText(text);                          roundRow.TextPlayer.Add(text);                          //Score                          text = GetNewText(_Texts[_TextRoundScore]);                          _AddText(text);                          roundRow.TextScores.Add(text);                      }                  }              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: const int numPlayerInOneRow = 3;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: _NumRoundsVisible = _PartyMode.GameData.NumPlayerAtOnce <= numPlayerInOneRow ? 5 : 3;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: _NumRoundsVisible = _PartyMode.GameData.NumPlayerAtOnce <= numPlayerInOneRow ? 5 : 3;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: _RoundsTableScrollArea.W = CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20;
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildRoundsTable,The following statement contains a magic number: foreach (CRoundsTableRow roundRow in _RoundsTable)              {                  //Round-number                  roundRow.Number.X = numberX;                  roundRow.Number.Y = numberY;                  var numInnerRows = (int)Math.Ceiling(_PartyMode.GameData.NumPlayerAtOnce / ((double)numPlayerInOneRow));                  for (int row = 0; row < numInnerRows; row++)                  {                      int num = (row + 1) * numPlayerInOneRow;                      int numPlayerInThisRow = numPlayerInOneRow;                      if (num > _PartyMode.GameData.NumPlayerAtOnce)                      {                          num = _PartyMode.GameData.NumPlayerAtOnce;                          numPlayerInThisRow = _PartyMode.GameData.NumPlayerAtOnce - (row * numPlayerInOneRow);                      }                      for (int column = row * numPlayerInOneRow; column < num; column++)                      {                          //Player                          float x = numberX + 15 + (CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow * (column - row * numPlayerInOneRow) +                                    ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2;                          float maxw = ((CBase.Settings.GetRenderW() - _Texts[_TextRoundNumber].X - 20) / numPlayerInThisRow) / 2 - 5;                          roundRow.TextPlayer[column].X = x;                          roundRow.TextPlayer[column].Y = numberY;                          roundRow.TextPlayer[column].W = maxw;                          //Score                          roundRow.TextScores[column].X = x;                          roundRow.TextScores[column].Y = numberY + delta;                          roundRow.TextScores[column].W = maxw;                      }                      numberY = numberY + 2 * delta;                  }                  numberY = numberY + delta / 2;              }
Magic Number,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,_BuildPlayerTable,The following statement contains a magic number: for (int i = 0; i < 10; i++)              {                  var row = new STableRow                      {                          Pos = GetNewText(_Texts[_TextPosition])'                          Name = GetNewText(_Texts[_TextPlayerName])'                          Rounds = GetNewText(_Texts[_TextNumPlayed])'                          Won = GetNewText(_Texts[_TextWon])'                          SingPoints = GetNewText(_Texts[_TextSingPoints])'                          GamePoints = GetNewText(_Texts[_TextGamePoints])                      };                    row.Pos.Y += delta * (i + 1);                  row.Name.Y += delta * (i + 1);                  row.Rounds.Y += delta * (i + 1);                  row.Won.Y += delta * (i + 1);                  row.SingPoints.Y += delta * (i + 1);                  row.GamePoints.Y += delta * (i + 1);                    row.Pos.Text = (i + 1) + ".";                    row.Pos.Visible = false;                  row.Name.Visible = false;                  row.Rounds.Visible = false;                  row.Won.Visible = false;                  row.SingPoints.Visible = false;                  row.GamePoints.Visible = false;                    _AddText(row.Pos);                  _AddText(row.Name);                  _AddText(row.Rounds);                  _AddText(row.Won);                  _AddText(row.SingPoints);                  _AddText(row.GamePoints);                    _PlayerTable.Add(row);                    h = delta * (i + 1);              }
Missing Default,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,GetScreenSongOptions,The following switch statement is missing a default case: switch(GameData.SongSource)              {                  case ESongSource.TR_SONGSOURCE_ALLSONGS:                      _ScreenSongOptions.Sorting.SongSorting = CBase.Config.GetSongSorting();                      _ScreenSongOptions.Sorting.Tabs = CBase.Config.GetTabs();                      _ScreenSongOptions.Sorting.FilterPlaylistID = -1;                        _ScreenSongOptions.Selection.CategoryChangeAllowed = true;                      break;                    case ESongSource.TR_SONGSOURCE_CATEGORY:                      _ScreenSongOptions.Sorting.SongSorting = GameData.Sorting;                      _ScreenSongOptions.Sorting.Tabs = EOffOn.TR_CONFIG_ON;                      _ScreenSongOptions.Sorting.FilterPlaylistID = -1;                        if (GameData.CatSongIndices == null)                          _CreateCatSongIndices();                        _ScreenSongOptions.Selection.SongIndex = GameData.CatSongIndices[GameData.CategoryIndex];                        _ScreenSongOptions.Selection.CategoryChangeAllowed = false;                      break;                    case ESongSource.TR_SONGSOURCE_PLAYLIST:                      _ScreenSongOptions.Sorting.SongSorting = CBase.Config.GetSongSorting();                      _ScreenSongOptions.Sorting.Tabs = EOffOn.TR_CONFIG_OFF;                      _ScreenSongOptions.Sorting.FilterPlaylistID = GameData.PlaylistID;                        _ScreenSongOptions.Selection.CategoryChangeAllowed = false;                      break;              }
Missing Default,VocaluxeLib.PartyModes.Challenge,CPartyModeChallenge,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyModeChallenge.cs,_UpdateSongList,The following switch statement is missing a default case: switch (GameData.SongSource)              {                  case ESongSource.TR_SONGSOURCE_PLAYLIST:                      for (int i = 0; i < CBase.Playlist.GetSongCount(GameData.PlaylistID); i++)                      {                          int id = CBase.Playlist.GetSong(GameData.PlaylistID' i).SongID;                          if (CBase.Songs.GetSongByID(id).AvailableGameModes.Contains(EGameMode.TR_GAMEMODE_MEDLEY))                              GameData.Songs.Add(id);                      }                      break;                    case ESongSource.TR_SONGSOURCE_ALLSONGS:                      ReadOnlyCollection<CSong> avSongs = CBase.Songs.GetSongs();                      GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(EGameMode.TR_GAMEMODE_MEDLEY)).Select(song => song.ID));                      break;                    case ESongSource.TR_SONGSOURCE_CATEGORY:                      CBase.Songs.SetCategory(GameData.CategoryIndex);                      avSongs = CBase.Songs.GetVisibleSongs();                      GameData.Songs.AddRange(avSongs.Where(song => song.AvailableGameModes.Contains(EGameMode.TR_GAMEMODE_MEDLEY)).Select(song => song.ID));                        CBase.Songs.SetCategory(-1);                      break;              }
Missing Default,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeConfig,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeConfig.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          _PartyMode.Back();                          break;                        case Keys.Enter:                          _UpdateSlides();                            if (_Buttons[_ButtonBack].Selected)                              _PartyMode.Back();                            if (_Buttons[_ButtonNext].Selected)                              _PartyMode.Next();                          break;                        case Keys.Left:                          _UpdateSlides();                          break;                        case Keys.Right:                          _UpdateSlides();                          break;                  }
Missing Default,VocaluxeLib.PartyModes.Challenge,CPartyScreenChallengeMain,C:\repos\Vocaluxe_Vocaluxe\PartyModes\PartyModeChallenge\CPartyScreenChallengeMain.cs,HandleInput,The following switch statement is missing a default case: switch (keyEvent.Key)                  {                      case Keys.Back:                      case Keys.Escape:                          if (!_ExitPopupVisible)                          {                              if (_PartyMode.GameData.CurrentRoundNr == 1)                                  _PartyMode.Back();                              else                                  _ShowPopup(true);                          }                          else                              _ShowPopup(false);                          break;                        case Keys.Enter:                          if (!_ExitPopupVisible)                          {                              if (_Buttons[_ButtonNextRound].Selected)                                  _PartyMode.Next();                              if (_Buttons[_ButtonBack].Selected && _PartyMode.GameData.CurrentRoundNr == 1)                                  _PartyMode.Back();                              if (_Buttons[_ButtonExit].Selected && _PartyMode.GameData.CurrentRoundNr > 1)                                  _ShowPopup(true);                              if (_Buttons[_ButtonPlayerScrollUp].Selected)                                  _ScrollPlayerTable(-1);                              if (_Buttons[_ButtonPlayerScrollDown].Selected)                                  _ScrollPlayerTable(1);                              if (_Buttons[_ButtonRoundsScrollUp].Selected)                                  _ScrollRoundsTable(-1);                              if (_Buttons[_ButtonRoundsScrollDown].Selected)                                  _ScrollRoundsTable(1);                          }                          else                          {                              if (_Buttons[_ButtonPopupYes].Selected)                                  _EndParty();                              if (_Buttons[_ButtonPopupNo].Selected)                                  _ShowPopup(false);                          }                          break;                  }
