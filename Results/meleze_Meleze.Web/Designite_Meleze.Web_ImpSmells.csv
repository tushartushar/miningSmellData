Implementation smell,Namespace,Class,File,Method,Description
Long Method,Meleze.Web.Razor,MinifyHtmlWebRazorHostFactory,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlWebRazorHostFactory3.cs,MinifyHtmlWebRazorHostFactory,The method has 105 lines of code.
Complex Method,Meleze.Web.Razor,MinifyHtmlWebRazorHostFactory,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlWebRazorHostFactory3.cs,MinifyHtmlWebRazorHostFactory,Cyclomatic complexity of the method is 9
Long Parameter List,Meleze.Web.Mvc,LocalHttpContext,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\LocalRenderer.cs,LocalHttpContext,The method has 5 parameters. Parameters: url' rawUrl' applicationPath' utility' cache
Long Parameter List,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyAggressivelyHTML,The method has 5 parameters. Parameters: content' builder' previousTokenEndsWithBlockElement' previousIsWhiteSpace' insideScript
Long Parameter List,Meleze.Web.Razor,MinifyHtmlVBCodeGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlVBCodeGenerator.cs,MinifyHtmlVBCodeGenerator,The method has 5 parameters. Parameters: generator' className' rootNamespaceName' sourceFileName' host
Long Parameter List,Meleze.Web.Razor,MinifyHtmlCSharpCodeGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlCSharpCodeGenerator.cs,MinifyHtmlCSharpCodeGenerator,The method has 5 parameters. Parameters: generator' className' rootNamespaceName' sourceFileName' host
Long Parameter List,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,WriteCSSRule,The method has 6 parameters. Parameters: fileName' x' y' width' height' cssRules
Long Identifier,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,AnalyseContent,The length of the parameter previousTokenEndsWithBlockElement is 33.
Long Identifier,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,Minify,The length of the parameter previousTokenEndsWithBlockElement is 33.
Long Identifier,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyAggressivelyHTML,The length of the parameter previousTokenEndsWithBlockElement is 33.
Long Identifier,Meleze.Web.Razor,MinifyHtmlCodeGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlCodeGenerator.cs,,The length of the parameter _previousTokenEndsWithBlockElement is 34.
Long Statement,Meleze.Web.Mvc,LastModifiedCacheAttribute,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\LastModifiedCacheAttribute.cs,OnAuthorization,The length of the statement  "            var notModified = (modifiedSinceHeader != null) && (DateTime.TryParseExact(modifiedSinceHeader' "R"' null' System.Globalization.DateTimeStyles.None' out modifiedSince)) && (lastModified <= modifiedSince); " is 204.
Long Statement,Meleze.Web.Mvc,LocalRenderer,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\LocalRenderer.cs,InvokeAction,The length of the statement  "            var virtualPath = RouteTable.Routes.GetVirtualPath(new RequestContext(new HttpContextWrapper(currentContext)' routeData)' routeData.Values); " is 140.
Long Statement,Meleze.Web.Mvc,LocalRenderer,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\LocalRenderer.cs,InvokeAction,The length of the statement  "            var httpContext = new LocalHttpContext(baseUrl' virtualPath.VirtualPath' currentContext.Request.ApplicationPath' currentContext.Server' currentContext.Cache); " is 158.
Long Statement,Meleze.Web.Mvc,TimestampedCacheAttribute,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\TimestampedCacheAttribute.cs,GetTimestampedPath,The length of the statement  "                    var routeData = System.Web.Routing.RouteTable.Routes.GetRouteData(new TimestampedHttpContext(path' currentContext.Request.PathInfo' currentContext)); " is 149.
Long Statement,Meleze.Web.Mvc,HashingStream,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\TimestampedCacheAttribute.cs,Close,The length of the statement  "                _timestampedPaths[_path] = new TimestampState() { timestampedPath = _path + "?_ts=" + _hash.ToString("X")' timestamps = _timestamps }; " is 134.
Long Statement,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,Minify,The length of the statement  "                content = MinifyAggressivelyHTML(content' builder' previousTokenEndsWithBlockElement' previousIsWhiteSpace' insideScript); " is 122.
Long Statement,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,StartsWithBlockElement,The length of the statement  "            return content[0] == '<' && (_blockElementsOpenStarts.Any(b => content.StartsWith(b)) || _blockElementsCloseStarts.Any(b => content.StartsWith(b))); " is 148.
Long Statement,Meleze.Web.Razor,MinifyHtmlMvcWebPageRazorHost,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMvcWebPageRazorHost.cs,DecorateCodeGenerator,The length of the statement  "                    return new MinifyHtmlCSharpCodeGenerator(generator' incomingCodeGenerator.ClassName' incomingCodeGenerator.RootNamespaceName' incomingCodeGenerator.SourceFileName' incomingCodeGenerator.Host); " is 192.
Long Statement,Meleze.Web.Razor,MinifyHtmlMvcWebPageRazorHost,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMvcWebPageRazorHost.cs,DecorateCodeGenerator,The length of the statement  "                    return new MinifyHtmlVBCodeGenerator(generator' incomingCodeGenerator.ClassName' incomingCodeGenerator.RootNamespaceName' incomingCodeGenerator.SourceFileName' incomingCodeGenerator.Host); " is 188.
Long Statement,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,Generate,The length of the statement  "                            graphics.DrawImage(sourceImg' new Rectangle(x' y' sourceImg.Width' sourceImg.Height)' new Rectangle(0' 0' sourceImg.Width' sourceImg.Height)' GraphicsUnit.Pixel); " is 162.
Complex Conditional,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascript,The conditional expression  "(insideScript && iscriptstart == 0) || (iscriptend < 0) || ((iscriptautoend > 0) && (iscriptautoend < iscriptend))"  is complex.
Empty Catch Block,Meleze.Web.Razor,MinifyHtmlWebRazorHostFactory,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlWebRazorHostFactory3.cs,MinifyHtmlWebRazorHostFactory,The method has an empty catch block.
Empty Catch Block,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascript,The method has an empty catch block.
Empty Catch Block,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyInlineCSS,The method has an empty catch block.
Empty Catch Block,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,Generate,The method has an empty catch block.
Magic Number,Meleze.Web.Mvc,LastModifiedCacheAttribute,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\LastModifiedCacheAttribute.cs,OnAuthorization,The following statement contains a magic number: if (notModified)              {                  // There is no need to compute the response as it has not changed                  // since the last request                  filterContext.HttpContext.Response.StatusCode = 304;                  filterContext.Result = new ContentResult();              }              else              {                  filterContext.HttpContext.Response.AppendHeader("Last-Modified"' lastModified.ToString("R"));              }
Magic Number,Meleze.Web.Mvc,HashingStream,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\TimestampedCacheAttribute.cs,Write,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)                  {                      _hash += (buffer[i] << ((i % 4) * 8));                  }
Magic Number,Meleze.Web.Mvc,HashingStream,C:\repos\meleze_Meleze.Web\Meleze.Web\Mvc\TimestampedCacheAttribute.cs,Write,The following statement contains a magic number: for (int i = offset; i < offset + count; i++)                  {                      _hash += (buffer[i] << ((i % 4) * 8));                  }
Magic Number,Meleze.Web.Razor,MinifyHtmlWebRazorHostFactory,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlWebRazorHostFactory3.cs,MinifyHtmlWebRazorHostFactory,The following statement contains a magic number: try              {                  if ((minifyJS == null) || (minifyCSS == null))                  {                      // Minification using the SWO transforms                      var swo = Assembly.Load("System.Web.Optimization");                      if (swo != null)                      {                          var bundleCollectionType = swo.GetType("System.Web.Optimization.BundleCollection");                          var bundleContextType = swo.GetType("System.Web.Optimization.BundleContext");                          var bundleContextConstructor = bundleContextType.GetConstructor(new Type[] { typeof(HttpContextBase)' bundleCollectionType' typeof(string) });                          var bundleReponseType = swo.GetType("System.Web.Optimization.BundleResponse");                          var bundleReponseConstructor = bundleReponseType.GetConstructors()[0];                          var bundleReponseContentProperty = bundleReponseType.GetProperty("Content");                          var bundleTransformType = swo.GetType("System.Web.Optimization.IBundleTransform");                          var bundleTransformProcessMethod = bundleTransformType.GetMethod("Process");                            var httpContext = new EmptyHttpContext();                          var bundleCollection = bundleCollectionType.GetConstructor(Type.EmptyTypes).Invoke(null);                          var bundleContext = bundleContextConstructor.Invoke(new object[] { httpContext' bundleCollection' "" });                            if (minifyCSS == null)                          {                              var cssMinifyType = swo.GetType("System.Web.Optimization.CssMinify");                              var cssMinify = cssMinifyType.GetConstructor(Type.EmptyTypes).Invoke(null);                                minifyCSS = delegate(string code)                              {                                  var bundleReponse = bundleReponseConstructor.Invoke(new object[] { null' null });                                  bundleReponseContentProperty.SetValue(bundleReponse' code' null);                                    bundleTransformProcessMethod.Invoke(cssMinify' new object[] { bundleContext' bundleReponse });                                    var minifiedCode = (string)bundleReponseContentProperty.GetValue(bundleReponse' null);                                  return minifiedCode;                              };                          }                          if (minifyJS == null)                          {                              var jsMinifyType = swo.GetType("System.Web.Optimization.JsMinify");                              var jsMinify = jsMinifyType.GetConstructor(Type.EmptyTypes).Invoke(null);                                minifyJS = delegate(string code)                              {                                  var bundleReponse = bundleReponseConstructor.Invoke(new object[] { null' null });                                  bundleReponseContentProperty.SetValue(bundleReponse' code' null);                                    bundleTransformProcessMethod.Invoke(jsMinify' new object[] { bundleContext' bundleReponse });                                    var minifiedCode = (string)bundleReponseContentProperty.GetValue(bundleReponse' null);                                  return minifiedCode;                              };                          }                      }                  }                    if ((minifyJS == null) || (minifyCSS == null))                  {                      // Minification using Microsoft AjaxMin                      var ajaxmin = Assembly.Load("ajaxmin");                      if (ajaxmin != null)                      {                          var minifierType = ajaxmin.GetType("Microsoft.Ajax.Utilities.Minifier");                          var min = minifierType.GetConstructor(Type.EmptyTypes).Invoke(null);                            if (minifyJS == null)                          {                              // JS                              var codeSettingsType = ajaxmin.GetType("Microsoft.Ajax.Utilities.CodeSettings");                              var localRenamingProperty = codeSettingsType.GetProperty("LocalRenaming");                              var minifyJavaScriptMethod = minifierType.GetMethod("MinifyJavaScript"' new Type[] { typeof(string)' codeSettingsType });                                var scsettings = codeSettingsType.GetConstructor(Type.EmptyTypes).Invoke(null);                              localRenamingProperty.SetValue(scsettings' 1' null);                                minifyJS = delegate(string code)                              {                                  var minifiedCode = (string)minifyJavaScriptMethod.Invoke(min' new object[] { code' scsettings });                                  return minifiedCode;                              };                          }                            if (minifyCSS == null)                          {                              // CSS                              var cssSettingsType = ajaxmin.GetType("Microsoft.Ajax.Utilities.CssSettings");                              var commentModeProperty = cssSettingsType.GetProperty("CommentMode");                              var minifyStyleSheetMethod = minifierType.GetMethod("MinifyStyleSheet"' new Type[] { typeof(string)' cssSettingsType });                                var scsettings2 = cssSettingsType.GetConstructor(Type.EmptyTypes).Invoke(null);                              commentModeProperty.SetValue(scsettings2' 2' null);                                minifyCSS = delegate(string code)                              {                                  var minifiedCode = (string)minifyStyleSheetMethod.Invoke(min' new object[] { code' scsettings2 });                                  return minifiedCode;                              };                          }                      }                  }              }              catch              {              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyComments,The following statement contains a magic number: while (icommentstart >= 0)              {                  var icommentend = content.IndexOf("-->"' icommentstart + 3);                  if (icommentend < 0)                  {                      break;                  }                    if (_commentsMarkers.Select(m => content.IndexOf(m' icommentstart)).Any(i => i > 0 && i < icommentend))                  {                      // There is a comment but it contains javascript or IE conditionals                      // => we keep it                      break;                  }                    builder.Append(content' 0' icommentstart);                  builder.Append(content' icommentend + 3' content.Length - icommentend - 3);                  content = builder.ToString();                  builder.Clear();                    icommentstart = content.IndexOf("<!--"' icommentstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyComments,The following statement contains a magic number: while (icommentstart >= 0)              {                  var icommentend = content.IndexOf("-->"' icommentstart + 3);                  if (icommentend < 0)                  {                      break;                  }                    if (_commentsMarkers.Select(m => content.IndexOf(m' icommentstart)).Any(i => i > 0 && i < icommentend))                  {                      // There is a comment but it contains javascript or IE conditionals                      // => we keep it                      break;                  }                    builder.Append(content' 0' icommentstart);                  builder.Append(content' icommentend + 3' content.Length - icommentend - 3);                  content = builder.ToString();                  builder.Clear();                    icommentstart = content.IndexOf("<!--"' icommentstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyComments,The following statement contains a magic number: while (icommentstart >= 0)              {                  var icommentend = content.IndexOf("-->"' icommentstart + 3);                  if (icommentend < 0)                  {                      break;                  }                    if (_commentsMarkers.Select(m => content.IndexOf(m' icommentstart)).Any(i => i > 0 && i < icommentend))                  {                      // There is a comment but it contains javascript or IE conditionals                      // => we keep it                      break;                  }                    builder.Append(content' 0' icommentstart);                  builder.Append(content' icommentend + 3' content.Length - icommentend - 3);                  content = builder.ToString();                  builder.Clear();                    icommentstart = content.IndexOf("<!--"' icommentstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascript,The following statement contains a magic number: while (iscriptstart >= 0)              {                  var iscriptautoend = content.IndexOf("/>"' iscriptstart + 7);                  var iscriptend = content.IndexOf("</script>"' iscriptstart + 7);                  if ((insideScript && iscriptstart == 0) || (iscriptend < 0) || ((iscriptautoend > 0) && (iscriptautoend < iscriptend)))                  {                      content = MinifyJavascriptComments(content' builder' (insideScript && iscriptstart == 0)' ref iscriptstart);                      goto NEXT;                  }                    // We have some javascript code inside the tag                  // => we can ask a JS minifier to simplify it                  var istartcode = content.IndexOf('>'' iscriptstart) + 1;                  var iendcode = iscriptend;                  var code = content.Substring(istartcode' iendcode - istartcode);                  builder.Append(content' 0' istartcode);                    if (!string.IsNullOrWhiteSpace(code))                  {                      // We call the JS minifier by reflexion to cut the dependency.                      var minifiedCode = code;                      try                      {                          minifiedCode = _minifyJS(code);                      }                      catch                      {                      }                      builder.Append(minifiedCode);                  }                    iscriptstart = builder.Length;                    builder.Append(content' iscriptend' content.Length - iscriptend);                  content = builder.ToString();                  builder.Clear();              NEXT:                  iscriptstart = content.IndexOf("<script"' iscriptstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascript,The following statement contains a magic number: while (iscriptstart >= 0)              {                  var iscriptautoend = content.IndexOf("/>"' iscriptstart + 7);                  var iscriptend = content.IndexOf("</script>"' iscriptstart + 7);                  if ((insideScript && iscriptstart == 0) || (iscriptend < 0) || ((iscriptautoend > 0) && (iscriptautoend < iscriptend)))                  {                      content = MinifyJavascriptComments(content' builder' (insideScript && iscriptstart == 0)' ref iscriptstart);                      goto NEXT;                  }                    // We have some javascript code inside the tag                  // => we can ask a JS minifier to simplify it                  var istartcode = content.IndexOf('>'' iscriptstart) + 1;                  var iendcode = iscriptend;                  var code = content.Substring(istartcode' iendcode - istartcode);                  builder.Append(content' 0' istartcode);                    if (!string.IsNullOrWhiteSpace(code))                  {                      // We call the JS minifier by reflexion to cut the dependency.                      var minifiedCode = code;                      try                      {                          minifiedCode = _minifyJS(code);                      }                      catch                      {                      }                      builder.Append(minifiedCode);                  }                    iscriptstart = builder.Length;                    builder.Append(content' iscriptend' content.Length - iscriptend);                  content = builder.ToString();                  builder.Clear();              NEXT:                  iscriptstart = content.IndexOf("<script"' iscriptstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascriptComments,The following statement contains a magic number: var iscriptautoend = content.IndexOf("/>"' iscriptstart + 7);
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyJavascriptComments,The following statement contains a magic number: var iscriptend = content.IndexOf("</script>"' iscriptstart + 7);
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyInlineCSS,The following statement contains a magic number: while (iscriptstart >= 0)              {                  var iscriptautoend = content.IndexOf("/>"' iscriptstart + 6);                  var iscriptend = content.IndexOf("</style>"' iscriptstart + 6);                  if ((iscriptend < 0) || ((iscriptautoend > 0) && (iscriptautoend < iscriptend)))                  {                      break;                  }                    // We have some CSS code inside the tag                  // => we can ask a CSS minifier to simplify it                  var istartcode = content.IndexOf('>'' iscriptstart) + 1;                  var iendcode = iscriptend;                  var code = content.Substring(istartcode' iendcode - istartcode);                  builder.Append(content' 0' istartcode);                    if (!string.IsNullOrWhiteSpace(code))                  {                      // We call the Microsoft JS minifier by reflexion to cut the dependency.                      var minifiedCode = code;                      try                      {                          minifiedCode = _minifyCSS(code);                      }                      catch                      {                      }                      builder.Append(minifiedCode);                  }                    iscriptstart = builder.Length;                    builder.Append(content' iscriptend' content.Length - iscriptend);                  content = builder.ToString();                  builder.Clear();                    iscriptstart = content.IndexOf("<style"' iscriptstart);              }
Magic Number,Meleze.Web.Razor,MinifyHtmlMinifier,C:\repos\meleze_Meleze.Web\Meleze.Web\Razor\MinifyHtmlMinifier.cs,MinifyInlineCSS,The following statement contains a magic number: while (iscriptstart >= 0)              {                  var iscriptautoend = content.IndexOf("/>"' iscriptstart + 6);                  var iscriptend = content.IndexOf("</style>"' iscriptstart + 6);                  if ((iscriptend < 0) || ((iscriptautoend > 0) && (iscriptautoend < iscriptend)))                  {                      break;                  }                    // We have some CSS code inside the tag                  // => we can ask a CSS minifier to simplify it                  var istartcode = content.IndexOf('>'' iscriptstart) + 1;                  var iendcode = iscriptend;                  var code = content.Substring(istartcode' iendcode - istartcode);                  builder.Append(content' 0' istartcode);                    if (!string.IsNullOrWhiteSpace(code))                  {                      // We call the Microsoft JS minifier by reflexion to cut the dependency.                      var minifiedCode = code;                      try                      {                          minifiedCode = _minifyCSS(code);                      }                      catch                      {                      }                      builder.Append(minifiedCode);                  }                    iscriptstart = builder.Length;                    builder.Append(content' iscriptend' content.Length - iscriptend);                  content = builder.ToString();                  builder.Clear();                    iscriptstart = content.IndexOf("<style"' iscriptstart);              }
Magic Number,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,Generate,The following statement contains a magic number: try              {                  sourceTokens.AddRange(sources.Select(s => new Tuple<string' Image>(s.Item1' Image.FromStream(s.Item2))));                    var totalWidth = sourceTokens.Sum(i => i.Item2.Width);                  var maxHeight = sourceTokens.Max(i => i.Item2.Height);                    var targetWidth = totalWidth + (sourceTokens.Count - 1) * HorizontalSpace;                  var targetHeight = maxHeight;                    using (var targetImg = new Bitmap(targetWidth' targetHeight' PixelFormat.Format24bppRgb))                  {                      // Screen resolution                      targetImg.SetResolution(72' 72);                      targetImg.MakeTransparent();                        using (var graphics = Graphics.FromImage(targetImg))                      {                          graphics.SmoothingMode = SmoothingMode.AntiAlias;                          graphics.CompositingQuality = CompositingQuality.HighQuality;                          graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;                          graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;                            // Add each image                          var x = 0;                          foreach (var sourceToken in sourceTokens)                          {                              var sourceName = sourceToken.Item1;                              var sourceImg = sourceToken.Item2;                                // All the images are centered vertically                              var y = (targetHeight - sourceImg.Height) / 2;                              graphics.DrawImage(sourceImg' new Rectangle(x' y' sourceImg.Width' sourceImg.Height)' new Rectangle(0' 0' sourceImg.Width' sourceImg.Height)' GraphicsUnit.Pixel);                                WriteCSSRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                              //  WriteCSSCenteredRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                                x += sourceImg.Width + HorizontalSpace;                          }                      }                        // Convert the image as PNG                      var targetStream = new MemoryStream();                      targetImg.Save(targetStream' ImageFormat.Png);                      sprite = targetStream.ToArray();                      css = cssRules.ToString();                  }              }              finally              {                  foreach (var sourceToken in sourceTokens)                  {                      try                      {                          sourceToken.Item2.Dispose();                      }                      catch                      {                        }                  }              }
Magic Number,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,Generate,The following statement contains a magic number: try              {                  sourceTokens.AddRange(sources.Select(s => new Tuple<string' Image>(s.Item1' Image.FromStream(s.Item2))));                    var totalWidth = sourceTokens.Sum(i => i.Item2.Width);                  var maxHeight = sourceTokens.Max(i => i.Item2.Height);                    var targetWidth = totalWidth + (sourceTokens.Count - 1) * HorizontalSpace;                  var targetHeight = maxHeight;                    using (var targetImg = new Bitmap(targetWidth' targetHeight' PixelFormat.Format24bppRgb))                  {                      // Screen resolution                      targetImg.SetResolution(72' 72);                      targetImg.MakeTransparent();                        using (var graphics = Graphics.FromImage(targetImg))                      {                          graphics.SmoothingMode = SmoothingMode.AntiAlias;                          graphics.CompositingQuality = CompositingQuality.HighQuality;                          graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;                          graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;                            // Add each image                          var x = 0;                          foreach (var sourceToken in sourceTokens)                          {                              var sourceName = sourceToken.Item1;                              var sourceImg = sourceToken.Item2;                                // All the images are centered vertically                              var y = (targetHeight - sourceImg.Height) / 2;                              graphics.DrawImage(sourceImg' new Rectangle(x' y' sourceImg.Width' sourceImg.Height)' new Rectangle(0' 0' sourceImg.Width' sourceImg.Height)' GraphicsUnit.Pixel);                                WriteCSSRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                              //  WriteCSSCenteredRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                                x += sourceImg.Width + HorizontalSpace;                          }                      }                        // Convert the image as PNG                      var targetStream = new MemoryStream();                      targetImg.Save(targetStream' ImageFormat.Png);                      sprite = targetStream.ToArray();                      css = cssRules.ToString();                  }              }              finally              {                  foreach (var sourceToken in sourceTokens)                  {                      try                      {                          sourceToken.Item2.Dispose();                      }                      catch                      {                        }                  }              }
Magic Number,Meleze.Web.Sprites,SpriteGenerator,C:\repos\meleze_Meleze.Web\Meleze.Web\Sprites\SpriteGenerator.cs,Generate,The following statement contains a magic number: try              {                  sourceTokens.AddRange(sources.Select(s => new Tuple<string' Image>(s.Item1' Image.FromStream(s.Item2))));                    var totalWidth = sourceTokens.Sum(i => i.Item2.Width);                  var maxHeight = sourceTokens.Max(i => i.Item2.Height);                    var targetWidth = totalWidth + (sourceTokens.Count - 1) * HorizontalSpace;                  var targetHeight = maxHeight;                    using (var targetImg = new Bitmap(targetWidth' targetHeight' PixelFormat.Format24bppRgb))                  {                      // Screen resolution                      targetImg.SetResolution(72' 72);                      targetImg.MakeTransparent();                        using (var graphics = Graphics.FromImage(targetImg))                      {                          graphics.SmoothingMode = SmoothingMode.AntiAlias;                          graphics.CompositingQuality = CompositingQuality.HighQuality;                          graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;                          graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;                            // Add each image                          var x = 0;                          foreach (var sourceToken in sourceTokens)                          {                              var sourceName = sourceToken.Item1;                              var sourceImg = sourceToken.Item2;                                // All the images are centered vertically                              var y = (targetHeight - sourceImg.Height) / 2;                              graphics.DrawImage(sourceImg' new Rectangle(x' y' sourceImg.Width' sourceImg.Height)' new Rectangle(0' 0' sourceImg.Width' sourceImg.Height)' GraphicsUnit.Pixel);                                WriteCSSRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                              //  WriteCSSCenteredRule(sourceName' x' y' sourceImg.Width' sourceImg.Height' cssRules);                                x += sourceImg.Width + HorizontalSpace;                          }                      }                        // Convert the image as PNG                      var targetStream = new MemoryStream();                      targetImg.Save(targetStream' ImageFormat.Png);                      sprite = targetStream.ToArray();                      css = cssRules.ToString();                  }              }              finally              {                  foreach (var sourceToken in sourceTokens)                  {                      try                      {                          sourceToken.Item2.Dispose();                      }                      catch                      {                        }                  }              }
