Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,Cyclomatic complexity of the method is 11
Complex Method,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,Cyclomatic complexity of the method is 16
Complex Method,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,Cyclomatic complexity of the method is 17
Complex Method,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,ListenThread,Cyclomatic complexity of the method is 8
Long Statement,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,ListenThread,The length of the statement  "			if (((IPEndPoint)clientpool [i].Client.RemoteEndPoint).ToString ().StartsWith (((IPEndPoint)c.RemoteEndPoint).ToString ().Split (':') [0])) { " is 141.
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int i = 0; i < size; ++i) {  	//Receive the rest of message.  	if (buffer.Count > 0) {  		if (!Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  			buffer.Add (data [i]);  			continue;  		}  		else  			CheckBuffer ();  	}  	if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  		//If it has a full header  		if (i + 3 > size)  			break;  		var length = (int)data [i + 1] * 256 + (int)data [i + 2];  		//If the length in the size of data  		if (i + 3 + length > size) {  			var part = new byte[size - i];  			for (int k = 0; k < size - i; ++k)  				part [k] = data [i + k];  			buffer.AddRange (part);  			break;  		}  		else {  			//Received a complete message  			var copy = new byte[3 + length];  			for (int k = 0; k < 3 + length; ++k)  				copy [k] = data [i + k];  			action (copy);  			i += 3 + length;  		}  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (Enum.IsDefined (typeof(TCPMessageType)' data [i])) {  	//If it has a full header  	if (i + 3 > size)  		break;  	var length = (int)data [i + 1] * 256 + (int)data [i + 2];  	//If the length in the size of data  	if (i + 3 + length > size) {  		var part = new byte[size - i];  		for (int k = 0; k < size - i; ++k)  			part [k] = data [i + k];  		buffer.AddRange (part);  		break;  	}  	else {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = data [i + k];  		action (copy);  		i += 3 + length;  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (i + 3 > size)  	break;  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (i + 3 + length > size) {  	var part = new byte[size - i];  	for (int k = 0; k < size - i; ++k)  		part [k] = data [i + k];  	buffer.AddRange (part);  	break;  }  else {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = data [i + k];  	action (copy);  	i += 3 + length;  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (i + 3 + length > size) {  	var part = new byte[size - i];  	for (int k = 0; k < size - i; ++k)  		part [k] = data [i + k];  	buffer.AddRange (part);  	break;  }  else {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = data [i + k];  	action (copy);  	i += 3 + length;  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (i + 3 + length > size) {  	var part = new byte[size - i];  	for (int k = 0; k < size - i; ++k)  		part [k] = data [i + k];  	buffer.AddRange (part);  	break;  }  else {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = data [i + k];  	action (copy);  	i += 3 + length;  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: if (i + 3 + length > size) {  	var part = new byte[size - i];  	for (int k = 0; k < size - i; ++k)  		part [k] = data [i + k];  	buffer.AddRange (part);  	break;  }  else {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = data [i + k];  	action (copy);  	i += 3 + length;  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: for (int k = 0; k < 3 + length; ++k)  	copy [k] = data [i + k];  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,Subpackage,The following statement contains a magic number: i += 3 + length;  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (buffer.Count >= 3) {  	var length = (int)buffer [1] * 256 + (int)buffer [2];  	if (2 + length < buffer.Count) {  		//Received a complete message  		var copy = new byte[3 + length];  		for (int k = 0; k < 3 + length; ++k)  			copy [k] = buffer [k];  		action (copy);  		buffer.RemoveRange (0' 3 + length);  	}  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (2 + length < buffer.Count) {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = buffer [k];  	action (copy);  	buffer.RemoveRange (0' 3 + length);  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (2 + length < buffer.Count) {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = buffer [k];  	action (copy);  	buffer.RemoveRange (0' 3 + length);  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (2 + length < buffer.Count) {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = buffer [k];  	action (copy);  	buffer.RemoveRange (0' 3 + length);  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: if (2 + length < buffer.Count) {  	//Received a complete message  	var copy = new byte[3 + length];  	for (int k = 0; k < 3 + length; ++k)  		copy [k] = buffer [k];  	action (copy);  	buffer.RemoveRange (0' 3 + length);  }  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: for (int k = 0; k < 3 + length; ++k)  	copy [k] = buffer [k];  
Magic Number,GameNetwork,MessageHelper,C:\repos\xysz0824_GameNetwork\network\TCP\MessageHelper.cs,CheckBuffer,The following statement contains a magic number: buffer.RemoveRange (0' 3 + length);  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,Receive,The following statement contains a magic number: while (started) {  	var d = new byte[1024];  	try {  		var size = client.Receive (d' d.Length' 0);  		msgHelper.Subpackage (d' size);  	}  	catch (SocketException e) {  		if (e.ErrorCode == (int)TCPState.Disconnected)  			state = TCPState.Disconnected;  		else  			state = TCPState.Error;  		if (Disconnected != null)  			Disconnected (this);  		server.SafeClose (this);  		break;  	}  }  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Delay:  	if (delaywatch != null) {  		delaywatch.Stop ();  		delay = delaywatch.ElapsedMilliseconds;  		delaywatch.Reset ();  	}  	msg.type = TCPMessageType.Delay;  	if (Received != null)  		Received (this' msg);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (this' msg);  	break;  }  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Delay:  	if (delaywatch != null) {  		delaywatch.Stop ();  		delay = delaywatch.ElapsedMilliseconds;  		delaywatch.Reset ();  	}  	msg.type = TCPMessageType.Delay;  	if (Received != null)  		Received (this' msg);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (this' msg);  	break;  }  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Delay:  	if (delaywatch != null) {  		delaywatch.Stop ();  		delay = delaywatch.ElapsedMilliseconds;  		delaywatch.Reset ();  	}  	msg.type = TCPMessageType.Delay;  	if (Received != null)  		Received (this' msg);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (this' msg);  	break;  }  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < msg.data.Length; ++i)  	msg.data [i] = data [i + 3];  
Magic Number,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following statement contains a magic number: msg.data [i] = data [i + 3];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,SendMessage,The following statement contains a magic number: temp [1] = (byte)(data.Length / 256);  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,SendMessage,The following statement contains a magic number: temp [2] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,SendMessage,The following statement contains a magic number: temp [2] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,SendMessage,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	temp [i + 3] = data [i];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,SendMessage,The following statement contains a magic number: temp [i + 3] = data [i];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ReceiveThread,The following statement contains a magic number: while (started) {  	var d = new byte[1024];  	try {  		var size = socket.Receive (d);  		msgHelper.Subpackage (d' size);  	}  	catch (SocketException e) {  		if (Disconnected != null)  			Disconnected (e.ErrorCode);  		if (e.ErrorCode == (int)TCPState.Disconnected)  			state = TCPState.Disconnected;  		break;  	}  }  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Full:  	if (Disconnected != null)  		Disconnected ((int)TCPState.Full);  	state = TCPState.Disconnected;  	break;  case (byte)TCPMessageType.Delay:  	SendMessage (TCPMessageType.Delay' new byte[0]);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (msg);  	break;  }  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Full:  	if (Disconnected != null)  		Disconnected ((int)TCPState.Full);  	state = TCPState.Disconnected;  	break;  case (byte)TCPMessageType.Delay:  	SendMessage (TCPMessageType.Delay' new byte[0]);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (msg);  	break;  }  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: switch (data [0]) {  case (byte)TCPMessageType.Full:  	if (Disconnected != null)  		Disconnected ((int)TCPState.Full);  	state = TCPState.Disconnected;  	break;  case (byte)TCPMessageType.Delay:  	SendMessage (TCPMessageType.Delay' new byte[0]);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (msg);  	break;  }  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: for (int i = 0; i < msg.data.Length; ++i)  	msg.data [i] = data [i + 3];  
Magic Number,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following statement contains a magic number: msg.data [i] = data [i + 3];  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,Start,The following statement contains a magic number: socket.Listen (10);  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,SendMessage,The following statement contains a magic number: temp [1] = (byte)(data.Length / 256);  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,SendMessage,The following statement contains a magic number: temp [2] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,SendMessage,The following statement contains a magic number: temp [2] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,SendMessage,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	temp [i + 3] = data [i];  
Magic Number,GameNetwork,TCPServer,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPServer.cs,SendMessage,The following statement contains a magic number: temp [i + 3] = data [i];  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,SendMessage,The following statement contains a magic number: temp [0] = (byte)(data.Length / 256);  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,SendMessage,The following statement contains a magic number: temp [1] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,SendMessage,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	temp [i + 2] = data [i];  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,SendMessage,The following statement contains a magic number: temp [i + 2] = data [i];  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: while (started) {  	byte[] d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: while (started) {  	byte[] d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: while (started) {  	byte[] d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: try {  	socket.ReceiveFrom (d' ref sender);  	byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  	for (int i = 0; i < data.Length; ++i)  		data [i] = d [i + 2];  	if (Received != null)  		Received ((IPEndPoint)sender' data);  }  catch (SocketException e) {  	if (Exception != null)  		Exception (e.ErrorCode);  	break;  }  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: try {  	socket.ReceiveFrom (d' ref sender);  	byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  	for (int i = 0; i < data.Length; ++i)  		data [i] = d [i + 2];  	if (Received != null)  		Received ((IPEndPoint)sender' data);  }  catch (SocketException e) {  	if (Exception != null)  		Exception (e.ErrorCode);  	break;  }  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i)  	data [i] = d [i + 2];  
Magic Number,GameNetwork,UDPClient,C:\repos\xysz0824_GameNetwork\network\UDP\UDPClient.cs,Receive,The following statement contains a magic number: data [i] = d [i + 2];  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,SendMessage,The following statement contains a magic number: temp [0] = (byte)(data.Length / 256);  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,SendMessage,The following statement contains a magic number: temp [1] = (byte)(data.Length % 256);  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,SendMessage,The following statement contains a magic number: for (int i = 0; i < data.Length; i++)  	temp [i + 2] = data [i];  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,SendMessage,The following statement contains a magic number: temp [i + 2] = data [i];  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: while (started) {  	var d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: while (started) {  	var d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: while (started) {  	var d = new byte[1024];  	EndPoint sender = new IPEndPoint (IPAddress.Any' 0);  	try {  		socket.ReceiveFrom (d' ref sender);  		byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  		for (int i = 0; i < data.Length; ++i)  			data [i] = d [i + 2];  		if (Received != null)  			Received ((IPEndPoint)sender' data);  	}  	catch (SocketException e) {  		if (Exception != null)  			Exception (e.ErrorCode);  		break;  	}  }  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: try {  	socket.ReceiveFrom (d' ref sender);  	byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  	for (int i = 0; i < data.Length; ++i)  		data [i] = d [i + 2];  	if (Received != null)  		Received ((IPEndPoint)sender' data);  }  catch (SocketException e) {  	if (Exception != null)  		Exception (e.ErrorCode);  	break;  }  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: try {  	socket.ReceiveFrom (d' ref sender);  	byte[] data = new byte[(int)d [0] * 256 + (int)d [1]];  	for (int i = 0; i < data.Length; ++i)  		data [i] = d [i + 2];  	if (Received != null)  		Received ((IPEndPoint)sender' data);  }  catch (SocketException e) {  	if (Exception != null)  		Exception (e.ErrorCode);  	break;  }  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: for (int i = 0; i < data.Length; ++i)  	data [i] = d [i + 2];  
Magic Number,GameNetwork,UDPServer,C:\repos\xysz0824_GameNetwork\network\UDP\UDPServer.cs,Receive,The following statement contains a magic number: data [i] = d [i + 2];  
Missing Default,GameNetwork,TCPClientSocket,C:\repos\xysz0824_GameNetwork\network\TCP\Server\TCPClientSocket.cs,ProcessMessage,The following switch statement is missing a default case: switch (data [0]) {  case (byte)TCPMessageType.Delay:  	if (delaywatch != null) {  		delaywatch.Stop ();  		delay = delaywatch.ElapsedMilliseconds;  		delaywatch.Reset ();  	}  	msg.type = TCPMessageType.Delay;  	if (Received != null)  		Received (this' msg);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (this' msg);  	break;  }  
Missing Default,GameNetwork,TCPClient,C:\repos\xysz0824_GameNetwork\network\TCP\Client\TCPClient.cs,ProcessMessage,The following switch statement is missing a default case: switch (data [0]) {  case (byte)TCPMessageType.Full:  	if (Disconnected != null)  		Disconnected ((int)TCPState.Full);  	state = TCPState.Disconnected;  	break;  case (byte)TCPMessageType.Delay:  	SendMessage (TCPMessageType.Delay' new byte[0]);  	break;  case (byte)TCPMessageType.Normal:  	msg.data = new byte[(int)data [1] * 256 + (int)data [2]];  	for (int i = 0; i < msg.data.Length; ++i)  		msg.data [i] = data [i + 3];  	msg.type = TCPMessageType.Normal;  	if (Received != null)  		Received (msg);  	break;  }  
