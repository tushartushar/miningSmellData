Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AnimeRecs.Utils.UnitTests,AsyncUpgradeableReaderWriterLockTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\AsyncUpgradeableReaderWriterLockTests.cs,AssertReadLockContended,The length of the statement  "                Assert.Throws<TaskCanceledException>(() => rwLock.EnterReadLockAsync(timeout.Token).ConfigureAwait(false).GetAwaiter().GetResult()); " is 132.
Long Statement,AnimeRecs.Utils.UnitTests,AsyncUpgradeableReaderWriterLockTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\AsyncUpgradeableReaderWriterLockTests.cs,AssertUpgradeableLockContended,The length of the statement  "                Assert.Throws<TaskCanceledException>(() => rwLock.EnterUpgradeableReadLockAsync(timeout.Token).ConfigureAwait(false).GetAwaiter().GetResult()); " is 143.
Long Statement,AnimeRecs.Utils.UnitTests,AsyncUpgradeableReaderWriterLockTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\AsyncUpgradeableReaderWriterLockTests.cs,AssertUpgradeableLockUpgradeContended,The length of the statement  "                    Assert.Throws<TaskCanceledException>(() => rwLock.UpgradeToWriteLock(timeout.Token).ConfigureAwait(false).GetAwaiter().GetResult()); " is 132.
Long Statement,AnimeRecs.Utils.UnitTests,AsyncUpgradeableReaderWriterLockTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\AsyncUpgradeableReaderWriterLockTests.cs,AssertWriteLockContended,The length of the statement  "                Assert.Throws<TaskCanceledException>(() => rwLock.EnterWriteLockAsync(timeout.Token).ConfigureAwait(false).GetAwaiter().GetResult()); " is 133.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,SynchronouslyCanceledTasksDoNotTakeOverBookkeeping,The length of the statement  "                Assert.True(task3Status == TaskStatus.Canceled || task3Status == TaskStatus.Running' string.Format("Third task has status {0} instead of Canceled or Running."' task3Status)); " is 174.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesDontWaitForCancellations,The length of the statement  "                Assert.True(task0Status == TaskStatus.Faulted || task0Status == TaskStatus.Running || task0Status == TaskStatus.WaitingForActivation' string.Format("First task has status {0} instead of Faulted' Running' or WaitingForActivation."' task0Status)); " is 245.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesDontWaitForCancellations,The length of the statement  "                Assert.True(task1Status == TaskStatus.Faulted || task1Status == TaskStatus.Running || task1Status == TaskStatus.WaitingForActivation' string.Format("Second task has status {0} instead of Faulted' Running' or WaitingForActivation."' task1Status)); " is 246.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The length of the statement  "            // -> AggregateException with at least 1 fault inside' at least one of first two tasks in faulted state' other tasks are not completed yet " is 138.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The length of the statement  "                Assert.True(task0Status == TaskStatus.Faulted || task0Status == TaskStatus.Running || task0Status == TaskStatus.WaitingForActivation' string.Format("First task has status {0} instead of Faulted' Running' or WaitingForActivation."' task0Status)); " is 245.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The length of the statement  "                Assert.True(task1Status == TaskStatus.Faulted || task1Status == TaskStatus.Running || task1Status == TaskStatus.WaitingForActivation' string.Format("Second task has status {0} instead of Faulted' Running' or WaitingForActivation."' task1Status)); " is 246.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The length of the statement  "                Assert.True(task2Status == TaskStatus.Running || task2Status == TaskStatus.WaitingForActivation' string.Format("Third task has status {0} instead of Running or WaitingForActivation."' task2Status)); " is 198.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The length of the statement  "                Assert.True(task3Status == TaskStatus.Running || task3Status == TaskStatus.WaitingForActivation' string.Format("Fourth task has status {0} instead of Running or WaitingForActivation."' task3Status)); " is 199.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationWaitForCancellation,The length of the statement  "            // -> AggregateException with faults inside' first task in canceled state' faulting tasks in faulted state' other tasks in canceled state " is 137.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersDontWaitForCancellation,The length of the statement  "                Assert.True(task1Status == TaskStatus.Running || task1Status == TaskStatus.WaitingForActivation' string.Format("Second task has status {0} instead of Running or WaitingForActivation."' task1Status)); " is 199.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersDontWaitForCancellation,The length of the statement  "                Assert.True(task2Status == TaskStatus.Running || task2Status == TaskStatus.WaitingForActivation' string.Format("Third task has status {0} instead of Running or WaitingForActivation."' task2Status)); " is 198.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The length of the statement  "                Assert.True(task1Status == TaskStatus.Running || task1Status == TaskStatus.WaitingForActivation' string.Format("Second task has status {0} instead of Running or WaitingForActivation."' task1Status)); " is 199.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The length of the statement  "                Assert.True(task2Status == TaskStatus.Running || task2Status == TaskStatus.WaitingForActivation' string.Format("Third task has status {0} instead of Running or WaitingForActivation."' task2Status)); " is 198.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The length of the statement  "                Assert.True(task3Status == TaskStatus.Running || task3Status == TaskStatus.WaitingForActivation' string.Format("Fourth task has status {0} instead of Running or WaitingForActivation."' task3Status)); " is 199.
Long Statement,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The length of the statement  "                Assert.True(task4Status == TaskStatus.Running || task4Status == TaskStatus.WaitingForActivation' string.Format("Fifth task has status {0} instead of Running or WaitingForActivation."' task4Status)); " is 198.
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,SynchronouslyCanceledTasksDoNotTakeOverBookkeeping,The following statement contains a magic number: Task runningTask = Task.Run(() =>              {                  thirdTaskCts.Token.ThrowIfCancellationRequested();                  Thread.Sleep(TimeSpan.FromMilliseconds(2000));                  thirdTaskCts.Token.ThrowIfCancellationRequested();              }' thirdTaskCts.Token);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,SynchronouslyCanceledTasksDoNotTakeOverBookkeeping,The following statement contains a magic number: Task.Delay(TimeSpan.FromMilliseconds(2000)).ContinueWith(task =>              {                  delayStartTask.Start();              });
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,SynchronouslyCanceledTasksDoNotTakeOverBookkeeping,The following statement contains a magic number: TaskStatus task3Status = tasks[2].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,AllCompleteSuccessfullyWaitForCancellations,The following statement contains a magic number: CancellableTask[] tasks = new CancellableTask[3]              {                  GetSuccessfulCancellableTask()'                  GetSuccessfulCancellableTask()'                  GetSuccessfulCancellableTask()              };
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,AllCompleteSuccessfullyDontWaitForCancellations,The following statement contains a magic number: CancellableTask[] tasks = new CancellableTask[3]              {                  GetSuccessfulCancellableTask()'                  GetSuccessfulCancellableTask()'                  GetSuccessfulCancellableTask()              };
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesWaitForCancellations,The following statement contains a magic number: Assert.Equal(2' waitTask.Exception.InnerExceptions.Count);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesWaitForCancellations,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesWaitForCancellations,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[3].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesDontWaitForCancellations,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsAfterSuccessesDontWaitForCancellations,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[3].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesWaitForCancellation,The following statement contains a magic number: Assert.Equal(2' waitTask.Exception.InnerExceptions.Count);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Canceled' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Canceled' tasks[3].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The following statement contains a magic number: TaskStatus task2Status = tasks[2].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,FaultsBeforeSuccessesDontWaitForCancellation,The following statement contains a magic number: TaskStatus task3Status = tasks[3].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelAfterSuccessesWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelAfterSuccessesDontWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.RanToCompletion' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Canceled' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationWaitForCancellation,The following statement contains a magic number: Assert.Equal(2' waitTask.Exception.InnerExceptions.Count);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Faulted' tasks[2].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Canceled' tasks[3].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationWaitForCancellation,The following statement contains a magic number: Assert.Equal(TaskStatus.Canceled' tasks[4].Task.Status);
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersDontWaitForCancellation,The following statement contains a magic number: TaskStatus task2Status = tasks[2].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The following statement contains a magic number: TaskStatus task2Status = tasks[2].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The following statement contains a magic number: TaskStatus task3Status = tasks[3].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,CancelBeforeOthersFaultAfterCancellationDontWaitForCancellation,The following statement contains a magic number: TaskStatus task4Status = tasks[4].Task.Status;
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,GetSuccessfulTask,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(200));
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,GetSuccessfulTask,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(200));
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,GetLateFaultingTask,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(600));
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,GetLateCancellingCancellableTask,The following statement contains a magic number: CancellationTokenSource cts = new CancellationTokenSource(TimeSpan.FromMilliseconds(100));
Magic Number,AnimeRecs.Utils.UnitTests,WhenAllCancelOnFirstExceptionTests,D:\research\architectureSmells\repos\LHCGreg_animerecs\AnimeRecs.Utils.UnitTests\WhenAllCancelOnFirstExceptionTests.cs,GetLateCancellingTask,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(600));
